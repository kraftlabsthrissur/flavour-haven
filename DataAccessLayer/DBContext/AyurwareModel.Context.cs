//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccessLayer.DBContext
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AyurwareEntities : DbContext
    {
        public AyurwareEntities()
            : base("name=AyurwareEntities")
        {
            ((IObjectContextAdapter)this).ObjectContext.CommandTimeout = 0;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<viBatchType> viBatchTypes { get; set; }
        public virtual DbSet<viGRNList> viGRNLists { get; set; }
        public virtual DbSet<viLocation> viLocations { get; set; }
        public virtual DbSet<viPurchaseRequisitionPendingRpt> viPurchaseRequisitionPendingRpts { get; set; }
    
        [DbFunction("AyurwareEntities", "FnGetLocationUsers")]
        public virtual IQueryable<FnGetLocationUsers_Result> FnGetLocationUsers(string locationHint, string roleHint, string nameHint)
        {
            var locationHintParameter = locationHint != null ?
                new ObjectParameter("LocationHint", locationHint) :
                new ObjectParameter("LocationHint", typeof(string));
    
            var roleHintParameter = roleHint != null ?
                new ObjectParameter("RoleHint", roleHint) :
                new ObjectParameter("RoleHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FnGetLocationUsers_Result>("[AyurwareEntities].[FnGetLocationUsers](@LocationHint, @RoleHint, @NameHint)", locationHintParameter, roleHintParameter, nameHintParameter);
        }
    
        [DbFunction("AyurwareEntities", "FnGetProductionDefinition")]
        public virtual IQueryable<FnGetProductionDefinition_Result> FnGetProductionDefinition(Nullable<int> itemID, Nullable<int> batchTypeID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FnGetProductionDefinition_Result>("[AyurwareEntities].[FnGetProductionDefinition](@ItemID, @BatchTypeID)", itemIDParameter, batchTypeIDParameter);
        }
    
        [DbFunction("AyurwareEntities", "FnMonthwiseSales")]
        public virtual IQueryable<FnMonthwiseSales_Result> FnMonthwiseSales(Nullable<int> locationID, Nullable<int> applicationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FnMonthwiseSales_Result>("[AyurwareEntities].[FnMonthwiseSales](@LocationID, @ApplicationID)", locationIDParameter, applicationIDParameter);
        }
    
        [DbFunction("AyurwareEntities", "fnSplitString")]
        public virtual IQueryable<fnSplitString_Result> fnSplitString(string @string, string delimiter)
        {
            var stringParameter = @string != null ?
                new ObjectParameter("string", @string) :
                new ObjectParameter("string", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("delimiter", delimiter) :
                new ObjectParameter("delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnSplitString_Result>("[AyurwareEntities].[fnSplitString](@string, @delimiter)", stringParameter, delimiterParameter);
        }
    
        [DbFunction("AyurwareEntities", "Split")]
        public virtual IQueryable<Split_Result> Split(string inputString, string delimiter)
        {
            var inputStringParameter = inputString != null ?
                new ObjectParameter("InputString", inputString) :
                new ObjectParameter("InputString", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Split_Result>("[AyurwareEntities].[Split](@InputString, @Delimiter)", inputStringParameter, delimiterParameter);
        }
    
        public virtual int SpCancelTransaction(Nullable<int> iD, string tableName, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCancelTransaction", iDParameter, tableNameParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateBatch(string itemType, Nullable<int> itemID, string batchNo, string customBatchNo, Nullable<System.DateTime> manufacturingDate, Nullable<System.DateTime> expiryDate, Nullable<int> batchTypeID, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter batchID)
        {
            var itemTypeParameter = itemType != null ?
                new ObjectParameter("ItemType", itemType) :
                new ObjectParameter("ItemType", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchNoParameter = batchNo != null ?
                new ObjectParameter("BatchNo", batchNo) :
                new ObjectParameter("BatchNo", typeof(string));
    
            var customBatchNoParameter = customBatchNo != null ?
                new ObjectParameter("CustomBatchNo", customBatchNo) :
                new ObjectParameter("CustomBatchNo", typeof(string));
    
            var manufacturingDateParameter = manufacturingDate.HasValue ?
                new ObjectParameter("ManufacturingDate", manufacturingDate) :
                new ObjectParameter("ManufacturingDate", typeof(System.DateTime));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateBatch", itemTypeParameter, itemIDParameter, batchNoParameter, customBatchNoParameter, manufacturingDateParameter, expiryDateParameter, batchTypeIDParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter, batchID);
        }
    
        public virtual ObjectResult<SpGetConfigByUser_Result> SpGetConfigByUser(string configName, Nullable<int> userID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var configNameParameter = configName != null ?
                new ObjectParameter("ConfigName", configName) :
                new ObjectParameter("ConfigName", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetConfigByUser_Result>("SpGetConfigByUser", configNameParameter, userIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCurrentFinYear_Result> SpGetCurrentFinYear(Nullable<int> applicationID)
        {
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCurrentFinYear_Result>("SpGetCurrentFinYear", applicationIDParameter);
        }
    
        public virtual int SpIsCodeAlreadyExists(string tableName, string fieldName, string code, Nullable<int> iD, ObjectParameter isExists)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("tableName", tableName) :
                new ObjectParameter("tableName", typeof(string));
    
            var fieldNameParameter = fieldName != null ?
                new ObjectParameter("FieldName", fieldName) :
                new ObjectParameter("FieldName", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpIsCodeAlreadyExists", tableNameParameter, fieldNameParameter, codeParameter, iDParameter, isExists);
        }
    
        public virtual int SpSuspendTransaction(Nullable<int> iD, string tableName, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter retValue)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpSuspendTransaction", iDParameter, tableNameParameter, finYearParameter, locationIDParameter, applicationIDParameter, retValue);
        }
    
        public virtual int SpUpdateSerialNo(string formName, string fieldName, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter serialNo)
        {
            var formNameParameter = formName != null ?
                new ObjectParameter("FormName", formName) :
                new ObjectParameter("FormName", typeof(string));
    
            var fieldNameParameter = fieldName != null ?
                new ObjectParameter("FieldName", fieldName) :
                new ObjectParameter("FieldName", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateSerialNo", formNameParameter, fieldNameParameter, finYearParameter, locationIDParameter, applicationIDParameter, serialNo);
        }
    
        public virtual int SpAddUpdateRolePermission()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpAddUpdateRolePermission");
        }
    
        public virtual int SpCalculateCostOfFinishedGoods(Nullable<System.DateTime> date, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCalculateCostOfFinishedGoods", dateParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateAddress(string partyType, Nullable<int> partyID, string addressLine1, string addressLine2, string addressLine3, string contactPerson, string place, Nullable<int> districtID, Nullable<int> stateID, string pIN, string landLine1, string landLine2, string mobileNo, string fax, string email, Nullable<bool> isBilling, Nullable<bool> isShipping, Nullable<bool> isDefault, Nullable<int> createdUserID, Nullable<System.DateTime> createdDate, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var partyTypeParameter = partyType != null ?
                new ObjectParameter("PartyType", partyType) :
                new ObjectParameter("PartyType", typeof(string));
    
            var partyIDParameter = partyID.HasValue ?
                new ObjectParameter("PartyID", partyID) :
                new ObjectParameter("PartyID", typeof(int));
    
            var addressLine1Parameter = addressLine1 != null ?
                new ObjectParameter("AddressLine1", addressLine1) :
                new ObjectParameter("AddressLine1", typeof(string));
    
            var addressLine2Parameter = addressLine2 != null ?
                new ObjectParameter("AddressLine2", addressLine2) :
                new ObjectParameter("AddressLine2", typeof(string));
    
            var addressLine3Parameter = addressLine3 != null ?
                new ObjectParameter("AddressLine3", addressLine3) :
                new ObjectParameter("AddressLine3", typeof(string));
    
            var contactPersonParameter = contactPerson != null ?
                new ObjectParameter("ContactPerson", contactPerson) :
                new ObjectParameter("ContactPerson", typeof(string));
    
            var placeParameter = place != null ?
                new ObjectParameter("Place", place) :
                new ObjectParameter("Place", typeof(string));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var pINParameter = pIN != null ?
                new ObjectParameter("PIN", pIN) :
                new ObjectParameter("PIN", typeof(string));
    
            var landLine1Parameter = landLine1 != null ?
                new ObjectParameter("LandLine1", landLine1) :
                new ObjectParameter("LandLine1", typeof(string));
    
            var landLine2Parameter = landLine2 != null ?
                new ObjectParameter("LandLine2", landLine2) :
                new ObjectParameter("LandLine2", typeof(string));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var isBillingParameter = isBilling.HasValue ?
                new ObjectParameter("IsBilling", isBilling) :
                new ObjectParameter("IsBilling", typeof(bool));
    
            var isShippingParameter = isShipping.HasValue ?
                new ObjectParameter("IsShipping", isShipping) :
                new ObjectParameter("IsShipping", typeof(bool));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateAddress", partyTypeParameter, partyIDParameter, addressLine1Parameter, addressLine2Parameter, addressLine3Parameter, contactPersonParameter, placeParameter, districtIDParameter, stateIDParameter, pINParameter, landLine1Parameter, landLine2Parameter, mobileNoParameter, faxParameter, emailParameter, isBillingParameter, isShippingParameter, isDefaultParameter, createdUserIDParameter, createdDateParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateCategoryGroup(string code, string name, Nullable<int> createdUserID, Nullable<System.DateTime> createdDate)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateCategoryGroup", codeParameter, nameParameter, createdUserIDParameter, createdDateParameter);
        }
    
        public virtual int SpCreateDepartmentGroup(string code, string name, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<bool> isActive, Nullable<int> createdUserID, Nullable<System.DateTime> createdDate)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateDepartmentGroup", codeParameter, nameParameter, startDateParameter, endDateParameter, isActiveParameter, createdUserIDParameter, createdDateParameter);
        }
    
        public virtual int SpCreateItemType(string cOde, string name)
        {
            var cOdeParameter = cOde != null ?
                new ObjectParameter("COde", cOde) :
                new ObjectParameter("COde", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateItemType", cOdeParameter, nameParameter);
        }
    
        public virtual int SpCreatePayable(string payableType, Nullable<int> partyID, Nullable<decimal> payableAmount, Nullable<decimal> paidAmount, Nullable<System.DateTime> dueDate, string status, string description, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var payableTypeParameter = payableType != null ?
                new ObjectParameter("PayableType", payableType) :
                new ObjectParameter("PayableType", typeof(string));
    
            var partyIDParameter = partyID.HasValue ?
                new ObjectParameter("PartyID", partyID) :
                new ObjectParameter("PartyID", typeof(int));
    
            var payableAmountParameter = payableAmount.HasValue ?
                new ObjectParameter("PayableAmount", payableAmount) :
                new ObjectParameter("PayableAmount", typeof(decimal));
    
            var paidAmountParameter = paidAmount.HasValue ?
                new ObjectParameter("PaidAmount", paidAmount) :
                new ObjectParameter("PaidAmount", typeof(decimal));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePayable", payableTypeParameter, partyIDParameter, payableAmountParameter, paidAmountParameter, dueDateParameter, statusParameter, descriptionParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int spCreateQCMaterials(string qCNo, Nullable<System.DateTime> qCDate, Nullable<int> gRNID, Nullable<int> gRNTransID, string referenceNo, Nullable<int> wareHouseId, Nullable<int> itemID, string batchNo, string qCStatus, Nullable<int> toWareHouseID, Nullable<decimal> acceptedQty, Nullable<int> approvedQty, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> unitID)
        {
            var qCNoParameter = qCNo != null ?
                new ObjectParameter("QCNo", qCNo) :
                new ObjectParameter("QCNo", typeof(string));
    
            var qCDateParameter = qCDate.HasValue ?
                new ObjectParameter("QCDate", qCDate) :
                new ObjectParameter("QCDate", typeof(System.DateTime));
    
            var gRNIDParameter = gRNID.HasValue ?
                new ObjectParameter("GRNID", gRNID) :
                new ObjectParameter("GRNID", typeof(int));
    
            var gRNTransIDParameter = gRNTransID.HasValue ?
                new ObjectParameter("GRNTransID", gRNTransID) :
                new ObjectParameter("GRNTransID", typeof(int));
    
            var referenceNoParameter = referenceNo != null ?
                new ObjectParameter("ReferenceNo", referenceNo) :
                new ObjectParameter("ReferenceNo", typeof(string));
    
            var wareHouseIdParameter = wareHouseId.HasValue ?
                new ObjectParameter("WareHouseId", wareHouseId) :
                new ObjectParameter("WareHouseId", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchNoParameter = batchNo != null ?
                new ObjectParameter("BatchNo", batchNo) :
                new ObjectParameter("BatchNo", typeof(string));
    
            var qCStatusParameter = qCStatus != null ?
                new ObjectParameter("QCStatus", qCStatus) :
                new ObjectParameter("QCStatus", typeof(string));
    
            var toWareHouseIDParameter = toWareHouseID.HasValue ?
                new ObjectParameter("ToWareHouseID", toWareHouseID) :
                new ObjectParameter("ToWareHouseID", typeof(int));
    
            var acceptedQtyParameter = acceptedQty.HasValue ?
                new ObjectParameter("AcceptedQty", acceptedQty) :
                new ObjectParameter("AcceptedQty", typeof(decimal));
    
            var approvedQtyParameter = approvedQty.HasValue ?
                new ObjectParameter("ApprovedQty", approvedQty) :
                new ObjectParameter("ApprovedQty", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCreateQCMaterials", qCNoParameter, qCDateParameter, gRNIDParameter, gRNTransIDParameter, referenceNoParameter, wareHouseIdParameter, itemIDParameter, batchNoParameter, qCStatusParameter, toWareHouseIDParameter, acceptedQtyParameter, approvedQtyParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, unitIDParameter);
        }
    
        public virtual int SpCreateSLAMappingofSalesItem(Nullable<int> salesInvoiceID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var salesInvoiceIDParameter = salesInvoiceID.HasValue ?
                new ObjectParameter("SalesInvoiceID", salesInvoiceID) :
                new ObjectParameter("SalesInvoiceID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateSLAMappingofSalesItem", salesInvoiceIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateSupplierItemCategory(Nullable<int> supplierID, Nullable<int> itemCategoryID, Nullable<int> createdUserID, Nullable<System.DateTime> createdDate)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateSupplierItemCategory", supplierIDParameter, itemCategoryIDParameter, createdUserIDParameter, createdDateParameter);
        }
    
        public virtual int SpCreateSupplierLocation(Nullable<int> supplierID, string supplierName, Nullable<int> locationID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var supplierNameParameter = supplierName != null ?
                new ObjectParameter("SupplierName", supplierName) :
                new ObjectParameter("SupplierName", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateSupplierLocation", supplierIDParameter, supplierNameParameter, locationIDParameter);
        }
    
        public virtual int SpEnableActionList(Nullable<int> iD, string controller, string action, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var controllerParameter = controller != null ?
                new ObjectParameter("Controller", controller) :
                new ObjectParameter("Controller", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpEnableActionList", iDParameter, controllerParameter, actionParameter, applicationIDParameter);
        }
    
        public virtual int SpGenerateSLA(Nullable<int> sLAMappingItemID, string transactionType, string keyValue, Nullable<int> itemID, string batch, Nullable<int> supplierID, Nullable<decimal> amount, Nullable<decimal> differenceValue, Nullable<int> customerID, Nullable<int> departmentCategoryID, Nullable<int> locationID, Nullable<int> treasuryID, Nullable<int> employeeID, Nullable<int> patientID, Nullable<int> assetID, Nullable<int> paymentModeID)
        {
            var sLAMappingItemIDParameter = sLAMappingItemID.HasValue ?
                new ObjectParameter("SLAMappingItemID", sLAMappingItemID) :
                new ObjectParameter("SLAMappingItemID", typeof(int));
    
            var transactionTypeParameter = transactionType != null ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(string));
    
            var keyValueParameter = keyValue != null ?
                new ObjectParameter("KeyValue", keyValue) :
                new ObjectParameter("KeyValue", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchParameter = batch != null ?
                new ObjectParameter("Batch", batch) :
                new ObjectParameter("Batch", typeof(string));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var differenceValueParameter = differenceValue.HasValue ?
                new ObjectParameter("DifferenceValue", differenceValue) :
                new ObjectParameter("DifferenceValue", typeof(decimal));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var departmentCategoryIDParameter = departmentCategoryID.HasValue ?
                new ObjectParameter("DepartmentCategoryID", departmentCategoryID) :
                new ObjectParameter("DepartmentCategoryID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var treasuryIDParameter = treasuryID.HasValue ?
                new ObjectParameter("TreasuryID", treasuryID) :
                new ObjectParameter("TreasuryID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var assetIDParameter = assetID.HasValue ?
                new ObjectParameter("AssetID", assetID) :
                new ObjectParameter("AssetID", typeof(int));
    
            var paymentModeIDParameter = paymentModeID.HasValue ?
                new ObjectParameter("PaymentModeID", paymentModeID) :
                new ObjectParameter("PaymentModeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGenerateSLA", sLAMappingItemIDParameter, transactionTypeParameter, keyValueParameter, itemIDParameter, batchParameter, supplierIDParameter, amountParameter, differenceValueParameter, customerIDParameter, departmentCategoryIDParameter, locationIDParameter, treasuryIDParameter, employeeIDParameter, patientIDParameter, assetIDParameter, paymentModeIDParameter);
        }
    
        public virtual ObjectResult<SpGetAccountHeads_Result> SpGetAccountHeads(string hint)
        {
            var hintParameter = hint != null ?
                new ObjectParameter("Hint", hint) :
                new ObjectParameter("Hint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAccountHeads_Result>("SpGetAccountHeads", hintParameter);
        }
    
        public virtual ObjectResult<SpGetActionList_Result> SpGetActionList(string type, string nameHint, string areaHint, string controllerHint, string actionHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var areaHintParameter = areaHint != null ?
                new ObjectParameter("AreaHint", areaHint) :
                new ObjectParameter("AreaHint", typeof(string));
    
            var controllerHintParameter = controllerHint != null ?
                new ObjectParameter("ControllerHint", controllerHint) :
                new ObjectParameter("ControllerHint", typeof(string));
    
            var actionHintParameter = actionHint != null ?
                new ObjectParameter("ActionHint", actionHint) :
                new ObjectParameter("ActionHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetActionList_Result>("SpGetActionList", typeParameter, nameHintParameter, areaHintParameter, controllerHintParameter, actionHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetAddressByPartyID_Result> SpGetAddressByPartyID(Nullable<int> partyID, string partyType)
        {
            var partyIDParameter = partyID.HasValue ?
                new ObjectParameter("PartyID", partyID) :
                new ObjectParameter("PartyID", typeof(int));
    
            var partyTypeParameter = partyType != null ?
                new ObjectParameter("PartyType", partyType) :
                new ObjectParameter("PartyType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAddressByPartyID_Result>("SpGetAddressByPartyID", partyIDParameter, partyTypeParameter);
        }
    
        public virtual ObjectResult<SpGetCategory_Result> SpGetCategory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCategory_Result>("SpGetCategory");
        }
    
        public virtual ObjectResult<SpGetCategoryGroupList_Result> SpGetCategoryGroupList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCategoryGroupList_Result>("SpGetCategoryGroupList");
        }
    
        public virtual ObjectResult<SpGetConfig_Result> SpGetConfig(string configName, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var configNameParameter = configName != null ?
                new ObjectParameter("ConfigName", configName) :
                new ObjectParameter("ConfigName", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetConfig_Result>("SpGetConfig", configNameParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetConfigGroup_Result> SpGetConfigGroup(string groupName, Nullable<int> uSerID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var groupNameParameter = groupName != null ?
                new ObjectParameter("GroupName", groupName) :
                new ObjectParameter("GroupName", typeof(string));
    
            var uSerIDParameter = uSerID.HasValue ?
                new ObjectParameter("USerID", uSerID) :
                new ObjectParameter("USerID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetConfigGroup_Result>("SpGetConfigGroup", groupNameParameter, uSerIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCountry_Result> SpGetCountry()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCountry_Result>("SpGetCountry");
        }
    
        public virtual ObjectResult<SpGetCurrentFinYear1_Result> SpGetCurrentFinYear1(Nullable<int> applicationID)
        {
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCurrentFinYear1_Result>("SpGetCurrentFinYear1", applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCustomerType_Result> SpGetCustomerType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCustomerType_Result>("SpGetCustomerType");
        }
    
        public virtual ObjectResult<SpGetDebitAccountHead_Result> SpGetDebitAccountHead(string hint)
        {
            var hintParameter = hint != null ?
                new ObjectParameter("Hint", hint) :
                new ObjectParameter("Hint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDebitAccountHead_Result>("SpGetDebitAccountHead", hintParameter);
        }
    
        public virtual ObjectResult<SpGetGRNLocalPrint_Result> SpGetGRNLocalPrint(Nullable<int> supplierID, string code, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetGRNLocalPrint_Result>("SpGetGRNLocalPrint", supplierIDParameter, codeParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetInterCompany_Result> SpGetInterCompany()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetInterCompany_Result>("SpGetInterCompany");
        }
    
        public virtual ObjectResult<SpGetItemCategory_Result> SpGetItemCategory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetItemCategory_Result>("SpGetItemCategory");
        }
    
        public virtual ObjectResult<SpGetItemListAutoComplete_Result> SpGetItemListAutoComplete(string term, Nullable<int> finYear, Nullable<int> applicationId, Nullable<int> locationId)
        {
            var termParameter = term != null ?
                new ObjectParameter("Term", term) :
                new ObjectParameter("Term", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("ApplicationId", applicationId) :
                new ObjectParameter("ApplicationId", typeof(int));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetItemListAutoComplete_Result>("SpGetItemListAutoComplete", termParameter, finYearParameter, applicationIdParameter, locationIdParameter);
        }
    
        public virtual ObjectResult<SpGetItemSubLedgerReport_Result> SpGetItemSubLedgerReport(Nullable<int> itemID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetItemSubLedgerReport_Result>("SpGetItemSubLedgerReport", itemIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SpGetLocationID(Nullable<int> addressID)
        {
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SpGetLocationID", addressIDParameter);
        }
    
        public virtual ObjectResult<SpGetMilkSupplierID_Result> SpGetMilkSupplierID(Nullable<int> locationID, Nullable<int> applicationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetMilkSupplierID_Result>("SpGetMilkSupplierID", locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetModules_Result> SpGetModules()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetModules_Result>("SpGetModules");
        }
    
        public virtual ObjectResult<SpGetPurchaseCategoryForServices_Result> SpGetPurchaseCategoryForServices(Nullable<int> itemCategoryID)
        {
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPurchaseCategoryForServices_Result>("SpGetPurchaseCategoryForServices", itemCategoryIDParameter);
        }
    
        public virtual ObjectResult<SpGetRoleModulesByCriteria_Result> SpGetRoleModulesByCriteria(Nullable<int> roleId, string role, string area, string controller, string action, string permissionKey)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var areaParameter = area != null ?
                new ObjectParameter("area", area) :
                new ObjectParameter("area", typeof(string));
    
            var controllerParameter = controller != null ?
                new ObjectParameter("controller", controller) :
                new ObjectParameter("controller", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("action", action) :
                new ObjectParameter("action", typeof(string));
    
            var permissionKeyParameter = permissionKey != null ?
                new ObjectParameter("permissionKey", permissionKey) :
                new ObjectParameter("permissionKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetRoleModulesByCriteria_Result>("SpGetRoleModulesByCriteria", roleIdParameter, roleParameter, areaParameter, controllerParameter, actionParameter, permissionKeyParameter);
        }
    
        public virtual ObjectResult<SpGetRoleModulesByRole_Result> SpGetRoleModulesByRole(string role)
        {
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetRoleModulesByRole_Result>("SpGetRoleModulesByRole", roleParameter);
        }
    
        public virtual ObjectResult<SpGetRoleModulesByUser_Result> SpGetRoleModulesByUser(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetRoleModulesByUser_Result>("SpGetRoleModulesByUser", userNameParameter);
        }
    
        public virtual ObjectResult<SpGetRolePrivileges_Result> SpGetRolePrivileges(Nullable<int> userID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetRolePrivileges_Result>("SpGetRolePrivileges", userIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetSerialNoAutoComplete_Result> SpGetSerialNoAutoComplete(string type, string hint, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var hintParameter = hint != null ?
                new ObjectParameter("Hint", hint) :
                new ObjectParameter("Hint", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSerialNoAutoComplete_Result>("SpGetSerialNoAutoComplete", typeParameter, hintParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetStockHoldingBatches_Result> SpGetStockHoldingBatches(string fullLoose, Nullable<int> itemID, Nullable<int> batchTypeID, Nullable<int> wareHouseID, Nullable<int> locationID, Nullable<System.DateTime> transDate)
        {
            var fullLooseParameter = fullLoose != null ?
                new ObjectParameter("FullLoose", fullLoose) :
                new ObjectParameter("FullLoose", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var transDateParameter = transDate.HasValue ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetStockHoldingBatches_Result>("SpGetStockHoldingBatches", fullLooseParameter, itemIDParameter, batchTypeIDParameter, wareHouseIDParameter, locationIDParameter, transDateParameter);
        }
    
        public virtual ObjectResult<SpGetSupplierForGRNRpt_Result> SpGetSupplierForGRNRpt()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSupplierForGRNRpt_Result>("SpGetSupplierForGRNRpt");
        }
    
        public virtual ObjectResult<SpGetSupplierItemCategory_Result> SpGetSupplierItemCategory(Nullable<int> supplierID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSupplierItemCategory_Result>("SpGetSupplierItemCategory", supplierIDParameter);
        }
    
        public virtual ObjectResult<SpGetSupplierSubLedgerReport_Result> SpGetSupplierSubLedgerReport(Nullable<int> supplierID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSupplierSubLedgerReport_Result>("SpGetSupplierSubLedgerReport", supplierIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<SpGetUpProcessedMaterialPurificationIssue_Result> SpGetUpProcessedMaterialPurificationIssue(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetUpProcessedMaterialPurificationIssue_Result>("SpGetUpProcessedMaterialPurificationIssue", finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<spGetUserLocationByUserName_Result> spGetUserLocationByUserName(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetUserLocationByUserName_Result>("spGetUserLocationByUserName", userNameParameter);
        }
    
        public virtual ObjectResult<SpGetUsersWithRole_Result> SpGetUsersWithRole(string roleName, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetUsersWithRole_Result>("SpGetUsersWithRole", roleNameParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGSTItemSummary_Result> SpGSTItemSummary(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string fromSupplierRange, string fromSupplierTaxSubCategoryRange, string toSupplierTaxSubCategoryRange, string toSupplierRange, string fromItemCategoryRange, string toItemCategoryRange, string fromItemNameRange, string toItemNameRange, Nullable<System.DateTime> invoiceDateFrom, Nullable<System.DateTime> invoiceDateTo, string qCNOFrom, string qCNOTo, Nullable<System.DateTime> qCDateFrom, Nullable<System.DateTime> qCDateTo, string gRNNoFrom, string gRNNoTo, Nullable<System.DateTime> gRNDateFrom, Nullable<System.DateTime> gRNDateTo, string supplierGSTNoFrom, string supplierGSTNoTo, Nullable<int> gSTRateFrom, Nullable<int> gSTRateTo, Nullable<bool> iGSTYes, Nullable<bool> iGSTNO, Nullable<bool> iGSTAll, string fromGSTRateRange, string toGSTRateRange, Nullable<int> finYear, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var fromSupplierRangeParameter = fromSupplierRange != null ?
                new ObjectParameter("FromSupplierRange", fromSupplierRange) :
                new ObjectParameter("FromSupplierRange", typeof(string));
    
            var fromSupplierTaxSubCategoryRangeParameter = fromSupplierTaxSubCategoryRange != null ?
                new ObjectParameter("FromSupplierTaxSubCategoryRange", fromSupplierTaxSubCategoryRange) :
                new ObjectParameter("FromSupplierTaxSubCategoryRange", typeof(string));
    
            var toSupplierTaxSubCategoryRangeParameter = toSupplierTaxSubCategoryRange != null ?
                new ObjectParameter("ToSupplierTaxSubCategoryRange", toSupplierTaxSubCategoryRange) :
                new ObjectParameter("ToSupplierTaxSubCategoryRange", typeof(string));
    
            var toSupplierRangeParameter = toSupplierRange != null ?
                new ObjectParameter("ToSupplierRange", toSupplierRange) :
                new ObjectParameter("ToSupplierRange", typeof(string));
    
            var fromItemCategoryRangeParameter = fromItemCategoryRange != null ?
                new ObjectParameter("FromItemCategoryRange", fromItemCategoryRange) :
                new ObjectParameter("FromItemCategoryRange", typeof(string));
    
            var toItemCategoryRangeParameter = toItemCategoryRange != null ?
                new ObjectParameter("ToItemCategoryRange", toItemCategoryRange) :
                new ObjectParameter("ToItemCategoryRange", typeof(string));
    
            var fromItemNameRangeParameter = fromItemNameRange != null ?
                new ObjectParameter("FromItemNameRange", fromItemNameRange) :
                new ObjectParameter("FromItemNameRange", typeof(string));
    
            var toItemNameRangeParameter = toItemNameRange != null ?
                new ObjectParameter("ToItemNameRange", toItemNameRange) :
                new ObjectParameter("ToItemNameRange", typeof(string));
    
            var invoiceDateFromParameter = invoiceDateFrom.HasValue ?
                new ObjectParameter("InvoiceDateFrom", invoiceDateFrom) :
                new ObjectParameter("InvoiceDateFrom", typeof(System.DateTime));
    
            var invoiceDateToParameter = invoiceDateTo.HasValue ?
                new ObjectParameter("InvoiceDateTo", invoiceDateTo) :
                new ObjectParameter("InvoiceDateTo", typeof(System.DateTime));
    
            var qCNOFromParameter = qCNOFrom != null ?
                new ObjectParameter("QCNOFrom", qCNOFrom) :
                new ObjectParameter("QCNOFrom", typeof(string));
    
            var qCNOToParameter = qCNOTo != null ?
                new ObjectParameter("QCNOTo", qCNOTo) :
                new ObjectParameter("QCNOTo", typeof(string));
    
            var qCDateFromParameter = qCDateFrom.HasValue ?
                new ObjectParameter("QCDateFrom", qCDateFrom) :
                new ObjectParameter("QCDateFrom", typeof(System.DateTime));
    
            var qCDateToParameter = qCDateTo.HasValue ?
                new ObjectParameter("QCDateTo", qCDateTo) :
                new ObjectParameter("QCDateTo", typeof(System.DateTime));
    
            var gRNNoFromParameter = gRNNoFrom != null ?
                new ObjectParameter("GRNNoFrom", gRNNoFrom) :
                new ObjectParameter("GRNNoFrom", typeof(string));
    
            var gRNNoToParameter = gRNNoTo != null ?
                new ObjectParameter("GRNNoTo", gRNNoTo) :
                new ObjectParameter("GRNNoTo", typeof(string));
    
            var gRNDateFromParameter = gRNDateFrom.HasValue ?
                new ObjectParameter("GRNDateFrom", gRNDateFrom) :
                new ObjectParameter("GRNDateFrom", typeof(System.DateTime));
    
            var gRNDateToParameter = gRNDateTo.HasValue ?
                new ObjectParameter("GRNDateTo", gRNDateTo) :
                new ObjectParameter("GRNDateTo", typeof(System.DateTime));
    
            var supplierGSTNoFromParameter = supplierGSTNoFrom != null ?
                new ObjectParameter("SupplierGSTNoFrom", supplierGSTNoFrom) :
                new ObjectParameter("SupplierGSTNoFrom", typeof(string));
    
            var supplierGSTNoToParameter = supplierGSTNoTo != null ?
                new ObjectParameter("SupplierGSTNoTo", supplierGSTNoTo) :
                new ObjectParameter("SupplierGSTNoTo", typeof(string));
    
            var gSTRateFromParameter = gSTRateFrom.HasValue ?
                new ObjectParameter("GSTRateFrom", gSTRateFrom) :
                new ObjectParameter("GSTRateFrom", typeof(int));
    
            var gSTRateToParameter = gSTRateTo.HasValue ?
                new ObjectParameter("GSTRateTo", gSTRateTo) :
                new ObjectParameter("GSTRateTo", typeof(int));
    
            var iGSTYesParameter = iGSTYes.HasValue ?
                new ObjectParameter("IGSTYes", iGSTYes) :
                new ObjectParameter("IGSTYes", typeof(bool));
    
            var iGSTNOParameter = iGSTNO.HasValue ?
                new ObjectParameter("IGSTNO", iGSTNO) :
                new ObjectParameter("IGSTNO", typeof(bool));
    
            var iGSTAllParameter = iGSTAll.HasValue ?
                new ObjectParameter("IGSTAll", iGSTAll) :
                new ObjectParameter("IGSTAll", typeof(bool));
    
            var fromGSTRateRangeParameter = fromGSTRateRange != null ?
                new ObjectParameter("FromGSTRateRange", fromGSTRateRange) :
                new ObjectParameter("FromGSTRateRange", typeof(string));
    
            var toGSTRateRangeParameter = toGSTRateRange != null ?
                new ObjectParameter("ToGSTRateRange", toGSTRateRange) :
                new ObjectParameter("ToGSTRateRange", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGSTItemSummary_Result>("SpGSTItemSummary", fromDateParameter, toDateParameter, fromSupplierRangeParameter, fromSupplierTaxSubCategoryRangeParameter, toSupplierTaxSubCategoryRangeParameter, toSupplierRangeParameter, fromItemCategoryRangeParameter, toItemCategoryRangeParameter, fromItemNameRangeParameter, toItemNameRangeParameter, invoiceDateFromParameter, invoiceDateToParameter, qCNOFromParameter, qCNOToParameter, qCDateFromParameter, qCDateToParameter, gRNNoFromParameter, gRNNoToParameter, gRNDateFromParameter, gRNDateToParameter, supplierGSTNoFromParameter, supplierGSTNoToParameter, gSTRateFromParameter, gSTRateToParameter, iGSTYesParameter, iGSTNOParameter, iGSTAllParameter, fromGSTRateRangeParameter, toGSTRateRangeParameter, finYearParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual int SpInsertActions(string xMLAtions)
        {
            var xMLAtionsParameter = xMLAtions != null ?
                new ObjectParameter("XMLAtions", xMLAtions) :
                new ObjectParameter("XMLAtions", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpInsertActions", xMLAtionsParameter);
        }
    
        public virtual int SpInsertItemwiseCostReceivedToday(Nullable<System.DateTime> date, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpInsertItemwiseCostReceivedToday", dateParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpInsertSLAMappingItem(string transactionType, string keyValue, string remarks, Nullable<decimal> amount, string tableName, string masterTableName, string transNo, Nullable<int> transID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> supplierID, Nullable<int> customerID, string batch, Nullable<int> departmentCategoryID, Nullable<int> itemID, Nullable<bool> isApprovalPending, Nullable<decimal> quantity, Nullable<decimal> rate, Nullable<int> transLocationID, Nullable<int> departmentID, Nullable<int> employeeID, Nullable<int> interCompanyID, Nullable<int> projectID, Nullable<int> treasuryID, Nullable<int> patientID, Nullable<int> assetID, Nullable<int> costComponent, Nullable<int> capitalisation, Nullable<int> paymentModeID, Nullable<System.DateTime> transDate, Nullable<bool> livePost)
        {
            var transactionTypeParameter = transactionType != null ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(string));
    
            var keyValueParameter = keyValue != null ?
                new ObjectParameter("KeyValue", keyValue) :
                new ObjectParameter("KeyValue", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(decimal));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var masterTableNameParameter = masterTableName != null ?
                new ObjectParameter("MasterTableName", masterTableName) :
                new ObjectParameter("MasterTableName", typeof(string));
    
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var transIDParameter = transID.HasValue ?
                new ObjectParameter("TransID", transID) :
                new ObjectParameter("TransID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var batchParameter = batch != null ?
                new ObjectParameter("Batch", batch) :
                new ObjectParameter("Batch", typeof(string));
    
            var departmentCategoryIDParameter = departmentCategoryID.HasValue ?
                new ObjectParameter("DepartmentCategoryID", departmentCategoryID) :
                new ObjectParameter("DepartmentCategoryID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var isApprovalPendingParameter = isApprovalPending.HasValue ?
                new ObjectParameter("IsApprovalPending", isApprovalPending) :
                new ObjectParameter("IsApprovalPending", typeof(bool));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var transLocationIDParameter = transLocationID.HasValue ?
                new ObjectParameter("TransLocationID", transLocationID) :
                new ObjectParameter("TransLocationID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var interCompanyIDParameter = interCompanyID.HasValue ?
                new ObjectParameter("InterCompanyID", interCompanyID) :
                new ObjectParameter("InterCompanyID", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var treasuryIDParameter = treasuryID.HasValue ?
                new ObjectParameter("TreasuryID", treasuryID) :
                new ObjectParameter("TreasuryID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var assetIDParameter = assetID.HasValue ?
                new ObjectParameter("AssetID", assetID) :
                new ObjectParameter("AssetID", typeof(int));
    
            var costComponentParameter = costComponent.HasValue ?
                new ObjectParameter("CostComponent", costComponent) :
                new ObjectParameter("CostComponent", typeof(int));
    
            var capitalisationParameter = capitalisation.HasValue ?
                new ObjectParameter("Capitalisation", capitalisation) :
                new ObjectParameter("Capitalisation", typeof(int));
    
            var paymentModeIDParameter = paymentModeID.HasValue ?
                new ObjectParameter("PaymentModeID", paymentModeID) :
                new ObjectParameter("PaymentModeID", typeof(int));
    
            var transDateParameter = transDate.HasValue ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(System.DateTime));
    
            var livePostParameter = livePost.HasValue ?
                new ObjectParameter("LivePost", livePost) :
                new ObjectParameter("LivePost", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpInsertSLAMappingItem", transactionTypeParameter, keyValueParameter, remarksParameter, amountParameter, tableNameParameter, masterTableNameParameter, transNoParameter, transIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, supplierIDParameter, customerIDParameter, batchParameter, departmentCategoryIDParameter, itemIDParameter, isApprovalPendingParameter, quantityParameter, rateParameter, transLocationIDParameter, departmentIDParameter, employeeIDParameter, interCompanyIDParameter, projectIDParameter, treasuryIDParameter, patientIDParameter, assetIDParameter, costComponentParameter, capitalisationParameter, paymentModeIDParameter, transDateParameter, livePostParameter);
        }
    
        public virtual int SpInsertStock(Nullable<System.DateTime> transDate, string fOrL, Nullable<int> itemID, Nullable<int> batchID, Nullable<int> wareHouseID, Nullable<decimal> receiptQty, Nullable<decimal> issueQty, string transactionType, Nullable<int> sortOrder, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> batchTypeID, Nullable<decimal> value)
        {
            var transDateParameter = transDate.HasValue ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(System.DateTime));
    
            var fOrLParameter = fOrL != null ?
                new ObjectParameter("FOrL", fOrL) :
                new ObjectParameter("FOrL", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            var receiptQtyParameter = receiptQty.HasValue ?
                new ObjectParameter("ReceiptQty", receiptQty) :
                new ObjectParameter("ReceiptQty", typeof(decimal));
    
            var issueQtyParameter = issueQty.HasValue ?
                new ObjectParameter("IssueQty", issueQty) :
                new ObjectParameter("IssueQty", typeof(decimal));
    
            var transactionTypeParameter = transactionType != null ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(string));
    
            var sortOrderParameter = sortOrder.HasValue ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpInsertStock", transDateParameter, fOrLParameter, itemIDParameter, batchIDParameter, wareHouseIDParameter, receiptQtyParameter, issueQtyParameter, transactionTypeParameter, sortOrderParameter, finYearParameter, locationIDParameter, applicationIDParameter, batchTypeIDParameter, valueParameter);
        }
    
        public virtual int SpIsAuthorised(Nullable<int> userID, string area, string controller, string action, string tab, string type, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter returnValue)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var areaParameter = area != null ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(string));
    
            var controllerParameter = controller != null ?
                new ObjectParameter("Controller", controller) :
                new ObjectParameter("Controller", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var tabParameter = tab != null ?
                new ObjectParameter("Tab", tab) :
                new ObjectParameter("Tab", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpIsAuthorised", userIDParameter, areaParameter, controllerParameter, actionParameter, tabParameter, typeParameter, locationIDParameter, applicationIDParameter, returnValue);
        }
    
        public virtual ObjectResult<Nullable<bool>> SpIsBranchLocation(Nullable<int> locationID, Nullable<int> applicationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("SpIsBranchLocation", locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpItemByItemCategoryID_Result> SpItemByItemCategoryID(Nullable<int> itemCategoryID)
        {
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpItemByItemCategoryID_Result>("SpItemByItemCategoryID", itemCategoryIDParameter);
        }
    
        public virtual ObjectResult<SpItemByItemID_Result> SpItemByItemID(Nullable<int> itemID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpItemByItemID_Result>("SpItemByItemID", itemIDParameter);
        }
    
        public virtual ObjectResult<SpItemByItemType_Result> SpItemByItemType(Nullable<int> itemTypeId)
        {
            var itemTypeIdParameter = itemTypeId.HasValue ?
                new ObjectParameter("ItemTypeId", itemTypeId) :
                new ObjectParameter("ItemTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpItemByItemType_Result>("SpItemByItemType", itemTypeIdParameter);
        }
    
        public virtual ObjectResult<SpItemByPurchaseCategoryID_Result> SpItemByPurchaseCategoryID(Nullable<int> purchaseCategoryID)
        {
            var purchaseCategoryIDParameter = purchaseCategoryID.HasValue ?
                new ObjectParameter("PurchaseCategoryID", purchaseCategoryID) :
                new ObjectParameter("PurchaseCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpItemByPurchaseCategoryID_Result>("SpItemByPurchaseCategoryID", purchaseCategoryIDParameter);
        }
    
        public virtual ObjectResult<SpItemBySalesCategory_Result> SpItemBySalesCategory(Nullable<int> salesCategoryID)
        {
            var salesCategoryIDParameter = salesCategoryID.HasValue ?
                new ObjectParameter("SalesCategoryID", salesCategoryID) :
                new ObjectParameter("SalesCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpItemBySalesCategory_Result>("SpItemBySalesCategory", salesCategoryIDParameter);
        }
    
        public virtual ObjectResult<string> SpItemCodeGenerator(string formName, string fieldName, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var formNameParameter = formName != null ?
                new ObjectParameter("FormName", formName) :
                new ObjectParameter("FormName", typeof(string));
    
            var fieldNameParameter = fieldName != null ?
                new ObjectParameter("FieldName", fieldName) :
                new ObjectParameter("FieldName", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SpItemCodeGenerator", formNameParameter, fieldNameParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpLoopForFGCostCalculation(Nullable<System.DateTime> date, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpLoopForFGCostCalculation", dateParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpPGetProductionIssueItemList(Nullable<int> productionSequence, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var productionSequenceParameter = productionSequence.HasValue ?
                new ObjectParameter("ProductionSequence", productionSequence) :
                new ObjectParameter("ProductionSequence", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpPGetProductionIssueItemList", productionSequenceParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpPInsertPackingIssueMaterialBatchwise(Nullable<int> packingIssueID, Nullable<int> packingIssueMaterialID, Nullable<int> itemID, Nullable<int> warehouseID, Nullable<decimal> issueQty, Nullable<System.DateTime> issueDate, string remarks, Nullable<int> unitID, Nullable<int> currentBatchID, Nullable<int> createUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter retValue)
        {
            var packingIssueIDParameter = packingIssueID.HasValue ?
                new ObjectParameter("PackingIssueID", packingIssueID) :
                new ObjectParameter("PackingIssueID", typeof(int));
    
            var packingIssueMaterialIDParameter = packingIssueMaterialID.HasValue ?
                new ObjectParameter("PackingIssueMaterialID", packingIssueMaterialID) :
                new ObjectParameter("PackingIssueMaterialID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var issueQtyParameter = issueQty.HasValue ?
                new ObjectParameter("IssueQty", issueQty) :
                new ObjectParameter("IssueQty", typeof(decimal));
    
            var issueDateParameter = issueDate.HasValue ?
                new ObjectParameter("IssueDate", issueDate) :
                new ObjectParameter("IssueDate", typeof(System.DateTime));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var currentBatchIDParameter = currentBatchID.HasValue ?
                new ObjectParameter("CurrentBatchID", currentBatchID) :
                new ObjectParameter("CurrentBatchID", typeof(int));
    
            var createUserIDParameter = createUserID.HasValue ?
                new ObjectParameter("CreateUserID", createUserID) :
                new ObjectParameter("CreateUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpPInsertPackingIssueMaterialBatchwise", packingIssueIDParameter, packingIssueMaterialIDParameter, itemIDParameter, warehouseIDParameter, issueQtyParameter, issueDateParameter, remarksParameter, unitIDParameter, currentBatchIDParameter, createUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, retValue);
        }
    
        public virtual int SpPInsertProductionIssueMaterialTransBatchwise(Nullable<int> productionIssueID, Nullable<int> productionIssueMaterialsID, Nullable<int> productDefinitionTransID, Nullable<int> itemID, Nullable<int> warehouseID, Nullable<decimal> issueQty, Nullable<System.DateTime> issueDate, Nullable<decimal> averageRate, string remarks, Nullable<int> createUserID, Nullable<int> unitID, Nullable<int> batchTypeID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter retValue)
        {
            var productionIssueIDParameter = productionIssueID.HasValue ?
                new ObjectParameter("ProductionIssueID", productionIssueID) :
                new ObjectParameter("ProductionIssueID", typeof(int));
    
            var productionIssueMaterialsIDParameter = productionIssueMaterialsID.HasValue ?
                new ObjectParameter("ProductionIssueMaterialsID", productionIssueMaterialsID) :
                new ObjectParameter("ProductionIssueMaterialsID", typeof(int));
    
            var productDefinitionTransIDParameter = productDefinitionTransID.HasValue ?
                new ObjectParameter("ProductDefinitionTransID", productDefinitionTransID) :
                new ObjectParameter("ProductDefinitionTransID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var issueQtyParameter = issueQty.HasValue ?
                new ObjectParameter("IssueQty", issueQty) :
                new ObjectParameter("IssueQty", typeof(decimal));
    
            var issueDateParameter = issueDate.HasValue ?
                new ObjectParameter("IssueDate", issueDate) :
                new ObjectParameter("IssueDate", typeof(System.DateTime));
    
            var averageRateParameter = averageRate.HasValue ?
                new ObjectParameter("AverageRate", averageRate) :
                new ObjectParameter("AverageRate", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createUserIDParameter = createUserID.HasValue ?
                new ObjectParameter("CreateUserID", createUserID) :
                new ObjectParameter("CreateUserID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpPInsertProductionIssueMaterialTransBatchwise", productionIssueIDParameter, productionIssueMaterialsIDParameter, productDefinitionTransIDParameter, itemIDParameter, warehouseIDParameter, issueQtyParameter, issueDateParameter, averageRateParameter, remarksParameter, createUserIDParameter, unitIDParameter, batchTypeIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, retValue);
        }
    
        public virtual int SpPInsertProductionReturnMaterialTransBatchwise(Nullable<int> productionIssueID, Nullable<int> itemID, Nullable<int> warehouseID, Nullable<decimal> returnQty, Nullable<System.DateTime> returnDate, Nullable<int> createUserID, Nullable<int> unitID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var productionIssueIDParameter = productionIssueID.HasValue ?
                new ObjectParameter("ProductionIssueID", productionIssueID) :
                new ObjectParameter("ProductionIssueID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var returnQtyParameter = returnQty.HasValue ?
                new ObjectParameter("ReturnQty", returnQty) :
                new ObjectParameter("ReturnQty", typeof(decimal));
    
            var returnDateParameter = returnDate.HasValue ?
                new ObjectParameter("ReturnDate", returnDate) :
                new ObjectParameter("ReturnDate", typeof(System.DateTime));
    
            var createUserIDParameter = createUserID.HasValue ?
                new ObjectParameter("CreateUserID", createUserID) :
                new ObjectParameter("CreateUserID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpPInsertProductionReturnMaterialTransBatchwise", productionIssueIDParameter, itemIDParameter, warehouseIDParameter, returnQtyParameter, returnDateParameter, createUserIDParameter, unitIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpPurchaseRequsitionSummary_Result> SpPurchaseRequsitionSummary(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, string category, string item, string location)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var itemParameter = item != null ?
                new ObjectParameter("Item", item) :
                new ObjectParameter("Item", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpPurchaseRequsitionSummary_Result>("SpPurchaseRequsitionSummary", fromdateParameter, todateParameter, categoryParameter, itemParameter, locationParameter);
        }
    
        public virtual int SpRepackingReceipt(Nullable<int> repackingIssueID, Nullable<int> itemID, Nullable<int> batchID, Nullable<int> batchTypeID, Nullable<decimal> outputQuantity, Nullable<int> createdUserID, Nullable<System.DateTime> createdDate, Nullable<int> finYear, Nullable<int> applicatonID, Nullable<int> locationID)
        {
            var repackingIssueIDParameter = repackingIssueID.HasValue ?
                new ObjectParameter("RepackingIssueID", repackingIssueID) :
                new ObjectParameter("RepackingIssueID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var outputQuantityParameter = outputQuantity.HasValue ?
                new ObjectParameter("OutputQuantity", outputQuantity) :
                new ObjectParameter("OutputQuantity", typeof(decimal));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicatonIDParameter = applicatonID.HasValue ?
                new ObjectParameter("ApplicatonID", applicatonID) :
                new ObjectParameter("ApplicatonID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpRepackingReceipt", repackingIssueIDParameter, itemIDParameter, batchIDParameter, batchTypeIDParameter, outputQuantityParameter, createdUserIDParameter, createdDateParameter, finYearParameter, applicatonIDParameter, locationIDParameter);
        }
    
        public virtual ObjectResult<SpRptPaymentVoucher_Result> SpRptPaymentVoucher(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> supplierID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptPaymentVoucher_Result>("SpRptPaymentVoucher", fromDateParameter, toDateParameter, supplierIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptProduction_Result> SpRptProduction(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptProduction_Result>("SpRptProduction", fromDateParameter, toDateParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptProductionReportByItem_Result> SpRptProductionReportByItem(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptProductionReportByItem_Result>("SpRptProductionReportByItem", fromDateParameter, toDateParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptProductionReportByItemDetail_Result> SpRptProductionReportByItemDetail(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string type, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptProductionReportByItemDetail_Result>("SpRptProductionReportByItemDetail", fromDateParameter, toDateParameter, typeParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptPurchaseInvoiceDetails_Result> SpRptPurchaseInvoiceDetails(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptPurchaseInvoiceDetails_Result>("SpRptPurchaseInvoiceDetails", fromDateParameter, toDateParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptQcDetail_Result> SpRptQcDetail(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptQcDetail_Result>("SpRptQcDetail", fromDateParameter, toDateParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptStockLedgerDetails_Result> SpRptStockLedgerDetails(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> itemCategoryID, Nullable<int> itemID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptStockLedgerDetails_Result>("SpRptStockLedgerDetails", fromDateParameter, toDateParameter, itemCategoryIDParameter, itemIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<string> SpSerialNoGenerator(string formName, string fieldName, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var formNameParameter = formName != null ?
                new ObjectParameter("FormName", formName) :
                new ObjectParameter("FormName", typeof(string));
    
            var fieldNameParameter = fieldName != null ?
                new ObjectParameter("FieldName", fieldName) :
                new ObjectParameter("FieldName", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SpSerialNoGenerator", formNameParameter, fieldNameParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpSetCurrentLocation(Nullable<int> userID, Nullable<int> locationID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpSetCurrentLocation", userIDParameter, locationIDParameter);
        }
    
        public virtual int SPStockListChange(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> wareHouseID, Nullable<int> itemID, Nullable<int> batchID, Nullable<decimal> qty, string field, Nullable<int> inrDcr, Nullable<int> batchTypeID)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(decimal));
    
            var fieldParameter = field != null ?
                new ObjectParameter("Field", field) :
                new ObjectParameter("Field", typeof(string));
    
            var inrDcrParameter = inrDcr.HasValue ?
                new ObjectParameter("InrDcr", inrDcr) :
                new ObjectParameter("InrDcr", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPStockListChange", finYearParameter, locationIDParameter, applicationIDParameter, wareHouseIDParameter, itemIDParameter, batchIDParameter, qtyParameter, fieldParameter, inrDcrParameter, batchTypeIDParameter);
        }
    
        public virtual int SpStockUpdate(Nullable<System.DateTime> transDate, string forL, Nullable<int> itemID, Nullable<int> batchID, Nullable<int> wareHouseID, Nullable<decimal> receipt, Nullable<decimal> issue, string transactionType, Nullable<int> locationID, Nullable<int> finYear, Nullable<int> sortOrder, Nullable<int> applicationID, string field, Nullable<byte> inrDcr, Nullable<int> batchTypeID, string transactionNo)
        {
            var transDateParameter = transDate.HasValue ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(System.DateTime));
    
            var forLParameter = forL != null ?
                new ObjectParameter("ForL", forL) :
                new ObjectParameter("ForL", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            var receiptParameter = receipt.HasValue ?
                new ObjectParameter("Receipt", receipt) :
                new ObjectParameter("Receipt", typeof(decimal));
    
            var issueParameter = issue.HasValue ?
                new ObjectParameter("Issue", issue) :
                new ObjectParameter("Issue", typeof(decimal));
    
            var transactionTypeParameter = transactionType != null ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var sortOrderParameter = sortOrder.HasValue ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var fieldParameter = field != null ?
                new ObjectParameter("Field", field) :
                new ObjectParameter("Field", typeof(string));
    
            var inrDcrParameter = inrDcr.HasValue ?
                new ObjectParameter("InrDcr", inrDcr) :
                new ObjectParameter("InrDcr", typeof(byte));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var transactionNoParameter = transactionNo != null ?
                new ObjectParameter("TransactionNo", transactionNo) :
                new ObjectParameter("TransactionNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpStockUpdate", transDateParameter, forLParameter, itemIDParameter, batchIDParameter, wareHouseIDParameter, receiptParameter, issueParameter, transactionTypeParameter, locationIDParameter, finYearParameter, sortOrderParameter, applicationIDParameter, fieldParameter, inrDcrParameter, batchTypeIDParameter, transactionNoParameter);
        }
    
        public virtual int SpTruncateHelp(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpTruncateHelp", iDParameter);
        }
    
        public virtual int SpUpdateCategoryGroup(Nullable<int> iD, string name)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateCategoryGroup", iDParameter, nameParameter);
        }
    
        public virtual int SpUpdateDepartmentGroup(Nullable<int> iD, string name, Nullable<bool> isActive, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateDepartmentGroup", iDParameter, nameParameter, isActiveParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int SpUpdateItemCostInTransactions(Nullable<System.DateTime> date, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateItemCostInTransactions", dateParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateLastPurchasePriceInItemStockValue(Nullable<int> itemID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, Nullable<decimal> price)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateLastPurchasePriceInItemStockValue", itemIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, priceParameter);
        }
    
        public virtual int SpUpdateMilkPurchase(Nullable<int> iD, Nullable<System.DateTime> date, Nullable<decimal> totalAmount, Nullable<decimal> totalQty, Nullable<int> createdUserID, Nullable<bool> isDraft, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var totalQtyParameter = totalQty.HasValue ?
                new ObjectParameter("TotalQty", totalQty) :
                new ObjectParameter("TotalQty", typeof(decimal));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateMilkPurchase", iDParameter, dateParameter, totalAmountParameter, totalQtyParameter, createdUserIDParameter, isDraftParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateSessionLog(Nullable<int> userID, Nullable<int> sessionID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter sessionIDOut)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateSessionLog", userIDParameter, sessionIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, sessionIDOut);
        }
    
        public virtual int stp_StockListChange(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> wareHouseID, Nullable<int> itemID, Nullable<int> batchID, Nullable<decimal> qty, string field, Nullable<int> inrDcr)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(decimal));
    
            var fieldParameter = field != null ?
                new ObjectParameter("Field", field) :
                new ObjectParameter("Field", typeof(string));
    
            var inrDcrParameter = inrDcr.HasValue ?
                new ObjectParameter("InrDcr", inrDcr) :
                new ObjectParameter("InrDcr", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stp_StockListChange", finYearParameter, locationIDParameter, applicationIDParameter, wareHouseIDParameter, itemIDParameter, batchIDParameter, qtyParameter, fieldParameter, inrDcrParameter);
        }
    
        public virtual int SuspendPendingOrders()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SuspendPendingOrders");
        }
    
        public virtual ObjectResult<SpGetUsersWithPermission_Result> SpGetUsersWithPermission(string area, string controller, string action, string type, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var areaParameter = area != null ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(string));
    
            var controllerParameter = controller != null ?
                new ObjectParameter("Controller", controller) :
                new ObjectParameter("Controller", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetUsersWithPermission_Result>("SpGetUsersWithPermission", areaParameter, controllerParameter, actionParameter, typeParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpIsRoleExistForUser(string roleName, Nullable<int> userID, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter returnValue)
        {
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpIsRoleExistForUser", roleNameParameter, userIDParameter, locationIDParameter, applicationIDParameter, returnValue);
        }
    
        public virtual int SpLogPerformance(string area, string controller, string action, string transID, Nullable<int> duration, Nullable<int> createdUserID, Nullable<int> applicationID)
        {
            var areaParameter = area != null ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(string));
    
            var controllerParameter = controller != null ?
                new ObjectParameter("Controller", controller) :
                new ObjectParameter("Controller", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var transIDParameter = transID != null ?
                new ObjectParameter("TransID", transID) :
                new ObjectParameter("TransID", typeof(string));
    
            var durationParameter = duration.HasValue ?
                new ObjectParameter("Duration", duration) :
                new ObjectParameter("Duration", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpLogPerformance", areaParameter, controllerParameter, actionParameter, transIDParameter, durationParameter, createdUserIDParameter, applicationIDParameter);
        }
    
        public virtual int SpLogError(string area, string controller, string action, Nullable<int> transID, string message, string stackTrace, string innerException, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var areaParameter = area != null ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(string));
    
            var controllerParameter = controller != null ?
                new ObjectParameter("Controller", controller) :
                new ObjectParameter("Controller", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var transIDParameter = transID.HasValue ?
                new ObjectParameter("TransID", transID) :
                new ObjectParameter("TransID", typeof(int));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var stackTraceParameter = stackTrace != null ?
                new ObjectParameter("StackTrace", stackTrace) :
                new ObjectParameter("StackTrace", typeof(string));
    
            var innerExceptionParameter = innerException != null ?
                new ObjectParameter("InnerException", innerException) :
                new ObjectParameter("InnerException", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpLogError", areaParameter, controllerParameter, actionParameter, transIDParameter, messageParameter, stackTraceParameter, innerExceptionParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SpGetLocationIDForInterCompanyPurchase(Nullable<int> addressID, string partyType)
        {
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            var partyTypeParameter = partyType != null ?
                new ObjectParameter("PartyType", partyType) :
                new ObjectParameter("PartyType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SpGetLocationIDForInterCompanyPurchase", addressIDParameter, partyTypeParameter);
        }
    
        public virtual ObjectResult<SpGetPrintList_Result> SpGetPrintList(Nullable<System.DateTime> dateFrom, string transNo, string form, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var formParameter = form != null ?
                new ObjectParameter("Form", form) :
                new ObjectParameter("Form", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPrintList_Result>("SpGetPrintList", dateFromParameter, transNoParameter, formParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetMenuItems_Result> SpGetMenuItems(Nullable<int> userID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetMenuItems_Result>("SpGetMenuItems", userIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetMailSenderDetails_Result> SpGetMailSenderDetails(string keys)
        {
            var keysParameter = keys != null ?
                new ObjectParameter("Keys", keys) :
                new ObjectParameter("Keys", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetMailSenderDetails_Result>("SpGetMailSenderDetails", keysParameter);
        }
    
        public virtual int SpCreatePackingDetails(Nullable<int> refID, string type, string packSize, Nullable<int> unitID, Nullable<decimal> quantity, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var refIDParameter = refID.HasValue ?
                new ObjectParameter("RefID", refID) :
                new ObjectParameter("RefID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var packSizeParameter = packSize != null ?
                new ObjectParameter("PackSize", packSize) :
                new ObjectParameter("PackSize", typeof(string));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePackingDetails", refIDParameter, typeParameter, packSizeParameter, unitIDParameter, quantityParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetMailReceiverDetails_Result> SpGetMailReceiverDetails(string uI, Nullable<int> iD)
        {
            var uIParameter = uI != null ?
                new ObjectParameter("UI", uI) :
                new ObjectParameter("UI", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetMailReceiverDetails_Result>("SpGetMailReceiverDetails", uIParameter, iDParameter);
        }
    
        public virtual int SpGetPackingDetails(Nullable<int> referenceID, string type, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var referenceIDParameter = referenceID.HasValue ?
                new ObjectParameter("ReferenceID", referenceID) :
                new ObjectParameter("ReferenceID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetPackingDetails", referenceIDParameter, typeParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpDateMailSentDetails(string uI, Nullable<int> iD)
        {
            var uIParameter = uI != null ?
                new ObjectParameter("UI", uI) :
                new ObjectParameter("UI", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpDateMailSentDetails", uIParameter, iDParameter);
        }
    
        public virtual int spCreatePostDummy(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCreatePostDummy", nameParameter);
        }
    
        public virtual int SpGetConfigValue(string configName, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter configValue)
        {
            var configNameParameter = configName != null ?
                new ObjectParameter("ConfigName", configName) :
                new ObjectParameter("ConfigName", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetConfigValue", configNameParameter, locationIDParameter, applicationIDParameter, configValue);
        }
    
        public virtual ObjectResult<SpGetLoginDetails_Result> SpGetLoginDetails(Nullable<int> userID, string email)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetLoginDetails_Result>("SpGetLoginDetails", userIDParameter, emailParameter);
        }
    }
}
