//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccessLayer.DBContext
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AssetEntities : DbContext
    {
        public AssetEntities()
            : base("name=AssetEntities")
        {
            ((IObjectContextAdapter)this).ObjectContext.CommandTimeout = 0;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AssetCorrection> AssetCorrections { get; set; }
        public virtual DbSet<AssetTran> AssetTrans { get; set; }
        public virtual DbSet<Asset> Assets { get; set; }
        public virtual DbSet<AssetRetirement> AssetRetirements { get; set; }
    
        public virtual ObjectResult<GetAccountCategoryForAsset_Result> GetAccountCategoryForAsset()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccountCategoryForAsset_Result>("GetAccountCategoryForAsset");
        }
    
        public virtual int SpCalculateDepreciation(Nullable<System.DateTime> statusdate, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var statusdateParameter = statusdate.HasValue ?
                new ObjectParameter("statusdate", statusdate) :
                new ObjectParameter("statusdate", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCalculateDepreciation", statusdateParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpChangeAssetStatus(Nullable<int> iD, string status, Nullable<System.DateTime> statusDate, string assetNo, Nullable<System.DateTime> depreciationEndDate, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var statusDateParameter = statusDate.HasValue ?
                new ObjectParameter("StatusDate", statusDate) :
                new ObjectParameter("StatusDate", typeof(System.DateTime));
    
            var assetNoParameter = assetNo != null ?
                new ObjectParameter("AssetNo", assetNo) :
                new ObjectParameter("AssetNo", typeof(string));
    
            var depreciationEndDateParameter = depreciationEndDate.HasValue ?
                new ObjectParameter("DepreciationEndDate", depreciationEndDate) :
                new ObjectParameter("DepreciationEndDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpChangeAssetStatus", iDParameter, statusParameter, statusDateParameter, assetNoParameter, depreciationEndDateParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateAsset(Nullable<int> iD, Nullable<System.DateTime> transDate, string assetNumber, string assetName, string assetUniqueNo, Nullable<bool> isRepairable, Nullable<decimal> companyDepreciationRate, Nullable<decimal> incomeTaxDepreciationRate, Nullable<decimal> lifeInYears, string additionToAssetNumber, Nullable<decimal> residualValue, string remark, string status, Nullable<System.DateTime> statusChangeDate, Nullable<System.DateTime> depreciationStartDate, Nullable<System.DateTime> depeciationEndDate, Nullable<bool> isDraft, Nullable<int> createdUserID, Nullable<System.DateTime> createdDate, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var transDateParameter = transDate.HasValue ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(System.DateTime));
    
            var assetNumberParameter = assetNumber != null ?
                new ObjectParameter("AssetNumber", assetNumber) :
                new ObjectParameter("AssetNumber", typeof(string));
    
            var assetNameParameter = assetName != null ?
                new ObjectParameter("AssetName", assetName) :
                new ObjectParameter("AssetName", typeof(string));
    
            var assetUniqueNoParameter = assetUniqueNo != null ?
                new ObjectParameter("AssetUniqueNo", assetUniqueNo) :
                new ObjectParameter("AssetUniqueNo", typeof(string));
    
            var isRepairableParameter = isRepairable.HasValue ?
                new ObjectParameter("IsRepairable", isRepairable) :
                new ObjectParameter("IsRepairable", typeof(bool));
    
            var companyDepreciationRateParameter = companyDepreciationRate.HasValue ?
                new ObjectParameter("CompanyDepreciationRate", companyDepreciationRate) :
                new ObjectParameter("CompanyDepreciationRate", typeof(decimal));
    
            var incomeTaxDepreciationRateParameter = incomeTaxDepreciationRate.HasValue ?
                new ObjectParameter("IncomeTaxDepreciationRate", incomeTaxDepreciationRate) :
                new ObjectParameter("IncomeTaxDepreciationRate", typeof(decimal));
    
            var lifeInYearsParameter = lifeInYears.HasValue ?
                new ObjectParameter("LifeInYears", lifeInYears) :
                new ObjectParameter("LifeInYears", typeof(decimal));
    
            var additionToAssetNumberParameter = additionToAssetNumber != null ?
                new ObjectParameter("AdditionToAssetNumber", additionToAssetNumber) :
                new ObjectParameter("AdditionToAssetNumber", typeof(string));
    
            var residualValueParameter = residualValue.HasValue ?
                new ObjectParameter("ResidualValue", residualValue) :
                new ObjectParameter("ResidualValue", typeof(decimal));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var statusChangeDateParameter = statusChangeDate.HasValue ?
                new ObjectParameter("StatusChangeDate", statusChangeDate) :
                new ObjectParameter("StatusChangeDate", typeof(System.DateTime));
    
            var depreciationStartDateParameter = depreciationStartDate.HasValue ?
                new ObjectParameter("DepreciationStartDate", depreciationStartDate) :
                new ObjectParameter("DepreciationStartDate", typeof(System.DateTime));
    
            var depeciationEndDateParameter = depeciationEndDate.HasValue ?
                new ObjectParameter("DepeciationEndDate", depeciationEndDate) :
                new ObjectParameter("DepeciationEndDate", typeof(System.DateTime));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("createdDate", createdDate) :
                new ObjectParameter("createdDate", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateAsset", iDParameter, transDateParameter, assetNumberParameter, assetNameParameter, assetUniqueNoParameter, isRepairableParameter, companyDepreciationRateParameter, incomeTaxDepreciationRateParameter, lifeInYearsParameter, additionToAssetNumberParameter, residualValueParameter, remarkParameter, statusParameter, statusChangeDateParameter, depreciationStartDateParameter, depeciationEndDateParameter, isDraftParameter, createdUserIDParameter, createdDateParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateAssetCorrection(string transNo, Nullable<System.DateTime> transDate, Nullable<int> assetID, Nullable<decimal> amountValue, Nullable<int> debitAccountIDAfterCorrection, Nullable<int> creditAccountIDAfterCorrection, Nullable<bool> isAdditionDuringYear, Nullable<bool> isDepreciation, string remark, Nullable<int> createdUserID, Nullable<System.DateTime> createdDate, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var transDateParameter = transDate.HasValue ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(System.DateTime));
    
            var assetIDParameter = assetID.HasValue ?
                new ObjectParameter("AssetID", assetID) :
                new ObjectParameter("AssetID", typeof(int));
    
            var amountValueParameter = amountValue.HasValue ?
                new ObjectParameter("AmountValue", amountValue) :
                new ObjectParameter("AmountValue", typeof(decimal));
    
            var debitAccountIDAfterCorrectionParameter = debitAccountIDAfterCorrection.HasValue ?
                new ObjectParameter("DebitAccountIDAfterCorrection", debitAccountIDAfterCorrection) :
                new ObjectParameter("DebitAccountIDAfterCorrection", typeof(int));
    
            var creditAccountIDAfterCorrectionParameter = creditAccountIDAfterCorrection.HasValue ?
                new ObjectParameter("CreditAccountIDAfterCorrection", creditAccountIDAfterCorrection) :
                new ObjectParameter("CreditAccountIDAfterCorrection", typeof(int));
    
            var isAdditionDuringYearParameter = isAdditionDuringYear.HasValue ?
                new ObjectParameter("IsAdditionDuringYear", isAdditionDuringYear) :
                new ObjectParameter("IsAdditionDuringYear", typeof(bool));
    
            var isDepreciationParameter = isDepreciation.HasValue ?
                new ObjectParameter("IsDepreciation", isDepreciation) :
                new ObjectParameter("IsDepreciation", typeof(bool));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("createdDate", createdDate) :
                new ObjectParameter("createdDate", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateAssetCorrection", transNoParameter, transDateParameter, assetIDParameter, amountValueParameter, debitAccountIDAfterCorrectionParameter, creditAccountIDAfterCorrectionParameter, isAdditionDuringYearParameter, isDepreciationParameter, remarkParameter, createdUserIDParameter, createdDateParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateAssetRetirement(Nullable<int> assetID, string transNo, Nullable<System.DateTime> transDate, Nullable<decimal> closingGrossBlockValue, Nullable<decimal> closingAccumulatedDepreciation, Nullable<decimal> closingWDV, Nullable<decimal> saleQty, Nullable<decimal> saleValue, Nullable<System.DateTime> endDate, string status, Nullable<int> createdUserID, Nullable<System.DateTime> createdDate, Nullable<int> finyear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var assetIDParameter = assetID.HasValue ?
                new ObjectParameter("AssetID", assetID) :
                new ObjectParameter("AssetID", typeof(int));
    
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var transDateParameter = transDate.HasValue ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(System.DateTime));
    
            var closingGrossBlockValueParameter = closingGrossBlockValue.HasValue ?
                new ObjectParameter("ClosingGrossBlockValue", closingGrossBlockValue) :
                new ObjectParameter("ClosingGrossBlockValue", typeof(decimal));
    
            var closingAccumulatedDepreciationParameter = closingAccumulatedDepreciation.HasValue ?
                new ObjectParameter("ClosingAccumulatedDepreciation", closingAccumulatedDepreciation) :
                new ObjectParameter("ClosingAccumulatedDepreciation", typeof(decimal));
    
            var closingWDVParameter = closingWDV.HasValue ?
                new ObjectParameter("ClosingWDV", closingWDV) :
                new ObjectParameter("ClosingWDV", typeof(decimal));
    
            var saleQtyParameter = saleQty.HasValue ?
                new ObjectParameter("SaleQty", saleQty) :
                new ObjectParameter("SaleQty", typeof(decimal));
    
            var saleValueParameter = saleValue.HasValue ?
                new ObjectParameter("SaleValue", saleValue) :
                new ObjectParameter("SaleValue", typeof(decimal));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var finyearParameter = finyear.HasValue ?
                new ObjectParameter("Finyear", finyear) :
                new ObjectParameter("Finyear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateAssetRetirement", assetIDParameter, transNoParameter, transDateParameter, closingGrossBlockValueParameter, closingAccumulatedDepreciationParameter, closingWDVParameter, saleQtyParameter, saleValueParameter, endDateParameter, statusParameter, createdUserIDParameter, createdDateParameter, finyearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetAsset_Result> SpGetAsset(Nullable<int> iD, Nullable<int> finyear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finyearParameter = finyear.HasValue ?
                new ObjectParameter("Finyear", finyear) :
                new ObjectParameter("Finyear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAsset_Result>("SpGetAsset", iDParameter, finyearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetAssetForCorrection_Result> SpGetAssetForCorrection(Nullable<int> iD, Nullable<int> finyear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finyearParameter = finyear.HasValue ?
                new ObjectParameter("Finyear", finyear) :
                new ObjectParameter("Finyear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAssetForCorrection_Result>("SpGetAssetForCorrection", iDParameter, finyearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetAssetForRetirement_Result> SpGetAssetForRetirement(Nullable<int> iD, Nullable<int> finyear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finyearParameter = finyear.HasValue ?
                new ObjectParameter("Finyear", finyear) :
                new ObjectParameter("Finyear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAssetForRetirement_Result>("SpGetAssetForRetirement", iDParameter, finyearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetAssetList_Result> SpGetAssetList(string status, Nullable<int> fromTransID, Nullable<int> toTransID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> fromSRNID, Nullable<int> toSRNID, string assetNameFromRange, string assetNameToRange, string assetName, string accountCategoryFromRange, string accountCategoryToRange, Nullable<int> accountCategoryID, string supplierNameFromRange, string supplierNameToRange, Nullable<int> supplierID, string transNo, string assetNo, string assetNameHint, string itemNameHint, string supplierNameHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var fromTransIDParameter = fromTransID.HasValue ?
                new ObjectParameter("FromTransID", fromTransID) :
                new ObjectParameter("FromTransID", typeof(int));
    
            var toTransIDParameter = toTransID.HasValue ?
                new ObjectParameter("ToTransID", toTransID) :
                new ObjectParameter("ToTransID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var fromSRNIDParameter = fromSRNID.HasValue ?
                new ObjectParameter("FromSRNID", fromSRNID) :
                new ObjectParameter("FromSRNID", typeof(int));
    
            var toSRNIDParameter = toSRNID.HasValue ?
                new ObjectParameter("ToSRNID", toSRNID) :
                new ObjectParameter("ToSRNID", typeof(int));
    
            var assetNameFromRangeParameter = assetNameFromRange != null ?
                new ObjectParameter("AssetNameFromRange", assetNameFromRange) :
                new ObjectParameter("AssetNameFromRange", typeof(string));
    
            var assetNameToRangeParameter = assetNameToRange != null ?
                new ObjectParameter("AssetNameToRange", assetNameToRange) :
                new ObjectParameter("AssetNameToRange", typeof(string));
    
            var assetNameParameter = assetName != null ?
                new ObjectParameter("AssetName", assetName) :
                new ObjectParameter("AssetName", typeof(string));
    
            var accountCategoryFromRangeParameter = accountCategoryFromRange != null ?
                new ObjectParameter("AccountCategoryFromRange", accountCategoryFromRange) :
                new ObjectParameter("AccountCategoryFromRange", typeof(string));
    
            var accountCategoryToRangeParameter = accountCategoryToRange != null ?
                new ObjectParameter("AccountCategoryToRange", accountCategoryToRange) :
                new ObjectParameter("AccountCategoryToRange", typeof(string));
    
            var accountCategoryIDParameter = accountCategoryID.HasValue ?
                new ObjectParameter("AccountCategoryID", accountCategoryID) :
                new ObjectParameter("AccountCategoryID", typeof(int));
    
            var supplierNameFromRangeParameter = supplierNameFromRange != null ?
                new ObjectParameter("SupplierNameFromRange", supplierNameFromRange) :
                new ObjectParameter("SupplierNameFromRange", typeof(string));
    
            var supplierNameToRangeParameter = supplierNameToRange != null ?
                new ObjectParameter("SupplierNameToRange", supplierNameToRange) :
                new ObjectParameter("SupplierNameToRange", typeof(string));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var assetNoParameter = assetNo != null ?
                new ObjectParameter("AssetNo", assetNo) :
                new ObjectParameter("AssetNo", typeof(string));
    
            var assetNameHintParameter = assetNameHint != null ?
                new ObjectParameter("AssetNameHint", assetNameHint) :
                new ObjectParameter("AssetNameHint", typeof(string));
    
            var itemNameHintParameter = itemNameHint != null ?
                new ObjectParameter("ItemNameHint", itemNameHint) :
                new ObjectParameter("ItemNameHint", typeof(string));
    
            var supplierNameHintParameter = supplierNameHint != null ?
                new ObjectParameter("SupplierNameHint", supplierNameHint) :
                new ObjectParameter("SupplierNameHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAssetList_Result>("SpGetAssetList", statusParameter, fromTransIDParameter, toTransIDParameter, fromDateParameter, toDateParameter, fromSRNIDParameter, toSRNIDParameter, assetNameFromRangeParameter, assetNameToRangeParameter, assetNameParameter, accountCategoryFromRangeParameter, accountCategoryToRangeParameter, accountCategoryIDParameter, supplierNameFromRangeParameter, supplierNameToRangeParameter, supplierIDParameter, transNoParameter, assetNoParameter, assetNameHintParameter, itemNameHintParameter, supplierNameHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetAssetListForRetirement_Result> SpGetAssetListForRetirement(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string assetNameFromRange, string assetNameToRange, string assetName, string assetCodeFrom, string assetCodeTo, string transNoHint, string assetNoHint, string assetNameHint, string itemNameHint, string supplierNameHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var assetNameFromRangeParameter = assetNameFromRange != null ?
                new ObjectParameter("AssetNameFromRange", assetNameFromRange) :
                new ObjectParameter("AssetNameFromRange", typeof(string));
    
            var assetNameToRangeParameter = assetNameToRange != null ?
                new ObjectParameter("AssetNameToRange", assetNameToRange) :
                new ObjectParameter("AssetNameToRange", typeof(string));
    
            var assetNameParameter = assetName != null ?
                new ObjectParameter("AssetName", assetName) :
                new ObjectParameter("AssetName", typeof(string));
    
            var assetCodeFromParameter = assetCodeFrom != null ?
                new ObjectParameter("AssetCodeFrom", assetCodeFrom) :
                new ObjectParameter("AssetCodeFrom", typeof(string));
    
            var assetCodeToParameter = assetCodeTo != null ?
                new ObjectParameter("AssetCodeTo", assetCodeTo) :
                new ObjectParameter("AssetCodeTo", typeof(string));
    
            var transNoHintParameter = transNoHint != null ?
                new ObjectParameter("TransNoHint", transNoHint) :
                new ObjectParameter("TransNoHint", typeof(string));
    
            var assetNoHintParameter = assetNoHint != null ?
                new ObjectParameter("AssetNoHint", assetNoHint) :
                new ObjectParameter("AssetNoHint", typeof(string));
    
            var assetNameHintParameter = assetNameHint != null ?
                new ObjectParameter("AssetNameHint", assetNameHint) :
                new ObjectParameter("AssetNameHint", typeof(string));
    
            var itemNameHintParameter = itemNameHint != null ?
                new ObjectParameter("ItemNameHint", itemNameHint) :
                new ObjectParameter("ItemNameHint", typeof(string));
    
            var supplierNameHintParameter = supplierNameHint != null ?
                new ObjectParameter("SupplierNameHint", supplierNameHint) :
                new ObjectParameter("SupplierNameHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAssetListForRetirement_Result>("SpGetAssetListForRetirement", fromDateParameter, toDateParameter, assetNameFromRangeParameter, assetNameToRangeParameter, assetNameParameter, assetCodeFromParameter, assetCodeToParameter, transNoHintParameter, assetNoHintParameter, assetNameHintParameter, itemNameHintParameter, supplierNameHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpGetAssetUniqueNoCount(string hint, ObjectParameter count)
        {
            var hintParameter = hint != null ?
                new ObjectParameter("Hint", hint) :
                new ObjectParameter("Hint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetAssetUniqueNoCount", hintParameter, count);
        }
    
        public virtual ObjectResult<SpGetCapitalForRetirement_Result> SpGetCapitalForRetirement(Nullable<int> iD, Nullable<int> finyear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finyearParameter = finyear.HasValue ?
                new ObjectParameter("Finyear", finyear) :
                new ObjectParameter("Finyear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCapitalForRetirement_Result>("SpGetCapitalForRetirement", iDParameter, finyearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCapitalList_Result> SpGetCapitalList(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<decimal> fromCompanyDepreciationRate, Nullable<decimal> toCompanyDepreciationRate, Nullable<decimal> fromIncomeTaxDepreciationRate, Nullable<decimal> toIncomeTaxDepreciationRate, string assetNameHint, string itemNameHint, string supplierNameHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var fromCompanyDepreciationRateParameter = fromCompanyDepreciationRate.HasValue ?
                new ObjectParameter("FromCompanyDepreciationRate", fromCompanyDepreciationRate) :
                new ObjectParameter("FromCompanyDepreciationRate", typeof(decimal));
    
            var toCompanyDepreciationRateParameter = toCompanyDepreciationRate.HasValue ?
                new ObjectParameter("ToCompanyDepreciationRate", toCompanyDepreciationRate) :
                new ObjectParameter("ToCompanyDepreciationRate", typeof(decimal));
    
            var fromIncomeTaxDepreciationRateParameter = fromIncomeTaxDepreciationRate.HasValue ?
                new ObjectParameter("FromIncomeTaxDepreciationRate", fromIncomeTaxDepreciationRate) :
                new ObjectParameter("FromIncomeTaxDepreciationRate", typeof(decimal));
    
            var toIncomeTaxDepreciationRateParameter = toIncomeTaxDepreciationRate.HasValue ?
                new ObjectParameter("ToIncomeTaxDepreciationRate", toIncomeTaxDepreciationRate) :
                new ObjectParameter("ToIncomeTaxDepreciationRate", typeof(decimal));
    
            var assetNameHintParameter = assetNameHint != null ?
                new ObjectParameter("AssetNameHint", assetNameHint) :
                new ObjectParameter("AssetNameHint", typeof(string));
    
            var itemNameHintParameter = itemNameHint != null ?
                new ObjectParameter("ItemNameHint", itemNameHint) :
                new ObjectParameter("ItemNameHint", typeof(string));
    
            var supplierNameHintParameter = supplierNameHint != null ?
                new ObjectParameter("SupplierNameHint", supplierNameHint) :
                new ObjectParameter("SupplierNameHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCapitalList_Result>("SpGetCapitalList", fromDateParameter, toDateParameter, fromCompanyDepreciationRateParameter, toCompanyDepreciationRateParameter, fromIncomeTaxDepreciationRateParameter, toIncomeTaxDepreciationRateParameter, assetNameHintParameter, itemNameHintParameter, supplierNameHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCapitalListForCorrection_Result> SpGetCapitalListForCorrection(string fromAssetCode, string toAssetCode, string assetNameFromRange, string assetNameToRange, string assetName, string transNoHint, string assetNoHint, string assetNameHint, string itemNameHint, string supplierNameHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromAssetCodeParameter = fromAssetCode != null ?
                new ObjectParameter("FromAssetCode", fromAssetCode) :
                new ObjectParameter("FromAssetCode", typeof(string));
    
            var toAssetCodeParameter = toAssetCode != null ?
                new ObjectParameter("ToAssetCode", toAssetCode) :
                new ObjectParameter("ToAssetCode", typeof(string));
    
            var assetNameFromRangeParameter = assetNameFromRange != null ?
                new ObjectParameter("AssetNameFromRange", assetNameFromRange) :
                new ObjectParameter("AssetNameFromRange", typeof(string));
    
            var assetNameToRangeParameter = assetNameToRange != null ?
                new ObjectParameter("AssetNameToRange", assetNameToRange) :
                new ObjectParameter("AssetNameToRange", typeof(string));
    
            var assetNameParameter = assetName != null ?
                new ObjectParameter("AssetName", assetName) :
                new ObjectParameter("AssetName", typeof(string));
    
            var transNoHintParameter = transNoHint != null ?
                new ObjectParameter("TransNoHint", transNoHint) :
                new ObjectParameter("TransNoHint", typeof(string));
    
            var assetNoHintParameter = assetNoHint != null ?
                new ObjectParameter("AssetNoHint", assetNoHint) :
                new ObjectParameter("AssetNoHint", typeof(string));
    
            var assetNameHintParameter = assetNameHint != null ?
                new ObjectParameter("AssetNameHint", assetNameHint) :
                new ObjectParameter("AssetNameHint", typeof(string));
    
            var itemNameHintParameter = itemNameHint != null ?
                new ObjectParameter("ItemNameHint", itemNameHint) :
                new ObjectParameter("ItemNameHint", typeof(string));
    
            var supplierNameHintParameter = supplierNameHint != null ?
                new ObjectParameter("SupplierNameHint", supplierNameHint) :
                new ObjectParameter("SupplierNameHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCapitalListForCorrection_Result>("SpGetCapitalListForCorrection", fromAssetCodeParameter, toAssetCodeParameter, assetNameFromRangeParameter, assetNameToRangeParameter, assetNameParameter, transNoHintParameter, assetNoHintParameter, assetNameHintParameter, itemNameHintParameter, supplierNameHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCancelTransaction(Nullable<int> iD, string tableName, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCancelTransaction", iDParameter, tableNameParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateBatch(string itemType, Nullable<int> itemID, string batchNo, string customBatchNo, Nullable<System.DateTime> manufacturingDate, Nullable<System.DateTime> expiryDate, Nullable<int> batchTypeID, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter batchID)
        {
            var itemTypeParameter = itemType != null ?
                new ObjectParameter("ItemType", itemType) :
                new ObjectParameter("ItemType", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchNoParameter = batchNo != null ?
                new ObjectParameter("BatchNo", batchNo) :
                new ObjectParameter("BatchNo", typeof(string));
    
            var customBatchNoParameter = customBatchNo != null ?
                new ObjectParameter("CustomBatchNo", customBatchNo) :
                new ObjectParameter("CustomBatchNo", typeof(string));
    
            var manufacturingDateParameter = manufacturingDate.HasValue ?
                new ObjectParameter("ManufacturingDate", manufacturingDate) :
                new ObjectParameter("ManufacturingDate", typeof(System.DateTime));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateBatch", itemTypeParameter, itemIDParameter, batchNoParameter, customBatchNoParameter, manufacturingDateParameter, expiryDateParameter, batchTypeIDParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter, batchID);
        }
    
        public virtual ObjectResult<SpGetConfigByUser_Result> SpGetConfigByUser(string configName, Nullable<int> userID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var configNameParameter = configName != null ?
                new ObjectParameter("ConfigName", configName) :
                new ObjectParameter("ConfigName", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetConfigByUser_Result>("SpGetConfigByUser", configNameParameter, userIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCurrentFinYear_Result> SpGetCurrentFinYear(Nullable<int> applicationID)
        {
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCurrentFinYear_Result>("SpGetCurrentFinYear", applicationIDParameter);
        }
    
        public virtual int SpIsCodeAlreadyExists(string tableName, string fieldName, string code, Nullable<int> iD, ObjectParameter isExists)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("tableName", tableName) :
                new ObjectParameter("tableName", typeof(string));
    
            var fieldNameParameter = fieldName != null ?
                new ObjectParameter("FieldName", fieldName) :
                new ObjectParameter("FieldName", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpIsCodeAlreadyExists", tableNameParameter, fieldNameParameter, codeParameter, iDParameter, isExists);
        }
    
        public virtual int SpSuspendTransaction(Nullable<int> iD, string tableName, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter retValue)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpSuspendTransaction", iDParameter, tableNameParameter, finYearParameter, locationIDParameter, applicationIDParameter, retValue);
        }
    
        public virtual int SpUpdateSerialNo(string formName, string fieldName, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter serialNo)
        {
            var formNameParameter = formName != null ?
                new ObjectParameter("FormName", formName) :
                new ObjectParameter("FormName", typeof(string));
    
            var fieldNameParameter = fieldName != null ?
                new ObjectParameter("FieldName", fieldName) :
                new ObjectParameter("FieldName", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateSerialNo", formNameParameter, fieldNameParameter, finYearParameter, locationIDParameter, applicationIDParameter, serialNo);
        }
    }
}
