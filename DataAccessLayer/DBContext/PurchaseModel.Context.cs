//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccessLayer.DBContext
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PurchaseEntities : DbContext
    {
        public PurchaseEntities()
            : base("name=PurchaseEntities")
        {
            ((IObjectContextAdapter)this).ObjectContext.CommandTimeout = 0;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual int SpCancelDirectPurchaseInvoice(Nullable<int> purchaseOrderID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter returnValue)
        {
            var purchaseOrderIDParameter = purchaseOrderID.HasValue ?
                new ObjectParameter("PurchaseOrderID", purchaseOrderID) :
                new ObjectParameter("PurchaseOrderID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCancelDirectPurchaseInvoice", purchaseOrderIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, returnValue);
        }
    
        public virtual int SpCancelGRN(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("locationID", locationID) :
                new ObjectParameter("locationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("applicationID", applicationID) :
                new ObjectParameter("applicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCancelGRN", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> SpCancelPurchaseOrder(Nullable<int> purchaseOrderID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var purchaseOrderIDParameter = purchaseOrderID.HasValue ?
                new ObjectParameter("PurchaseOrderID", purchaseOrderID) :
                new ObjectParameter("PurchaseOrderID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("SpCancelPurchaseOrder", purchaseOrderIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> SpCancelServicePurchaseOrder(Nullable<int> servicePurchaseOrderID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var servicePurchaseOrderIDParameter = servicePurchaseOrderID.HasValue ?
                new ObjectParameter("ServicePurchaseOrderID", servicePurchaseOrderID) :
                new ObjectParameter("ServicePurchaseOrderID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("SpCancelServicePurchaseOrder", servicePurchaseOrderIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCancelSRN(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("locationID", locationID) :
                new ObjectParameter("locationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("applicationID", applicationID) :
                new ObjectParameter("applicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCancelSRN", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateAndOverRuleQCForLocalPurchase(string qCNo, Nullable<System.DateTime> dATE, Nullable<int> gRNID, Nullable<int> goodsReceiptNoteTransID, string referenceNo, Nullable<int> warehouseID, Nullable<int> itemID, string batchNo, string qCStatus, Nullable<int> toWareHouseID, Nullable<decimal> acceptedQty, Nullable<decimal> approvedQty, Nullable<int> unitID, Nullable<int> batchID, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var qCNoParameter = qCNo != null ?
                new ObjectParameter("QCNo", qCNo) :
                new ObjectParameter("QCNo", typeof(string));
    
            var dATEParameter = dATE.HasValue ?
                new ObjectParameter("DATE", dATE) :
                new ObjectParameter("DATE", typeof(System.DateTime));
    
            var gRNIDParameter = gRNID.HasValue ?
                new ObjectParameter("GRNID", gRNID) :
                new ObjectParameter("GRNID", typeof(int));
    
            var goodsReceiptNoteTransIDParameter = goodsReceiptNoteTransID.HasValue ?
                new ObjectParameter("GoodsReceiptNoteTransID", goodsReceiptNoteTransID) :
                new ObjectParameter("GoodsReceiptNoteTransID", typeof(int));
    
            var referenceNoParameter = referenceNo != null ?
                new ObjectParameter("ReferenceNo", referenceNo) :
                new ObjectParameter("ReferenceNo", typeof(string));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchNoParameter = batchNo != null ?
                new ObjectParameter("BatchNo", batchNo) :
                new ObjectParameter("BatchNo", typeof(string));
    
            var qCStatusParameter = qCStatus != null ?
                new ObjectParameter("QCStatus", qCStatus) :
                new ObjectParameter("QCStatus", typeof(string));
    
            var toWareHouseIDParameter = toWareHouseID.HasValue ?
                new ObjectParameter("ToWareHouseID", toWareHouseID) :
                new ObjectParameter("ToWareHouseID", typeof(int));
    
            var acceptedQtyParameter = acceptedQty.HasValue ?
                new ObjectParameter("AcceptedQty", acceptedQty) :
                new ObjectParameter("AcceptedQty", typeof(decimal));
    
            var approvedQtyParameter = approvedQty.HasValue ?
                new ObjectParameter("ApprovedQty", approvedQty) :
                new ObjectParameter("ApprovedQty", typeof(decimal));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateAndOverRuleQCForLocalPurchase", qCNoParameter, dATEParameter, gRNIDParameter, goodsReceiptNoteTransIDParameter, referenceNoParameter, warehouseIDParameter, itemIDParameter, batchNoParameter, qCStatusParameter, toWareHouseIDParameter, acceptedQtyParameter, approvedQtyParameter, unitIDParameter, batchIDParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateAutomaticSRNAndInvoice(Nullable<int> pOServiceID, string invoiceNo, Nullable<System.DateTime> invoiceDate, Nullable<decimal> discount, Nullable<decimal> otherDeductions, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var pOServiceIDParameter = pOServiceID.HasValue ?
                new ObjectParameter("POServiceID", pOServiceID) :
                new ObjectParameter("POServiceID", typeof(int));
    
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(string));
    
            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(System.DateTime));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var otherDeductionsParameter = otherDeductions.HasValue ?
                new ObjectParameter("OtherDeductions", otherDeductions) :
                new ObjectParameter("OtherDeductions", typeof(decimal));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateAutomaticSRNAndInvoice", pOServiceIDParameter, invoiceNoParameter, invoiceDateParameter, discountParameter, otherDeductionsParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateGoodsReceiptNote(string grnNo, Nullable<System.DateTime> grnDate, Nullable<int> supplierID, Nullable<System.DateTime> receiptDate, string deliveryChallanNo, Nullable<System.DateTime> deliveryChallanDate, Nullable<int> warehouseID, Nullable<bool> purchaseCompleted, Nullable<bool> cancelled, Nullable<System.DateTime> cancelledDate, Nullable<int> createdUserID, Nullable<System.DateTime> createdDate, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter goodsReceiptNoteID, Nullable<bool> isDraft)
        {
            var grnNoParameter = grnNo != null ?
                new ObjectParameter("GrnNo", grnNo) :
                new ObjectParameter("GrnNo", typeof(string));
    
            var grnDateParameter = grnDate.HasValue ?
                new ObjectParameter("GrnDate", grnDate) :
                new ObjectParameter("GrnDate", typeof(System.DateTime));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var receiptDateParameter = receiptDate.HasValue ?
                new ObjectParameter("ReceiptDate", receiptDate) :
                new ObjectParameter("ReceiptDate", typeof(System.DateTime));
    
            var deliveryChallanNoParameter = deliveryChallanNo != null ?
                new ObjectParameter("DeliveryChallanNo", deliveryChallanNo) :
                new ObjectParameter("DeliveryChallanNo", typeof(string));
    
            var deliveryChallanDateParameter = deliveryChallanDate.HasValue ?
                new ObjectParameter("DeliveryChallanDate", deliveryChallanDate) :
                new ObjectParameter("DeliveryChallanDate", typeof(System.DateTime));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var purchaseCompletedParameter = purchaseCompleted.HasValue ?
                new ObjectParameter("PurchaseCompleted", purchaseCompleted) :
                new ObjectParameter("PurchaseCompleted", typeof(bool));
    
            var cancelledParameter = cancelled.HasValue ?
                new ObjectParameter("Cancelled", cancelled) :
                new ObjectParameter("Cancelled", typeof(bool));
    
            var cancelledDateParameter = cancelledDate.HasValue ?
                new ObjectParameter("CancelledDate", cancelledDate) :
                new ObjectParameter("CancelledDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateGoodsReceiptNote", grnNoParameter, grnDateParameter, supplierIDParameter, receiptDateParameter, deliveryChallanNoParameter, deliveryChallanDateParameter, warehouseIDParameter, purchaseCompletedParameter, cancelledParameter, cancelledDateParameter, createdUserIDParameter, createdDateParameter, finYearParameter, locationIDParameter, applicationIDParameter, goodsReceiptNoteID, isDraftParameter);
        }
    
        public virtual int SpCreateGoodsReceiptNoteForDirectPurchaseInvoice(string code, Nullable<int> purchaseOrderID, Nullable<int> locationID, ObjectParameter gRNID)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var purchaseOrderIDParameter = purchaseOrderID.HasValue ?
                new ObjectParameter("PurchaseOrderID", purchaseOrderID) :
                new ObjectParameter("PurchaseOrderID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateGoodsReceiptNoteForDirectPurchaseInvoice", codeParameter, purchaseOrderIDParameter, locationIDParameter, gRNID);
        }
    
        public virtual int SpCreateGoodsReceiptNoteForLocalPurchase(string code, Nullable<int> purchaseOrderID, Nullable<int> locationID, ObjectParameter gRNID)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var purchaseOrderIDParameter = purchaseOrderID.HasValue ?
                new ObjectParameter("PurchaseOrderID", purchaseOrderID) :
                new ObjectParameter("PurchaseOrderID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateGoodsReceiptNoteForLocalPurchase", codeParameter, purchaseOrderIDParameter, locationIDParameter, gRNID);
        }
    
        public virtual int SpCreateGoodsReceiptNoteTransForLocalPurchase(Nullable<int> gRNID, Nullable<int> purchaseOrderID, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var gRNIDParameter = gRNID.HasValue ?
                new ObjectParameter("GRNID", gRNID) :
                new ObjectParameter("GRNID", typeof(int));
    
            var purchaseOrderIDParameter = purchaseOrderID.HasValue ?
                new ObjectParameter("PurchaseOrderID", purchaseOrderID) :
                new ObjectParameter("PurchaseOrderID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateGoodsReceiptNoteTransForLocalPurchase", gRNIDParameter, purchaseOrderIDParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateGRNTransForJanaushadhi(Nullable<int> goodsReceiptNoteID, Nullable<int> purchaseOrderID, Nullable<int> pOTransID, Nullable<int> itemID, string batch, Nullable<System.DateTime> expiryDate, Nullable<decimal> purchaseOrderQty, Nullable<decimal> receivedQty, Nullable<decimal> looseRate, Nullable<decimal> looseQty, string remarks, Nullable<decimal> purchaseRate, Nullable<decimal> offerQty, Nullable<int> discountID, Nullable<decimal> discountPercent, Nullable<decimal> discountAmount, Nullable<int> batchID, Nullable<decimal> iGSTPercent, Nullable<decimal> cGSTPercent, Nullable<decimal> sGSTPercent, Nullable<decimal> iGSTAmt, Nullable<decimal> sGSTAmt, Nullable<decimal> cGSTAmt, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> unitID, ObjectParameter retValue)
        {
            var goodsReceiptNoteIDParameter = goodsReceiptNoteID.HasValue ?
                new ObjectParameter("GoodsReceiptNoteID", goodsReceiptNoteID) :
                new ObjectParameter("GoodsReceiptNoteID", typeof(int));
    
            var purchaseOrderIDParameter = purchaseOrderID.HasValue ?
                new ObjectParameter("PurchaseOrderID", purchaseOrderID) :
                new ObjectParameter("PurchaseOrderID", typeof(int));
    
            var pOTransIDParameter = pOTransID.HasValue ?
                new ObjectParameter("POTransID", pOTransID) :
                new ObjectParameter("POTransID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchParameter = batch != null ?
                new ObjectParameter("Batch", batch) :
                new ObjectParameter("Batch", typeof(string));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var purchaseOrderQtyParameter = purchaseOrderQty.HasValue ?
                new ObjectParameter("PurchaseOrderQty", purchaseOrderQty) :
                new ObjectParameter("PurchaseOrderQty", typeof(decimal));
    
            var receivedQtyParameter = receivedQty.HasValue ?
                new ObjectParameter("ReceivedQty", receivedQty) :
                new ObjectParameter("ReceivedQty", typeof(decimal));
    
            var looseRateParameter = looseRate.HasValue ?
                new ObjectParameter("LooseRate", looseRate) :
                new ObjectParameter("LooseRate", typeof(decimal));
    
            var looseQtyParameter = looseQty.HasValue ?
                new ObjectParameter("LooseQty", looseQty) :
                new ObjectParameter("LooseQty", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var purchaseRateParameter = purchaseRate.HasValue ?
                new ObjectParameter("PurchaseRate", purchaseRate) :
                new ObjectParameter("PurchaseRate", typeof(decimal));
    
            var offerQtyParameter = offerQty.HasValue ?
                new ObjectParameter("OfferQty", offerQty) :
                new ObjectParameter("OfferQty", typeof(decimal));
    
            var discountIDParameter = discountID.HasValue ?
                new ObjectParameter("DiscountID", discountID) :
                new ObjectParameter("DiscountID", typeof(int));
    
            var discountPercentParameter = discountPercent.HasValue ?
                new ObjectParameter("DiscountPercent", discountPercent) :
                new ObjectParameter("DiscountPercent", typeof(decimal));
    
            var discountAmountParameter = discountAmount.HasValue ?
                new ObjectParameter("DiscountAmount", discountAmount) :
                new ObjectParameter("DiscountAmount", typeof(decimal));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var iGSTPercentParameter = iGSTPercent.HasValue ?
                new ObjectParameter("IGSTPercent", iGSTPercent) :
                new ObjectParameter("IGSTPercent", typeof(decimal));
    
            var cGSTPercentParameter = cGSTPercent.HasValue ?
                new ObjectParameter("CGSTPercent", cGSTPercent) :
                new ObjectParameter("CGSTPercent", typeof(decimal));
    
            var sGSTPercentParameter = sGSTPercent.HasValue ?
                new ObjectParameter("SGSTPercent", sGSTPercent) :
                new ObjectParameter("SGSTPercent", typeof(decimal));
    
            var iGSTAmtParameter = iGSTAmt.HasValue ?
                new ObjectParameter("IGSTAmt", iGSTAmt) :
                new ObjectParameter("IGSTAmt", typeof(decimal));
    
            var sGSTAmtParameter = sGSTAmt.HasValue ?
                new ObjectParameter("SGSTAmt", sGSTAmt) :
                new ObjectParameter("SGSTAmt", typeof(decimal));
    
            var cGSTAmtParameter = cGSTAmt.HasValue ?
                new ObjectParameter("CGSTAmt", cGSTAmt) :
                new ObjectParameter("CGSTAmt", typeof(decimal));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateGRNTransForJanaushadhi", goodsReceiptNoteIDParameter, purchaseOrderIDParameter, pOTransIDParameter, itemIDParameter, batchParameter, expiryDateParameter, purchaseOrderQtyParameter, receivedQtyParameter, looseRateParameter, looseQtyParameter, remarksParameter, purchaseRateParameter, offerQtyParameter, discountIDParameter, discountPercentParameter, discountAmountParameter, batchIDParameter, iGSTPercentParameter, cGSTPercentParameter, sGSTPercentParameter, iGSTAmtParameter, sGSTAmtParameter, cGSTAmtParameter, finYearParameter, locationIDParameter, applicationIDParameter, unitIDParameter, retValue);
        }
    
        public virtual int SpCreateIRG(string code, Nullable<System.DateTime> date, Nullable<int> supplierID, Nullable<decimal> sGSTAmount, Nullable<decimal> cGSTAmount, Nullable<decimal> iGSTAmount, Nullable<decimal> freightAmount, Nullable<decimal> otherCharge, Nullable<decimal> packingCahrge, Nullable<decimal> netAmount, Nullable<bool> isDraft, Nullable<bool> isCancelled, Nullable<System.DateTime> cancelledDate, Nullable<int> createdUserID, Nullable<System.DateTime> createdDate, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter iRGID)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var sGSTAmountParameter = sGSTAmount.HasValue ?
                new ObjectParameter("SGSTAmount", sGSTAmount) :
                new ObjectParameter("SGSTAmount", typeof(decimal));
    
            var cGSTAmountParameter = cGSTAmount.HasValue ?
                new ObjectParameter("CGSTAmount", cGSTAmount) :
                new ObjectParameter("CGSTAmount", typeof(decimal));
    
            var iGSTAmountParameter = iGSTAmount.HasValue ?
                new ObjectParameter("IGSTAmount", iGSTAmount) :
                new ObjectParameter("IGSTAmount", typeof(decimal));
    
            var freightAmountParameter = freightAmount.HasValue ?
                new ObjectParameter("FreightAmount", freightAmount) :
                new ObjectParameter("FreightAmount", typeof(decimal));
    
            var otherChargeParameter = otherCharge.HasValue ?
                new ObjectParameter("OtherCharge", otherCharge) :
                new ObjectParameter("OtherCharge", typeof(decimal));
    
            var packingCahrgeParameter = packingCahrge.HasValue ?
                new ObjectParameter("PackingCahrge", packingCahrge) :
                new ObjectParameter("PackingCahrge", typeof(decimal));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var isCancelledParameter = isCancelled.HasValue ?
                new ObjectParameter("IsCancelled", isCancelled) :
                new ObjectParameter("IsCancelled", typeof(bool));
    
            var cancelledDateParameter = cancelledDate.HasValue ?
                new ObjectParameter("CancelledDate", cancelledDate) :
                new ObjectParameter("CancelledDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateIRG", codeParameter, dateParameter, supplierIDParameter, sGSTAmountParameter, cGSTAmountParameter, iGSTAmountParameter, freightAmountParameter, otherChargeParameter, packingCahrgeParameter, netAmountParameter, isDraftParameter, isCancelledParameter, cancelledDateParameter, createdUserIDParameter, createdDateParameter, finYearParameter, locationIDParameter, applicationIDParameter, iRGID);
        }
    
        public virtual int SpCreateIRGTrans(Nullable<int> iRGID, Nullable<int> invoiceID, Nullable<int> itemID, Nullable<decimal> qty, Nullable<decimal> rate, Nullable<decimal> sGSTPercent, Nullable<decimal> cGSTPercent, Nullable<decimal> iGSTPercent, Nullable<decimal> sGSTAmount, Nullable<decimal> cGSTAmount, Nullable<decimal> iGSTAmount, Nullable<decimal> amount, string remarks, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> wareHouseID, Nullable<int> batchTypeID, Nullable<int> unitID, Nullable<int> purchaseReturnID, Nullable<int> purchaseReturnTransID, Nullable<int> purchaseReturnOrderID, Nullable<int> purchaseReturnOrderTransID)
        {
            var iRGIDParameter = iRGID.HasValue ?
                new ObjectParameter("IRGID", iRGID) :
                new ObjectParameter("IRGID", typeof(int));
    
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(decimal));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var sGSTPercentParameter = sGSTPercent.HasValue ?
                new ObjectParameter("SGSTPercent", sGSTPercent) :
                new ObjectParameter("SGSTPercent", typeof(decimal));
    
            var cGSTPercentParameter = cGSTPercent.HasValue ?
                new ObjectParameter("CGSTPercent", cGSTPercent) :
                new ObjectParameter("CGSTPercent", typeof(decimal));
    
            var iGSTPercentParameter = iGSTPercent.HasValue ?
                new ObjectParameter("IGSTPercent", iGSTPercent) :
                new ObjectParameter("IGSTPercent", typeof(decimal));
    
            var sGSTAmountParameter = sGSTAmount.HasValue ?
                new ObjectParameter("SGSTAmount", sGSTAmount) :
                new ObjectParameter("SGSTAmount", typeof(decimal));
    
            var cGSTAmountParameter = cGSTAmount.HasValue ?
                new ObjectParameter("CGSTAmount", cGSTAmount) :
                new ObjectParameter("CGSTAmount", typeof(decimal));
    
            var iGSTAmountParameter = iGSTAmount.HasValue ?
                new ObjectParameter("IGSTAmount", iGSTAmount) :
                new ObjectParameter("IGSTAmount", typeof(decimal));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var purchaseReturnIDParameter = purchaseReturnID.HasValue ?
                new ObjectParameter("PurchaseReturnID", purchaseReturnID) :
                new ObjectParameter("PurchaseReturnID", typeof(int));
    
            var purchaseReturnTransIDParameter = purchaseReturnTransID.HasValue ?
                new ObjectParameter("PurchaseReturnTransID", purchaseReturnTransID) :
                new ObjectParameter("PurchaseReturnTransID", typeof(int));
    
            var purchaseReturnOrderIDParameter = purchaseReturnOrderID.HasValue ?
                new ObjectParameter("PurchaseReturnOrderID", purchaseReturnOrderID) :
                new ObjectParameter("PurchaseReturnOrderID", typeof(int));
    
            var purchaseReturnOrderTransIDParameter = purchaseReturnOrderTransID.HasValue ?
                new ObjectParameter("PurchaseReturnOrderTransID", purchaseReturnOrderTransID) :
                new ObjectParameter("PurchaseReturnOrderTransID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateIRGTrans", iRGIDParameter, invoiceIDParameter, itemIDParameter, qtyParameter, rateParameter, sGSTPercentParameter, cGSTPercentParameter, iGSTPercentParameter, sGSTAmountParameter, cGSTAmountParameter, iGSTAmountParameter, amountParameter, remarksParameter, finYearParameter, locationIDParameter, applicationIDParameter, wareHouseIDParameter, batchTypeIDParameter, unitIDParameter, purchaseReturnIDParameter, purchaseReturnTransIDParameter, purchaseReturnOrderIDParameter, purchaseReturnOrderTransIDParameter);
        }
    
        public virtual int SpCreateMilkPurchase(string transNo, Nullable<System.DateTime> date, Nullable<decimal> totalAmount, Nullable<decimal> totalQty, Nullable<int> createdUserID, Nullable<bool> isDraft, Nullable<bool> isDirectInvoice, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, string pRIDS, ObjectParameter purchaseOrderID)
        {
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var totalQtyParameter = totalQty.HasValue ?
                new ObjectParameter("TotalQty", totalQty) :
                new ObjectParameter("TotalQty", typeof(decimal));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var isDirectInvoiceParameter = isDirectInvoice.HasValue ?
                new ObjectParameter("IsDirectInvoice", isDirectInvoice) :
                new ObjectParameter("IsDirectInvoice", typeof(bool));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var pRIDSParameter = pRIDS != null ?
                new ObjectParameter("PRIDS", pRIDS) :
                new ObjectParameter("PRIDS", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateMilkPurchase", transNoParameter, dateParameter, totalAmountParameter, totalQtyParameter, createdUserIDParameter, isDraftParameter, isDirectInvoiceParameter, finYearParameter, locationIDParameter, applicationIDParameter, pRIDSParameter, purchaseOrderID);
        }
    
        public virtual int SpCreateMilkPurchaseInvoice(Nullable<int> milkPurchaseID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var milkPurchaseIDParameter = milkPurchaseID.HasValue ?
                new ObjectParameter("MilkPurchaseID", milkPurchaseID) :
                new ObjectParameter("MilkPurchaseID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateMilkPurchaseInvoice", milkPurchaseIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateMilkPurchaseTrans(Nullable<int> milkPurchaseID, Nullable<int> milkSupplierID, string slipNo, Nullable<decimal> quantity, Nullable<int> fatRangeID, Nullable<decimal> rate, Nullable<decimal> amount, string remarks, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var milkPurchaseIDParameter = milkPurchaseID.HasValue ?
                new ObjectParameter("MilkPurchaseID", milkPurchaseID) :
                new ObjectParameter("MilkPurchaseID", typeof(int));
    
            var milkSupplierIDParameter = milkSupplierID.HasValue ?
                new ObjectParameter("MilkSupplierID", milkSupplierID) :
                new ObjectParameter("MilkSupplierID", typeof(int));
    
            var slipNoParameter = slipNo != null ?
                new ObjectParameter("SlipNo", slipNo) :
                new ObjectParameter("SlipNo", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var fatRangeIDParameter = fatRangeID.HasValue ?
                new ObjectParameter("FatRangeID", fatRangeID) :
                new ObjectParameter("FatRangeID", typeof(int));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateMilkPurchaseTrans", milkPurchaseIDParameter, milkSupplierIDParameter, slipNoParameter, quantityParameter, fatRangeIDParameter, rateParameter, amountParameter, remarksParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateMilkSupplier(string name, string address, string contactNo, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter isSuccess)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateMilkSupplier", nameParameter, addressParameter, contactNoParameter, locationIDParameter, applicationIDParameter, isSuccess);
        }
    
        public virtual int SpCreatePurchaseInvoice(string purchaseNo, Nullable<System.DateTime> purchaseDate, Nullable<int> supplierID, string localSupplierName, string invoiceNo, Nullable<System.DateTime> invoiceDate, Nullable<decimal> grossAmount, Nullable<decimal> invoiceTotal, Nullable<decimal> totalDifference, Nullable<decimal> sGSTAmount, Nullable<decimal> cGSTAmount, Nullable<decimal> iGSTAmount, Nullable<decimal> discount, Nullable<decimal> freightAmount, Nullable<decimal> packingCharges, Nullable<decimal> otherCharges, Nullable<decimal> taxOnFreight, Nullable<decimal> taxOnPackingCharges, Nullable<decimal> taxOnOtherCharge, Nullable<decimal> tDSOnFreightPercentage, Nullable<decimal> lessTDS, Nullable<decimal> otherDeductions, Nullable<decimal> amountPayable, Nullable<decimal> netAmount, Nullable<bool> isDraft, Nullable<bool> isCancelled, Nullable<System.DateTime> cancelledDate, Nullable<int> createdUserID, Nullable<System.DateTime> createdDate, string status, Nullable<int> tDSID, Nullable<int> paymentModeID, Nullable<decimal> turnOverDiscount, Nullable<decimal> additionalDiscount, Nullable<decimal> taxableAmt, Nullable<decimal> tradeDiscount, Nullable<decimal> cashDiscount, Nullable<int> salesInvoiceID, Nullable<bool> cashDiscountEnabled, Nullable<int> selectedQuotationID, string remarks, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter purchaseInvoiceID)
        {
            var purchaseNoParameter = purchaseNo != null ?
                new ObjectParameter("PurchaseNo", purchaseNo) :
                new ObjectParameter("PurchaseNo", typeof(string));
    
            var purchaseDateParameter = purchaseDate.HasValue ?
                new ObjectParameter("PurchaseDate", purchaseDate) :
                new ObjectParameter("PurchaseDate", typeof(System.DateTime));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var localSupplierNameParameter = localSupplierName != null ?
                new ObjectParameter("LocalSupplierName", localSupplierName) :
                new ObjectParameter("LocalSupplierName", typeof(string));
    
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(string));
    
            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(System.DateTime));
    
            var grossAmountParameter = grossAmount.HasValue ?
                new ObjectParameter("GrossAmount", grossAmount) :
                new ObjectParameter("GrossAmount", typeof(decimal));
    
            var invoiceTotalParameter = invoiceTotal.HasValue ?
                new ObjectParameter("InvoiceTotal", invoiceTotal) :
                new ObjectParameter("InvoiceTotal", typeof(decimal));
    
            var totalDifferenceParameter = totalDifference.HasValue ?
                new ObjectParameter("TotalDifference", totalDifference) :
                new ObjectParameter("TotalDifference", typeof(decimal));
    
            var sGSTAmountParameter = sGSTAmount.HasValue ?
                new ObjectParameter("SGSTAmount", sGSTAmount) :
                new ObjectParameter("SGSTAmount", typeof(decimal));
    
            var cGSTAmountParameter = cGSTAmount.HasValue ?
                new ObjectParameter("CGSTAmount", cGSTAmount) :
                new ObjectParameter("CGSTAmount", typeof(decimal));
    
            var iGSTAmountParameter = iGSTAmount.HasValue ?
                new ObjectParameter("IGSTAmount", iGSTAmount) :
                new ObjectParameter("IGSTAmount", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var freightAmountParameter = freightAmount.HasValue ?
                new ObjectParameter("FreightAmount", freightAmount) :
                new ObjectParameter("FreightAmount", typeof(decimal));
    
            var packingChargesParameter = packingCharges.HasValue ?
                new ObjectParameter("PackingCharges", packingCharges) :
                new ObjectParameter("PackingCharges", typeof(decimal));
    
            var otherChargesParameter = otherCharges.HasValue ?
                new ObjectParameter("OtherCharges", otherCharges) :
                new ObjectParameter("OtherCharges", typeof(decimal));
    
            var taxOnFreightParameter = taxOnFreight.HasValue ?
                new ObjectParameter("TaxOnFreight", taxOnFreight) :
                new ObjectParameter("TaxOnFreight", typeof(decimal));
    
            var taxOnPackingChargesParameter = taxOnPackingCharges.HasValue ?
                new ObjectParameter("TaxOnPackingCharges", taxOnPackingCharges) :
                new ObjectParameter("TaxOnPackingCharges", typeof(decimal));
    
            var taxOnOtherChargeParameter = taxOnOtherCharge.HasValue ?
                new ObjectParameter("TaxOnOtherCharge", taxOnOtherCharge) :
                new ObjectParameter("TaxOnOtherCharge", typeof(decimal));
    
            var tDSOnFreightPercentageParameter = tDSOnFreightPercentage.HasValue ?
                new ObjectParameter("TDSOnFreightPercentage", tDSOnFreightPercentage) :
                new ObjectParameter("TDSOnFreightPercentage", typeof(decimal));
    
            var lessTDSParameter = lessTDS.HasValue ?
                new ObjectParameter("LessTDS", lessTDS) :
                new ObjectParameter("LessTDS", typeof(decimal));
    
            var otherDeductionsParameter = otherDeductions.HasValue ?
                new ObjectParameter("OtherDeductions", otherDeductions) :
                new ObjectParameter("OtherDeductions", typeof(decimal));
    
            var amountPayableParameter = amountPayable.HasValue ?
                new ObjectParameter("AmountPayable", amountPayable) :
                new ObjectParameter("AmountPayable", typeof(decimal));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var isCancelledParameter = isCancelled.HasValue ?
                new ObjectParameter("IsCancelled", isCancelled) :
                new ObjectParameter("IsCancelled", typeof(bool));
    
            var cancelledDateParameter = cancelledDate.HasValue ?
                new ObjectParameter("CancelledDate", cancelledDate) :
                new ObjectParameter("CancelledDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var tDSIDParameter = tDSID.HasValue ?
                new ObjectParameter("TDSID", tDSID) :
                new ObjectParameter("TDSID", typeof(int));
    
            var paymentModeIDParameter = paymentModeID.HasValue ?
                new ObjectParameter("PaymentModeID", paymentModeID) :
                new ObjectParameter("PaymentModeID", typeof(int));
    
            var turnOverDiscountParameter = turnOverDiscount.HasValue ?
                new ObjectParameter("TurnOverDiscount", turnOverDiscount) :
                new ObjectParameter("TurnOverDiscount", typeof(decimal));
    
            var additionalDiscountParameter = additionalDiscount.HasValue ?
                new ObjectParameter("AdditionalDiscount", additionalDiscount) :
                new ObjectParameter("AdditionalDiscount", typeof(decimal));
    
            var taxableAmtParameter = taxableAmt.HasValue ?
                new ObjectParameter("TaxableAmt", taxableAmt) :
                new ObjectParameter("TaxableAmt", typeof(decimal));
    
            var tradeDiscountParameter = tradeDiscount.HasValue ?
                new ObjectParameter("TradeDiscount", tradeDiscount) :
                new ObjectParameter("TradeDiscount", typeof(decimal));
    
            var cashDiscountParameter = cashDiscount.HasValue ?
                new ObjectParameter("CashDiscount", cashDiscount) :
                new ObjectParameter("CashDiscount", typeof(decimal));
    
            var salesInvoiceIDParameter = salesInvoiceID.HasValue ?
                new ObjectParameter("SalesInvoiceID", salesInvoiceID) :
                new ObjectParameter("SalesInvoiceID", typeof(int));
    
            var cashDiscountEnabledParameter = cashDiscountEnabled.HasValue ?
                new ObjectParameter("CashDiscountEnabled", cashDiscountEnabled) :
                new ObjectParameter("CashDiscountEnabled", typeof(bool));
    
            var selectedQuotationIDParameter = selectedQuotationID.HasValue ?
                new ObjectParameter("SelectedQuotationID", selectedQuotationID) :
                new ObjectParameter("SelectedQuotationID", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePurchaseInvoice", purchaseNoParameter, purchaseDateParameter, supplierIDParameter, localSupplierNameParameter, invoiceNoParameter, invoiceDateParameter, grossAmountParameter, invoiceTotalParameter, totalDifferenceParameter, sGSTAmountParameter, cGSTAmountParameter, iGSTAmountParameter, discountParameter, freightAmountParameter, packingChargesParameter, otherChargesParameter, taxOnFreightParameter, taxOnPackingChargesParameter, taxOnOtherChargeParameter, tDSOnFreightPercentageParameter, lessTDSParameter, otherDeductionsParameter, amountPayableParameter, netAmountParameter, isDraftParameter, isCancelledParameter, cancelledDateParameter, createdUserIDParameter, createdDateParameter, statusParameter, tDSIDParameter, paymentModeIDParameter, turnOverDiscountParameter, additionalDiscountParameter, taxableAmtParameter, tradeDiscountParameter, cashDiscountParameter, salesInvoiceIDParameter, cashDiscountEnabledParameter, selectedQuotationIDParameter, remarksParameter, finYearParameter, locationIDParameter, applicationIDParameter, purchaseInvoiceID);
        }
    
        public virtual int SpCreatePurchaseInvoiceForLocalPurchase(string purchaseNo, Nullable<int> purchaseOrderID, string supplierName, Nullable<decimal> grossAmount, string invoiceNo, Nullable<System.DateTime> invoiceDate, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter purchaseInvoiceID)
        {
            var purchaseNoParameter = purchaseNo != null ?
                new ObjectParameter("PurchaseNo", purchaseNo) :
                new ObjectParameter("PurchaseNo", typeof(string));
    
            var purchaseOrderIDParameter = purchaseOrderID.HasValue ?
                new ObjectParameter("PurchaseOrderID", purchaseOrderID) :
                new ObjectParameter("PurchaseOrderID", typeof(int));
    
            var supplierNameParameter = supplierName != null ?
                new ObjectParameter("SupplierName", supplierName) :
                new ObjectParameter("SupplierName", typeof(string));
    
            var grossAmountParameter = grossAmount.HasValue ?
                new ObjectParameter("GrossAmount", grossAmount) :
                new ObjectParameter("GrossAmount", typeof(decimal));
    
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(string));
    
            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePurchaseInvoiceForLocalPurchase", purchaseNoParameter, purchaseOrderIDParameter, supplierNameParameter, grossAmountParameter, invoiceNoParameter, invoiceDateParameter, finYearParameter, locationIDParameter, applicationIDParameter, purchaseInvoiceID);
        }
    
        public virtual int SpCreatePurchaseInvoiceForService(string purchaseNo, Nullable<System.DateTime> purchaseDate, Nullable<int> supplierID, string localSupplierName, string invoiceNo, Nullable<System.DateTime> invoiceDate, Nullable<decimal> sGSTAmount, Nullable<decimal> cGSTAmount, Nullable<decimal> iGSTAmount, Nullable<decimal> discount, Nullable<decimal> invoiceAmount, Nullable<decimal> differenceAmount, Nullable<decimal> acceptedAmount, Nullable<decimal> tDS, Nullable<decimal> tDSOnAdvance, Nullable<decimal> netTDS, Nullable<decimal> netAmountPayable, Nullable<decimal> otherDeductions, Nullable<bool> isDraft, Nullable<bool> isCancelled, Nullable<System.DateTime> cancelledDate, Nullable<int> createdUserID, string status, Nullable<int> tDSID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter purchaseInvoiceID)
        {
            var purchaseNoParameter = purchaseNo != null ?
                new ObjectParameter("PurchaseNo", purchaseNo) :
                new ObjectParameter("PurchaseNo", typeof(string));
    
            var purchaseDateParameter = purchaseDate.HasValue ?
                new ObjectParameter("PurchaseDate", purchaseDate) :
                new ObjectParameter("PurchaseDate", typeof(System.DateTime));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var localSupplierNameParameter = localSupplierName != null ?
                new ObjectParameter("LocalSupplierName", localSupplierName) :
                new ObjectParameter("LocalSupplierName", typeof(string));
    
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(string));
    
            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(System.DateTime));
    
            var sGSTAmountParameter = sGSTAmount.HasValue ?
                new ObjectParameter("SGSTAmount", sGSTAmount) :
                new ObjectParameter("SGSTAmount", typeof(decimal));
    
            var cGSTAmountParameter = cGSTAmount.HasValue ?
                new ObjectParameter("CGSTAmount", cGSTAmount) :
                new ObjectParameter("CGSTAmount", typeof(decimal));
    
            var iGSTAmountParameter = iGSTAmount.HasValue ?
                new ObjectParameter("IGSTAmount", iGSTAmount) :
                new ObjectParameter("IGSTAmount", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var invoiceAmountParameter = invoiceAmount.HasValue ?
                new ObjectParameter("InvoiceAmount", invoiceAmount) :
                new ObjectParameter("InvoiceAmount", typeof(decimal));
    
            var differenceAmountParameter = differenceAmount.HasValue ?
                new ObjectParameter("DifferenceAmount", differenceAmount) :
                new ObjectParameter("DifferenceAmount", typeof(decimal));
    
            var acceptedAmountParameter = acceptedAmount.HasValue ?
                new ObjectParameter("AcceptedAmount", acceptedAmount) :
                new ObjectParameter("AcceptedAmount", typeof(decimal));
    
            var tDSParameter = tDS.HasValue ?
                new ObjectParameter("TDS", tDS) :
                new ObjectParameter("TDS", typeof(decimal));
    
            var tDSOnAdvanceParameter = tDSOnAdvance.HasValue ?
                new ObjectParameter("TDSOnAdvance", tDSOnAdvance) :
                new ObjectParameter("TDSOnAdvance", typeof(decimal));
    
            var netTDSParameter = netTDS.HasValue ?
                new ObjectParameter("NetTDS", netTDS) :
                new ObjectParameter("NetTDS", typeof(decimal));
    
            var netAmountPayableParameter = netAmountPayable.HasValue ?
                new ObjectParameter("NetAmountPayable", netAmountPayable) :
                new ObjectParameter("NetAmountPayable", typeof(decimal));
    
            var otherDeductionsParameter = otherDeductions.HasValue ?
                new ObjectParameter("OtherDeductions", otherDeductions) :
                new ObjectParameter("OtherDeductions", typeof(decimal));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var isCancelledParameter = isCancelled.HasValue ?
                new ObjectParameter("IsCancelled", isCancelled) :
                new ObjectParameter("IsCancelled", typeof(bool));
    
            var cancelledDateParameter = cancelledDate.HasValue ?
                new ObjectParameter("CancelledDate", cancelledDate) :
                new ObjectParameter("CancelledDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var tDSIDParameter = tDSID.HasValue ?
                new ObjectParameter("TDSID", tDSID) :
                new ObjectParameter("TDSID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePurchaseInvoiceForService", purchaseNoParameter, purchaseDateParameter, supplierIDParameter, localSupplierNameParameter, invoiceNoParameter, invoiceDateParameter, sGSTAmountParameter, cGSTAmountParameter, iGSTAmountParameter, discountParameter, invoiceAmountParameter, differenceAmountParameter, acceptedAmountParameter, tDSParameter, tDSOnAdvanceParameter, netTDSParameter, netAmountPayableParameter, otherDeductionsParameter, isDraftParameter, isCancelledParameter, cancelledDateParameter, createdUserIDParameter, statusParameter, tDSIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, purchaseInvoiceID);
        }
    
        public virtual int SpCreatePurchaseInvoiceOtherChargesDetails(Nullable<int> purchaseInvoiceID, Nullable<int> purchaseOrderID, string particular, Nullable<decimal> pOValue, Nullable<decimal> invoiceValue, Nullable<decimal> differenceValue, string remarks, Nullable<System.DateTime> createdDate)
        {
            var purchaseInvoiceIDParameter = purchaseInvoiceID.HasValue ?
                new ObjectParameter("PurchaseInvoiceID", purchaseInvoiceID) :
                new ObjectParameter("PurchaseInvoiceID", typeof(int));
    
            var purchaseOrderIDParameter = purchaseOrderID.HasValue ?
                new ObjectParameter("PurchaseOrderID", purchaseOrderID) :
                new ObjectParameter("PurchaseOrderID", typeof(int));
    
            var particularParameter = particular != null ?
                new ObjectParameter("Particular", particular) :
                new ObjectParameter("Particular", typeof(string));
    
            var pOValueParameter = pOValue.HasValue ?
                new ObjectParameter("POValue", pOValue) :
                new ObjectParameter("POValue", typeof(decimal));
    
            var invoiceValueParameter = invoiceValue.HasValue ?
                new ObjectParameter("InvoiceValue", invoiceValue) :
                new ObjectParameter("InvoiceValue", typeof(decimal));
    
            var differenceValueParameter = differenceValue.HasValue ?
                new ObjectParameter("DifferenceValue", differenceValue) :
                new ObjectParameter("DifferenceValue", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePurchaseInvoiceOtherChargesDetails", purchaseInvoiceIDParameter, purchaseOrderIDParameter, particularParameter, pOValueParameter, invoiceValueParameter, differenceValueParameter, remarksParameter, createdDateParameter);
        }
    
        public virtual int SpCreatePurchaseInvoiceTaxDetails(Nullable<int> purchaseInvoiceID, string particular, Nullable<decimal> taxPercentage, Nullable<decimal> pOValue, Nullable<decimal> invoiceValue, Nullable<decimal> differenceValue, string remarks, Nullable<System.DateTime> createdDate)
        {
            var purchaseInvoiceIDParameter = purchaseInvoiceID.HasValue ?
                new ObjectParameter("PurchaseInvoiceID", purchaseInvoiceID) :
                new ObjectParameter("PurchaseInvoiceID", typeof(int));
    
            var particularParameter = particular != null ?
                new ObjectParameter("Particular", particular) :
                new ObjectParameter("Particular", typeof(string));
    
            var taxPercentageParameter = taxPercentage.HasValue ?
                new ObjectParameter("TaxPercentage", taxPercentage) :
                new ObjectParameter("TaxPercentage", typeof(decimal));
    
            var pOValueParameter = pOValue.HasValue ?
                new ObjectParameter("POValue", pOValue) :
                new ObjectParameter("POValue", typeof(decimal));
    
            var invoiceValueParameter = invoiceValue.HasValue ?
                new ObjectParameter("InvoiceValue", invoiceValue) :
                new ObjectParameter("InvoiceValue", typeof(decimal));
    
            var differenceValueParameter = differenceValue.HasValue ?
                new ObjectParameter("DifferenceValue", differenceValue) :
                new ObjectParameter("DifferenceValue", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePurchaseInvoiceTaxDetails", purchaseInvoiceIDParameter, particularParameter, taxPercentageParameter, pOValueParameter, invoiceValueParameter, differenceValueParameter, remarksParameter, createdDateParameter);
        }
    
        public virtual int SpCreatePurchaseInvoiceTaxDetailsForService(Nullable<int> purchaseInvoiceID, string particular, Nullable<decimal> taxPercentage, Nullable<decimal> pOValue, Nullable<decimal> invoiceValue, Nullable<decimal> differenceValue, string remarks, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var purchaseInvoiceIDParameter = purchaseInvoiceID.HasValue ?
                new ObjectParameter("PurchaseInvoiceID", purchaseInvoiceID) :
                new ObjectParameter("PurchaseInvoiceID", typeof(int));
    
            var particularParameter = particular != null ?
                new ObjectParameter("Particular", particular) :
                new ObjectParameter("Particular", typeof(string));
    
            var taxPercentageParameter = taxPercentage.HasValue ?
                new ObjectParameter("TaxPercentage", taxPercentage) :
                new ObjectParameter("TaxPercentage", typeof(decimal));
    
            var pOValueParameter = pOValue.HasValue ?
                new ObjectParameter("POValue", pOValue) :
                new ObjectParameter("POValue", typeof(decimal));
    
            var invoiceValueParameter = invoiceValue.HasValue ?
                new ObjectParameter("InvoiceValue", invoiceValue) :
                new ObjectParameter("InvoiceValue", typeof(decimal));
    
            var differenceValueParameter = differenceValue.HasValue ?
                new ObjectParameter("DifferenceValue", differenceValue) :
                new ObjectParameter("DifferenceValue", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePurchaseInvoiceTaxDetailsForService", purchaseInvoiceIDParameter, particularParameter, taxPercentageParameter, pOValueParameter, invoiceValueParameter, differenceValueParameter, remarksParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreatePurchaseInvoiceTrans(Nullable<int> purchaseInvoiceID, Nullable<int> gRNID, Nullable<int> gRNTransID, Nullable<int> itemID, Nullable<decimal> invoiceQty, Nullable<decimal> invoiceRate, Nullable<decimal> invoiceValue, Nullable<decimal> acceptedQty, Nullable<decimal> approvedQty, Nullable<decimal> pORate, Nullable<decimal> difference, string remarks, Nullable<decimal> unMatchedQty, Nullable<decimal> iGSTPercent, Nullable<decimal> cGSTPercent, Nullable<decimal> sGSTPercent, Nullable<decimal> invoiceGSTPercent, Nullable<int> milkPurchaseID, Nullable<int> unitID, Nullable<int> batchID, Nullable<decimal> basicPrice, Nullable<decimal> discountPercentage, Nullable<decimal> discountAmount, Nullable<decimal> turnOverDiscount, Nullable<decimal> additionalDiscount, Nullable<decimal> taxableAmount, Nullable<decimal> cashDiscount, Nullable<int> salesInvoiceID, Nullable<int> salesInvoiceTransID, Nullable<decimal> grossAmount, Nullable<decimal> netAmount, Nullable<decimal> sGSTAmount, Nullable<decimal> iGSTAmount, Nullable<decimal> cGSTAmount, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter retValue)
        {
            var purchaseInvoiceIDParameter = purchaseInvoiceID.HasValue ?
                new ObjectParameter("PurchaseInvoiceID", purchaseInvoiceID) :
                new ObjectParameter("PurchaseInvoiceID", typeof(int));
    
            var gRNIDParameter = gRNID.HasValue ?
                new ObjectParameter("GRNID", gRNID) :
                new ObjectParameter("GRNID", typeof(int));
    
            var gRNTransIDParameter = gRNTransID.HasValue ?
                new ObjectParameter("GRNTransID", gRNTransID) :
                new ObjectParameter("GRNTransID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var invoiceQtyParameter = invoiceQty.HasValue ?
                new ObjectParameter("InvoiceQty", invoiceQty) :
                new ObjectParameter("InvoiceQty", typeof(decimal));
    
            var invoiceRateParameter = invoiceRate.HasValue ?
                new ObjectParameter("InvoiceRate", invoiceRate) :
                new ObjectParameter("InvoiceRate", typeof(decimal));
    
            var invoiceValueParameter = invoiceValue.HasValue ?
                new ObjectParameter("InvoiceValue", invoiceValue) :
                new ObjectParameter("InvoiceValue", typeof(decimal));
    
            var acceptedQtyParameter = acceptedQty.HasValue ?
                new ObjectParameter("AcceptedQty", acceptedQty) :
                new ObjectParameter("AcceptedQty", typeof(decimal));
    
            var approvedQtyParameter = approvedQty.HasValue ?
                new ObjectParameter("ApprovedQty", approvedQty) :
                new ObjectParameter("ApprovedQty", typeof(decimal));
    
            var pORateParameter = pORate.HasValue ?
                new ObjectParameter("PORate", pORate) :
                new ObjectParameter("PORate", typeof(decimal));
    
            var differenceParameter = difference.HasValue ?
                new ObjectParameter("Difference", difference) :
                new ObjectParameter("Difference", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var unMatchedQtyParameter = unMatchedQty.HasValue ?
                new ObjectParameter("UnMatchedQty", unMatchedQty) :
                new ObjectParameter("UnMatchedQty", typeof(decimal));
    
            var iGSTPercentParameter = iGSTPercent.HasValue ?
                new ObjectParameter("IGSTPercent", iGSTPercent) :
                new ObjectParameter("IGSTPercent", typeof(decimal));
    
            var cGSTPercentParameter = cGSTPercent.HasValue ?
                new ObjectParameter("CGSTPercent", cGSTPercent) :
                new ObjectParameter("CGSTPercent", typeof(decimal));
    
            var sGSTPercentParameter = sGSTPercent.HasValue ?
                new ObjectParameter("SGSTPercent", sGSTPercent) :
                new ObjectParameter("SGSTPercent", typeof(decimal));
    
            var invoiceGSTPercentParameter = invoiceGSTPercent.HasValue ?
                new ObjectParameter("InvoiceGSTPercent", invoiceGSTPercent) :
                new ObjectParameter("InvoiceGSTPercent", typeof(decimal));
    
            var milkPurchaseIDParameter = milkPurchaseID.HasValue ?
                new ObjectParameter("MilkPurchaseID", milkPurchaseID) :
                new ObjectParameter("MilkPurchaseID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var basicPriceParameter = basicPrice.HasValue ?
                new ObjectParameter("BasicPrice", basicPrice) :
                new ObjectParameter("BasicPrice", typeof(decimal));
    
            var discountPercentageParameter = discountPercentage.HasValue ?
                new ObjectParameter("DiscountPercentage", discountPercentage) :
                new ObjectParameter("DiscountPercentage", typeof(decimal));
    
            var discountAmountParameter = discountAmount.HasValue ?
                new ObjectParameter("DiscountAmount", discountAmount) :
                new ObjectParameter("DiscountAmount", typeof(decimal));
    
            var turnOverDiscountParameter = turnOverDiscount.HasValue ?
                new ObjectParameter("TurnOverDiscount", turnOverDiscount) :
                new ObjectParameter("TurnOverDiscount", typeof(decimal));
    
            var additionalDiscountParameter = additionalDiscount.HasValue ?
                new ObjectParameter("AdditionalDiscount", additionalDiscount) :
                new ObjectParameter("AdditionalDiscount", typeof(decimal));
    
            var taxableAmountParameter = taxableAmount.HasValue ?
                new ObjectParameter("TaxableAmount", taxableAmount) :
                new ObjectParameter("TaxableAmount", typeof(decimal));
    
            var cashDiscountParameter = cashDiscount.HasValue ?
                new ObjectParameter("CashDiscount", cashDiscount) :
                new ObjectParameter("CashDiscount", typeof(decimal));
    
            var salesInvoiceIDParameter = salesInvoiceID.HasValue ?
                new ObjectParameter("SalesInvoiceID", salesInvoiceID) :
                new ObjectParameter("SalesInvoiceID", typeof(int));
    
            var salesInvoiceTransIDParameter = salesInvoiceTransID.HasValue ?
                new ObjectParameter("SalesInvoiceTransID", salesInvoiceTransID) :
                new ObjectParameter("SalesInvoiceTransID", typeof(int));
    
            var grossAmountParameter = grossAmount.HasValue ?
                new ObjectParameter("GrossAmount", grossAmount) :
                new ObjectParameter("GrossAmount", typeof(decimal));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var sGSTAmountParameter = sGSTAmount.HasValue ?
                new ObjectParameter("SGSTAmount", sGSTAmount) :
                new ObjectParameter("SGSTAmount", typeof(decimal));
    
            var iGSTAmountParameter = iGSTAmount.HasValue ?
                new ObjectParameter("IGSTAmount", iGSTAmount) :
                new ObjectParameter("IGSTAmount", typeof(decimal));
    
            var cGSTAmountParameter = cGSTAmount.HasValue ?
                new ObjectParameter("CGSTAmount", cGSTAmount) :
                new ObjectParameter("CGSTAmount", typeof(decimal));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePurchaseInvoiceTrans", purchaseInvoiceIDParameter, gRNIDParameter, gRNTransIDParameter, itemIDParameter, invoiceQtyParameter, invoiceRateParameter, invoiceValueParameter, acceptedQtyParameter, approvedQtyParameter, pORateParameter, differenceParameter, remarksParameter, unMatchedQtyParameter, iGSTPercentParameter, cGSTPercentParameter, sGSTPercentParameter, invoiceGSTPercentParameter, milkPurchaseIDParameter, unitIDParameter, batchIDParameter, basicPriceParameter, discountPercentageParameter, discountAmountParameter, turnOverDiscountParameter, additionalDiscountParameter, taxableAmountParameter, cashDiscountParameter, salesInvoiceIDParameter, salesInvoiceTransIDParameter, grossAmountParameter, netAmountParameter, sGSTAmountParameter, iGSTAmountParameter, cGSTAmountParameter, finYearParameter, locationIDParameter, applicationIDParameter, retValue);
        }
    
        public virtual int SpCreatePurchaseInvoiceTransDetails(Nullable<int> purchaseInvoiceID, Nullable<int> gRNID, Nullable<int> gRNTransID, Nullable<int> itemID, Nullable<decimal> invoiceQty, Nullable<decimal> invoiceRate, Nullable<decimal> invoiceValue, Nullable<decimal> acceptedQty, Nullable<decimal> approvedQty, Nullable<decimal> pORate, Nullable<decimal> difference, string remarks, Nullable<decimal> unMatchedQty, Nullable<decimal> iGSTPercent, Nullable<decimal> cGSTPercent, Nullable<decimal> sGSTPercent, Nullable<decimal> invoiceGSTPercent, Nullable<int> milkPurchaseID, Nullable<int> unitID, Nullable<int> batchID, Nullable<decimal> basicPrice, Nullable<decimal> discountPercentage, Nullable<decimal> discountAmount, Nullable<decimal> turnOverDiscount, Nullable<decimal> additionalDiscount, Nullable<decimal> taxableAmount, Nullable<decimal> cashDiscount, Nullable<int> salesInvoiceID, Nullable<int> salesInvoiceTransID, Nullable<decimal> grossAmount, Nullable<decimal> netAmount, Nullable<decimal> sGSTAmount, Nullable<decimal> iGSTAmount, Nullable<decimal> cGSTAmount, Nullable<decimal> offerQty, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter retValue)
        {
            var purchaseInvoiceIDParameter = purchaseInvoiceID.HasValue ?
                new ObjectParameter("PurchaseInvoiceID", purchaseInvoiceID) :
                new ObjectParameter("PurchaseInvoiceID", typeof(int));
    
            var gRNIDParameter = gRNID.HasValue ?
                new ObjectParameter("GRNID", gRNID) :
                new ObjectParameter("GRNID", typeof(int));
    
            var gRNTransIDParameter = gRNTransID.HasValue ?
                new ObjectParameter("GRNTransID", gRNTransID) :
                new ObjectParameter("GRNTransID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var invoiceQtyParameter = invoiceQty.HasValue ?
                new ObjectParameter("InvoiceQty", invoiceQty) :
                new ObjectParameter("InvoiceQty", typeof(decimal));
    
            var invoiceRateParameter = invoiceRate.HasValue ?
                new ObjectParameter("InvoiceRate", invoiceRate) :
                new ObjectParameter("InvoiceRate", typeof(decimal));
    
            var invoiceValueParameter = invoiceValue.HasValue ?
                new ObjectParameter("InvoiceValue", invoiceValue) :
                new ObjectParameter("InvoiceValue", typeof(decimal));
    
            var acceptedQtyParameter = acceptedQty.HasValue ?
                new ObjectParameter("AcceptedQty", acceptedQty) :
                new ObjectParameter("AcceptedQty", typeof(decimal));
    
            var approvedQtyParameter = approvedQty.HasValue ?
                new ObjectParameter("ApprovedQty", approvedQty) :
                new ObjectParameter("ApprovedQty", typeof(decimal));
    
            var pORateParameter = pORate.HasValue ?
                new ObjectParameter("PORate", pORate) :
                new ObjectParameter("PORate", typeof(decimal));
    
            var differenceParameter = difference.HasValue ?
                new ObjectParameter("Difference", difference) :
                new ObjectParameter("Difference", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var unMatchedQtyParameter = unMatchedQty.HasValue ?
                new ObjectParameter("UnMatchedQty", unMatchedQty) :
                new ObjectParameter("UnMatchedQty", typeof(decimal));
    
            var iGSTPercentParameter = iGSTPercent.HasValue ?
                new ObjectParameter("IGSTPercent", iGSTPercent) :
                new ObjectParameter("IGSTPercent", typeof(decimal));
    
            var cGSTPercentParameter = cGSTPercent.HasValue ?
                new ObjectParameter("CGSTPercent", cGSTPercent) :
                new ObjectParameter("CGSTPercent", typeof(decimal));
    
            var sGSTPercentParameter = sGSTPercent.HasValue ?
                new ObjectParameter("SGSTPercent", sGSTPercent) :
                new ObjectParameter("SGSTPercent", typeof(decimal));
    
            var invoiceGSTPercentParameter = invoiceGSTPercent.HasValue ?
                new ObjectParameter("InvoiceGSTPercent", invoiceGSTPercent) :
                new ObjectParameter("InvoiceGSTPercent", typeof(decimal));
    
            var milkPurchaseIDParameter = milkPurchaseID.HasValue ?
                new ObjectParameter("MilkPurchaseID", milkPurchaseID) :
                new ObjectParameter("MilkPurchaseID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var basicPriceParameter = basicPrice.HasValue ?
                new ObjectParameter("BasicPrice", basicPrice) :
                new ObjectParameter("BasicPrice", typeof(decimal));
    
            var discountPercentageParameter = discountPercentage.HasValue ?
                new ObjectParameter("DiscountPercentage", discountPercentage) :
                new ObjectParameter("DiscountPercentage", typeof(decimal));
    
            var discountAmountParameter = discountAmount.HasValue ?
                new ObjectParameter("DiscountAmount", discountAmount) :
                new ObjectParameter("DiscountAmount", typeof(decimal));
    
            var turnOverDiscountParameter = turnOverDiscount.HasValue ?
                new ObjectParameter("TurnOverDiscount", turnOverDiscount) :
                new ObjectParameter("TurnOverDiscount", typeof(decimal));
    
            var additionalDiscountParameter = additionalDiscount.HasValue ?
                new ObjectParameter("AdditionalDiscount", additionalDiscount) :
                new ObjectParameter("AdditionalDiscount", typeof(decimal));
    
            var taxableAmountParameter = taxableAmount.HasValue ?
                new ObjectParameter("TaxableAmount", taxableAmount) :
                new ObjectParameter("TaxableAmount", typeof(decimal));
    
            var cashDiscountParameter = cashDiscount.HasValue ?
                new ObjectParameter("CashDiscount", cashDiscount) :
                new ObjectParameter("CashDiscount", typeof(decimal));
    
            var salesInvoiceIDParameter = salesInvoiceID.HasValue ?
                new ObjectParameter("SalesInvoiceID", salesInvoiceID) :
                new ObjectParameter("SalesInvoiceID", typeof(int));
    
            var salesInvoiceTransIDParameter = salesInvoiceTransID.HasValue ?
                new ObjectParameter("SalesInvoiceTransID", salesInvoiceTransID) :
                new ObjectParameter("SalesInvoiceTransID", typeof(int));
    
            var grossAmountParameter = grossAmount.HasValue ?
                new ObjectParameter("GrossAmount", grossAmount) :
                new ObjectParameter("GrossAmount", typeof(decimal));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var sGSTAmountParameter = sGSTAmount.HasValue ?
                new ObjectParameter("SGSTAmount", sGSTAmount) :
                new ObjectParameter("SGSTAmount", typeof(decimal));
    
            var iGSTAmountParameter = iGSTAmount.HasValue ?
                new ObjectParameter("IGSTAmount", iGSTAmount) :
                new ObjectParameter("IGSTAmount", typeof(decimal));
    
            var cGSTAmountParameter = cGSTAmount.HasValue ?
                new ObjectParameter("CGSTAmount", cGSTAmount) :
                new ObjectParameter("CGSTAmount", typeof(decimal));
    
            var offerQtyParameter = offerQty.HasValue ?
                new ObjectParameter("OfferQty", offerQty) :
                new ObjectParameter("OfferQty", typeof(decimal));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePurchaseInvoiceTransDetails", purchaseInvoiceIDParameter, gRNIDParameter, gRNTransIDParameter, itemIDParameter, invoiceQtyParameter, invoiceRateParameter, invoiceValueParameter, acceptedQtyParameter, approvedQtyParameter, pORateParameter, differenceParameter, remarksParameter, unMatchedQtyParameter, iGSTPercentParameter, cGSTPercentParameter, sGSTPercentParameter, invoiceGSTPercentParameter, milkPurchaseIDParameter, unitIDParameter, batchIDParameter, basicPriceParameter, discountPercentageParameter, discountAmountParameter, turnOverDiscountParameter, additionalDiscountParameter, taxableAmountParameter, cashDiscountParameter, salesInvoiceIDParameter, salesInvoiceTransIDParameter, grossAmountParameter, netAmountParameter, sGSTAmountParameter, iGSTAmountParameter, cGSTAmountParameter, offerQtyParameter, finYearParameter, locationIDParameter, applicationIDParameter, retValue);
        }
    
        public virtual int SpCreatePurchaseInvoiceTransForLocalPurchase(Nullable<int> purchaseInvoiceID, Nullable<int> gRNID, Nullable<int> purchaseOrderID)
        {
            var purchaseInvoiceIDParameter = purchaseInvoiceID.HasValue ?
                new ObjectParameter("PurchaseInvoiceID", purchaseInvoiceID) :
                new ObjectParameter("PurchaseInvoiceID", typeof(int));
    
            var gRNIDParameter = gRNID.HasValue ?
                new ObjectParameter("GRNID", gRNID) :
                new ObjectParameter("GRNID", typeof(int));
    
            var purchaseOrderIDParameter = purchaseOrderID.HasValue ?
                new ObjectParameter("PurchaseOrderID", purchaseOrderID) :
                new ObjectParameter("PurchaseOrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePurchaseInvoiceTransForLocalPurchase", purchaseInvoiceIDParameter, gRNIDParameter, purchaseOrderIDParameter);
        }
    
        public virtual int SpCreatePurchaseInvoiceTransForService(Nullable<int> purchaseInvoiceID, Nullable<int> sRNID, Nullable<int> sRNTransID, Nullable<int> itemID, Nullable<decimal> acceptedQty, Nullable<decimal> unMatchedQty, Nullable<decimal> pORate, Nullable<decimal> invoiceQty, Nullable<decimal> invoiceRate, Nullable<decimal> invoiceAmount, Nullable<decimal> difference, string tDSCode, Nullable<decimal> tDSAmount, string remarks, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> serviceLocationID, Nullable<int> departmentID, Nullable<int> employeeID, Nullable<int> companyID, Nullable<int> projectID, Nullable<decimal> sGSTPercentage, Nullable<decimal> cGSTPercentage, Nullable<decimal> iGSTPercentage, Nullable<decimal> invoiceGSTPercent, Nullable<bool> isInclusiveGST, ObjectParameter retValue)
        {
            var purchaseInvoiceIDParameter = purchaseInvoiceID.HasValue ?
                new ObjectParameter("PurchaseInvoiceID", purchaseInvoiceID) :
                new ObjectParameter("PurchaseInvoiceID", typeof(int));
    
            var sRNIDParameter = sRNID.HasValue ?
                new ObjectParameter("SRNID", sRNID) :
                new ObjectParameter("SRNID", typeof(int));
    
            var sRNTransIDParameter = sRNTransID.HasValue ?
                new ObjectParameter("SRNTransID", sRNTransID) :
                new ObjectParameter("SRNTransID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var acceptedQtyParameter = acceptedQty.HasValue ?
                new ObjectParameter("AcceptedQty", acceptedQty) :
                new ObjectParameter("AcceptedQty", typeof(decimal));
    
            var unMatchedQtyParameter = unMatchedQty.HasValue ?
                new ObjectParameter("UnMatchedQty", unMatchedQty) :
                new ObjectParameter("UnMatchedQty", typeof(decimal));
    
            var pORateParameter = pORate.HasValue ?
                new ObjectParameter("PORate", pORate) :
                new ObjectParameter("PORate", typeof(decimal));
    
            var invoiceQtyParameter = invoiceQty.HasValue ?
                new ObjectParameter("InvoiceQty", invoiceQty) :
                new ObjectParameter("InvoiceQty", typeof(decimal));
    
            var invoiceRateParameter = invoiceRate.HasValue ?
                new ObjectParameter("InvoiceRate", invoiceRate) :
                new ObjectParameter("InvoiceRate", typeof(decimal));
    
            var invoiceAmountParameter = invoiceAmount.HasValue ?
                new ObjectParameter("InvoiceAmount", invoiceAmount) :
                new ObjectParameter("InvoiceAmount", typeof(decimal));
    
            var differenceParameter = difference.HasValue ?
                new ObjectParameter("Difference", difference) :
                new ObjectParameter("Difference", typeof(decimal));
    
            var tDSCodeParameter = tDSCode != null ?
                new ObjectParameter("TDSCode", tDSCode) :
                new ObjectParameter("TDSCode", typeof(string));
    
            var tDSAmountParameter = tDSAmount.HasValue ?
                new ObjectParameter("TDSAmount", tDSAmount) :
                new ObjectParameter("TDSAmount", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var serviceLocationIDParameter = serviceLocationID.HasValue ?
                new ObjectParameter("ServiceLocationID", serviceLocationID) :
                new ObjectParameter("ServiceLocationID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var sGSTPercentageParameter = sGSTPercentage.HasValue ?
                new ObjectParameter("SGSTPercentage", sGSTPercentage) :
                new ObjectParameter("SGSTPercentage", typeof(decimal));
    
            var cGSTPercentageParameter = cGSTPercentage.HasValue ?
                new ObjectParameter("CGSTPercentage", cGSTPercentage) :
                new ObjectParameter("CGSTPercentage", typeof(decimal));
    
            var iGSTPercentageParameter = iGSTPercentage.HasValue ?
                new ObjectParameter("IGSTPercentage", iGSTPercentage) :
                new ObjectParameter("IGSTPercentage", typeof(decimal));
    
            var invoiceGSTPercentParameter = invoiceGSTPercent.HasValue ?
                new ObjectParameter("InvoiceGSTPercent", invoiceGSTPercent) :
                new ObjectParameter("InvoiceGSTPercent", typeof(decimal));
    
            var isInclusiveGSTParameter = isInclusiveGST.HasValue ?
                new ObjectParameter("IsInclusiveGST", isInclusiveGST) :
                new ObjectParameter("IsInclusiveGST", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePurchaseInvoiceTransForService", purchaseInvoiceIDParameter, sRNIDParameter, sRNTransIDParameter, itemIDParameter, acceptedQtyParameter, unMatchedQtyParameter, pORateParameter, invoiceQtyParameter, invoiceRateParameter, invoiceAmountParameter, differenceParameter, tDSCodeParameter, tDSAmountParameter, remarksParameter, finYearParameter, locationIDParameter, applicationIDParameter, serviceLocationIDParameter, departmentIDParameter, employeeIDParameter, companyIDParameter, projectIDParameter, sGSTPercentageParameter, cGSTPercentageParameter, iGSTPercentageParameter, invoiceGSTPercentParameter, isInclusiveGSTParameter, retValue);
        }
    
        public virtual int SpCreatePurchaseOrderFromReOrder(Nullable<int> reOrderID, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter pOIDs)
        {
            var reOrderIDParameter = reOrderID.HasValue ?
                new ObjectParameter("ReOrderID", reOrderID) :
                new ObjectParameter("ReOrderID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePurchaseOrderFromReOrder", reOrderIDParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, pOIDs);
        }
    
        public virtual int SpCreatePurchaseOrderTransForService(Nullable<int> purchaseOrderID, Nullable<int> purchaseRequisitionID, Nullable<int> pRServiceTransID, Nullable<bool> isDraft, Nullable<int> itemID, Nullable<decimal> quantity, Nullable<decimal> rate, Nullable<decimal> amount, Nullable<decimal> sGSTPercent, Nullable<decimal> cGSTPercent, Nullable<decimal> iGSTPercent, Nullable<decimal> sGSTAmt, Nullable<decimal> cGSTAmt, Nullable<decimal> iGSTAmt, Nullable<decimal> netAmount, Nullable<int> serviceLocationID, Nullable<int> departmentID, Nullable<int> employeeID, Nullable<int> companyID, Nullable<int> projectID, Nullable<decimal> qtyMet, Nullable<bool> isPurchased, string remarks, Nullable<int> travelFromID, Nullable<int> travelToID, Nullable<int> transportModeID, string travelingRemarks, Nullable<System.DateTime> travelDate, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter returnValue)
        {
            var purchaseOrderIDParameter = purchaseOrderID.HasValue ?
                new ObjectParameter("PurchaseOrderID", purchaseOrderID) :
                new ObjectParameter("PurchaseOrderID", typeof(int));
    
            var purchaseRequisitionIDParameter = purchaseRequisitionID.HasValue ?
                new ObjectParameter("PurchaseRequisitionID", purchaseRequisitionID) :
                new ObjectParameter("PurchaseRequisitionID", typeof(int));
    
            var pRServiceTransIDParameter = pRServiceTransID.HasValue ?
                new ObjectParameter("PRServiceTransID", pRServiceTransID) :
                new ObjectParameter("PRServiceTransID", typeof(int));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var sGSTPercentParameter = sGSTPercent.HasValue ?
                new ObjectParameter("SGSTPercent", sGSTPercent) :
                new ObjectParameter("SGSTPercent", typeof(decimal));
    
            var cGSTPercentParameter = cGSTPercent.HasValue ?
                new ObjectParameter("CGSTPercent", cGSTPercent) :
                new ObjectParameter("CGSTPercent", typeof(decimal));
    
            var iGSTPercentParameter = iGSTPercent.HasValue ?
                new ObjectParameter("IGSTPercent", iGSTPercent) :
                new ObjectParameter("IGSTPercent", typeof(decimal));
    
            var sGSTAmtParameter = sGSTAmt.HasValue ?
                new ObjectParameter("SGSTAmt", sGSTAmt) :
                new ObjectParameter("SGSTAmt", typeof(decimal));
    
            var cGSTAmtParameter = cGSTAmt.HasValue ?
                new ObjectParameter("CGSTAmt", cGSTAmt) :
                new ObjectParameter("CGSTAmt", typeof(decimal));
    
            var iGSTAmtParameter = iGSTAmt.HasValue ?
                new ObjectParameter("IGSTAmt", iGSTAmt) :
                new ObjectParameter("IGSTAmt", typeof(decimal));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var serviceLocationIDParameter = serviceLocationID.HasValue ?
                new ObjectParameter("ServiceLocationID", serviceLocationID) :
                new ObjectParameter("ServiceLocationID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var qtyMetParameter = qtyMet.HasValue ?
                new ObjectParameter("QtyMet", qtyMet) :
                new ObjectParameter("QtyMet", typeof(decimal));
    
            var isPurchasedParameter = isPurchased.HasValue ?
                new ObjectParameter("IsPurchased", isPurchased) :
                new ObjectParameter("IsPurchased", typeof(bool));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var travelFromIDParameter = travelFromID.HasValue ?
                new ObjectParameter("TravelFromID", travelFromID) :
                new ObjectParameter("TravelFromID", typeof(int));
    
            var travelToIDParameter = travelToID.HasValue ?
                new ObjectParameter("TravelToID", travelToID) :
                new ObjectParameter("TravelToID", typeof(int));
    
            var transportModeIDParameter = transportModeID.HasValue ?
                new ObjectParameter("TransportModeID", transportModeID) :
                new ObjectParameter("TransportModeID", typeof(int));
    
            var travelingRemarksParameter = travelingRemarks != null ?
                new ObjectParameter("TravelingRemarks", travelingRemarks) :
                new ObjectParameter("TravelingRemarks", typeof(string));
    
            var travelDateParameter = travelDate.HasValue ?
                new ObjectParameter("TravelDate", travelDate) :
                new ObjectParameter("TravelDate", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePurchaseOrderTransForService", purchaseOrderIDParameter, purchaseRequisitionIDParameter, pRServiceTransIDParameter, isDraftParameter, itemIDParameter, quantityParameter, rateParameter, amountParameter, sGSTPercentParameter, cGSTPercentParameter, iGSTPercentParameter, sGSTAmtParameter, cGSTAmtParameter, iGSTAmtParameter, netAmountParameter, serviceLocationIDParameter, departmentIDParameter, employeeIDParameter, companyIDParameter, projectIDParameter, qtyMetParameter, isPurchasedParameter, remarksParameter, travelFromIDParameter, travelToIDParameter, transportModeIDParameter, travelingRemarksParameter, travelDateParameter, finYearParameter, locationIDParameter, applicationIDParameter, returnValue);
        }
    
        public virtual int SpCreatePurchaseRequisitionForService(string code, Nullable<System.DateTime> date, Nullable<bool> isFullyOrdered, Nullable<bool> isDraft, Nullable<bool> cancelled, Nullable<System.DateTime> cancelledDate, Nullable<int> createdUserID, Nullable<int> fromDeptID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter purRequisitionServiceID)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var isFullyOrderedParameter = isFullyOrdered.HasValue ?
                new ObjectParameter("IsFullyOrdered", isFullyOrdered) :
                new ObjectParameter("IsFullyOrdered", typeof(bool));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var cancelledParameter = cancelled.HasValue ?
                new ObjectParameter("Cancelled", cancelled) :
                new ObjectParameter("Cancelled", typeof(bool));
    
            var cancelledDateParameter = cancelledDate.HasValue ?
                new ObjectParameter("CancelledDate", cancelledDate) :
                new ObjectParameter("CancelledDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var fromDeptIDParameter = fromDeptID.HasValue ?
                new ObjectParameter("FromDeptID", fromDeptID) :
                new ObjectParameter("FromDeptID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePurchaseRequisitionForService", codeParameter, dateParameter, isFullyOrderedParameter, isDraftParameter, cancelledParameter, cancelledDateParameter, createdUserIDParameter, fromDeptIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, purRequisitionServiceID);
        }
    
        public virtual int SpCreatePurchaseRequisitionTransForService(Nullable<int> purchaseRequisitionServiceID, Nullable<int> itemID, Nullable<decimal> quantity, Nullable<System.DateTime> expectedDate, Nullable<int> requiredLocationID, Nullable<int> requiredDepartmentID, Nullable<int> requiredEmployeeID, Nullable<int> requiredInterCompanyID, Nullable<int> requiredProjectID, string remarks, Nullable<int> createdUserID, Nullable<int> travelFromID, Nullable<int> travelToID, Nullable<int> transportModeID, string travelingRemarks, Nullable<System.DateTime> travelDate, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var purchaseRequisitionServiceIDParameter = purchaseRequisitionServiceID.HasValue ?
                new ObjectParameter("PurchaseRequisitionServiceID", purchaseRequisitionServiceID) :
                new ObjectParameter("PurchaseRequisitionServiceID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var expectedDateParameter = expectedDate.HasValue ?
                new ObjectParameter("ExpectedDate", expectedDate) :
                new ObjectParameter("ExpectedDate", typeof(System.DateTime));
    
            var requiredLocationIDParameter = requiredLocationID.HasValue ?
                new ObjectParameter("RequiredLocationID", requiredLocationID) :
                new ObjectParameter("RequiredLocationID", typeof(int));
    
            var requiredDepartmentIDParameter = requiredDepartmentID.HasValue ?
                new ObjectParameter("RequiredDepartmentID", requiredDepartmentID) :
                new ObjectParameter("RequiredDepartmentID", typeof(int));
    
            var requiredEmployeeIDParameter = requiredEmployeeID.HasValue ?
                new ObjectParameter("RequiredEmployeeID", requiredEmployeeID) :
                new ObjectParameter("RequiredEmployeeID", typeof(int));
    
            var requiredInterCompanyIDParameter = requiredInterCompanyID.HasValue ?
                new ObjectParameter("RequiredInterCompanyID", requiredInterCompanyID) :
                new ObjectParameter("RequiredInterCompanyID", typeof(int));
    
            var requiredProjectIDParameter = requiredProjectID.HasValue ?
                new ObjectParameter("RequiredProjectID", requiredProjectID) :
                new ObjectParameter("RequiredProjectID", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var travelFromIDParameter = travelFromID.HasValue ?
                new ObjectParameter("TravelFromID", travelFromID) :
                new ObjectParameter("TravelFromID", typeof(int));
    
            var travelToIDParameter = travelToID.HasValue ?
                new ObjectParameter("TravelToID", travelToID) :
                new ObjectParameter("TravelToID", typeof(int));
    
            var transportModeIDParameter = transportModeID.HasValue ?
                new ObjectParameter("TransportModeID", transportModeID) :
                new ObjectParameter("TransportModeID", typeof(int));
    
            var travelingRemarksParameter = travelingRemarks != null ?
                new ObjectParameter("TravelingRemarks", travelingRemarks) :
                new ObjectParameter("TravelingRemarks", typeof(string));
    
            var travelDateParameter = travelDate.HasValue ?
                new ObjectParameter("TravelDate", travelDate) :
                new ObjectParameter("TravelDate", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePurchaseRequisitionTransForService", purchaseRequisitionServiceIDParameter, itemIDParameter, quantityParameter, expectedDateParameter, requiredLocationIDParameter, requiredDepartmentIDParameter, requiredEmployeeIDParameter, requiredInterCompanyIDParameter, requiredProjectIDParameter, remarksParameter, createdUserIDParameter, travelFromIDParameter, travelToIDParameter, transportModeIDParameter, travelingRemarksParameter, travelDateParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreatePurchaseReturn(string code, Nullable<System.DateTime> date, Nullable<int> supplierID, Nullable<decimal> sGSTAmount, Nullable<decimal> cGSTAmount, Nullable<decimal> iGSTAmount, Nullable<decimal> freightAmount, Nullable<decimal> otherCharge, Nullable<decimal> packingCahrge, Nullable<decimal> netAmount, Nullable<bool> isDraft, Nullable<bool> isCancelled, Nullable<System.DateTime> cancelledDate, Nullable<int> createdUserID, Nullable<System.DateTime> createdDate, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter purchaseReturnID)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var sGSTAmountParameter = sGSTAmount.HasValue ?
                new ObjectParameter("SGSTAmount", sGSTAmount) :
                new ObjectParameter("SGSTAmount", typeof(decimal));
    
            var cGSTAmountParameter = cGSTAmount.HasValue ?
                new ObjectParameter("CGSTAmount", cGSTAmount) :
                new ObjectParameter("CGSTAmount", typeof(decimal));
    
            var iGSTAmountParameter = iGSTAmount.HasValue ?
                new ObjectParameter("IGSTAmount", iGSTAmount) :
                new ObjectParameter("IGSTAmount", typeof(decimal));
    
            var freightAmountParameter = freightAmount.HasValue ?
                new ObjectParameter("FreightAmount", freightAmount) :
                new ObjectParameter("FreightAmount", typeof(decimal));
    
            var otherChargeParameter = otherCharge.HasValue ?
                new ObjectParameter("OtherCharge", otherCharge) :
                new ObjectParameter("OtherCharge", typeof(decimal));
    
            var packingCahrgeParameter = packingCahrge.HasValue ?
                new ObjectParameter("PackingCahrge", packingCahrge) :
                new ObjectParameter("PackingCahrge", typeof(decimal));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var isCancelledParameter = isCancelled.HasValue ?
                new ObjectParameter("IsCancelled", isCancelled) :
                new ObjectParameter("IsCancelled", typeof(bool));
    
            var cancelledDateParameter = cancelledDate.HasValue ?
                new ObjectParameter("CancelledDate", cancelledDate) :
                new ObjectParameter("CancelledDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePurchaseReturn", codeParameter, dateParameter, supplierIDParameter, sGSTAmountParameter, cGSTAmountParameter, iGSTAmountParameter, freightAmountParameter, otherChargeParameter, packingCahrgeParameter, netAmountParameter, isDraftParameter, isCancelledParameter, cancelledDateParameter, createdUserIDParameter, createdDateParameter, finYearParameter, locationIDParameter, applicationIDParameter, purchaseReturnID);
        }
    
        public virtual int SpCreatePurchaseReturnOrderTrans(Nullable<int> purchaseReturnID, Nullable<int> invoiceID, Nullable<int> itemID, Nullable<decimal> qty, Nullable<decimal> rate, Nullable<decimal> sGSTPercent, Nullable<decimal> cGSTPercent, Nullable<decimal> iGSTPercent, Nullable<decimal> sGSTAmount, Nullable<decimal> cGSTAmount, Nullable<decimal> iGSTAmount, Nullable<decimal> amount, string remarks, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> wareHouseID, Nullable<int> batchTypeID, Nullable<int> unitID, Nullable<int> invoiceTransID, Nullable<decimal> gSTPercentage, Nullable<decimal> gSTAmount, ObjectParameter retValue)
        {
            var purchaseReturnIDParameter = purchaseReturnID.HasValue ?
                new ObjectParameter("PurchaseReturnID", purchaseReturnID) :
                new ObjectParameter("PurchaseReturnID", typeof(int));
    
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(decimal));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var sGSTPercentParameter = sGSTPercent.HasValue ?
                new ObjectParameter("SGSTPercent", sGSTPercent) :
                new ObjectParameter("SGSTPercent", typeof(decimal));
    
            var cGSTPercentParameter = cGSTPercent.HasValue ?
                new ObjectParameter("CGSTPercent", cGSTPercent) :
                new ObjectParameter("CGSTPercent", typeof(decimal));
    
            var iGSTPercentParameter = iGSTPercent.HasValue ?
                new ObjectParameter("IGSTPercent", iGSTPercent) :
                new ObjectParameter("IGSTPercent", typeof(decimal));
    
            var sGSTAmountParameter = sGSTAmount.HasValue ?
                new ObjectParameter("SGSTAmount", sGSTAmount) :
                new ObjectParameter("SGSTAmount", typeof(decimal));
    
            var cGSTAmountParameter = cGSTAmount.HasValue ?
                new ObjectParameter("CGSTAmount", cGSTAmount) :
                new ObjectParameter("CGSTAmount", typeof(decimal));
    
            var iGSTAmountParameter = iGSTAmount.HasValue ?
                new ObjectParameter("IGSTAmount", iGSTAmount) :
                new ObjectParameter("IGSTAmount", typeof(decimal));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var invoiceTransIDParameter = invoiceTransID.HasValue ?
                new ObjectParameter("InvoiceTransID", invoiceTransID) :
                new ObjectParameter("InvoiceTransID", typeof(int));
    
            var gSTPercentageParameter = gSTPercentage.HasValue ?
                new ObjectParameter("GSTPercentage", gSTPercentage) :
                new ObjectParameter("GSTPercentage", typeof(decimal));
    
            var gSTAmountParameter = gSTAmount.HasValue ?
                new ObjectParameter("GSTAmount", gSTAmount) :
                new ObjectParameter("GSTAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePurchaseReturnOrderTrans", purchaseReturnIDParameter, invoiceIDParameter, itemIDParameter, qtyParameter, rateParameter, sGSTPercentParameter, cGSTPercentParameter, iGSTPercentParameter, sGSTAmountParameter, cGSTAmountParameter, iGSTAmountParameter, amountParameter, remarksParameter, finYearParameter, locationIDParameter, applicationIDParameter, wareHouseIDParameter, batchTypeIDParameter, unitIDParameter, invoiceTransIDParameter, gSTPercentageParameter, gSTAmountParameter, retValue);
        }
    
        public virtual int SpCreatePurchaseReturnProcessing(string purchaseReturnProcessingItems, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> createdUserID)
        {
            var purchaseReturnProcessingItemsParameter = purchaseReturnProcessingItems != null ?
                new ObjectParameter("PurchaseReturnProcessingItems", purchaseReturnProcessingItems) :
                new ObjectParameter("PurchaseReturnProcessingItems", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePurchaseReturnProcessing", purchaseReturnProcessingItemsParameter, finYearParameter, locationIDParameter, applicationIDParameter, createdUserIDParameter);
        }
    
        public virtual int SpCreateQRCode(Nullable<int> batchID, Nullable<int> itemID, string qRCode)
        {
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var qRCodeParameter = qRCode != null ?
                new ObjectParameter("QRCode", qRCode) :
                new ObjectParameter("QRCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateQRCode", batchIDParameter, itemIDParameter, qRCodeParameter);
        }
    
        public virtual int SpCreateReOrder(string transNo, Nullable<int> reOrderDays, Nullable<int> orderDays, string itemType, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter id)
        {
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var reOrderDaysParameter = reOrderDays.HasValue ?
                new ObjectParameter("ReOrderDays", reOrderDays) :
                new ObjectParameter("ReOrderDays", typeof(int));
    
            var orderDaysParameter = orderDays.HasValue ?
                new ObjectParameter("OrderDays", orderDays) :
                new ObjectParameter("OrderDays", typeof(int));
    
            var itemTypeParameter = itemType != null ?
                new ObjectParameter("ItemType", itemType) :
                new ObjectParameter("ItemType", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateReOrder", transNoParameter, reOrderDaysParameter, orderDaysParameter, itemTypeParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, id);
        }
    
        public virtual int SpCreateReOrderTrans(Nullable<int> reOrderID, Nullable<int> reOrderItemID, Nullable<int> itemID, Nullable<decimal> reOrderQty, Nullable<decimal> qty, Nullable<decimal> rate, Nullable<int> supplierID, Nullable<int> unitID, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, Nullable<bool> isOrdered)
        {
            var reOrderIDParameter = reOrderID.HasValue ?
                new ObjectParameter("ReOrderID", reOrderID) :
                new ObjectParameter("ReOrderID", typeof(int));
    
            var reOrderItemIDParameter = reOrderItemID.HasValue ?
                new ObjectParameter("ReOrderItemID", reOrderItemID) :
                new ObjectParameter("ReOrderItemID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var reOrderQtyParameter = reOrderQty.HasValue ?
                new ObjectParameter("ReOrderQty", reOrderQty) :
                new ObjectParameter("ReOrderQty", typeof(decimal));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(decimal));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var isOrderedParameter = isOrdered.HasValue ?
                new ObjectParameter("IsOrdered", isOrdered) :
                new ObjectParameter("IsOrdered", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateReOrderTrans", reOrderIDParameter, reOrderItemIDParameter, itemIDParameter, reOrderQtyParameter, qtyParameter, rateParameter, supplierIDParameter, unitIDParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, isOrderedParameter);
        }
    
        public virtual int SpCreateSRN(string code, Nullable<System.DateTime> date, Nullable<int> supplierID, Nullable<System.DateTime> receiptDate, string deliveryChallanNo, Nullable<System.DateTime> deliveryChallanDate, Nullable<bool> isDraft, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter sRNID)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var receiptDateParameter = receiptDate.HasValue ?
                new ObjectParameter("ReceiptDate", receiptDate) :
                new ObjectParameter("ReceiptDate", typeof(System.DateTime));
    
            var deliveryChallanNoParameter = deliveryChallanNo != null ?
                new ObjectParameter("DeliveryChallanNo", deliveryChallanNo) :
                new ObjectParameter("DeliveryChallanNo", typeof(string));
    
            var deliveryChallanDateParameter = deliveryChallanDate.HasValue ?
                new ObjectParameter("DeliveryChallanDate", deliveryChallanDate) :
                new ObjectParameter("DeliveryChallanDate", typeof(System.DateTime));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateSRN", codeParameter, dateParameter, supplierIDParameter, receiptDateParameter, deliveryChallanNoParameter, deliveryChallanDateParameter, isDraftParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, sRNID);
        }
    
        public virtual int SpCreateSRNTrans(Nullable<int> sRNID, Nullable<int> pOServiceID, Nullable<int> pOServiceTransID, Nullable<int> itemID, Nullable<decimal> purchaseOrderQty, Nullable<decimal> receivedQty, Nullable<decimal> acceptedQty, Nullable<int> serviceLocationID, Nullable<int> departmentID, Nullable<int> employeeID, Nullable<int> companyID, Nullable<int> projectID, string remarks, Nullable<decimal> qtyTolerance, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter retValue)
        {
            var sRNIDParameter = sRNID.HasValue ?
                new ObjectParameter("SRNID", sRNID) :
                new ObjectParameter("SRNID", typeof(int));
    
            var pOServiceIDParameter = pOServiceID.HasValue ?
                new ObjectParameter("POServiceID", pOServiceID) :
                new ObjectParameter("POServiceID", typeof(int));
    
            var pOServiceTransIDParameter = pOServiceTransID.HasValue ?
                new ObjectParameter("POServiceTransID", pOServiceTransID) :
                new ObjectParameter("POServiceTransID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var purchaseOrderQtyParameter = purchaseOrderQty.HasValue ?
                new ObjectParameter("PurchaseOrderQty", purchaseOrderQty) :
                new ObjectParameter("PurchaseOrderQty", typeof(decimal));
    
            var receivedQtyParameter = receivedQty.HasValue ?
                new ObjectParameter("ReceivedQty", receivedQty) :
                new ObjectParameter("ReceivedQty", typeof(decimal));
    
            var acceptedQtyParameter = acceptedQty.HasValue ?
                new ObjectParameter("AcceptedQty", acceptedQty) :
                new ObjectParameter("AcceptedQty", typeof(decimal));
    
            var serviceLocationIDParameter = serviceLocationID.HasValue ?
                new ObjectParameter("ServiceLocationID", serviceLocationID) :
                new ObjectParameter("ServiceLocationID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var qtyToleranceParameter = qtyTolerance.HasValue ?
                new ObjectParameter("QtyTolerance", qtyTolerance) :
                new ObjectParameter("QtyTolerance", typeof(decimal));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateSRNTrans", sRNIDParameter, pOServiceIDParameter, pOServiceTransIDParameter, itemIDParameter, purchaseOrderQtyParameter, receivedQtyParameter, acceptedQtyParameter, serviceLocationIDParameter, departmentIDParameter, employeeIDParameter, companyIDParameter, projectIDParameter, remarksParameter, qtyToleranceParameter, finYearParameter, locationIDParameter, applicationIDParameter, retValue);
        }
    
        public virtual ObjectResult<SpGetAllItemCategory_Result> SpGetAllItemCategory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAllItemCategory_Result>("SpGetAllItemCategory");
        }
    
        public virtual int SpGetBarCodeConfiguration(Nullable<int> applicationID, ObjectParameter isBarCodeGenerator)
        {
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetBarCodeConfiguration", applicationIDParameter, isBarCodeGenerator);
        }
    
        public virtual ObjectResult<SpGetDebitNoteListForPaymentReturn_Result> SpGetDebitNoteListForPaymentReturn(Nullable<int> supplierID, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDebitNoteListForPaymentReturn_Result>("SpGetDebitNoteListForPaymentReturn", supplierIDParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpGetDirectPurchaseInvoiceConfiguration(Nullable<int> applicationID, ObjectParameter isDirectPurchaseInvoice)
        {
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetDirectPurchaseInvoiceConfiguration", applicationIDParameter, isDirectPurchaseInvoice);
        }
    
        public virtual ObjectResult<SpGetDirectPurchaseInvoiceList_Result> SpGetDirectPurchaseInvoiceList(string type, string transNoHint, string pODateHint, string supplierHint, string netAmountHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var transNoHintParameter = transNoHint != null ?
                new ObjectParameter("TransNoHint", transNoHint) :
                new ObjectParameter("TransNoHint", typeof(string));
    
            var pODateHintParameter = pODateHint != null ?
                new ObjectParameter("PODateHint", pODateHint) :
                new ObjectParameter("PODateHint", typeof(string));
    
            var supplierHintParameter = supplierHint != null ?
                new ObjectParameter("SupplierHint", supplierHint) :
                new ObjectParameter("SupplierHint", typeof(string));
    
            var netAmountHintParameter = netAmountHint != null ?
                new ObjectParameter("NetAmountHint", netAmountHint) :
                new ObjectParameter("NetAmountHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDirectPurchaseInvoiceList_Result>("SpGetDirectPurchaseInvoiceList", typeParameter, transNoHintParameter, pODateHintParameter, supplierHintParameter, netAmountHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetGetPurchaseReturnTransForIRG_Result> SpGetGetPurchaseReturnTransForIRG(Nullable<int> purchaseReturnID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var purchaseReturnIDParameter = purchaseReturnID.HasValue ?
                new ObjectParameter("PurchaseReturnID", purchaseReturnID) :
                new ObjectParameter("PurchaseReturnID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetGetPurchaseReturnTransForIRG_Result>("SpGetGetPurchaseReturnTransForIRG", purchaseReturnIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetGoodsReceiptNoteDetails_Result> SpGetGoodsReceiptNoteDetails(Nullable<int> iD, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetGoodsReceiptNoteDetails_Result>("SpGetGoodsReceiptNoteDetails", iDParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetGoodsReceiptNoteTransDetails_Result> SpGetGoodsReceiptNoteTransDetails(Nullable<int> iD, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetGoodsReceiptNoteTransDetails_Result>("SpGetGoodsReceiptNoteTransDetails", iDParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetGoodsReceiptNoteTransDetailsForPurchaseReturn_Result> SpGetGoodsReceiptNoteTransDetailsForPurchaseReturn(Nullable<int> gRNID, Nullable<int> finYear, Nullable<int> locationID)
        {
            var gRNIDParameter = gRNID.HasValue ?
                new ObjectParameter("GRNID", gRNID) :
                new ObjectParameter("GRNID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetGoodsReceiptNoteTransDetailsForPurchaseReturn_Result>("SpGetGoodsReceiptNoteTransDetailsForPurchaseReturn", gRNIDParameter, finYearParameter, locationIDParameter);
        }
    
        public virtual ObjectResult<SpGetGRNDetailV3_Result> SpGetGRNDetailV3(string iD, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetGRNDetailV3_Result>("SpGetGRNDetailV3", iDParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<spGetGRNForPurchaseReturn_Result> spGetGRNForPurchaseReturn(Nullable<int> supplierID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetGRNForPurchaseReturn_Result>("spGetGRNForPurchaseReturn", supplierIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetGRNInvoiceNoAutoComplete_Result> SpGetGRNInvoiceNoAutoComplete(string hint, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var hintParameter = hint != null ?
                new ObjectParameter("Hint", hint) :
                new ObjectParameter("Hint", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetGRNInvoiceNoAutoComplete_Result>("SpGetGRNInvoiceNoAutoComplete", hintParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetGRNList_Result> SpGetGRNList(string type, string transNoHint, string transDateHint, string supplierNameHint, string deliveryChallanNoHint, string deliveryChallanDateHint, string warehouseNameHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var transNoHintParameter = transNoHint != null ?
                new ObjectParameter("TransNoHint", transNoHint) :
                new ObjectParameter("TransNoHint", typeof(string));
    
            var transDateHintParameter = transDateHint != null ?
                new ObjectParameter("TransDateHint", transDateHint) :
                new ObjectParameter("TransDateHint", typeof(string));
    
            var supplierNameHintParameter = supplierNameHint != null ?
                new ObjectParameter("SupplierNameHint", supplierNameHint) :
                new ObjectParameter("SupplierNameHint", typeof(string));
    
            var deliveryChallanNoHintParameter = deliveryChallanNoHint != null ?
                new ObjectParameter("DeliveryChallanNoHint", deliveryChallanNoHint) :
                new ObjectParameter("DeliveryChallanNoHint", typeof(string));
    
            var deliveryChallanDateHintParameter = deliveryChallanDateHint != null ?
                new ObjectParameter("DeliveryChallanDateHint", deliveryChallanDateHint) :
                new ObjectParameter("DeliveryChallanDateHint", typeof(string));
    
            var warehouseNameHintParameter = warehouseNameHint != null ?
                new ObjectParameter("WarehouseNameHint", warehouseNameHint) :
                new ObjectParameter("WarehouseNameHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetGRNList_Result>("SpGetGRNList", typeParameter, transNoHintParameter, transDateHintParameter, supplierNameHintParameter, deliveryChallanNoHintParameter, deliveryChallanDateHintParameter, warehouseNameHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetGRNNoWithItemID_Result> SpGetGRNNoWithItemID(Nullable<int> itemID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetGRNNoWithItemID_Result>("SpGetGRNNoWithItemID", itemIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetGRNTransForPurchaseReturn_Result> SpGetGRNTransForPurchaseReturn(Nullable<int> itemID, Nullable<int> gRNID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var gRNIDParameter = gRNID.HasValue ?
                new ObjectParameter("GRNID", gRNID) :
                new ObjectParameter("GRNID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetGRNTransForPurchaseReturn_Result>("SpGetGRNTransForPurchaseReturn", itemIDParameter, gRNIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetInterCompanyListForDatatable_Result> SpGetInterCompanyListForDatatable(string transNoHint, string transDateHint, string salesInvoiceNoHint, string salesInvoiceDateHint, string supplierNameHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var transNoHintParameter = transNoHint != null ?
                new ObjectParameter("TransNoHint", transNoHint) :
                new ObjectParameter("TransNoHint", typeof(string));
    
            var transDateHintParameter = transDateHint != null ?
                new ObjectParameter("TransDateHint", transDateHint) :
                new ObjectParameter("TransDateHint", typeof(string));
    
            var salesInvoiceNoHintParameter = salesInvoiceNoHint != null ?
                new ObjectParameter("SalesInvoiceNoHint", salesInvoiceNoHint) :
                new ObjectParameter("SalesInvoiceNoHint", typeof(string));
    
            var salesInvoiceDateHintParameter = salesInvoiceDateHint != null ?
                new ObjectParameter("SalesInvoiceDateHint", salesInvoiceDateHint) :
                new ObjectParameter("SalesInvoiceDateHint", typeof(string));
    
            var supplierNameHintParameter = supplierNameHint != null ?
                new ObjectParameter("SupplierNameHint", supplierNameHint) :
                new ObjectParameter("SupplierNameHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetInterCompanyListForDatatable_Result>("SpGetInterCompanyListForDatatable", transNoHintParameter, transDateHintParameter, salesInvoiceNoHintParameter, salesInvoiceDateHintParameter, supplierNameHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetInterCompanyPurchaseInvoiceDetail_Result> SpGetInterCompanyPurchaseInvoiceDetail(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetInterCompanyPurchaseInvoiceDetail_Result>("SpGetInterCompanyPurchaseInvoiceDetail", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetInterCompanyPurchaseInvoiceList_Result> SpGetInterCompanyPurchaseInvoiceList(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetInterCompanyPurchaseInvoiceList_Result>("SpGetInterCompanyPurchaseInvoiceList", finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetInterCompanyPurchaseInvoiceTrans_Result> SpGetInterCompanyPurchaseInvoiceTrans(Nullable<int> purchaseID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetInterCompanyPurchaseInvoiceTrans_Result>("SpGetInterCompanyPurchaseInvoiceTrans", purchaseIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpGetInvoiceNoCount(string table, string hint, Nullable<int> supplierID, Nullable<int> finyear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter count)
        {
            var tableParameter = table != null ?
                new ObjectParameter("Table", table) :
                new ObjectParameter("Table", typeof(string));
    
            var hintParameter = hint != null ?
                new ObjectParameter("Hint", hint) :
                new ObjectParameter("Hint", typeof(string));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var finyearParameter = finyear.HasValue ?
                new ObjectParameter("Finyear", finyear) :
                new ObjectParameter("Finyear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetInvoiceNoCount", tableParameter, hintParameter, supplierIDParameter, finyearParameter, locationIDParameter, applicationIDParameter, count);
        }
    
        public virtual ObjectResult<SpGetIRG_Result> SpGetIRG(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetIRG_Result>("SpGetIRG", finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetIRGDetail_Result> SpGetIRGDetail(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetIRGDetail_Result>("SpGetIRGDetail", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetIRGListForDatatable_Result> SpGetIRGListForDatatable(string type, string transNoHint, string transDateHint, string supplierNameHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var transNoHintParameter = transNoHint != null ?
                new ObjectParameter("TransNoHint", transNoHint) :
                new ObjectParameter("TransNoHint", typeof(string));
    
            var transDateHintParameter = transDateHint != null ?
                new ObjectParameter("TransDateHint", transDateHint) :
                new ObjectParameter("TransDateHint", typeof(string));
    
            var supplierNameHintParameter = supplierNameHint != null ?
                new ObjectParameter("SupplierNameHint", supplierNameHint) :
                new ObjectParameter("SupplierNameHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetIRGListForDatatable_Result>("SpGetIRGListForDatatable", typeParameter, transNoHintParameter, transDateHintParameter, supplierNameHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetIRGTrans_Result> SpGetIRGTrans(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetIRGTrans_Result>("SpGetIRGTrans", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetItemCategoryForPurchaseRequisition_Result> SpGetItemCategoryForPurchaseRequisition()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetItemCategoryForPurchaseRequisition_Result>("SpGetItemCategoryForPurchaseRequisition");
        }
    
        public virtual ObjectResult<SpGetItemCategoryForServices_Result> SpGetItemCategoryForServices()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetItemCategoryForServices_Result>("SpGetItemCategoryForServices");
        }
    
        public virtual ObjectResult<SpGetItemForQRCodeGenerator_Result> SpGetItemForQRCodeGenerator(Nullable<int> gRNID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var gRNIDParameter = gRNID.HasValue ?
                new ObjectParameter("GRNID", gRNID) :
                new ObjectParameter("GRNID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetItemForQRCodeGenerator_Result>("SpGetItemForQRCodeGenerator", gRNIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetLocalPurchaseID_Result> SpGetLocalPurchaseID(Nullable<int> applicationID)
        {
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetLocalPurchaseID_Result>("SpGetLocalPurchaseID", applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetLocalPurchaseOrder_Result> SpGetLocalPurchaseOrder(Nullable<int> purchaseOrderID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var purchaseOrderIDParameter = purchaseOrderID.HasValue ?
                new ObjectParameter("PurchaseOrderID", purchaseOrderID) :
                new ObjectParameter("PurchaseOrderID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetLocalPurchaseOrder_Result>("SpGetLocalPurchaseOrder", purchaseOrderIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetLocalPurchaseOrderItems_Result> SpGetLocalPurchaseOrderItems(Nullable<int> purchaseOrderID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var purchaseOrderIDParameter = purchaseOrderID.HasValue ?
                new ObjectParameter("PurchaseOrderID", purchaseOrderID) :
                new ObjectParameter("PurchaseOrderID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetLocalPurchaseOrderItems_Result>("SpGetLocalPurchaseOrderItems", purchaseOrderIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetLocalPurchases_Result> SpGetLocalPurchases(string type, string transNoHint, string pODateHint, string supplierHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var transNoHintParameter = transNoHint != null ?
                new ObjectParameter("TransNoHint", transNoHint) :
                new ObjectParameter("TransNoHint", typeof(string));
    
            var pODateHintParameter = pODateHint != null ?
                new ObjectParameter("PODateHint", pODateHint) :
                new ObjectParameter("PODateHint", typeof(string));
    
            var supplierHintParameter = supplierHint != null ?
                new ObjectParameter("SupplierHint", supplierHint) :
                new ObjectParameter("SupplierHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetLocalPurchases_Result>("SpGetLocalPurchases", typeParameter, transNoHintParameter, pODateHintParameter, supplierHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetMilkFatRangeList_Result> SpGetMilkFatRangeList(string hint)
        {
            var hintParameter = hint != null ?
                new ObjectParameter("Hint", hint) :
                new ObjectParameter("Hint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetMilkFatRangeList_Result>("SpGetMilkFatRangeList", hintParameter);
        }
    
        public virtual ObjectResult<SpGetMilkFatRangePrice_Result> SpGetMilkFatRangePrice(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetMilkFatRangePrice_Result>("SpGetMilkFatRangePrice", iDParameter);
        }
    
        public virtual ObjectResult<SpGetMilkPurchase_Result> SpGetMilkPurchase(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetMilkPurchase_Result>("SpGetMilkPurchase", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetMilkPurchaseList_Result> SpGetMilkPurchaseList(string type, string transNoHint, string transDateHint, string supplierNameHint, string quantityHint, string amountHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var transNoHintParameter = transNoHint != null ?
                new ObjectParameter("TransNoHint", transNoHint) :
                new ObjectParameter("TransNoHint", typeof(string));
    
            var transDateHintParameter = transDateHint != null ?
                new ObjectParameter("TransDateHint", transDateHint) :
                new ObjectParameter("TransDateHint", typeof(string));
    
            var supplierNameHintParameter = supplierNameHint != null ?
                new ObjectParameter("SupplierNameHint", supplierNameHint) :
                new ObjectParameter("SupplierNameHint", typeof(string));
    
            var quantityHintParameter = quantityHint != null ?
                new ObjectParameter("QuantityHint", quantityHint) :
                new ObjectParameter("QuantityHint", typeof(string));
    
            var amountHintParameter = amountHint != null ?
                new ObjectParameter("AmountHint", amountHint) :
                new ObjectParameter("AmountHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetMilkPurchaseList_Result>("SpGetMilkPurchaseList", typeParameter, transNoHintParameter, transDateHintParameter, supplierNameHintParameter, quantityHintParameter, amountHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetMilkPurchaseRequisition_Result> SpGetMilkPurchaseRequisition(Nullable<System.DateTime> date, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetMilkPurchaseRequisition_Result>("SpGetMilkPurchaseRequisition", dateParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetMilkPurchaseTransDetails_Result> SpGetMilkPurchaseTransDetails(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetMilkPurchaseTransDetails_Result>("SpGetMilkPurchaseTransDetails", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetMilkSuppliersList_Result> SpGetMilkSuppliersList(Nullable<int> locationID, Nullable<int> applicationID, string hint)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var hintParameter = hint != null ?
                new ObjectParameter("Hint", hint) :
                new ObjectParameter("Hint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetMilkSuppliersList_Result>("SpGetMilkSuppliersList", locationIDParameter, applicationIDParameter, hintParameter);
        }
    
        public virtual ObjectResult<SpGetMRPForPurchaseInvoiceByBatchID_Result> SpGetMRPForPurchaseInvoiceByBatchID(Nullable<int> itemID, string batch, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchParameter = batch != null ?
                new ObjectParameter("Batch", batch) :
                new ObjectParameter("Batch", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetMRPForPurchaseInvoiceByBatchID_Result>("SpGetMRPForPurchaseInvoiceByBatchID", itemIDParameter, batchParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPurchaseCategory_Result> SpGetPurchaseCategory(Nullable<int> itemCategoryID)
        {
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPurchaseCategory_Result>("SpGetPurchaseCategory", itemCategoryIDParameter);
        }
    
        public virtual ObjectResult<SpGetPurchaseInvoiceByID_Result> SpGetPurchaseInvoiceByID(Nullable<int> purchaseInvoiceID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var purchaseInvoiceIDParameter = purchaseInvoiceID.HasValue ?
                new ObjectParameter("PurchaseInvoiceID", purchaseInvoiceID) :
                new ObjectParameter("PurchaseInvoiceID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPurchaseInvoiceByID_Result>("SpGetPurchaseInvoiceByID", purchaseInvoiceIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPurchaseInvoiceDetails_Result> SpGetPurchaseInvoiceDetails(Nullable<int> supplierID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPurchaseInvoiceDetails_Result>("SpGetPurchaseInvoiceDetails", supplierIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPurchaseInvoiceForService_Result> SpGetPurchaseInvoiceForService(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPurchaseInvoiceForService_Result>("SpGetPurchaseInvoiceForService", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPurchaseInvoiceIDForPurchaseReturn_Result> SpGetPurchaseInvoiceIDForPurchaseReturn(Nullable<int> supplierID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPurchaseInvoiceIDForPurchaseReturn_Result>("SpGetPurchaseInvoiceIDForPurchaseReturn", supplierIDParameter, fromDateParameter, toDateParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPurchaseInvoiceList_Result> SpGetPurchaseInvoiceList(string type, string transNoHint, string transDateHint, string invoiceNoHint, string invoiceDateHint, string supplierNameHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var transNoHintParameter = transNoHint != null ?
                new ObjectParameter("TransNoHint", transNoHint) :
                new ObjectParameter("TransNoHint", typeof(string));
    
            var transDateHintParameter = transDateHint != null ?
                new ObjectParameter("TransDateHint", transDateHint) :
                new ObjectParameter("TransDateHint", typeof(string));
    
            var invoiceNoHintParameter = invoiceNoHint != null ?
                new ObjectParameter("InvoiceNoHint", invoiceNoHint) :
                new ObjectParameter("InvoiceNoHint", typeof(string));
    
            var invoiceDateHintParameter = invoiceDateHint != null ?
                new ObjectParameter("InvoiceDateHint", invoiceDateHint) :
                new ObjectParameter("InvoiceDateHint", typeof(string));
    
            var supplierNameHintParameter = supplierNameHint != null ?
                new ObjectParameter("SupplierNameHint", supplierNameHint) :
                new ObjectParameter("SupplierNameHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPurchaseInvoiceList_Result>("SpGetPurchaseInvoiceList", typeParameter, transNoHintParameter, transDateHintParameter, invoiceNoHintParameter, invoiceDateHintParameter, supplierNameHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPurchaseInvoiceOtherChargesDetails_Result> SpGetPurchaseInvoiceOtherChargesDetails(Nullable<int> purchaseID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPurchaseInvoiceOtherChargesDetails_Result>("SpGetPurchaseInvoiceOtherChargesDetails", purchaseIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPurchaseInvoiceTaxDetails_Result> SpGetPurchaseInvoiceTaxDetails(Nullable<int> purchaseID)
        {
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPurchaseInvoiceTaxDetails_Result>("SpGetPurchaseInvoiceTaxDetails", purchaseIDParameter);
        }
    
        public virtual ObjectResult<SpGetPurchaseInvoiceTaxDetailsForService_Result> SpGetPurchaseInvoiceTaxDetailsForService(Nullable<int> purchaseInvoiceID)
        {
            var purchaseInvoiceIDParameter = purchaseInvoiceID.HasValue ?
                new ObjectParameter("PurchaseInvoiceID", purchaseInvoiceID) :
                new ObjectParameter("PurchaseInvoiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPurchaseInvoiceTaxDetailsForService_Result>("SpGetPurchaseInvoiceTaxDetailsForService", purchaseInvoiceIDParameter);
        }
    
        public virtual ObjectResult<SpGetPurchaseInvoiceTrans_Result> SpGetPurchaseInvoiceTrans(Nullable<int> purchaseID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPurchaseInvoiceTrans_Result>("SpGetPurchaseInvoiceTrans", purchaseIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPurchaseInvoiceTransForService_Result> SpGetPurchaseInvoiceTransForService(Nullable<int> purchaseInvoiceID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var purchaseInvoiceIDParameter = purchaseInvoiceID.HasValue ?
                new ObjectParameter("PurchaseInvoiceID", purchaseInvoiceID) :
                new ObjectParameter("PurchaseInvoiceID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPurchaseInvoiceTransForService_Result>("SpGetPurchaseInvoiceTransForService", purchaseInvoiceIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPurchaseOrderList_Result> SpGetPurchaseOrderList(string type, string transNoHint, string transDateHint, string supplierNameHint, string itemNameHint, string categoryNameHint, string netAmtHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var transNoHintParameter = transNoHint != null ?
                new ObjectParameter("TransNoHint", transNoHint) :
                new ObjectParameter("TransNoHint", typeof(string));
    
            var transDateHintParameter = transDateHint != null ?
                new ObjectParameter("TransDateHint", transDateHint) :
                new ObjectParameter("TransDateHint", typeof(string));
    
            var supplierNameHintParameter = supplierNameHint != null ?
                new ObjectParameter("SupplierNameHint", supplierNameHint) :
                new ObjectParameter("SupplierNameHint", typeof(string));
    
            var itemNameHintParameter = itemNameHint != null ?
                new ObjectParameter("ItemNameHint", itemNameHint) :
                new ObjectParameter("ItemNameHint", typeof(string));
    
            var categoryNameHintParameter = categoryNameHint != null ?
                new ObjectParameter("CategoryNameHint", categoryNameHint) :
                new ObjectParameter("CategoryNameHint", typeof(string));
    
            var netAmtHintParameter = netAmtHint != null ?
                new ObjectParameter("NetAmtHint", netAmtHint) :
                new ObjectParameter("NetAmtHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPurchaseOrderList_Result>("SpGetPurchaseOrderList", typeParameter, transNoHintParameter, transDateHintParameter, supplierNameHintParameter, itemNameHintParameter, categoryNameHintParameter, netAmtHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPurchaseOrderTransDetailsForService_Result> SpGetPurchaseOrderTransDetailsForService(Nullable<int> iD, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPurchaseOrderTransDetailsForService_Result>("SpGetPurchaseOrderTransDetailsForService", iDParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPurchaseRequisitionForService_Result> SpGetPurchaseRequisitionForService(Nullable<int> iD, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPurchaseRequisitionForService_Result>("SpGetPurchaseRequisitionForService", iDParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPurchaseRequisitionList_Result> SpGetPurchaseRequisitionList(string type, string transNoHint, string transDateHint, string fromDepartmentHint, string toDepartmentHint, string categoryNameHint, string itemNameHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var transNoHintParameter = transNoHint != null ?
                new ObjectParameter("TransNoHint", transNoHint) :
                new ObjectParameter("TransNoHint", typeof(string));
    
            var transDateHintParameter = transDateHint != null ?
                new ObjectParameter("TransDateHint", transDateHint) :
                new ObjectParameter("TransDateHint", typeof(string));
    
            var fromDepartmentHintParameter = fromDepartmentHint != null ?
                new ObjectParameter("FromDepartmentHint", fromDepartmentHint) :
                new ObjectParameter("FromDepartmentHint", typeof(string));
    
            var toDepartmentHintParameter = toDepartmentHint != null ?
                new ObjectParameter("ToDepartmentHint", toDepartmentHint) :
                new ObjectParameter("ToDepartmentHint", typeof(string));
    
            var categoryNameHintParameter = categoryNameHint != null ?
                new ObjectParameter("CategoryNameHint", categoryNameHint) :
                new ObjectParameter("CategoryNameHint", typeof(string));
    
            var itemNameHintParameter = itemNameHint != null ?
                new ObjectParameter("ItemNameHint", itemNameHint) :
                new ObjectParameter("ItemNameHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPurchaseRequisitionList_Result>("SpGetPurchaseRequisitionList", typeParameter, transNoHintParameter, transDateHintParameter, fromDepartmentHintParameter, toDepartmentHintParameter, categoryNameHintParameter, itemNameHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPurchaseRequisitionTransDetailsForService_Result> SpGetPurchaseRequisitionTransDetailsForService(Nullable<int> iD, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPurchaseRequisitionTransDetailsForService_Result>("SpGetPurchaseRequisitionTransDetailsForService", iDParameter, userIDParameter, finYearParameter, locationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPurchaseReturn_Result> SpGetPurchaseReturn(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPurchaseReturn_Result>("SpGetPurchaseReturn", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPurchaseReturnAutocompleteByID_Result> SpGetPurchaseReturnAutocompleteByID(Nullable<int> itemID, Nullable<int> supplierID, string hint, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var hintParameter = hint != null ?
                new ObjectParameter("Hint", hint) :
                new ObjectParameter("Hint", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPurchaseReturnAutocompleteByID_Result>("SpGetPurchaseReturnAutocompleteByID", itemIDParameter, supplierIDParameter, hintParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPurchaseReturnForIRG_Result> SpGetPurchaseReturnForIRG(Nullable<int> supplierID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPurchaseReturnForIRG_Result>("SpGetPurchaseReturnForIRG", supplierIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPurchaseReturnForPurchaseReturn_Result> SpGetPurchaseReturnForPurchaseReturn(Nullable<int> supplierID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPurchaseReturnForPurchaseReturn_Result>("SpGetPurchaseReturnForPurchaseReturn", supplierIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPurchaseReturnItemForPurchaseReturn_Result> SpGetPurchaseReturnItemForPurchaseReturn(Nullable<int> purchaseReturnID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var purchaseReturnIDParameter = purchaseReturnID.HasValue ?
                new ObjectParameter("PurchaseReturnID", purchaseReturnID) :
                new ObjectParameter("PurchaseReturnID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPurchaseReturnItemForPurchaseReturn_Result>("SpGetPurchaseReturnItemForPurchaseReturn", purchaseReturnIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPurchaseReturnList_Result> SpGetPurchaseReturnList(string type, string transNo, string transDate, string supplierName, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var transDateParameter = transDate != null ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(string));
    
            var supplierNameParameter = supplierName != null ?
                new ObjectParameter("SupplierName", supplierName) :
                new ObjectParameter("SupplierName", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPurchaseReturnList_Result>("SpGetPurchaseReturnList", typeParameter, transNoParameter, transDateParameter, supplierNameParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPurchaseReturnOderListForDataTable_Result> SpGetPurchaseReturnOderListForDataTable(string type, string transNo, string transDate, string supplierName, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var transDateParameter = transDate != null ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(string));
    
            var supplierNameParameter = supplierName != null ?
                new ObjectParameter("SupplierName", supplierName) :
                new ObjectParameter("SupplierName", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPurchaseReturnOderListForDataTable_Result>("SpGetPurchaseReturnOderListForDataTable", typeParameter, transNoParameter, transDateParameter, supplierNameParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPurchaseReturnOrder_Result> SpGetPurchaseReturnOrder(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPurchaseReturnOrder_Result>("SpGetPurchaseReturnOrder", finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPurchaseReturnOrderDetail_Result> SpGetPurchaseReturnOrderDetail(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPurchaseReturnOrderDetail_Result>("SpGetPurchaseReturnOrderDetail", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPurchaseReturnOrderForPurchaseReturn_Result> SpGetPurchaseReturnOrderForPurchaseReturn(Nullable<int> supplierID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPurchaseReturnOrderForPurchaseReturn_Result>("SpGetPurchaseReturnOrderForPurchaseReturn", supplierIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPurchaseReturnOrderItemForIRG_Result> SpGetPurchaseReturnOrderItemForIRG(Nullable<int> purchaseInvoiceID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var purchaseInvoiceIDParameter = purchaseInvoiceID.HasValue ?
                new ObjectParameter("PurchaseInvoiceID", purchaseInvoiceID) :
                new ObjectParameter("PurchaseInvoiceID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPurchaseReturnOrderItemForIRG_Result>("SpGetPurchaseReturnOrderItemForIRG", purchaseInvoiceIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPurchaseReturnOrderItemForPurchaseReturn_Result> SpGetPurchaseReturnOrderItemForPurchaseReturn(Nullable<int> purchaseInvoiceID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var purchaseInvoiceIDParameter = purchaseInvoiceID.HasValue ?
                new ObjectParameter("PurchaseInvoiceID", purchaseInvoiceID) :
                new ObjectParameter("PurchaseInvoiceID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPurchaseReturnOrderItemForPurchaseReturn_Result>("SpGetPurchaseReturnOrderItemForPurchaseReturn", purchaseInvoiceIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPurchaseReturnProcessingItem_Result> SpGetPurchaseReturnProcessingItem(string processingType, Nullable<System.DateTime> fromTransactionDate, Nullable<System.DateTime> toTransactionDate, Nullable<System.DateTime> asOnDate, Nullable<int> days, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var processingTypeParameter = processingType != null ?
                new ObjectParameter("ProcessingType", processingType) :
                new ObjectParameter("ProcessingType", typeof(string));
    
            var fromTransactionDateParameter = fromTransactionDate.HasValue ?
                new ObjectParameter("FromTransactionDate", fromTransactionDate) :
                new ObjectParameter("FromTransactionDate", typeof(System.DateTime));
    
            var toTransactionDateParameter = toTransactionDate.HasValue ?
                new ObjectParameter("ToTransactionDate", toTransactionDate) :
                new ObjectParameter("ToTransactionDate", typeof(System.DateTime));
    
            var asOnDateParameter = asOnDate.HasValue ?
                new ObjectParameter("AsOnDate", asOnDate) :
                new ObjectParameter("AsOnDate", typeof(System.DateTime));
    
            var daysParameter = days.HasValue ?
                new ObjectParameter("Days", days) :
                new ObjectParameter("Days", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPurchaseReturnProcessingItem_Result>("SpGetPurchaseReturnProcessingItem", processingTypeParameter, fromTransactionDateParameter, toTransactionDateParameter, asOnDateParameter, daysParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPurchaseReturnProcessingItemOrgOld_Result> SpGetPurchaseReturnProcessingItemOrgOld(string processingType, Nullable<System.DateTime> fromTransactionDate, Nullable<System.DateTime> toTransactionDate, Nullable<System.DateTime> asOnDate, Nullable<int> days, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var processingTypeParameter = processingType != null ?
                new ObjectParameter("ProcessingType", processingType) :
                new ObjectParameter("ProcessingType", typeof(string));
    
            var fromTransactionDateParameter = fromTransactionDate.HasValue ?
                new ObjectParameter("FromTransactionDate", fromTransactionDate) :
                new ObjectParameter("FromTransactionDate", typeof(System.DateTime));
    
            var toTransactionDateParameter = toTransactionDate.HasValue ?
                new ObjectParameter("ToTransactionDate", toTransactionDate) :
                new ObjectParameter("ToTransactionDate", typeof(System.DateTime));
    
            var asOnDateParameter = asOnDate.HasValue ?
                new ObjectParameter("AsOnDate", asOnDate) :
                new ObjectParameter("AsOnDate", typeof(System.DateTime));
    
            var daysParameter = days.HasValue ?
                new ObjectParameter("Days", days) :
                new ObjectParameter("Days", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPurchaseReturnProcessingItemOrgOld_Result>("SpGetPurchaseReturnProcessingItemOrgOld", processingTypeParameter, fromTransactionDateParameter, toTransactionDateParameter, asOnDateParameter, daysParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPurchaseReturnTrans_Result> SpGetPurchaseReturnTrans(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPurchaseReturnTrans_Result>("SpGetPurchaseReturnTrans", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPurchaseReturnTransForIRG_Result> SpGetPurchaseReturnTransForIRG(Nullable<int> purchaseReturnID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var purchaseReturnIDParameter = purchaseReturnID.HasValue ?
                new ObjectParameter("PurchaseReturnID", purchaseReturnID) :
                new ObjectParameter("PurchaseReturnID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPurchaseReturnTransForIRG_Result>("SpGetPurchaseReturnTransForIRG", purchaseReturnIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<spGetQCMaterialByID_Result> spGetQCMaterialByID(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetQCMaterialByID_Result>("spGetQCMaterialByID", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<spGetQCMaterials_Result> spGetQCMaterials(string status, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> offset, Nullable<int> limit)
        {
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("offset", offset) :
                new ObjectParameter("offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("limit", limit) :
                new ObjectParameter("limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetQCMaterials_Result>("spGetQCMaterials", statusParameter, finYearParameter, locationIDParameter, applicationIDParameter, offsetParameter, limitParameter);
        }
    
        public virtual ObjectResult<spGetQCMaterialsTrans_Result> spGetQCMaterialsTrans(Nullable<int> qCID, string type, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var qCIDParameter = qCID.HasValue ?
                new ObjectParameter("QCID", qCID) :
                new ObjectParameter("QCID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetQCMaterialsTrans_Result>("spGetQCMaterialsTrans", qCIDParameter, typeParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetQualityCheckList_Result> SpGetQualityCheckList(string type, string transNoHint, string transDateHint, string gRNNoHint, string receiptDateHint, string itemNameHint, string unitNameHint, string supplierNameHint, string deliveryChallanNoHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var transNoHintParameter = transNoHint != null ?
                new ObjectParameter("TransNoHint", transNoHint) :
                new ObjectParameter("TransNoHint", typeof(string));
    
            var transDateHintParameter = transDateHint != null ?
                new ObjectParameter("TransDateHint", transDateHint) :
                new ObjectParameter("TransDateHint", typeof(string));
    
            var gRNNoHintParameter = gRNNoHint != null ?
                new ObjectParameter("GRNNoHint", gRNNoHint) :
                new ObjectParameter("GRNNoHint", typeof(string));
    
            var receiptDateHintParameter = receiptDateHint != null ?
                new ObjectParameter("ReceiptDateHint", receiptDateHint) :
                new ObjectParameter("ReceiptDateHint", typeof(string));
    
            var itemNameHintParameter = itemNameHint != null ?
                new ObjectParameter("ItemNameHint", itemNameHint) :
                new ObjectParameter("ItemNameHint", typeof(string));
    
            var unitNameHintParameter = unitNameHint != null ?
                new ObjectParameter("UnitNameHint", unitNameHint) :
                new ObjectParameter("UnitNameHint", typeof(string));
    
            var supplierNameHintParameter = supplierNameHint != null ?
                new ObjectParameter("SupplierNameHint", supplierNameHint) :
                new ObjectParameter("SupplierNameHint", typeof(string));
    
            var deliveryChallanNoHintParameter = deliveryChallanNoHint != null ?
                new ObjectParameter("DeliveryChallanNoHint", deliveryChallanNoHint) :
                new ObjectParameter("DeliveryChallanNoHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetQualityCheckList_Result>("SpGetQualityCheckList", typeParameter, transNoHintParameter, transDateHintParameter, gRNNoHintParameter, receiptDateHintParameter, itemNameHintParameter, unitNameHintParameter, supplierNameHintParameter, deliveryChallanNoHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpGetRateForInterCompanytItem(Nullable<int> itemID, string batchtype, ObjectParameter rate)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchtypeParameter = batchtype != null ?
                new ObjectParameter("Batchtype", batchtype) :
                new ObjectParameter("Batchtype", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetRateForInterCompanytItem", itemIDParameter, batchtypeParameter, rate);
        }
    
        public virtual ObjectResult<SpGetReOrderConfigvalues_Result> SpGetReOrderConfigvalues(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetReOrderConfigvalues_Result>("SpGetReOrderConfigvalues", finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetReOrderSupplierList_Result> SpGetReOrderSupplierList(Nullable<int> itemID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetReOrderSupplierList_Result>("SpGetReOrderSupplierList", itemIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetServicePurchaseInvoiceList_Result> SpGetServicePurchaseInvoiceList(string type, string transNoHint, string transDateHint, string invoiceNoHint, string invoiceDateHint, string supplierNameHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var transNoHintParameter = transNoHint != null ?
                new ObjectParameter("TransNoHint", transNoHint) :
                new ObjectParameter("TransNoHint", typeof(string));
    
            var transDateHintParameter = transDateHint != null ?
                new ObjectParameter("TransDateHint", transDateHint) :
                new ObjectParameter("TransDateHint", typeof(string));
    
            var invoiceNoHintParameter = invoiceNoHint != null ?
                new ObjectParameter("InvoiceNoHint", invoiceNoHint) :
                new ObjectParameter("InvoiceNoHint", typeof(string));
    
            var invoiceDateHintParameter = invoiceDateHint != null ?
                new ObjectParameter("InvoiceDateHint", invoiceDateHint) :
                new ObjectParameter("InvoiceDateHint", typeof(string));
    
            var supplierNameHintParameter = supplierNameHint != null ?
                new ObjectParameter("SupplierNameHint", supplierNameHint) :
                new ObjectParameter("SupplierNameHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetServicePurchaseInvoiceList_Result>("SpGetServicePurchaseInvoiceList", typeParameter, transNoHintParameter, transDateHintParameter, invoiceNoHintParameter, invoiceDateHintParameter, supplierNameHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetServicePurchaseOrderList_Result> SpGetServicePurchaseOrderList(string type, string transNoHint, string transDateHint, string supplierNameHint, string categoryNameHint, string itemNameHint, string netAmtHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var transNoHintParameter = transNoHint != null ?
                new ObjectParameter("TransNoHint", transNoHint) :
                new ObjectParameter("TransNoHint", typeof(string));
    
            var transDateHintParameter = transDateHint != null ?
                new ObjectParameter("TransDateHint", transDateHint) :
                new ObjectParameter("TransDateHint", typeof(string));
    
            var supplierNameHintParameter = supplierNameHint != null ?
                new ObjectParameter("SupplierNameHint", supplierNameHint) :
                new ObjectParameter("SupplierNameHint", typeof(string));
    
            var categoryNameHintParameter = categoryNameHint != null ?
                new ObjectParameter("CategoryNameHint", categoryNameHint) :
                new ObjectParameter("CategoryNameHint", typeof(string));
    
            var itemNameHintParameter = itemNameHint != null ?
                new ObjectParameter("ItemNameHint", itemNameHint) :
                new ObjectParameter("ItemNameHint", typeof(string));
    
            var netAmtHintParameter = netAmtHint != null ?
                new ObjectParameter("NetAmtHint", netAmtHint) :
                new ObjectParameter("NetAmtHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetServicePurchaseOrderList_Result>("SpGetServicePurchaseOrderList", typeParameter, transNoHintParameter, transDateHintParameter, supplierNameHintParameter, categoryNameHintParameter, itemNameHintParameter, netAmtHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetServicePurchaseRequisitionList_Result> SpGetServicePurchaseRequisitionList(string type, string transNoHint, string transDateHint, string purchaseOrderNumberHint, string categoryNameHint, string itemNameHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var transNoHintParameter = transNoHint != null ?
                new ObjectParameter("TransNoHint", transNoHint) :
                new ObjectParameter("TransNoHint", typeof(string));
    
            var transDateHintParameter = transDateHint != null ?
                new ObjectParameter("TransDateHint", transDateHint) :
                new ObjectParameter("TransDateHint", typeof(string));
    
            var purchaseOrderNumberHintParameter = purchaseOrderNumberHint != null ?
                new ObjectParameter("PurchaseOrderNumberHint", purchaseOrderNumberHint) :
                new ObjectParameter("PurchaseOrderNumberHint", typeof(string));
    
            var categoryNameHintParameter = categoryNameHint != null ?
                new ObjectParameter("CategoryNameHint", categoryNameHint) :
                new ObjectParameter("CategoryNameHint", typeof(string));
    
            var itemNameHintParameter = itemNameHint != null ?
                new ObjectParameter("ItemNameHint", itemNameHint) :
                new ObjectParameter("ItemNameHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetServicePurchaseRequisitionList_Result>("SpGetServicePurchaseRequisitionList", typeParameter, transNoHintParameter, transDateHintParameter, purchaseOrderNumberHintParameter, categoryNameHintParameter, itemNameHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetSRN_Result> SpGetSRN(Nullable<int> iD, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSRN_Result>("SpGetSRN", iDParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetSRNList_Result> SpGetSRNList(string type, string transNoHint, string transDateHint, string supplierNameHint, string deliveryChallanNoHint, string deliveryChallanDateHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var transNoHintParameter = transNoHint != null ?
                new ObjectParameter("TransNoHint", transNoHint) :
                new ObjectParameter("TransNoHint", typeof(string));
    
            var transDateHintParameter = transDateHint != null ?
                new ObjectParameter("TransDateHint", transDateHint) :
                new ObjectParameter("TransDateHint", typeof(string));
    
            var supplierNameHintParameter = supplierNameHint != null ?
                new ObjectParameter("SupplierNameHint", supplierNameHint) :
                new ObjectParameter("SupplierNameHint", typeof(string));
    
            var deliveryChallanNoHintParameter = deliveryChallanNoHint != null ?
                new ObjectParameter("DeliveryChallanNoHint", deliveryChallanNoHint) :
                new ObjectParameter("DeliveryChallanNoHint", typeof(string));
    
            var deliveryChallanDateHintParameter = deliveryChallanDateHint != null ?
                new ObjectParameter("DeliveryChallanDateHint", deliveryChallanDateHint) :
                new ObjectParameter("DeliveryChallanDateHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSRNList_Result>("SpGetSRNList", typeParameter, transNoHintParameter, transDateHintParameter, supplierNameHintParameter, deliveryChallanNoHintParameter, deliveryChallanDateHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetSRNTrans_Result> SpGetSRNTrans(Nullable<int> sRNID, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var sRNIDParameter = sRNID.HasValue ?
                new ObjectParameter("SRNID", sRNID) :
                new ObjectParameter("SRNID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSRNTrans_Result>("SpGetSRNTrans", sRNIDParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetStockInvoiceIDWithItemID_Result> SpGetStockInvoiceIDWithItemID(Nullable<int> itemID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetStockInvoiceIDWithItemID_Result>("SpGetStockInvoiceIDWithItemID", itemIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetStockInvoiceTransForPurchaseReturn_Result> SpGetStockInvoiceTransForPurchaseReturn(Nullable<int> itemID, Nullable<int> invoiceID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetStockInvoiceTransForPurchaseReturn_Result>("SpGetStockInvoiceTransForPurchaseReturn", itemIDParameter, invoiceIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetUnitsAndCategoryByItemID_Result> SpGetUnitsAndCategoryByItemID(Nullable<int> itemID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetUnitsAndCategoryByItemID_Result>("SpGetUnitsAndCategoryByItemID", itemIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<spGetUnProcessedGRN_Result> spGetUnProcessedGRN(Nullable<int> supplierID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetUnProcessedGRN_Result>("spGetUnProcessedGRN", supplierIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<spGetUnProcessedGRNForAllopathy_Result> spGetUnProcessedGRNForAllopathy(string hint, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var hintParameter = hint != null ?
                new ObjectParameter("Hint", hint) :
                new ObjectParameter("Hint", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetUnProcessedGRNForAllopathy_Result>("spGetUnProcessedGRNForAllopathy", hintParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetUnProcessedGRNForAllopathyV4_Result> SpGetUnProcessedGRNForAllopathyV4(string hint, Nullable<int> businessCategoryID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var hintParameter = hint != null ?
                new ObjectParameter("Hint", hint) :
                new ObjectParameter("Hint", typeof(string));
    
            var businessCategoryIDParameter = businessCategoryID.HasValue ?
                new ObjectParameter("BusinessCategoryID", businessCategoryID) :
                new ObjectParameter("BusinessCategoryID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetUnProcessedGRNForAllopathyV4_Result>("SpGetUnProcessedGRNForAllopathyV4", hintParameter, businessCategoryIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<spGetUnProcessedGRNTrans_Result> spGetUnProcessedGRNTrans(Nullable<int> gRNID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var gRNIDParameter = gRNID.HasValue ?
                new ObjectParameter("GRNID", gRNID) :
                new ObjectParameter("GRNID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetUnProcessedGRNTrans_Result>("spGetUnProcessedGRNTrans", gRNIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetUnProcessedMilkPurchase_Result> SpGetUnProcessedMilkPurchase(Nullable<int> supplierID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetUnProcessedMilkPurchase_Result>("SpGetUnProcessedMilkPurchase", supplierIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetUnProcessedMilkPurchaseByID_Result> SpGetUnProcessedMilkPurchaseByID(Nullable<int> milkPurchaseID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var milkPurchaseIDParameter = milkPurchaseID.HasValue ?
                new ObjectParameter("MilkPurchaseID", milkPurchaseID) :
                new ObjectParameter("MilkPurchaseID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetUnProcessedMilkPurchaseByID_Result>("SpGetUnProcessedMilkPurchaseByID", milkPurchaseIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetUnProcessedPurchaseOrderForService_Result> SpGetUnProcessedPurchaseOrderForService(Nullable<int> supplierID, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetUnProcessedPurchaseOrderForService_Result>("SpGetUnProcessedPurchaseOrderForService", supplierIDParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetUnProcessedPurchaseOrderTransForService_Result> SpGetUnProcessedPurchaseOrderTransForService(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetUnProcessedPurchaseOrderTransForService_Result>("SpGetUnProcessedPurchaseOrderTransForService", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetUnProcessedPurchaseOrderV4_Result> SpGetUnProcessedPurchaseOrderV4(Nullable<int> supplierID, Nullable<int> businessCategoryID, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var businessCategoryIDParameter = businessCategoryID.HasValue ?
                new ObjectParameter("BusinessCategoryID", businessCategoryID) :
                new ObjectParameter("BusinessCategoryID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetUnProcessedPurchaseOrderV4_Result>("SpGetUnProcessedPurchaseOrderV4", supplierIDParameter, businessCategoryIDParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<spGetUnProcessedPurchaseRequisition_Result> spGetUnProcessedPurchaseRequisition(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> userID)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetUnProcessedPurchaseRequisition_Result>("spGetUnProcessedPurchaseRequisition", finYearParameter, locationIDParameter, applicationIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<spGetUnProcessedPurchaseRequisitionForService_Result> spGetUnProcessedPurchaseRequisitionForService(Nullable<int> finYear, Nullable<int> userID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetUnProcessedPurchaseRequisitionForService_Result>("spGetUnProcessedPurchaseRequisitionForService", finYearParameter, userIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<spGetUnProcessedPurchaseRequisitionTransByID_Result> spGetUnProcessedPurchaseRequisitionTransByID(Nullable<int> purchaseRequisitionID, Nullable<int> supplierID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var purchaseRequisitionIDParameter = purchaseRequisitionID.HasValue ?
                new ObjectParameter("PurchaseRequisitionID", purchaseRequisitionID) :
                new ObjectParameter("PurchaseRequisitionID", typeof(int));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetUnProcessedPurchaseRequisitionTransByID_Result>("spGetUnProcessedPurchaseRequisitionTransByID", purchaseRequisitionIDParameter, supplierIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<spGetUnProcessedPurchaseRequisitionTransForService_Result> spGetUnProcessedPurchaseRequisitionTransForService(Nullable<int> purchaseRequisitionID, Nullable<int> supplierID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var purchaseRequisitionIDParameter = purchaseRequisitionID.HasValue ?
                new ObjectParameter("PurchaseRequisitionID", purchaseRequisitionID) :
                new ObjectParameter("PurchaseRequisitionID", typeof(int));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetUnProcessedPurchaseRequisitionTransForService_Result>("spGetUnProcessedPurchaseRequisitionTransForService", purchaseRequisitionIDParameter, supplierIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetUnProcessedSRN_Result> SpGetUnProcessedSRN(Nullable<int> supplierID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetUnProcessedSRN_Result>("SpGetUnProcessedSRN", supplierIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetUnProcessedSRNTrans_Result> SpGetUnProcessedSRNTrans(Nullable<int> sRNID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var sRNIDParameter = sRNID.HasValue ?
                new ObjectParameter("SRNID", sRNID) :
                new ObjectParameter("SRNID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetUnProcessedSRNTrans_Result>("SpGetUnProcessedSRNTrans", sRNIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpGetUnProcessedTDSAmountForServicePurchaseInvoice(string iDs, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter tDSAmount)
        {
            var iDsParameter = iDs != null ?
                new ObjectParameter("IDs", iDs) :
                new ObjectParameter("IDs", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetUnProcessedTDSAmountForServicePurchaseInvoice", iDsParameter, finYearParameter, locationIDParameter, applicationIDParameter, tDSAmount);
        }
    
        public virtual ObjectResult<SpGetUnSettledPurchaseInvoicesBySupplier_Result> SpGetUnSettledPurchaseInvoicesBySupplier(Nullable<int> supplierID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetUnSettledPurchaseInvoicesBySupplier_Result>("SpGetUnSettledPurchaseInvoicesBySupplier", supplierIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpIsDirectPurchaseInvoiceCancelable(Nullable<int> purchaseOrderID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter isCancelable)
        {
            var purchaseOrderIDParameter = purchaseOrderID.HasValue ?
                new ObjectParameter("PurchaseOrderID", purchaseOrderID) :
                new ObjectParameter("PurchaseOrderID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpIsDirectPurchaseInvoiceCancelable", purchaseOrderIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, isCancelable);
        }
    
        public virtual ObjectResult<SpIsItemSuppliedBySupplier_Result> SpIsItemSuppliedBySupplier(string itemList, Nullable<int> supplierID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemListParameter = itemList != null ?
                new ObjectParameter("ItemList", itemList) :
                new ObjectParameter("ItemList", typeof(string));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpIsItemSuppliedBySupplier_Result>("SpIsItemSuppliedBySupplier", itemListParameter, supplierIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpIsLocalPurchaseID(Nullable<int> iD, Nullable<int> applicationID, ObjectParameter isExist)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpIsLocalPurchaseID", iDParameter, applicationIDParameter, isExist);
        }
    
        public virtual ObjectResult<SpIsPOCancellable_Result> SpIsPOCancellable(Nullable<int> purchaseOrderID, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var purchaseOrderIDParameter = purchaseOrderID.HasValue ?
                new ObjectParameter("PurchaseOrderID", purchaseOrderID) :
                new ObjectParameter("PurchaseOrderID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpIsPOCancellable_Result>("SpIsPOCancellable", purchaseOrderIDParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> SpIsPOSCancellable(Nullable<int> servicePurchaseOrderID, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var servicePurchaseOrderIDParameter = servicePurchaseOrderID.HasValue ?
                new ObjectParameter("ServicePurchaseOrderID", servicePurchaseOrderID) :
                new ObjectParameter("ServicePurchaseOrderID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("SpIsPOSCancellable", servicePurchaseOrderIDParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SpIsPurchaseRequisitionEditable(Nullable<int> purchaseRequisitionID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var purchaseRequisitionIDParameter = purchaseRequisitionID.HasValue ?
                new ObjectParameter("PurchaseRequisitionID", purchaseRequisitionID) :
                new ObjectParameter("PurchaseRequisitionID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SpIsPurchaseRequisitionEditable", purchaseRequisitionIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpItemByItemANDPurchaseCategoriesForPurchaseOrder_Result> SpItemByItemANDPurchaseCategoriesForPurchaseOrder(Nullable<int> itemCategoryID, Nullable<int> purchaseCategoryID, Nullable<int> businessCategoryID, Nullable<int> supplierID, string itemHint, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var purchaseCategoryIDParameter = purchaseCategoryID.HasValue ?
                new ObjectParameter("PurchaseCategoryID", purchaseCategoryID) :
                new ObjectParameter("PurchaseCategoryID", typeof(int));
    
            var businessCategoryIDParameter = businessCategoryID.HasValue ?
                new ObjectParameter("BusinessCategoryID", businessCategoryID) :
                new ObjectParameter("BusinessCategoryID", typeof(int));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var itemHintParameter = itemHint != null ?
                new ObjectParameter("ItemHint", itemHint) :
                new ObjectParameter("ItemHint", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpItemByItemANDPurchaseCategoriesForPurchaseOrder_Result>("SpItemByItemANDPurchaseCategoriesForPurchaseOrder", itemCategoryIDParameter, purchaseCategoryIDParameter, businessCategoryIDParameter, supplierIDParameter, itemHintParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpSuspendPurchaseOrderItem(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter retValue)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpSuspendPurchaseOrderItem", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter, retValue);
        }
    
        public virtual int SpUpdateDirectPurchaseOrder(Nullable<int> iD, Nullable<int> supplierID, Nullable<int> deliveryWithin, Nullable<int> advancePercentage, Nullable<decimal> advanceAmount, Nullable<System.DateTime> purchaseOrderDate, Nullable<int> shippingAddressID, Nullable<int> billingAddressID, Nullable<int> selectedQuotationID, string otherQuotationIDS, Nullable<bool> isDraft, string remarks, string supplierReferenceNo, string termsOfPrice, Nullable<int> paymentModeID, Nullable<int> paymentWithinID, Nullable<decimal> sGSTAmt, Nullable<decimal> cGSTAmt, Nullable<decimal> iGSTAmt, Nullable<decimal> freightAmt, Nullable<decimal> otherCharges, Nullable<decimal> packingShippingCharges, Nullable<decimal> netAmt, Nullable<int> salesOrderLocationID, Nullable<int> storeID, Nullable<decimal> discount, Nullable<decimal> otherDeductions, string invoiceNo, Nullable<System.DateTime> invoiceDate, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var deliveryWithinParameter = deliveryWithin.HasValue ?
                new ObjectParameter("DeliveryWithin", deliveryWithin) :
                new ObjectParameter("DeliveryWithin", typeof(int));
    
            var advancePercentageParameter = advancePercentage.HasValue ?
                new ObjectParameter("AdvancePercentage", advancePercentage) :
                new ObjectParameter("AdvancePercentage", typeof(int));
    
            var advanceAmountParameter = advanceAmount.HasValue ?
                new ObjectParameter("AdvanceAmount", advanceAmount) :
                new ObjectParameter("AdvanceAmount", typeof(decimal));
    
            var purchaseOrderDateParameter = purchaseOrderDate.HasValue ?
                new ObjectParameter("PurchaseOrderDate", purchaseOrderDate) :
                new ObjectParameter("PurchaseOrderDate", typeof(System.DateTime));
    
            var shippingAddressIDParameter = shippingAddressID.HasValue ?
                new ObjectParameter("ShippingAddressID", shippingAddressID) :
                new ObjectParameter("ShippingAddressID", typeof(int));
    
            var billingAddressIDParameter = billingAddressID.HasValue ?
                new ObjectParameter("BillingAddressID", billingAddressID) :
                new ObjectParameter("BillingAddressID", typeof(int));
    
            var selectedQuotationIDParameter = selectedQuotationID.HasValue ?
                new ObjectParameter("SelectedQuotationID", selectedQuotationID) :
                new ObjectParameter("SelectedQuotationID", typeof(int));
    
            var otherQuotationIDSParameter = otherQuotationIDS != null ?
                new ObjectParameter("OtherQuotationIDS", otherQuotationIDS) :
                new ObjectParameter("OtherQuotationIDS", typeof(string));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var supplierReferenceNoParameter = supplierReferenceNo != null ?
                new ObjectParameter("SupplierReferenceNo", supplierReferenceNo) :
                new ObjectParameter("SupplierReferenceNo", typeof(string));
    
            var termsOfPriceParameter = termsOfPrice != null ?
                new ObjectParameter("TermsOfPrice", termsOfPrice) :
                new ObjectParameter("TermsOfPrice", typeof(string));
    
            var paymentModeIDParameter = paymentModeID.HasValue ?
                new ObjectParameter("PaymentModeID", paymentModeID) :
                new ObjectParameter("PaymentModeID", typeof(int));
    
            var paymentWithinIDParameter = paymentWithinID.HasValue ?
                new ObjectParameter("PaymentWithinID", paymentWithinID) :
                new ObjectParameter("PaymentWithinID", typeof(int));
    
            var sGSTAmtParameter = sGSTAmt.HasValue ?
                new ObjectParameter("SGSTAmt", sGSTAmt) :
                new ObjectParameter("SGSTAmt", typeof(decimal));
    
            var cGSTAmtParameter = cGSTAmt.HasValue ?
                new ObjectParameter("CGSTAmt", cGSTAmt) :
                new ObjectParameter("CGSTAmt", typeof(decimal));
    
            var iGSTAmtParameter = iGSTAmt.HasValue ?
                new ObjectParameter("IGSTAmt", iGSTAmt) :
                new ObjectParameter("IGSTAmt", typeof(decimal));
    
            var freightAmtParameter = freightAmt.HasValue ?
                new ObjectParameter("FreightAmt", freightAmt) :
                new ObjectParameter("FreightAmt", typeof(decimal));
    
            var otherChargesParameter = otherCharges.HasValue ?
                new ObjectParameter("OtherCharges", otherCharges) :
                new ObjectParameter("OtherCharges", typeof(decimal));
    
            var packingShippingChargesParameter = packingShippingCharges.HasValue ?
                new ObjectParameter("PackingShippingCharges", packingShippingCharges) :
                new ObjectParameter("PackingShippingCharges", typeof(decimal));
    
            var netAmtParameter = netAmt.HasValue ?
                new ObjectParameter("NetAmt", netAmt) :
                new ObjectParameter("NetAmt", typeof(decimal));
    
            var salesOrderLocationIDParameter = salesOrderLocationID.HasValue ?
                new ObjectParameter("SalesOrderLocationID", salesOrderLocationID) :
                new ObjectParameter("SalesOrderLocationID", typeof(int));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(int));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var otherDeductionsParameter = otherDeductions.HasValue ?
                new ObjectParameter("OtherDeductions", otherDeductions) :
                new ObjectParameter("OtherDeductions", typeof(decimal));
    
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(string));
    
            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateDirectPurchaseOrder", iDParameter, supplierIDParameter, deliveryWithinParameter, advancePercentageParameter, advanceAmountParameter, purchaseOrderDateParameter, shippingAddressIDParameter, billingAddressIDParameter, selectedQuotationIDParameter, otherQuotationIDSParameter, isDraftParameter, remarksParameter, supplierReferenceNoParameter, termsOfPriceParameter, paymentModeIDParameter, paymentWithinIDParameter, sGSTAmtParameter, cGSTAmtParameter, iGSTAmtParameter, freightAmtParameter, otherChargesParameter, packingShippingChargesParameter, netAmtParameter, salesOrderLocationIDParameter, storeIDParameter, discountParameter, otherDeductionsParameter, invoiceNoParameter, invoiceDateParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateGoodsReceiptNote(Nullable<int> gRNID, Nullable<System.DateTime> grnDate, Nullable<int> supplierID, Nullable<System.DateTime> receiptDate, string deliveryChallanNo, Nullable<System.DateTime> deliveryChallanDate, Nullable<int> warehouseID, Nullable<bool> purchaseCompleted, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, Nullable<bool> isDraft)
        {
            var gRNIDParameter = gRNID.HasValue ?
                new ObjectParameter("GRNID", gRNID) :
                new ObjectParameter("GRNID", typeof(int));
    
            var grnDateParameter = grnDate.HasValue ?
                new ObjectParameter("GrnDate", grnDate) :
                new ObjectParameter("GrnDate", typeof(System.DateTime));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var receiptDateParameter = receiptDate.HasValue ?
                new ObjectParameter("ReceiptDate", receiptDate) :
                new ObjectParameter("ReceiptDate", typeof(System.DateTime));
    
            var deliveryChallanNoParameter = deliveryChallanNo != null ?
                new ObjectParameter("DeliveryChallanNo", deliveryChallanNo) :
                new ObjectParameter("DeliveryChallanNo", typeof(string));
    
            var deliveryChallanDateParameter = deliveryChallanDate.HasValue ?
                new ObjectParameter("DeliveryChallanDate", deliveryChallanDate) :
                new ObjectParameter("DeliveryChallanDate", typeof(System.DateTime));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var purchaseCompletedParameter = purchaseCompleted.HasValue ?
                new ObjectParameter("PurchaseCompleted", purchaseCompleted) :
                new ObjectParameter("PurchaseCompleted", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateGoodsReceiptNote", gRNIDParameter, grnDateParameter, supplierIDParameter, receiptDateParameter, deliveryChallanNoParameter, deliveryChallanDateParameter, warehouseIDParameter, purchaseCompletedParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, isDraftParameter);
        }
    
        public virtual int SpUpdateIRG(Nullable<int> iD, Nullable<System.DateTime> date, Nullable<decimal> sGSTAmount, Nullable<decimal> cGSTAmount, Nullable<decimal> iGSTAmount, Nullable<decimal> netAmount, Nullable<bool> isDraft, Nullable<int> createdUserID, Nullable<System.DateTime> createdDate, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var sGSTAmountParameter = sGSTAmount.HasValue ?
                new ObjectParameter("SGSTAmount", sGSTAmount) :
                new ObjectParameter("SGSTAmount", typeof(decimal));
    
            var cGSTAmountParameter = cGSTAmount.HasValue ?
                new ObjectParameter("CGSTAmount", cGSTAmount) :
                new ObjectParameter("CGSTAmount", typeof(decimal));
    
            var iGSTAmountParameter = iGSTAmount.HasValue ?
                new ObjectParameter("IGSTAmount", iGSTAmount) :
                new ObjectParameter("IGSTAmount", typeof(decimal));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateIRG", iDParameter, dateParameter, sGSTAmountParameter, cGSTAmountParameter, iGSTAmountParameter, netAmountParameter, isDraftParameter, createdUserIDParameter, createdDateParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateMilkPurchase(Nullable<int> iD, Nullable<System.DateTime> date, Nullable<decimal> totalAmount, Nullable<decimal> totalQty, Nullable<int> createdUserID, Nullable<bool> isDraft, string pRIDS, Nullable<bool> isDirectInvoice, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var totalQtyParameter = totalQty.HasValue ?
                new ObjectParameter("TotalQty", totalQty) :
                new ObjectParameter("TotalQty", typeof(decimal));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var pRIDSParameter = pRIDS != null ?
                new ObjectParameter("PRIDS", pRIDS) :
                new ObjectParameter("PRIDS", typeof(string));
    
            var isDirectInvoiceParameter = isDirectInvoice.HasValue ?
                new ObjectParameter("IsDirectInvoice", isDirectInvoice) :
                new ObjectParameter("IsDirectInvoice", typeof(bool));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateMilkPurchase", iDParameter, dateParameter, totalAmountParameter, totalQtyParameter, createdUserIDParameter, isDraftParameter, pRIDSParameter, isDirectInvoiceParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdatePayableDueDate(Nullable<int> purchaseInvoiceID, string type, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var purchaseInvoiceIDParameter = purchaseInvoiceID.HasValue ?
                new ObjectParameter("PurchaseInvoiceID", purchaseInvoiceID) :
                new ObjectParameter("PurchaseInvoiceID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdatePayableDueDate", purchaseInvoiceIDParameter, typeParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdatePurchaseInvoice(Nullable<int> purchaseInvoiceID, string invoiceNo, Nullable<System.DateTime> invoiceDate, Nullable<decimal> grossAmount, Nullable<decimal> invoiceTotal, Nullable<decimal> totalDifference, Nullable<decimal> sGSTAmount, Nullable<decimal> cGSTAmount, Nullable<decimal> iGSTAmount, Nullable<decimal> discount, Nullable<decimal> freightAmount, Nullable<decimal> packingCharges, Nullable<decimal> otherCharges, Nullable<decimal> taxOnFreight, Nullable<decimal> taxOnPackingCharges, Nullable<decimal> taxOnOtherCharge, Nullable<decimal> tDSOnFreightPercentage, Nullable<decimal> lessTDS, Nullable<decimal> otherDeductions, Nullable<decimal> amountPayable, Nullable<decimal> netAmount, Nullable<bool> isDraft, Nullable<bool> isCancelled, Nullable<System.DateTime> cancelledDate, Nullable<int> selectedQuotationID, string remarks, Nullable<int> createdUserID, Nullable<System.DateTime> createdDate, string status, Nullable<int> tDSID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var purchaseInvoiceIDParameter = purchaseInvoiceID.HasValue ?
                new ObjectParameter("PurchaseInvoiceID", purchaseInvoiceID) :
                new ObjectParameter("PurchaseInvoiceID", typeof(int));
    
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(string));
    
            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(System.DateTime));
    
            var grossAmountParameter = grossAmount.HasValue ?
                new ObjectParameter("GrossAmount", grossAmount) :
                new ObjectParameter("GrossAmount", typeof(decimal));
    
            var invoiceTotalParameter = invoiceTotal.HasValue ?
                new ObjectParameter("InvoiceTotal", invoiceTotal) :
                new ObjectParameter("InvoiceTotal", typeof(decimal));
    
            var totalDifferenceParameter = totalDifference.HasValue ?
                new ObjectParameter("TotalDifference", totalDifference) :
                new ObjectParameter("TotalDifference", typeof(decimal));
    
            var sGSTAmountParameter = sGSTAmount.HasValue ?
                new ObjectParameter("SGSTAmount", sGSTAmount) :
                new ObjectParameter("SGSTAmount", typeof(decimal));
    
            var cGSTAmountParameter = cGSTAmount.HasValue ?
                new ObjectParameter("CGSTAmount", cGSTAmount) :
                new ObjectParameter("CGSTAmount", typeof(decimal));
    
            var iGSTAmountParameter = iGSTAmount.HasValue ?
                new ObjectParameter("IGSTAmount", iGSTAmount) :
                new ObjectParameter("IGSTAmount", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var freightAmountParameter = freightAmount.HasValue ?
                new ObjectParameter("FreightAmount", freightAmount) :
                new ObjectParameter("FreightAmount", typeof(decimal));
    
            var packingChargesParameter = packingCharges.HasValue ?
                new ObjectParameter("PackingCharges", packingCharges) :
                new ObjectParameter("PackingCharges", typeof(decimal));
    
            var otherChargesParameter = otherCharges.HasValue ?
                new ObjectParameter("OtherCharges", otherCharges) :
                new ObjectParameter("OtherCharges", typeof(decimal));
    
            var taxOnFreightParameter = taxOnFreight.HasValue ?
                new ObjectParameter("TaxOnFreight", taxOnFreight) :
                new ObjectParameter("TaxOnFreight", typeof(decimal));
    
            var taxOnPackingChargesParameter = taxOnPackingCharges.HasValue ?
                new ObjectParameter("TaxOnPackingCharges", taxOnPackingCharges) :
                new ObjectParameter("TaxOnPackingCharges", typeof(decimal));
    
            var taxOnOtherChargeParameter = taxOnOtherCharge.HasValue ?
                new ObjectParameter("TaxOnOtherCharge", taxOnOtherCharge) :
                new ObjectParameter("TaxOnOtherCharge", typeof(decimal));
    
            var tDSOnFreightPercentageParameter = tDSOnFreightPercentage.HasValue ?
                new ObjectParameter("TDSOnFreightPercentage", tDSOnFreightPercentage) :
                new ObjectParameter("TDSOnFreightPercentage", typeof(decimal));
    
            var lessTDSParameter = lessTDS.HasValue ?
                new ObjectParameter("LessTDS", lessTDS) :
                new ObjectParameter("LessTDS", typeof(decimal));
    
            var otherDeductionsParameter = otherDeductions.HasValue ?
                new ObjectParameter("OtherDeductions", otherDeductions) :
                new ObjectParameter("OtherDeductions", typeof(decimal));
    
            var amountPayableParameter = amountPayable.HasValue ?
                new ObjectParameter("AmountPayable", amountPayable) :
                new ObjectParameter("AmountPayable", typeof(decimal));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var isCancelledParameter = isCancelled.HasValue ?
                new ObjectParameter("IsCancelled", isCancelled) :
                new ObjectParameter("IsCancelled", typeof(bool));
    
            var cancelledDateParameter = cancelledDate.HasValue ?
                new ObjectParameter("CancelledDate", cancelledDate) :
                new ObjectParameter("CancelledDate", typeof(System.DateTime));
    
            var selectedQuotationIDParameter = selectedQuotationID.HasValue ?
                new ObjectParameter("SelectedQuotationID", selectedQuotationID) :
                new ObjectParameter("SelectedQuotationID", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var tDSIDParameter = tDSID.HasValue ?
                new ObjectParameter("TDSID", tDSID) :
                new ObjectParameter("TDSID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdatePurchaseInvoice", purchaseInvoiceIDParameter, invoiceNoParameter, invoiceDateParameter, grossAmountParameter, invoiceTotalParameter, totalDifferenceParameter, sGSTAmountParameter, cGSTAmountParameter, iGSTAmountParameter, discountParameter, freightAmountParameter, packingChargesParameter, otherChargesParameter, taxOnFreightParameter, taxOnPackingChargesParameter, taxOnOtherChargeParameter, tDSOnFreightPercentageParameter, lessTDSParameter, otherDeductionsParameter, amountPayableParameter, netAmountParameter, isDraftParameter, isCancelledParameter, cancelledDateParameter, selectedQuotationIDParameter, remarksParameter, createdUserIDParameter, createdDateParameter, statusParameter, tDSIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdatePurchaseInvoiceForService(Nullable<int> purchaseInvoiceID, Nullable<int> supplierID, string localSupplierName, string invoiceNo, Nullable<System.DateTime> invoiceDate, Nullable<decimal> sGSTAmount, Nullable<decimal> cGSTAmount, Nullable<decimal> iGSTAmount, Nullable<decimal> discount, Nullable<decimal> invoiceAmount, Nullable<decimal> differenceAmount, Nullable<decimal> acceptedAmount, Nullable<decimal> netAmountPayable, Nullable<decimal> tDS, Nullable<decimal> tDSOnAdvance, Nullable<decimal> netTDS, Nullable<bool> isDraft, Nullable<bool> isCancelled, Nullable<System.DateTime> cancelledDate, Nullable<int> createdUserID, Nullable<System.DateTime> createdDate, string sataus, Nullable<int> tDSID, Nullable<decimal> otherDeduction, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var purchaseInvoiceIDParameter = purchaseInvoiceID.HasValue ?
                new ObjectParameter("PurchaseInvoiceID", purchaseInvoiceID) :
                new ObjectParameter("PurchaseInvoiceID", typeof(int));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var localSupplierNameParameter = localSupplierName != null ?
                new ObjectParameter("LocalSupplierName", localSupplierName) :
                new ObjectParameter("LocalSupplierName", typeof(string));
    
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(string));
    
            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(System.DateTime));
    
            var sGSTAmountParameter = sGSTAmount.HasValue ?
                new ObjectParameter("SGSTAmount", sGSTAmount) :
                new ObjectParameter("SGSTAmount", typeof(decimal));
    
            var cGSTAmountParameter = cGSTAmount.HasValue ?
                new ObjectParameter("CGSTAmount", cGSTAmount) :
                new ObjectParameter("CGSTAmount", typeof(decimal));
    
            var iGSTAmountParameter = iGSTAmount.HasValue ?
                new ObjectParameter("IGSTAmount", iGSTAmount) :
                new ObjectParameter("IGSTAmount", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var invoiceAmountParameter = invoiceAmount.HasValue ?
                new ObjectParameter("InvoiceAmount", invoiceAmount) :
                new ObjectParameter("InvoiceAmount", typeof(decimal));
    
            var differenceAmountParameter = differenceAmount.HasValue ?
                new ObjectParameter("DifferenceAmount", differenceAmount) :
                new ObjectParameter("DifferenceAmount", typeof(decimal));
    
            var acceptedAmountParameter = acceptedAmount.HasValue ?
                new ObjectParameter("AcceptedAmount", acceptedAmount) :
                new ObjectParameter("AcceptedAmount", typeof(decimal));
    
            var netAmountPayableParameter = netAmountPayable.HasValue ?
                new ObjectParameter("NetAmountPayable", netAmountPayable) :
                new ObjectParameter("NetAmountPayable", typeof(decimal));
    
            var tDSParameter = tDS.HasValue ?
                new ObjectParameter("TDS", tDS) :
                new ObjectParameter("TDS", typeof(decimal));
    
            var tDSOnAdvanceParameter = tDSOnAdvance.HasValue ?
                new ObjectParameter("TDSOnAdvance", tDSOnAdvance) :
                new ObjectParameter("TDSOnAdvance", typeof(decimal));
    
            var netTDSParameter = netTDS.HasValue ?
                new ObjectParameter("NetTDS", netTDS) :
                new ObjectParameter("NetTDS", typeof(decimal));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var isCancelledParameter = isCancelled.HasValue ?
                new ObjectParameter("IsCancelled", isCancelled) :
                new ObjectParameter("IsCancelled", typeof(bool));
    
            var cancelledDateParameter = cancelledDate.HasValue ?
                new ObjectParameter("CancelledDate", cancelledDate) :
                new ObjectParameter("CancelledDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var satausParameter = sataus != null ?
                new ObjectParameter("Sataus", sataus) :
                new ObjectParameter("Sataus", typeof(string));
    
            var tDSIDParameter = tDSID.HasValue ?
                new ObjectParameter("TDSID", tDSID) :
                new ObjectParameter("TDSID", typeof(int));
    
            var otherDeductionParameter = otherDeduction.HasValue ?
                new ObjectParameter("OtherDeduction", otherDeduction) :
                new ObjectParameter("OtherDeduction", typeof(decimal));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdatePurchaseInvoiceForService", purchaseInvoiceIDParameter, supplierIDParameter, localSupplierNameParameter, invoiceNoParameter, invoiceDateParameter, sGSTAmountParameter, cGSTAmountParameter, iGSTAmountParameter, discountParameter, invoiceAmountParameter, differenceAmountParameter, acceptedAmountParameter, netAmountPayableParameter, tDSParameter, tDSOnAdvanceParameter, netTDSParameter, isDraftParameter, isCancelledParameter, cancelledDateParameter, createdUserIDParameter, createdDateParameter, satausParameter, tDSIDParameter, otherDeductionParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdatePurchaseInvoiceStatus(Nullable<int> iD, string status, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdatePurchaseInvoiceStatus", iDParameter, statusParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdatePurchaseInvoiceStatusForService(Nullable<int> iD, string status, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdatePurchaseInvoiceStatusForService", iDParameter, statusParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdatePurchaseRequisitionForService(Nullable<int> iD, Nullable<System.DateTime> date, Nullable<bool> isFullyOrdered, Nullable<bool> isDraft, Nullable<int> fromDeptID, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var isFullyOrderedParameter = isFullyOrdered.HasValue ?
                new ObjectParameter("IsFullyOrdered", isFullyOrdered) :
                new ObjectParameter("IsFullyOrdered", typeof(bool));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var fromDeptIDParameter = fromDeptID.HasValue ?
                new ObjectParameter("FromDeptID", fromDeptID) :
                new ObjectParameter("FromDeptID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdatePurchaseRequisitionForService", iDParameter, dateParameter, isFullyOrderedParameter, isDraftParameter, fromDeptIDParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdatePurchaseReturn(Nullable<int> iD, Nullable<System.DateTime> date, Nullable<decimal> sGSTAmount, Nullable<decimal> cGSTAmount, Nullable<decimal> iGSTAmount, Nullable<decimal> netAmount, Nullable<bool> isDraft, Nullable<int> createdUserID, Nullable<System.DateTime> createdDate, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var sGSTAmountParameter = sGSTAmount.HasValue ?
                new ObjectParameter("SGSTAmount", sGSTAmount) :
                new ObjectParameter("SGSTAmount", typeof(decimal));
    
            var cGSTAmountParameter = cGSTAmount.HasValue ?
                new ObjectParameter("CGSTAmount", cGSTAmount) :
                new ObjectParameter("CGSTAmount", typeof(decimal));
    
            var iGSTAmountParameter = iGSTAmount.HasValue ?
                new ObjectParameter("IGSTAmount", iGSTAmount) :
                new ObjectParameter("IGSTAmount", typeof(decimal));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdatePurchaseReturn", iDParameter, dateParameter, sGSTAmountParameter, cGSTAmountParameter, iGSTAmountParameter, netAmountParameter, isDraftParameter, createdUserIDParameter, createdDateParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdatePurchaseReturnOrder(Nullable<int> iD, Nullable<int> supplierID, Nullable<decimal> sGSTAmount, Nullable<decimal> cGSTAmount, Nullable<decimal> iGSTAmount, Nullable<decimal> frightAmount, Nullable<decimal> otherCharge, Nullable<decimal> packingCharge, Nullable<decimal> netAmount, Nullable<decimal> discount, Nullable<bool> isDraft, Nullable<bool> isProcessed, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter purchaseReturnID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var sGSTAmountParameter = sGSTAmount.HasValue ?
                new ObjectParameter("SGSTAmount", sGSTAmount) :
                new ObjectParameter("SGSTAmount", typeof(decimal));
    
            var cGSTAmountParameter = cGSTAmount.HasValue ?
                new ObjectParameter("CGSTAmount", cGSTAmount) :
                new ObjectParameter("CGSTAmount", typeof(decimal));
    
            var iGSTAmountParameter = iGSTAmount.HasValue ?
                new ObjectParameter("IGSTAmount", iGSTAmount) :
                new ObjectParameter("IGSTAmount", typeof(decimal));
    
            var frightAmountParameter = frightAmount.HasValue ?
                new ObjectParameter("FrightAmount", frightAmount) :
                new ObjectParameter("FrightAmount", typeof(decimal));
    
            var otherChargeParameter = otherCharge.HasValue ?
                new ObjectParameter("OtherCharge", otherCharge) :
                new ObjectParameter("OtherCharge", typeof(decimal));
    
            var packingChargeParameter = packingCharge.HasValue ?
                new ObjectParameter("packingCharge", packingCharge) :
                new ObjectParameter("packingCharge", typeof(decimal));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var isProcessedParameter = isProcessed.HasValue ?
                new ObjectParameter("IsProcessed", isProcessed) :
                new ObjectParameter("IsProcessed", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdatePurchaseReturnOrder", iDParameter, supplierIDParameter, sGSTAmountParameter, cGSTAmountParameter, iGSTAmountParameter, frightAmountParameter, otherChargeParameter, packingChargeParameter, netAmountParameter, discountParameter, isDraftParameter, isProcessedParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, purchaseReturnID);
        }
    
        public virtual int SpUpdatePurchaseReturnOrderTrans(Nullable<int> purchaseOrderReturnID, Nullable<int> invoiceID, Nullable<int> itemID, Nullable<decimal> qty, Nullable<decimal> rate, Nullable<decimal> sGSTPercent, Nullable<decimal> cGSTPercent, Nullable<decimal> iGSTPercent, Nullable<decimal> sGSTAmount, Nullable<decimal> cGSTAmount, Nullable<decimal> iGSTAmount, Nullable<decimal> netAmount, string remarks, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> warehouseID, Nullable<int> batchTypeID, Nullable<int> unitID, Nullable<int> invoiceTransID)
        {
            var purchaseOrderReturnIDParameter = purchaseOrderReturnID.HasValue ?
                new ObjectParameter("PurchaseOrderReturnID", purchaseOrderReturnID) :
                new ObjectParameter("PurchaseOrderReturnID", typeof(int));
    
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(decimal));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var sGSTPercentParameter = sGSTPercent.HasValue ?
                new ObjectParameter("SGSTPercent", sGSTPercent) :
                new ObjectParameter("SGSTPercent", typeof(decimal));
    
            var cGSTPercentParameter = cGSTPercent.HasValue ?
                new ObjectParameter("CGSTPercent", cGSTPercent) :
                new ObjectParameter("CGSTPercent", typeof(decimal));
    
            var iGSTPercentParameter = iGSTPercent.HasValue ?
                new ObjectParameter("IGSTPercent", iGSTPercent) :
                new ObjectParameter("IGSTPercent", typeof(decimal));
    
            var sGSTAmountParameter = sGSTAmount.HasValue ?
                new ObjectParameter("SGSTAmount", sGSTAmount) :
                new ObjectParameter("SGSTAmount", typeof(decimal));
    
            var cGSTAmountParameter = cGSTAmount.HasValue ?
                new ObjectParameter("CGSTAmount", cGSTAmount) :
                new ObjectParameter("CGSTAmount", typeof(decimal));
    
            var iGSTAmountParameter = iGSTAmount.HasValue ?
                new ObjectParameter("IGSTAmount", iGSTAmount) :
                new ObjectParameter("IGSTAmount", typeof(decimal));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("warehouseID", warehouseID) :
                new ObjectParameter("warehouseID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var invoiceTransIDParameter = invoiceTransID.HasValue ?
                new ObjectParameter("InvoiceTransID", invoiceTransID) :
                new ObjectParameter("InvoiceTransID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdatePurchaseReturnOrderTrans", purchaseOrderReturnIDParameter, invoiceIDParameter, itemIDParameter, qtyParameter, rateParameter, sGSTPercentParameter, cGSTPercentParameter, iGSTPercentParameter, sGSTAmountParameter, cGSTAmountParameter, iGSTAmountParameter, netAmountParameter, remarksParameter, finYearParameter, locationIDParameter, applicationIDParameter, warehouseIDParameter, batchTypeIDParameter, unitIDParameter, invoiceTransIDParameter);
        }
    
        public virtual int SpUpdateQC(Nullable<int> iD, Nullable<System.DateTime> qCDate, string qCStatus, Nullable<int> toWareHouseID, Nullable<decimal> approvedQty, Nullable<bool> cancelled, Nullable<System.DateTime> cancelledDate, string remarks, Nullable<bool> isDraft, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var qCDateParameter = qCDate.HasValue ?
                new ObjectParameter("QCDate", qCDate) :
                new ObjectParameter("QCDate", typeof(System.DateTime));
    
            var qCStatusParameter = qCStatus != null ?
                new ObjectParameter("QCStatus", qCStatus) :
                new ObjectParameter("QCStatus", typeof(string));
    
            var toWareHouseIDParameter = toWareHouseID.HasValue ?
                new ObjectParameter("ToWareHouseID", toWareHouseID) :
                new ObjectParameter("ToWareHouseID", typeof(int));
    
            var approvedQtyParameter = approvedQty.HasValue ?
                new ObjectParameter("ApprovedQty", approvedQty) :
                new ObjectParameter("ApprovedQty", typeof(decimal));
    
            var cancelledParameter = cancelled.HasValue ?
                new ObjectParameter("Cancelled", cancelled) :
                new ObjectParameter("Cancelled", typeof(bool));
    
            var cancelledDateParameter = cancelledDate.HasValue ?
                new ObjectParameter("CancelledDate", cancelledDate) :
                new ObjectParameter("CancelledDate", typeof(System.DateTime));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateQC", iDParameter, qCDateParameter, qCStatusParameter, toWareHouseIDParameter, approvedQtyParameter, cancelledParameter, cancelledDateParameter, remarksParameter, isDraftParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateQCTrans(Nullable<int> iD, Nullable<decimal> actualValue, string actualResult, string remarks, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var actualValueParameter = actualValue.HasValue ?
                new ObjectParameter("ActualValue", actualValue) :
                new ObjectParameter("ActualValue", typeof(decimal));
    
            var actualResultParameter = actualResult != null ?
                new ObjectParameter("ActualResult", actualResult) :
                new ObjectParameter("ActualResult", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateQCTrans", iDParameter, actualValueParameter, actualResultParameter, remarksParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateServiceReceiptNote(Nullable<int> iD, Nullable<System.DateTime> deliveryChallanDate, string deliveryChallanNo, Nullable<bool> isDraft, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var deliveryChallanDateParameter = deliveryChallanDate.HasValue ?
                new ObjectParameter("DeliveryChallanDate", deliveryChallanDate) :
                new ObjectParameter("DeliveryChallanDate", typeof(System.DateTime));
    
            var deliveryChallanNoParameter = deliveryChallanNo != null ?
                new ObjectParameter("DeliveryChallanNo", deliveryChallanNo) :
                new ObjectParameter("DeliveryChallanNo", typeof(string));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateServiceReceiptNote", iDParameter, deliveryChallanDateParameter, deliveryChallanNoParameter, isDraftParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateTDSOnAdvanceMetAmount(Nullable<int> purchaseInvoiceID, Nullable<decimal> tDSOnAdvance, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var purchaseInvoiceIDParameter = purchaseInvoiceID.HasValue ?
                new ObjectParameter("PurchaseInvoiceID", purchaseInvoiceID) :
                new ObjectParameter("PurchaseInvoiceID", typeof(int));
    
            var tDSOnAdvanceParameter = tDSOnAdvance.HasValue ?
                new ObjectParameter("TDSOnAdvance", tDSOnAdvance) :
                new ObjectParameter("TDSOnAdvance", typeof(decimal));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateTDSOnAdvanceMetAmount", purchaseInvoiceIDParameter, tDSOnAdvanceParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SpValidatePurchaseInvoiceNo(Nullable<int> supplierID, string invoiceNo)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SpValidatePurchaseInvoiceNo", supplierIDParameter, invoiceNoParameter);
        }
    
        public virtual int SpCancelTransaction(Nullable<int> iD, string tableName, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCancelTransaction", iDParameter, tableNameParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateBatch(string itemType, Nullable<int> itemID, string batchNo, string customBatchNo, Nullable<System.DateTime> manufacturingDate, Nullable<System.DateTime> expiryDate, Nullable<int> batchTypeID, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter batchID)
        {
            var itemTypeParameter = itemType != null ?
                new ObjectParameter("ItemType", itemType) :
                new ObjectParameter("ItemType", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchNoParameter = batchNo != null ?
                new ObjectParameter("BatchNo", batchNo) :
                new ObjectParameter("BatchNo", typeof(string));
    
            var customBatchNoParameter = customBatchNo != null ?
                new ObjectParameter("CustomBatchNo", customBatchNo) :
                new ObjectParameter("CustomBatchNo", typeof(string));
    
            var manufacturingDateParameter = manufacturingDate.HasValue ?
                new ObjectParameter("ManufacturingDate", manufacturingDate) :
                new ObjectParameter("ManufacturingDate", typeof(System.DateTime));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateBatch", itemTypeParameter, itemIDParameter, batchNoParameter, customBatchNoParameter, manufacturingDateParameter, expiryDateParameter, batchTypeIDParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter, batchID);
        }
    
        public virtual int SpCreateBatchForDirectInvoice(string itemType, Nullable<int> itemID, string batchNo, string customBatchNo, Nullable<System.DateTime> manufacturingDate, Nullable<System.DateTime> expiryDate, Nullable<int> batchTypeID, Nullable<int> unitID, Nullable<decimal> mRP, Nullable<decimal> rate, Nullable<decimal> retailMRP, Nullable<decimal> retailRate, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter batchID)
        {
            var itemTypeParameter = itemType != null ?
                new ObjectParameter("ItemType", itemType) :
                new ObjectParameter("ItemType", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchNoParameter = batchNo != null ?
                new ObjectParameter("BatchNo", batchNo) :
                new ObjectParameter("BatchNo", typeof(string));
    
            var customBatchNoParameter = customBatchNo != null ?
                new ObjectParameter("CustomBatchNo", customBatchNo) :
                new ObjectParameter("CustomBatchNo", typeof(string));
    
            var manufacturingDateParameter = manufacturingDate.HasValue ?
                new ObjectParameter("ManufacturingDate", manufacturingDate) :
                new ObjectParameter("ManufacturingDate", typeof(System.DateTime));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var mRPParameter = mRP.HasValue ?
                new ObjectParameter("MRP", mRP) :
                new ObjectParameter("MRP", typeof(decimal));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var retailMRPParameter = retailMRP.HasValue ?
                new ObjectParameter("RetailMRP", retailMRP) :
                new ObjectParameter("RetailMRP", typeof(decimal));
    
            var retailRateParameter = retailRate.HasValue ?
                new ObjectParameter("RetailRate", retailRate) :
                new ObjectParameter("RetailRate", typeof(decimal));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateBatchForDirectInvoice", itemTypeParameter, itemIDParameter, batchNoParameter, customBatchNoParameter, manufacturingDateParameter, expiryDateParameter, batchTypeIDParameter, unitIDParameter, mRPParameter, rateParameter, retailMRPParameter, retailRateParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter, batchID);
        }
    
        public virtual int SpCreatePackingDetails(Nullable<int> refID, string type, string packSize, Nullable<int> unitID, Nullable<decimal> quantity, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var refIDParameter = refID.HasValue ?
                new ObjectParameter("RefID", refID) :
                new ObjectParameter("RefID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var packSizeParameter = packSize != null ?
                new ObjectParameter("PackSize", packSize) :
                new ObjectParameter("PackSize", typeof(string));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePackingDetails", refIDParameter, typeParameter, packSizeParameter, unitIDParameter, quantityParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetConfigByUser_Result> SpGetConfigByUser(string configName, Nullable<int> userID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var configNameParameter = configName != null ?
                new ObjectParameter("ConfigName", configName) :
                new ObjectParameter("ConfigName", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetConfigByUser_Result>("SpGetConfigByUser", configNameParameter, userIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCurrentFinYear_Result> SpGetCurrentFinYear(Nullable<int> applicationID)
        {
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCurrentFinYear_Result>("SpGetCurrentFinYear", applicationIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SpGetLocationIDForInterCompanyPurchase(Nullable<int> addressID, string partyType)
        {
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            var partyTypeParameter = partyType != null ?
                new ObjectParameter("PartyType", partyType) :
                new ObjectParameter("PartyType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SpGetLocationIDForInterCompanyPurchase", addressIDParameter, partyTypeParameter);
        }
    
        public virtual ObjectResult<SpGetMailReceiverDetails_Result> SpGetMailReceiverDetails(string uI, Nullable<int> iD)
        {
            var uIParameter = uI != null ?
                new ObjectParameter("UI", uI) :
                new ObjectParameter("UI", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetMailReceiverDetails_Result>("SpGetMailReceiverDetails", uIParameter, iDParameter);
        }
    
        public virtual ObjectResult<SpGetMailSenderDetails_Result> SpGetMailSenderDetails(string keys)
        {
            var keysParameter = keys != null ?
                new ObjectParameter("Keys", keys) :
                new ObjectParameter("Keys", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetMailSenderDetails_Result>("SpGetMailSenderDetails", keysParameter);
        }
    
        public virtual ObjectResult<SpGetPackingDetails_Result> SpGetPackingDetails(Nullable<int> referenceID, string type, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var referenceIDParameter = referenceID.HasValue ?
                new ObjectParameter("ReferenceID", referenceID) :
                new ObjectParameter("ReferenceID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPackingDetails_Result>("SpGetPackingDetails", referenceIDParameter, typeParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpIsCodeAlreadyExists(string tableName, string fieldName, string code, Nullable<int> iD, ObjectParameter isExists)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("tableName", tableName) :
                new ObjectParameter("tableName", typeof(string));
    
            var fieldNameParameter = fieldName != null ?
                new ObjectParameter("FieldName", fieldName) :
                new ObjectParameter("FieldName", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpIsCodeAlreadyExists", tableNameParameter, fieldNameParameter, codeParameter, iDParameter, isExists);
        }
    
        public virtual int SpSuspendTransaction(Nullable<int> iD, string tableName, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter retValue)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpSuspendTransaction", iDParameter, tableNameParameter, finYearParameter, locationIDParameter, applicationIDParameter, retValue);
        }
    
        public virtual int SpUpDateMailSentDetails(string uI, Nullable<int> iD)
        {
            var uIParameter = uI != null ?
                new ObjectParameter("UI", uI) :
                new ObjectParameter("UI", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpDateMailSentDetails", uIParameter, iDParameter);
        }
    
        public virtual int SpUpdateSerialNo(string formName, string fieldName, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter serialNo)
        {
            var formNameParameter = formName != null ?
                new ObjectParameter("FormName", formName) :
                new ObjectParameter("FormName", typeof(string));
    
            var fieldNameParameter = fieldName != null ?
                new ObjectParameter("FieldName", fieldName) :
                new ObjectParameter("FieldName", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateSerialNo", formNameParameter, fieldNameParameter, finYearParameter, locationIDParameter, applicationIDParameter, serialNo);
        }
    
        public virtual ObjectResult<SpGetGoodsReceiptNotePrintPDF_Result> SpGetGoodsReceiptNotePrintPDF(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetGoodsReceiptNotePrintPDF_Result>("SpGetGoodsReceiptNotePrintPDF", iDParameter);
        }
    
        public virtual ObjectResult<SpGetReOrderList_Result> SpGetReOrderList(Nullable<int> reorderDays, Nullable<int> orderForDays, string itemType, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var reorderDaysParameter = reorderDays.HasValue ?
                new ObjectParameter("ReorderDays", reorderDays) :
                new ObjectParameter("ReorderDays", typeof(int));
    
            var orderForDaysParameter = orderForDays.HasValue ?
                new ObjectParameter("OrderForDays", orderForDays) :
                new ObjectParameter("OrderForDays", typeof(int));
    
            var itemTypeParameter = itemType != null ?
                new ObjectParameter("ItemType", itemType) :
                new ObjectParameter("ItemType", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetReOrderList_Result>("SpGetReOrderList", reorderDaysParameter, orderForDaysParameter, itemTypeParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateDirectPurchaseOrder(string purchaseOrderNo, Nullable<System.DateTime> purchaseOrderDate, Nullable<int> supplierID, Nullable<int> advancePercentage, Nullable<decimal> advanceAmount, Nullable<int> paymentModeID, Nullable<int> shippingAddressID, Nullable<int> billingAddressID, Nullable<bool> inclusiveGST, Nullable<bool> gstExtra, Nullable<int> selectedQuotationID, string otherQuotationIDS, Nullable<int> deliveryWithin, Nullable<int> paymentWithinID, Nullable<decimal> sGSTAmt, Nullable<decimal> cGSTAmt, Nullable<decimal> iGSTAmt, Nullable<decimal> freightAmt, Nullable<decimal> vATAmount, Nullable<decimal> otherCharges, Nullable<decimal> packingShippingCharge, Nullable<decimal> netAmt, Nullable<bool> orderMet, Nullable<bool> isDraft, Nullable<int> isVAT, Nullable<int> isGST, string remarks, string supplierReferenceNo, string termsOfPrice, Nullable<bool> cancelled, Nullable<System.DateTime> cancelledDate, Nullable<int> createdUserID, Nullable<System.DateTime> createdDate, Nullable<int> salesOrderLocationID, Nullable<int> storeID, Nullable<decimal> discount, Nullable<decimal> otherDeductions, string invoiceNo, Nullable<System.DateTime> invoiceDate, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter purchaseOrderID)
        {
            var purchaseOrderNoParameter = purchaseOrderNo != null ?
                new ObjectParameter("PurchaseOrderNo", purchaseOrderNo) :
                new ObjectParameter("PurchaseOrderNo", typeof(string));
    
            var purchaseOrderDateParameter = purchaseOrderDate.HasValue ?
                new ObjectParameter("PurchaseOrderDate", purchaseOrderDate) :
                new ObjectParameter("PurchaseOrderDate", typeof(System.DateTime));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var advancePercentageParameter = advancePercentage.HasValue ?
                new ObjectParameter("AdvancePercentage", advancePercentage) :
                new ObjectParameter("AdvancePercentage", typeof(int));
    
            var advanceAmountParameter = advanceAmount.HasValue ?
                new ObjectParameter("AdvanceAmount", advanceAmount) :
                new ObjectParameter("AdvanceAmount", typeof(decimal));
    
            var paymentModeIDParameter = paymentModeID.HasValue ?
                new ObjectParameter("PaymentModeID", paymentModeID) :
                new ObjectParameter("PaymentModeID", typeof(int));
    
            var shippingAddressIDParameter = shippingAddressID.HasValue ?
                new ObjectParameter("ShippingAddressID", shippingAddressID) :
                new ObjectParameter("ShippingAddressID", typeof(int));
    
            var billingAddressIDParameter = billingAddressID.HasValue ?
                new ObjectParameter("BillingAddressID", billingAddressID) :
                new ObjectParameter("BillingAddressID", typeof(int));
    
            var inclusiveGSTParameter = inclusiveGST.HasValue ?
                new ObjectParameter("InclusiveGST", inclusiveGST) :
                new ObjectParameter("InclusiveGST", typeof(bool));
    
            var gstExtraParameter = gstExtra.HasValue ?
                new ObjectParameter("GstExtra", gstExtra) :
                new ObjectParameter("GstExtra", typeof(bool));
    
            var selectedQuotationIDParameter = selectedQuotationID.HasValue ?
                new ObjectParameter("SelectedQuotationID", selectedQuotationID) :
                new ObjectParameter("SelectedQuotationID", typeof(int));
    
            var otherQuotationIDSParameter = otherQuotationIDS != null ?
                new ObjectParameter("OtherQuotationIDS", otherQuotationIDS) :
                new ObjectParameter("OtherQuotationIDS", typeof(string));
    
            var deliveryWithinParameter = deliveryWithin.HasValue ?
                new ObjectParameter("DeliveryWithin", deliveryWithin) :
                new ObjectParameter("DeliveryWithin", typeof(int));
    
            var paymentWithinIDParameter = paymentWithinID.HasValue ?
                new ObjectParameter("PaymentWithinID", paymentWithinID) :
                new ObjectParameter("PaymentWithinID", typeof(int));
    
            var sGSTAmtParameter = sGSTAmt.HasValue ?
                new ObjectParameter("SGSTAmt", sGSTAmt) :
                new ObjectParameter("SGSTAmt", typeof(decimal));
    
            var cGSTAmtParameter = cGSTAmt.HasValue ?
                new ObjectParameter("CGSTAmt", cGSTAmt) :
                new ObjectParameter("CGSTAmt", typeof(decimal));
    
            var iGSTAmtParameter = iGSTAmt.HasValue ?
                new ObjectParameter("IGSTAmt", iGSTAmt) :
                new ObjectParameter("IGSTAmt", typeof(decimal));
    
            var freightAmtParameter = freightAmt.HasValue ?
                new ObjectParameter("FreightAmt", freightAmt) :
                new ObjectParameter("FreightAmt", typeof(decimal));
    
            var vATAmountParameter = vATAmount.HasValue ?
                new ObjectParameter("VATAmount", vATAmount) :
                new ObjectParameter("VATAmount", typeof(decimal));
    
            var otherChargesParameter = otherCharges.HasValue ?
                new ObjectParameter("OtherCharges", otherCharges) :
                new ObjectParameter("OtherCharges", typeof(decimal));
    
            var packingShippingChargeParameter = packingShippingCharge.HasValue ?
                new ObjectParameter("PackingShippingCharge", packingShippingCharge) :
                new ObjectParameter("PackingShippingCharge", typeof(decimal));
    
            var netAmtParameter = netAmt.HasValue ?
                new ObjectParameter("NetAmt", netAmt) :
                new ObjectParameter("NetAmt", typeof(decimal));
    
            var orderMetParameter = orderMet.HasValue ?
                new ObjectParameter("OrderMet", orderMet) :
                new ObjectParameter("OrderMet", typeof(bool));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var isVATParameter = isVAT.HasValue ?
                new ObjectParameter("IsVAT", isVAT) :
                new ObjectParameter("IsVAT", typeof(int));
    
            var isGSTParameter = isGST.HasValue ?
                new ObjectParameter("IsGST", isGST) :
                new ObjectParameter("IsGST", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var supplierReferenceNoParameter = supplierReferenceNo != null ?
                new ObjectParameter("SupplierReferenceNo", supplierReferenceNo) :
                new ObjectParameter("SupplierReferenceNo", typeof(string));
    
            var termsOfPriceParameter = termsOfPrice != null ?
                new ObjectParameter("TermsOfPrice", termsOfPrice) :
                new ObjectParameter("TermsOfPrice", typeof(string));
    
            var cancelledParameter = cancelled.HasValue ?
                new ObjectParameter("Cancelled", cancelled) :
                new ObjectParameter("Cancelled", typeof(bool));
    
            var cancelledDateParameter = cancelledDate.HasValue ?
                new ObjectParameter("CancelledDate", cancelledDate) :
                new ObjectParameter("CancelledDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var salesOrderLocationIDParameter = salesOrderLocationID.HasValue ?
                new ObjectParameter("SalesOrderLocationID", salesOrderLocationID) :
                new ObjectParameter("SalesOrderLocationID", typeof(int));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(int));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var otherDeductionsParameter = otherDeductions.HasValue ?
                new ObjectParameter("OtherDeductions", otherDeductions) :
                new ObjectParameter("OtherDeductions", typeof(decimal));
    
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(string));
    
            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateDirectPurchaseOrder", purchaseOrderNoParameter, purchaseOrderDateParameter, supplierIDParameter, advancePercentageParameter, advanceAmountParameter, paymentModeIDParameter, shippingAddressIDParameter, billingAddressIDParameter, inclusiveGSTParameter, gstExtraParameter, selectedQuotationIDParameter, otherQuotationIDSParameter, deliveryWithinParameter, paymentWithinIDParameter, sGSTAmtParameter, cGSTAmtParameter, iGSTAmtParameter, freightAmtParameter, vATAmountParameter, otherChargesParameter, packingShippingChargeParameter, netAmtParameter, orderMetParameter, isDraftParameter, isVATParameter, isGSTParameter, remarksParameter, supplierReferenceNoParameter, termsOfPriceParameter, cancelledParameter, cancelledDateParameter, createdUserIDParameter, createdDateParameter, salesOrderLocationIDParameter, storeIDParameter, discountParameter, otherDeductionsParameter, invoiceNoParameter, invoiceDateParameter, finYearParameter, locationIDParameter, applicationIDParameter, purchaseOrderID);
        }
    
        public virtual int SpCreateGoodsReceiptNoteTransForDirectPurchaseInvoice(Nullable<int> gRNID, Nullable<int> purchaseOrderID, Nullable<int> currencyID, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var gRNIDParameter = gRNID.HasValue ?
                new ObjectParameter("GRNID", gRNID) :
                new ObjectParameter("GRNID", typeof(int));
    
            var purchaseOrderIDParameter = purchaseOrderID.HasValue ?
                new ObjectParameter("PurchaseOrderID", purchaseOrderID) :
                new ObjectParameter("PurchaseOrderID", typeof(int));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateGoodsReceiptNoteTransForDirectPurchaseInvoice", gRNIDParameter, purchaseOrderIDParameter, currencyIDParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpItemByItemANDPurchaseCategories_Result> SpItemByItemANDPurchaseCategories(Nullable<int> itemCategoryID, Nullable<int> purchaseCategoryID, string itemHint, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var purchaseCategoryIDParameter = purchaseCategoryID.HasValue ?
                new ObjectParameter("PurchaseCategoryID", purchaseCategoryID) :
                new ObjectParameter("PurchaseCategoryID", typeof(int));
    
            var itemHintParameter = itemHint != null ?
                new ObjectParameter("ItemHint", itemHint) :
                new ObjectParameter("ItemHint", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpItemByItemANDPurchaseCategories_Result>("SpItemByItemANDPurchaseCategories", itemCategoryIDParameter, purchaseCategoryIDParameter, itemHintParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetDirectPurchaseOrderItems_Result> SpGetDirectPurchaseOrderItems(Nullable<int> purchaseOrderID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var purchaseOrderIDParameter = purchaseOrderID.HasValue ?
                new ObjectParameter("PurchaseOrderID", purchaseOrderID) :
                new ObjectParameter("PurchaseOrderID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDirectPurchaseOrderItems_Result>("SpGetDirectPurchaseOrderItems", purchaseOrderIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateGoodsReceiptNoteTrans(Nullable<int> goodsReceiptNoteID, Nullable<int> purchaseOrderID, Nullable<int> pOTransID, Nullable<int> itemID, string batch, Nullable<System.DateTime> expiryDate, Nullable<decimal> purchaseOrderQty, Nullable<decimal> receivedQty, Nullable<decimal> qualityCheckQty, Nullable<decimal> acceptedQty, Nullable<decimal> rejectedQty, Nullable<int> itemOrderPreference, string remarks, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, string qCNo, string referenceNo, Nullable<bool> isQCRequired, string batchNo, Nullable<decimal> qtyTolerance, Nullable<decimal> vATPercentage, Nullable<int> currencyID, Nullable<int> isGST, Nullable<int> isVat, string model, string partsNumber, string itemName, Nullable<decimal> netAmount, Nullable<int> unitID, ObjectParameter retValue)
        {
            var goodsReceiptNoteIDParameter = goodsReceiptNoteID.HasValue ?
                new ObjectParameter("GoodsReceiptNoteID", goodsReceiptNoteID) :
                new ObjectParameter("GoodsReceiptNoteID", typeof(int));
    
            var purchaseOrderIDParameter = purchaseOrderID.HasValue ?
                new ObjectParameter("PurchaseOrderID", purchaseOrderID) :
                new ObjectParameter("PurchaseOrderID", typeof(int));
    
            var pOTransIDParameter = pOTransID.HasValue ?
                new ObjectParameter("POTransID", pOTransID) :
                new ObjectParameter("POTransID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchParameter = batch != null ?
                new ObjectParameter("Batch", batch) :
                new ObjectParameter("Batch", typeof(string));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var purchaseOrderQtyParameter = purchaseOrderQty.HasValue ?
                new ObjectParameter("PurchaseOrderQty", purchaseOrderQty) :
                new ObjectParameter("PurchaseOrderQty", typeof(decimal));
    
            var receivedQtyParameter = receivedQty.HasValue ?
                new ObjectParameter("ReceivedQty", receivedQty) :
                new ObjectParameter("ReceivedQty", typeof(decimal));
    
            var qualityCheckQtyParameter = qualityCheckQty.HasValue ?
                new ObjectParameter("QualityCheckQty", qualityCheckQty) :
                new ObjectParameter("QualityCheckQty", typeof(decimal));
    
            var acceptedQtyParameter = acceptedQty.HasValue ?
                new ObjectParameter("AcceptedQty", acceptedQty) :
                new ObjectParameter("AcceptedQty", typeof(decimal));
    
            var rejectedQtyParameter = rejectedQty.HasValue ?
                new ObjectParameter("RejectedQty", rejectedQty) :
                new ObjectParameter("RejectedQty", typeof(decimal));
    
            var itemOrderPreferenceParameter = itemOrderPreference.HasValue ?
                new ObjectParameter("ItemOrderPreference", itemOrderPreference) :
                new ObjectParameter("ItemOrderPreference", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var qCNoParameter = qCNo != null ?
                new ObjectParameter("QCNo", qCNo) :
                new ObjectParameter("QCNo", typeof(string));
    
            var referenceNoParameter = referenceNo != null ?
                new ObjectParameter("ReferenceNo", referenceNo) :
                new ObjectParameter("ReferenceNo", typeof(string));
    
            var isQCRequiredParameter = isQCRequired.HasValue ?
                new ObjectParameter("IsQCRequired", isQCRequired) :
                new ObjectParameter("IsQCRequired", typeof(bool));
    
            var batchNoParameter = batchNo != null ?
                new ObjectParameter("BatchNo", batchNo) :
                new ObjectParameter("BatchNo", typeof(string));
    
            var qtyToleranceParameter = qtyTolerance.HasValue ?
                new ObjectParameter("QtyTolerance", qtyTolerance) :
                new ObjectParameter("QtyTolerance", typeof(decimal));
    
            var vATPercentageParameter = vATPercentage.HasValue ?
                new ObjectParameter("VATPercentage", vATPercentage) :
                new ObjectParameter("VATPercentage", typeof(decimal));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var isGSTParameter = isGST.HasValue ?
                new ObjectParameter("IsGST", isGST) :
                new ObjectParameter("IsGST", typeof(int));
    
            var isVatParameter = isVat.HasValue ?
                new ObjectParameter("IsVat", isVat) :
                new ObjectParameter("IsVat", typeof(int));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var partsNumberParameter = partsNumber != null ?
                new ObjectParameter("PartsNumber", partsNumber) :
                new ObjectParameter("PartsNumber", typeof(string));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateGoodsReceiptNoteTrans", goodsReceiptNoteIDParameter, purchaseOrderIDParameter, pOTransIDParameter, itemIDParameter, batchParameter, expiryDateParameter, purchaseOrderQtyParameter, receivedQtyParameter, qualityCheckQtyParameter, acceptedQtyParameter, rejectedQtyParameter, itemOrderPreferenceParameter, remarksParameter, finYearParameter, locationIDParameter, applicationIDParameter, qCNoParameter, referenceNoParameter, isQCRequiredParameter, batchNoParameter, qtyToleranceParameter, vATPercentageParameter, currencyIDParameter, isGSTParameter, isVatParameter, modelParameter, partsNumberParameter, itemNameParameter, netAmountParameter, unitIDParameter, retValue);
        }
    
        public virtual int SpCreatePurchaseReturnOrder(string code, Nullable<System.DateTime> date, Nullable<int> supplierID, Nullable<decimal> sGSTAmount, Nullable<decimal> cGSTAmount, Nullable<decimal> iGSTAmount, Nullable<decimal> freightAmount, Nullable<decimal> otherCharge, Nullable<decimal> packingCahrge, Nullable<decimal> netAmount, Nullable<decimal> discount, Nullable<decimal> vATPercentage, Nullable<int> currencyID, Nullable<int> isGST, Nullable<int> isVat, Nullable<decimal> currencyExchangeRate, Nullable<decimal> documentCharges, Nullable<decimal> supplierOtherCharges, Nullable<bool> isDraft, Nullable<bool> isCancelled, Nullable<System.DateTime> cancelledDate, Nullable<int> createdUserID, Nullable<System.DateTime> createdDate, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter purchaseReturnOrderID, ObjectParameter purchaseReturnID)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var sGSTAmountParameter = sGSTAmount.HasValue ?
                new ObjectParameter("SGSTAmount", sGSTAmount) :
                new ObjectParameter("SGSTAmount", typeof(decimal));
    
            var cGSTAmountParameter = cGSTAmount.HasValue ?
                new ObjectParameter("CGSTAmount", cGSTAmount) :
                new ObjectParameter("CGSTAmount", typeof(decimal));
    
            var iGSTAmountParameter = iGSTAmount.HasValue ?
                new ObjectParameter("IGSTAmount", iGSTAmount) :
                new ObjectParameter("IGSTAmount", typeof(decimal));
    
            var freightAmountParameter = freightAmount.HasValue ?
                new ObjectParameter("FreightAmount", freightAmount) :
                new ObjectParameter("FreightAmount", typeof(decimal));
    
            var otherChargeParameter = otherCharge.HasValue ?
                new ObjectParameter("OtherCharge", otherCharge) :
                new ObjectParameter("OtherCharge", typeof(decimal));
    
            var packingCahrgeParameter = packingCahrge.HasValue ?
                new ObjectParameter("PackingCahrge", packingCahrge) :
                new ObjectParameter("PackingCahrge", typeof(decimal));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var vATPercentageParameter = vATPercentage.HasValue ?
                new ObjectParameter("VATPercentage", vATPercentage) :
                new ObjectParameter("VATPercentage", typeof(decimal));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var isGSTParameter = isGST.HasValue ?
                new ObjectParameter("IsGST", isGST) :
                new ObjectParameter("IsGST", typeof(int));
    
            var isVatParameter = isVat.HasValue ?
                new ObjectParameter("IsVat", isVat) :
                new ObjectParameter("IsVat", typeof(int));
    
            var currencyExchangeRateParameter = currencyExchangeRate.HasValue ?
                new ObjectParameter("CurrencyExchangeRate", currencyExchangeRate) :
                new ObjectParameter("CurrencyExchangeRate", typeof(decimal));
    
            var documentChargesParameter = documentCharges.HasValue ?
                new ObjectParameter("DocumentCharges", documentCharges) :
                new ObjectParameter("DocumentCharges", typeof(decimal));
    
            var supplierOtherChargesParameter = supplierOtherCharges.HasValue ?
                new ObjectParameter("SupplierOtherCharges", supplierOtherCharges) :
                new ObjectParameter("SupplierOtherCharges", typeof(decimal));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var isCancelledParameter = isCancelled.HasValue ?
                new ObjectParameter("IsCancelled", isCancelled) :
                new ObjectParameter("IsCancelled", typeof(bool));
    
            var cancelledDateParameter = cancelledDate.HasValue ?
                new ObjectParameter("CancelledDate", cancelledDate) :
                new ObjectParameter("CancelledDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePurchaseReturnOrder", codeParameter, dateParameter, supplierIDParameter, sGSTAmountParameter, cGSTAmountParameter, iGSTAmountParameter, freightAmountParameter, otherChargeParameter, packingCahrgeParameter, netAmountParameter, discountParameter, vATPercentageParameter, currencyIDParameter, isGSTParameter, isVatParameter, currencyExchangeRateParameter, documentChargesParameter, supplierOtherChargesParameter, isDraftParameter, isCancelledParameter, cancelledDateParameter, createdUserIDParameter, createdDateParameter, finYearParameter, locationIDParameter, applicationIDParameter, purchaseReturnOrderID, purchaseReturnID);
        }
    
        public virtual int SpUpdateGRN(Nullable<int> gRNID, Nullable<System.DateTime> grnDate, Nullable<int> supplierID, Nullable<System.DateTime> receiptDate, string deliveryChallanNo, Nullable<System.DateTime> deliveryChallanDate, Nullable<int> warehouseID, Nullable<bool> purchaseCompleted, Nullable<int> createdUserID, Nullable<decimal> iGSTAmt, Nullable<decimal> sGSTAmt, Nullable<decimal> cGSTAmt, Nullable<decimal> roundOff, Nullable<decimal> discountAmt, Nullable<decimal> grossAmt, Nullable<decimal> vATAmount, Nullable<decimal> suppDocAmount, Nullable<decimal> suppOtherCharge, Nullable<decimal> suppShipAmount, Nullable<decimal> netAmount, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, Nullable<bool> isDraft)
        {
            var gRNIDParameter = gRNID.HasValue ?
                new ObjectParameter("GRNID", gRNID) :
                new ObjectParameter("GRNID", typeof(int));
    
            var grnDateParameter = grnDate.HasValue ?
                new ObjectParameter("GrnDate", grnDate) :
                new ObjectParameter("GrnDate", typeof(System.DateTime));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var receiptDateParameter = receiptDate.HasValue ?
                new ObjectParameter("ReceiptDate", receiptDate) :
                new ObjectParameter("ReceiptDate", typeof(System.DateTime));
    
            var deliveryChallanNoParameter = deliveryChallanNo != null ?
                new ObjectParameter("DeliveryChallanNo", deliveryChallanNo) :
                new ObjectParameter("DeliveryChallanNo", typeof(string));
    
            var deliveryChallanDateParameter = deliveryChallanDate.HasValue ?
                new ObjectParameter("DeliveryChallanDate", deliveryChallanDate) :
                new ObjectParameter("DeliveryChallanDate", typeof(System.DateTime));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var purchaseCompletedParameter = purchaseCompleted.HasValue ?
                new ObjectParameter("PurchaseCompleted", purchaseCompleted) :
                new ObjectParameter("PurchaseCompleted", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var iGSTAmtParameter = iGSTAmt.HasValue ?
                new ObjectParameter("IGSTAmt", iGSTAmt) :
                new ObjectParameter("IGSTAmt", typeof(decimal));
    
            var sGSTAmtParameter = sGSTAmt.HasValue ?
                new ObjectParameter("SGSTAmt", sGSTAmt) :
                new ObjectParameter("SGSTAmt", typeof(decimal));
    
            var cGSTAmtParameter = cGSTAmt.HasValue ?
                new ObjectParameter("CGSTAmt", cGSTAmt) :
                new ObjectParameter("CGSTAmt", typeof(decimal));
    
            var roundOffParameter = roundOff.HasValue ?
                new ObjectParameter("RoundOff", roundOff) :
                new ObjectParameter("RoundOff", typeof(decimal));
    
            var discountAmtParameter = discountAmt.HasValue ?
                new ObjectParameter("DiscountAmt", discountAmt) :
                new ObjectParameter("DiscountAmt", typeof(decimal));
    
            var grossAmtParameter = grossAmt.HasValue ?
                new ObjectParameter("GrossAmt", grossAmt) :
                new ObjectParameter("GrossAmt", typeof(decimal));
    
            var vATAmountParameter = vATAmount.HasValue ?
                new ObjectParameter("VATAmount", vATAmount) :
                new ObjectParameter("VATAmount", typeof(decimal));
    
            var suppDocAmountParameter = suppDocAmount.HasValue ?
                new ObjectParameter("SuppDocAmount", suppDocAmount) :
                new ObjectParameter("SuppDocAmount", typeof(decimal));
    
            var suppOtherChargeParameter = suppOtherCharge.HasValue ?
                new ObjectParameter("SuppOtherCharge", suppOtherCharge) :
                new ObjectParameter("SuppOtherCharge", typeof(decimal));
    
            var suppShipAmountParameter = suppShipAmount.HasValue ?
                new ObjectParameter("SuppShipAmount", suppShipAmount) :
                new ObjectParameter("SuppShipAmount", typeof(decimal));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateGRN", gRNIDParameter, grnDateParameter, supplierIDParameter, receiptDateParameter, deliveryChallanNoParameter, deliveryChallanDateParameter, warehouseIDParameter, purchaseCompletedParameter, createdUserIDParameter, iGSTAmtParameter, sGSTAmtParameter, cGSTAmtParameter, roundOffParameter, discountAmtParameter, grossAmtParameter, vATAmountParameter, suppDocAmountParameter, suppOtherChargeParameter, suppShipAmountParameter, netAmountParameter, finYearParameter, locationIDParameter, applicationIDParameter, isDraftParameter);
        }
    
        public virtual ObjectResult<SpGetPurchaseInvoiceTransDetails_Result> SpGetPurchaseInvoiceTransDetails(Nullable<int> purchaseID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPurchaseInvoiceTransDetails_Result>("SpGetPurchaseInvoiceTransDetails", purchaseIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPurchaseRequisitionTransDetails_Result> SpGetPurchaseRequisitionTransDetails(Nullable<int> iD, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPurchaseRequisitionTransDetails_Result>("SpGetPurchaseRequisitionTransDetails", iDParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreatePurchaseRequisitionTrans(Nullable<int> purchaseRequisitionID, Nullable<int> itemID, string itemCode, string itemName, string partsNumber, string unitName, Nullable<int> salesInquiryItemID, Nullable<int> itemTypeID, Nullable<decimal> quantity, Nullable<decimal> orderedQty, Nullable<decimal> stock, Nullable<decimal> qtyUnderQC, string remarks, string requiredStatus, Nullable<System.DateTime> requiredDate, Nullable<int> unitID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var purchaseRequisitionIDParameter = purchaseRequisitionID.HasValue ?
                new ObjectParameter("PurchaseRequisitionID", purchaseRequisitionID) :
                new ObjectParameter("PurchaseRequisitionID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var partsNumberParameter = partsNumber != null ?
                new ObjectParameter("PartsNumber", partsNumber) :
                new ObjectParameter("PartsNumber", typeof(string));
    
            var unitNameParameter = unitName != null ?
                new ObjectParameter("UnitName", unitName) :
                new ObjectParameter("UnitName", typeof(string));
    
            var salesInquiryItemIDParameter = salesInquiryItemID.HasValue ?
                new ObjectParameter("SalesInquiryItemID", salesInquiryItemID) :
                new ObjectParameter("SalesInquiryItemID", typeof(int));
    
            var itemTypeIDParameter = itemTypeID.HasValue ?
                new ObjectParameter("ItemTypeID", itemTypeID) :
                new ObjectParameter("ItemTypeID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var orderedQtyParameter = orderedQty.HasValue ?
                new ObjectParameter("OrderedQty", orderedQty) :
                new ObjectParameter("OrderedQty", typeof(decimal));
    
            var stockParameter = stock.HasValue ?
                new ObjectParameter("Stock", stock) :
                new ObjectParameter("Stock", typeof(decimal));
    
            var qtyUnderQCParameter = qtyUnderQC.HasValue ?
                new ObjectParameter("QtyUnderQC", qtyUnderQC) :
                new ObjectParameter("QtyUnderQC", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var requiredStatusParameter = requiredStatus != null ?
                new ObjectParameter("RequiredStatus", requiredStatus) :
                new ObjectParameter("RequiredStatus", typeof(string));
    
            var requiredDateParameter = requiredDate.HasValue ?
                new ObjectParameter("RequiredDate", requiredDate) :
                new ObjectParameter("RequiredDate", typeof(System.DateTime));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePurchaseRequisitionTrans", purchaseRequisitionIDParameter, itemIDParameter, itemCodeParameter, itemNameParameter, partsNumberParameter, unitNameParameter, salesInquiryItemIDParameter, itemTypeIDParameter, quantityParameter, orderedQtyParameter, stockParameter, qtyUnderQCParameter, remarksParameter, requiredStatusParameter, requiredDateParameter, unitIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateGRN(string grnNo, Nullable<System.DateTime> grnDate, Nullable<int> supplierID, Nullable<System.DateTime> receiptDate, string deliveryChallanNo, Nullable<System.DateTime> deliveryChallanDate, Nullable<int> warehouseID, Nullable<bool> purchaseCompleted, Nullable<bool> cancelled, Nullable<System.DateTime> cancelledDate, Nullable<int> createdUserID, Nullable<System.DateTime> createdDate, Nullable<decimal> iGSTAmt, Nullable<decimal> sGSTAmt, Nullable<decimal> cGSTAmt, Nullable<decimal> roundOff, Nullable<decimal> discountAmt, Nullable<decimal> grossAmt, Nullable<decimal> vATAmount, Nullable<decimal> suppDocAmount, Nullable<decimal> suppOtherCharge, Nullable<decimal> suppShipAmount, Nullable<decimal> currencyExchangeRate, Nullable<decimal> packingForwarding, Nullable<decimal> suppFreight, Nullable<decimal> localCustomsDuty, Nullable<decimal> localFreight, Nullable<decimal> localMiscCharge, Nullable<decimal> localOtherCharges, string remarks, Nullable<decimal> netAmount, Nullable<bool> isCheckedDirectInvoice, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter goodsReceiptNoteID, Nullable<bool> isDraft)
        {
            var grnNoParameter = grnNo != null ?
                new ObjectParameter("GrnNo", grnNo) :
                new ObjectParameter("GrnNo", typeof(string));
    
            var grnDateParameter = grnDate.HasValue ?
                new ObjectParameter("GrnDate", grnDate) :
                new ObjectParameter("GrnDate", typeof(System.DateTime));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var receiptDateParameter = receiptDate.HasValue ?
                new ObjectParameter("ReceiptDate", receiptDate) :
                new ObjectParameter("ReceiptDate", typeof(System.DateTime));
    
            var deliveryChallanNoParameter = deliveryChallanNo != null ?
                new ObjectParameter("DeliveryChallanNo", deliveryChallanNo) :
                new ObjectParameter("DeliveryChallanNo", typeof(string));
    
            var deliveryChallanDateParameter = deliveryChallanDate.HasValue ?
                new ObjectParameter("DeliveryChallanDate", deliveryChallanDate) :
                new ObjectParameter("DeliveryChallanDate", typeof(System.DateTime));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var purchaseCompletedParameter = purchaseCompleted.HasValue ?
                new ObjectParameter("PurchaseCompleted", purchaseCompleted) :
                new ObjectParameter("PurchaseCompleted", typeof(bool));
    
            var cancelledParameter = cancelled.HasValue ?
                new ObjectParameter("Cancelled", cancelled) :
                new ObjectParameter("Cancelled", typeof(bool));
    
            var cancelledDateParameter = cancelledDate.HasValue ?
                new ObjectParameter("CancelledDate", cancelledDate) :
                new ObjectParameter("CancelledDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var iGSTAmtParameter = iGSTAmt.HasValue ?
                new ObjectParameter("IGSTAmt", iGSTAmt) :
                new ObjectParameter("IGSTAmt", typeof(decimal));
    
            var sGSTAmtParameter = sGSTAmt.HasValue ?
                new ObjectParameter("SGSTAmt", sGSTAmt) :
                new ObjectParameter("SGSTAmt", typeof(decimal));
    
            var cGSTAmtParameter = cGSTAmt.HasValue ?
                new ObjectParameter("CGSTAmt", cGSTAmt) :
                new ObjectParameter("CGSTAmt", typeof(decimal));
    
            var roundOffParameter = roundOff.HasValue ?
                new ObjectParameter("RoundOff", roundOff) :
                new ObjectParameter("RoundOff", typeof(decimal));
    
            var discountAmtParameter = discountAmt.HasValue ?
                new ObjectParameter("DiscountAmt", discountAmt) :
                new ObjectParameter("DiscountAmt", typeof(decimal));
    
            var grossAmtParameter = grossAmt.HasValue ?
                new ObjectParameter("GrossAmt", grossAmt) :
                new ObjectParameter("GrossAmt", typeof(decimal));
    
            var vATAmountParameter = vATAmount.HasValue ?
                new ObjectParameter("VATAmount", vATAmount) :
                new ObjectParameter("VATAmount", typeof(decimal));
    
            var suppDocAmountParameter = suppDocAmount.HasValue ?
                new ObjectParameter("SuppDocAmount", suppDocAmount) :
                new ObjectParameter("SuppDocAmount", typeof(decimal));
    
            var suppOtherChargeParameter = suppOtherCharge.HasValue ?
                new ObjectParameter("SuppOtherCharge", suppOtherCharge) :
                new ObjectParameter("SuppOtherCharge", typeof(decimal));
    
            var suppShipAmountParameter = suppShipAmount.HasValue ?
                new ObjectParameter("SuppShipAmount", suppShipAmount) :
                new ObjectParameter("SuppShipAmount", typeof(decimal));
    
            var currencyExchangeRateParameter = currencyExchangeRate.HasValue ?
                new ObjectParameter("CurrencyExchangeRate", currencyExchangeRate) :
                new ObjectParameter("CurrencyExchangeRate", typeof(decimal));
    
            var packingForwardingParameter = packingForwarding.HasValue ?
                new ObjectParameter("PackingForwarding", packingForwarding) :
                new ObjectParameter("PackingForwarding", typeof(decimal));
    
            var suppFreightParameter = suppFreight.HasValue ?
                new ObjectParameter("SuppFreight", suppFreight) :
                new ObjectParameter("SuppFreight", typeof(decimal));
    
            var localCustomsDutyParameter = localCustomsDuty.HasValue ?
                new ObjectParameter("LocalCustomsDuty", localCustomsDuty) :
                new ObjectParameter("LocalCustomsDuty", typeof(decimal));
    
            var localFreightParameter = localFreight.HasValue ?
                new ObjectParameter("LocalFreight", localFreight) :
                new ObjectParameter("LocalFreight", typeof(decimal));
    
            var localMiscChargeParameter = localMiscCharge.HasValue ?
                new ObjectParameter("LocalMiscCharge", localMiscCharge) :
                new ObjectParameter("LocalMiscCharge", typeof(decimal));
    
            var localOtherChargesParameter = localOtherCharges.HasValue ?
                new ObjectParameter("LocalOtherCharges", localOtherCharges) :
                new ObjectParameter("LocalOtherCharges", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var isCheckedDirectInvoiceParameter = isCheckedDirectInvoice.HasValue ?
                new ObjectParameter("IsCheckedDirectInvoice", isCheckedDirectInvoice) :
                new ObjectParameter("IsCheckedDirectInvoice", typeof(bool));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateGRN", grnNoParameter, grnDateParameter, supplierIDParameter, receiptDateParameter, deliveryChallanNoParameter, deliveryChallanDateParameter, warehouseIDParameter, purchaseCompletedParameter, cancelledParameter, cancelledDateParameter, createdUserIDParameter, createdDateParameter, iGSTAmtParameter, sGSTAmtParameter, cGSTAmtParameter, roundOffParameter, discountAmtParameter, grossAmtParameter, vATAmountParameter, suppDocAmountParameter, suppOtherChargeParameter, suppShipAmountParameter, currencyExchangeRateParameter, packingForwardingParameter, suppFreightParameter, localCustomsDutyParameter, localFreightParameter, localMiscChargeParameter, localOtherChargesParameter, remarksParameter, netAmountParameter, isCheckedDirectInvoiceParameter, finYearParameter, locationIDParameter, applicationIDParameter, goodsReceiptNoteID, isDraftParameter);
        }
    
        public virtual ObjectResult<SpGetGRNItemsForPurchaseInvoice_Result> SpGetGRNItemsForPurchaseInvoice(Nullable<int> gRNID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var gRNIDParameter = gRNID.HasValue ?
                new ObjectParameter("GRNID", gRNID) :
                new ObjectParameter("GRNID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetGRNItemsForPurchaseInvoice_Result>("SpGetGRNItemsForPurchaseInvoice", gRNIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetMRPForPurchaseInvoice_Result> SpGetMRPForPurchaseInvoice(Nullable<int> itemID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetMRPForPurchaseInvoice_Result>("SpGetMRPForPurchaseInvoice", itemIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetDirectPurchaseOrder_Result> SpGetDirectPurchaseOrder(Nullable<int> purchaseOrderID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var purchaseOrderIDParameter = purchaseOrderID.HasValue ?
                new ObjectParameter("PurchaseOrderID", purchaseOrderID) :
                new ObjectParameter("PurchaseOrderID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDirectPurchaseOrder_Result>("SpGetDirectPurchaseOrder", purchaseOrderIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreatePurchaseOrderXMLMethod(Nullable<int> purchaseOrderID, Nullable<bool> isDraft, string xMLItems, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter returnValue)
        {
            var purchaseOrderIDParameter = purchaseOrderID.HasValue ?
                new ObjectParameter("PurchaseOrderID", purchaseOrderID) :
                new ObjectParameter("PurchaseOrderID", typeof(int));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var xMLItemsParameter = xMLItems != null ?
                new ObjectParameter("XMLItems", xMLItems) :
                new ObjectParameter("XMLItems", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePurchaseOrderXMLMethod", purchaseOrderIDParameter, isDraftParameter, xMLItemsParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, returnValue);
        }
    
        public virtual ObjectResult<SpGetUnProcessedGRNBySupplierIDForAllopathyV3_Result> SpGetUnProcessedGRNBySupplierIDForAllopathyV3(Nullable<int> supplierID, string hint, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var hintParameter = hint != null ?
                new ObjectParameter("Hint", hint) :
                new ObjectParameter("Hint", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetUnProcessedGRNBySupplierIDForAllopathyV3_Result>("SpGetUnProcessedGRNBySupplierIDForAllopathyV3", supplierIDParameter, hintParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreatePurchaseInvoiceTransWithOverRule(Nullable<int> purchaseInvoiceID, Nullable<int> gRNID, Nullable<int> gRNTransID, Nullable<int> itemID, Nullable<decimal> invoiceQty, Nullable<decimal> invoiceRate, Nullable<decimal> invoiceValue, Nullable<decimal> acceptedQty, Nullable<decimal> approvedQty, Nullable<decimal> pORate, Nullable<decimal> difference, string remarks, Nullable<decimal> unMatchedQty, Nullable<decimal> iGSTPercent, Nullable<decimal> cGSTPercent, Nullable<decimal> sGSTPercent, Nullable<decimal> invoiceGSTPercent, Nullable<int> milkPurchaseID, Nullable<int> unitID, Nullable<int> batchID, Nullable<decimal> basicPrice, Nullable<decimal> discountPercentage, Nullable<decimal> discountAmount, Nullable<decimal> turnOverDiscount, Nullable<decimal> additionalDiscount, Nullable<decimal> taxableAmount, Nullable<decimal> vATPercentage, Nullable<decimal> vATAmount, string secondaryUnit, Nullable<decimal> secondaryInvoiceQty, Nullable<decimal> secondaryOfferQty, Nullable<decimal> secondaryRate, Nullable<decimal> secondaryUnitSize, Nullable<int> currencyID, Nullable<int> isGST, Nullable<int> isVat, string model, string partsNumber, string itemName, Nullable<decimal> cashDiscount, Nullable<int> salesInvoiceID, Nullable<int> salesInvoiceTransID, Nullable<decimal> grossAmount, Nullable<decimal> netAmount, Nullable<decimal> sGSTAmount, Nullable<decimal> iGSTAmount, Nullable<decimal> cGSTAmount, Nullable<decimal> offerQty, Nullable<decimal> landingCost, Nullable<decimal> exchangeRate, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter retValue)
        {
            var purchaseInvoiceIDParameter = purchaseInvoiceID.HasValue ?
                new ObjectParameter("PurchaseInvoiceID", purchaseInvoiceID) :
                new ObjectParameter("PurchaseInvoiceID", typeof(int));
    
            var gRNIDParameter = gRNID.HasValue ?
                new ObjectParameter("GRNID", gRNID) :
                new ObjectParameter("GRNID", typeof(int));
    
            var gRNTransIDParameter = gRNTransID.HasValue ?
                new ObjectParameter("GRNTransID", gRNTransID) :
                new ObjectParameter("GRNTransID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var invoiceQtyParameter = invoiceQty.HasValue ?
                new ObjectParameter("InvoiceQty", invoiceQty) :
                new ObjectParameter("InvoiceQty", typeof(decimal));
    
            var invoiceRateParameter = invoiceRate.HasValue ?
                new ObjectParameter("InvoiceRate", invoiceRate) :
                new ObjectParameter("InvoiceRate", typeof(decimal));
    
            var invoiceValueParameter = invoiceValue.HasValue ?
                new ObjectParameter("InvoiceValue", invoiceValue) :
                new ObjectParameter("InvoiceValue", typeof(decimal));
    
            var acceptedQtyParameter = acceptedQty.HasValue ?
                new ObjectParameter("AcceptedQty", acceptedQty) :
                new ObjectParameter("AcceptedQty", typeof(decimal));
    
            var approvedQtyParameter = approvedQty.HasValue ?
                new ObjectParameter("ApprovedQty", approvedQty) :
                new ObjectParameter("ApprovedQty", typeof(decimal));
    
            var pORateParameter = pORate.HasValue ?
                new ObjectParameter("PORate", pORate) :
                new ObjectParameter("PORate", typeof(decimal));
    
            var differenceParameter = difference.HasValue ?
                new ObjectParameter("Difference", difference) :
                new ObjectParameter("Difference", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var unMatchedQtyParameter = unMatchedQty.HasValue ?
                new ObjectParameter("UnMatchedQty", unMatchedQty) :
                new ObjectParameter("UnMatchedQty", typeof(decimal));
    
            var iGSTPercentParameter = iGSTPercent.HasValue ?
                new ObjectParameter("IGSTPercent", iGSTPercent) :
                new ObjectParameter("IGSTPercent", typeof(decimal));
    
            var cGSTPercentParameter = cGSTPercent.HasValue ?
                new ObjectParameter("CGSTPercent", cGSTPercent) :
                new ObjectParameter("CGSTPercent", typeof(decimal));
    
            var sGSTPercentParameter = sGSTPercent.HasValue ?
                new ObjectParameter("SGSTPercent", sGSTPercent) :
                new ObjectParameter("SGSTPercent", typeof(decimal));
    
            var invoiceGSTPercentParameter = invoiceGSTPercent.HasValue ?
                new ObjectParameter("InvoiceGSTPercent", invoiceGSTPercent) :
                new ObjectParameter("InvoiceGSTPercent", typeof(decimal));
    
            var milkPurchaseIDParameter = milkPurchaseID.HasValue ?
                new ObjectParameter("MilkPurchaseID", milkPurchaseID) :
                new ObjectParameter("MilkPurchaseID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var basicPriceParameter = basicPrice.HasValue ?
                new ObjectParameter("BasicPrice", basicPrice) :
                new ObjectParameter("BasicPrice", typeof(decimal));
    
            var discountPercentageParameter = discountPercentage.HasValue ?
                new ObjectParameter("DiscountPercentage", discountPercentage) :
                new ObjectParameter("DiscountPercentage", typeof(decimal));
    
            var discountAmountParameter = discountAmount.HasValue ?
                new ObjectParameter("DiscountAmount", discountAmount) :
                new ObjectParameter("DiscountAmount", typeof(decimal));
    
            var turnOverDiscountParameter = turnOverDiscount.HasValue ?
                new ObjectParameter("TurnOverDiscount", turnOverDiscount) :
                new ObjectParameter("TurnOverDiscount", typeof(decimal));
    
            var additionalDiscountParameter = additionalDiscount.HasValue ?
                new ObjectParameter("AdditionalDiscount", additionalDiscount) :
                new ObjectParameter("AdditionalDiscount", typeof(decimal));
    
            var taxableAmountParameter = taxableAmount.HasValue ?
                new ObjectParameter("TaxableAmount", taxableAmount) :
                new ObjectParameter("TaxableAmount", typeof(decimal));
    
            var vATPercentageParameter = vATPercentage.HasValue ?
                new ObjectParameter("VATPercentage", vATPercentage) :
                new ObjectParameter("VATPercentage", typeof(decimal));
    
            var vATAmountParameter = vATAmount.HasValue ?
                new ObjectParameter("VATAmount", vATAmount) :
                new ObjectParameter("VATAmount", typeof(decimal));
    
            var secondaryUnitParameter = secondaryUnit != null ?
                new ObjectParameter("SecondaryUnit", secondaryUnit) :
                new ObjectParameter("SecondaryUnit", typeof(string));
    
            var secondaryInvoiceQtyParameter = secondaryInvoiceQty.HasValue ?
                new ObjectParameter("SecondaryInvoiceQty", secondaryInvoiceQty) :
                new ObjectParameter("SecondaryInvoiceQty", typeof(decimal));
    
            var secondaryOfferQtyParameter = secondaryOfferQty.HasValue ?
                new ObjectParameter("SecondaryOfferQty", secondaryOfferQty) :
                new ObjectParameter("SecondaryOfferQty", typeof(decimal));
    
            var secondaryRateParameter = secondaryRate.HasValue ?
                new ObjectParameter("SecondaryRate", secondaryRate) :
                new ObjectParameter("SecondaryRate", typeof(decimal));
    
            var secondaryUnitSizeParameter = secondaryUnitSize.HasValue ?
                new ObjectParameter("SecondaryUnitSize", secondaryUnitSize) :
                new ObjectParameter("SecondaryUnitSize", typeof(decimal));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var isGSTParameter = isGST.HasValue ?
                new ObjectParameter("IsGST", isGST) :
                new ObjectParameter("IsGST", typeof(int));
    
            var isVatParameter = isVat.HasValue ?
                new ObjectParameter("IsVat", isVat) :
                new ObjectParameter("IsVat", typeof(int));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var partsNumberParameter = partsNumber != null ?
                new ObjectParameter("PartsNumber", partsNumber) :
                new ObjectParameter("PartsNumber", typeof(string));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var cashDiscountParameter = cashDiscount.HasValue ?
                new ObjectParameter("CashDiscount", cashDiscount) :
                new ObjectParameter("CashDiscount", typeof(decimal));
    
            var salesInvoiceIDParameter = salesInvoiceID.HasValue ?
                new ObjectParameter("SalesInvoiceID", salesInvoiceID) :
                new ObjectParameter("SalesInvoiceID", typeof(int));
    
            var salesInvoiceTransIDParameter = salesInvoiceTransID.HasValue ?
                new ObjectParameter("SalesInvoiceTransID", salesInvoiceTransID) :
                new ObjectParameter("SalesInvoiceTransID", typeof(int));
    
            var grossAmountParameter = grossAmount.HasValue ?
                new ObjectParameter("GrossAmount", grossAmount) :
                new ObjectParameter("GrossAmount", typeof(decimal));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var sGSTAmountParameter = sGSTAmount.HasValue ?
                new ObjectParameter("SGSTAmount", sGSTAmount) :
                new ObjectParameter("SGSTAmount", typeof(decimal));
    
            var iGSTAmountParameter = iGSTAmount.HasValue ?
                new ObjectParameter("IGSTAmount", iGSTAmount) :
                new ObjectParameter("IGSTAmount", typeof(decimal));
    
            var cGSTAmountParameter = cGSTAmount.HasValue ?
                new ObjectParameter("CGSTAmount", cGSTAmount) :
                new ObjectParameter("CGSTAmount", typeof(decimal));
    
            var offerQtyParameter = offerQty.HasValue ?
                new ObjectParameter("OfferQty", offerQty) :
                new ObjectParameter("OfferQty", typeof(decimal));
    
            var landingCostParameter = landingCost.HasValue ?
                new ObjectParameter("LandingCost", landingCost) :
                new ObjectParameter("LandingCost", typeof(decimal));
    
            var exchangeRateParameter = exchangeRate.HasValue ?
                new ObjectParameter("ExchangeRate", exchangeRate) :
                new ObjectParameter("ExchangeRate", typeof(decimal));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePurchaseInvoiceTransWithOverRule", purchaseInvoiceIDParameter, gRNIDParameter, gRNTransIDParameter, itemIDParameter, invoiceQtyParameter, invoiceRateParameter, invoiceValueParameter, acceptedQtyParameter, approvedQtyParameter, pORateParameter, differenceParameter, remarksParameter, unMatchedQtyParameter, iGSTPercentParameter, cGSTPercentParameter, sGSTPercentParameter, invoiceGSTPercentParameter, milkPurchaseIDParameter, unitIDParameter, batchIDParameter, basicPriceParameter, discountPercentageParameter, discountAmountParameter, turnOverDiscountParameter, additionalDiscountParameter, taxableAmountParameter, vATPercentageParameter, vATAmountParameter, secondaryUnitParameter, secondaryInvoiceQtyParameter, secondaryOfferQtyParameter, secondaryRateParameter, secondaryUnitSizeParameter, currencyIDParameter, isGSTParameter, isVatParameter, modelParameter, partsNumberParameter, itemNameParameter, cashDiscountParameter, salesInvoiceIDParameter, salesInvoiceTransIDParameter, grossAmountParameter, netAmountParameter, sGSTAmountParameter, iGSTAmountParameter, cGSTAmountParameter, offerQtyParameter, landingCostParameter, exchangeRateParameter, finYearParameter, locationIDParameter, applicationIDParameter, retValue);
        }
    
        public virtual ObjectResult<SpGetOrderTypeList_Result> SpGetOrderTypeList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetOrderTypeList_Result>("SpGetOrderTypeList");
        }
    
        public virtual int SpCreatePurchaseOrder(string purchaseOrderNo, Nullable<System.DateTime> purchaseOrderDate, Nullable<int> supplierID, Nullable<int> advancePercentage, Nullable<decimal> advanceAmount, Nullable<int> paymentModeID, Nullable<int> shippingAddressID, Nullable<int> billingAddressID, Nullable<bool> inclusiveGST, Nullable<bool> gstExtra, Nullable<int> selectedQuotationID, string otherQuotationIDS, string deliveryWithin, Nullable<int> paymentWithinID, Nullable<decimal> sGSTAmt, Nullable<decimal> cGSTAmt, Nullable<decimal> iGSTAmt, Nullable<decimal> vATAmount, Nullable<decimal> freightAmt, Nullable<decimal> otherCharges, Nullable<decimal> packingShippingCharge, Nullable<decimal> discount, Nullable<decimal> netAmt, Nullable<decimal> grossAmount, Nullable<bool> orderMet, Nullable<bool> isDraft, Nullable<int> isGST, Nullable<int> isVat, Nullable<decimal> currencyExchangeRate, string remarks, string suppDocCode, string suppShipCode, string suppOtherRemark, string suppQuotNo, string shipment, string orderType, Nullable<decimal> suppDocAmount, Nullable<decimal> suppShipAmount, Nullable<decimal> suppOtherCharge, string supplierReferenceNo, string termsOfPrice, Nullable<bool> cancelled, Nullable<System.DateTime> cancelledDate, Nullable<int> createdUserID, Nullable<System.DateTime> createdDate, Nullable<int> salesOrderLocationID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter purchaseOrderID)
        {
            var purchaseOrderNoParameter = purchaseOrderNo != null ?
                new ObjectParameter("PurchaseOrderNo", purchaseOrderNo) :
                new ObjectParameter("PurchaseOrderNo", typeof(string));
    
            var purchaseOrderDateParameter = purchaseOrderDate.HasValue ?
                new ObjectParameter("PurchaseOrderDate", purchaseOrderDate) :
                new ObjectParameter("PurchaseOrderDate", typeof(System.DateTime));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var advancePercentageParameter = advancePercentage.HasValue ?
                new ObjectParameter("AdvancePercentage", advancePercentage) :
                new ObjectParameter("AdvancePercentage", typeof(int));
    
            var advanceAmountParameter = advanceAmount.HasValue ?
                new ObjectParameter("AdvanceAmount", advanceAmount) :
                new ObjectParameter("AdvanceAmount", typeof(decimal));
    
            var paymentModeIDParameter = paymentModeID.HasValue ?
                new ObjectParameter("PaymentModeID", paymentModeID) :
                new ObjectParameter("PaymentModeID", typeof(int));
    
            var shippingAddressIDParameter = shippingAddressID.HasValue ?
                new ObjectParameter("ShippingAddressID", shippingAddressID) :
                new ObjectParameter("ShippingAddressID", typeof(int));
    
            var billingAddressIDParameter = billingAddressID.HasValue ?
                new ObjectParameter("BillingAddressID", billingAddressID) :
                new ObjectParameter("BillingAddressID", typeof(int));
    
            var inclusiveGSTParameter = inclusiveGST.HasValue ?
                new ObjectParameter("InclusiveGST", inclusiveGST) :
                new ObjectParameter("InclusiveGST", typeof(bool));
    
            var gstExtraParameter = gstExtra.HasValue ?
                new ObjectParameter("GstExtra", gstExtra) :
                new ObjectParameter("GstExtra", typeof(bool));
    
            var selectedQuotationIDParameter = selectedQuotationID.HasValue ?
                new ObjectParameter("SelectedQuotationID", selectedQuotationID) :
                new ObjectParameter("SelectedQuotationID", typeof(int));
    
            var otherQuotationIDSParameter = otherQuotationIDS != null ?
                new ObjectParameter("OtherQuotationIDS", otherQuotationIDS) :
                new ObjectParameter("OtherQuotationIDS", typeof(string));
    
            var deliveryWithinParameter = deliveryWithin != null ?
                new ObjectParameter("DeliveryWithin", deliveryWithin) :
                new ObjectParameter("DeliveryWithin", typeof(string));
    
            var paymentWithinIDParameter = paymentWithinID.HasValue ?
                new ObjectParameter("PaymentWithinID", paymentWithinID) :
                new ObjectParameter("PaymentWithinID", typeof(int));
    
            var sGSTAmtParameter = sGSTAmt.HasValue ?
                new ObjectParameter("SGSTAmt", sGSTAmt) :
                new ObjectParameter("SGSTAmt", typeof(decimal));
    
            var cGSTAmtParameter = cGSTAmt.HasValue ?
                new ObjectParameter("CGSTAmt", cGSTAmt) :
                new ObjectParameter("CGSTAmt", typeof(decimal));
    
            var iGSTAmtParameter = iGSTAmt.HasValue ?
                new ObjectParameter("IGSTAmt", iGSTAmt) :
                new ObjectParameter("IGSTAmt", typeof(decimal));
    
            var vATAmountParameter = vATAmount.HasValue ?
                new ObjectParameter("VATAmount", vATAmount) :
                new ObjectParameter("VATAmount", typeof(decimal));
    
            var freightAmtParameter = freightAmt.HasValue ?
                new ObjectParameter("FreightAmt", freightAmt) :
                new ObjectParameter("FreightAmt", typeof(decimal));
    
            var otherChargesParameter = otherCharges.HasValue ?
                new ObjectParameter("OtherCharges", otherCharges) :
                new ObjectParameter("OtherCharges", typeof(decimal));
    
            var packingShippingChargeParameter = packingShippingCharge.HasValue ?
                new ObjectParameter("PackingShippingCharge", packingShippingCharge) :
                new ObjectParameter("PackingShippingCharge", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var netAmtParameter = netAmt.HasValue ?
                new ObjectParameter("NetAmt", netAmt) :
                new ObjectParameter("NetAmt", typeof(decimal));
    
            var grossAmountParameter = grossAmount.HasValue ?
                new ObjectParameter("GrossAmount", grossAmount) :
                new ObjectParameter("GrossAmount", typeof(decimal));
    
            var orderMetParameter = orderMet.HasValue ?
                new ObjectParameter("OrderMet", orderMet) :
                new ObjectParameter("OrderMet", typeof(bool));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var isGSTParameter = isGST.HasValue ?
                new ObjectParameter("IsGST", isGST) :
                new ObjectParameter("IsGST", typeof(int));
    
            var isVatParameter = isVat.HasValue ?
                new ObjectParameter("IsVat", isVat) :
                new ObjectParameter("IsVat", typeof(int));
    
            var currencyExchangeRateParameter = currencyExchangeRate.HasValue ?
                new ObjectParameter("CurrencyExchangeRate", currencyExchangeRate) :
                new ObjectParameter("CurrencyExchangeRate", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var suppDocCodeParameter = suppDocCode != null ?
                new ObjectParameter("SuppDocCode", suppDocCode) :
                new ObjectParameter("SuppDocCode", typeof(string));
    
            var suppShipCodeParameter = suppShipCode != null ?
                new ObjectParameter("SuppShipCode", suppShipCode) :
                new ObjectParameter("SuppShipCode", typeof(string));
    
            var suppOtherRemarkParameter = suppOtherRemark != null ?
                new ObjectParameter("SuppOtherRemark", suppOtherRemark) :
                new ObjectParameter("SuppOtherRemark", typeof(string));
    
            var suppQuotNoParameter = suppQuotNo != null ?
                new ObjectParameter("SuppQuotNo", suppQuotNo) :
                new ObjectParameter("SuppQuotNo", typeof(string));
    
            var shipmentParameter = shipment != null ?
                new ObjectParameter("Shipment", shipment) :
                new ObjectParameter("Shipment", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var suppDocAmountParameter = suppDocAmount.HasValue ?
                new ObjectParameter("SuppDocAmount", suppDocAmount) :
                new ObjectParameter("SuppDocAmount", typeof(decimal));
    
            var suppShipAmountParameter = suppShipAmount.HasValue ?
                new ObjectParameter("SuppShipAmount", suppShipAmount) :
                new ObjectParameter("SuppShipAmount", typeof(decimal));
    
            var suppOtherChargeParameter = suppOtherCharge.HasValue ?
                new ObjectParameter("SuppOtherCharge", suppOtherCharge) :
                new ObjectParameter("SuppOtherCharge", typeof(decimal));
    
            var supplierReferenceNoParameter = supplierReferenceNo != null ?
                new ObjectParameter("SupplierReferenceNo", supplierReferenceNo) :
                new ObjectParameter("SupplierReferenceNo", typeof(string));
    
            var termsOfPriceParameter = termsOfPrice != null ?
                new ObjectParameter("TermsOfPrice", termsOfPrice) :
                new ObjectParameter("TermsOfPrice", typeof(string));
    
            var cancelledParameter = cancelled.HasValue ?
                new ObjectParameter("Cancelled", cancelled) :
                new ObjectParameter("Cancelled", typeof(bool));
    
            var cancelledDateParameter = cancelledDate.HasValue ?
                new ObjectParameter("CancelledDate", cancelledDate) :
                new ObjectParameter("CancelledDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var salesOrderLocationIDParameter = salesOrderLocationID.HasValue ?
                new ObjectParameter("SalesOrderLocationID", salesOrderLocationID) :
                new ObjectParameter("SalesOrderLocationID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePurchaseOrder", purchaseOrderNoParameter, purchaseOrderDateParameter, supplierIDParameter, advancePercentageParameter, advanceAmountParameter, paymentModeIDParameter, shippingAddressIDParameter, billingAddressIDParameter, inclusiveGSTParameter, gstExtraParameter, selectedQuotationIDParameter, otherQuotationIDSParameter, deliveryWithinParameter, paymentWithinIDParameter, sGSTAmtParameter, cGSTAmtParameter, iGSTAmtParameter, vATAmountParameter, freightAmtParameter, otherChargesParameter, packingShippingChargeParameter, discountParameter, netAmtParameter, grossAmountParameter, orderMetParameter, isDraftParameter, isGSTParameter, isVatParameter, currencyExchangeRateParameter, remarksParameter, suppDocCodeParameter, suppShipCodeParameter, suppOtherRemarkParameter, suppQuotNoParameter, shipmentParameter, orderTypeParameter, suppDocAmountParameter, suppShipAmountParameter, suppOtherChargeParameter, supplierReferenceNoParameter, termsOfPriceParameter, cancelledParameter, cancelledDateParameter, createdUserIDParameter, createdDateParameter, salesOrderLocationIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, purchaseOrderID);
        }
    
        public virtual int SpUpdatePurchaseOrder(Nullable<int> iD, Nullable<int> supplierID, string deliveryWithin, Nullable<int> advancePercentage, Nullable<decimal> advanceAmount, Nullable<System.DateTime> purchaseOrderDate, Nullable<int> shippingAddressID, Nullable<int> billingAddressID, Nullable<int> selectedQuotationID, string otherQuotationIDS, Nullable<bool> isDraft, string remarks, string suppDocCode, string suppShipCode, string suppOtherRemark, string suppQuotNo, string shipment, string orderType, Nullable<decimal> suppDocAmount, Nullable<decimal> suppShipAmount, Nullable<decimal> suppOtherCharge, string supplierReferenceNo, string termsOfPrice, Nullable<int> paymentModeID, Nullable<int> paymentWithinID, Nullable<decimal> sGSTAmt, Nullable<decimal> cGSTAmt, Nullable<decimal> iGSTAmt, Nullable<decimal> vATAmount, Nullable<decimal> freightAmt, Nullable<decimal> otherCharges, Nullable<decimal> packingShippingCharges, Nullable<decimal> discount, Nullable<decimal> netAmt, Nullable<decimal> grossAmount, Nullable<int> salesOrderLocationID, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var deliveryWithinParameter = deliveryWithin != null ?
                new ObjectParameter("DeliveryWithin", deliveryWithin) :
                new ObjectParameter("DeliveryWithin", typeof(string));
    
            var advancePercentageParameter = advancePercentage.HasValue ?
                new ObjectParameter("AdvancePercentage", advancePercentage) :
                new ObjectParameter("AdvancePercentage", typeof(int));
    
            var advanceAmountParameter = advanceAmount.HasValue ?
                new ObjectParameter("AdvanceAmount", advanceAmount) :
                new ObjectParameter("AdvanceAmount", typeof(decimal));
    
            var purchaseOrderDateParameter = purchaseOrderDate.HasValue ?
                new ObjectParameter("PurchaseOrderDate", purchaseOrderDate) :
                new ObjectParameter("PurchaseOrderDate", typeof(System.DateTime));
    
            var shippingAddressIDParameter = shippingAddressID.HasValue ?
                new ObjectParameter("ShippingAddressID", shippingAddressID) :
                new ObjectParameter("ShippingAddressID", typeof(int));
    
            var billingAddressIDParameter = billingAddressID.HasValue ?
                new ObjectParameter("BillingAddressID", billingAddressID) :
                new ObjectParameter("BillingAddressID", typeof(int));
    
            var selectedQuotationIDParameter = selectedQuotationID.HasValue ?
                new ObjectParameter("SelectedQuotationID", selectedQuotationID) :
                new ObjectParameter("SelectedQuotationID", typeof(int));
    
            var otherQuotationIDSParameter = otherQuotationIDS != null ?
                new ObjectParameter("OtherQuotationIDS", otherQuotationIDS) :
                new ObjectParameter("OtherQuotationIDS", typeof(string));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var suppDocCodeParameter = suppDocCode != null ?
                new ObjectParameter("SuppDocCode", suppDocCode) :
                new ObjectParameter("SuppDocCode", typeof(string));
    
            var suppShipCodeParameter = suppShipCode != null ?
                new ObjectParameter("SuppShipCode", suppShipCode) :
                new ObjectParameter("SuppShipCode", typeof(string));
    
            var suppOtherRemarkParameter = suppOtherRemark != null ?
                new ObjectParameter("SuppOtherRemark", suppOtherRemark) :
                new ObjectParameter("SuppOtherRemark", typeof(string));
    
            var suppQuotNoParameter = suppQuotNo != null ?
                new ObjectParameter("SuppQuotNo", suppQuotNo) :
                new ObjectParameter("SuppQuotNo", typeof(string));
    
            var shipmentParameter = shipment != null ?
                new ObjectParameter("Shipment", shipment) :
                new ObjectParameter("Shipment", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var suppDocAmountParameter = suppDocAmount.HasValue ?
                new ObjectParameter("SuppDocAmount", suppDocAmount) :
                new ObjectParameter("SuppDocAmount", typeof(decimal));
    
            var suppShipAmountParameter = suppShipAmount.HasValue ?
                new ObjectParameter("SuppShipAmount", suppShipAmount) :
                new ObjectParameter("SuppShipAmount", typeof(decimal));
    
            var suppOtherChargeParameter = suppOtherCharge.HasValue ?
                new ObjectParameter("SuppOtherCharge", suppOtherCharge) :
                new ObjectParameter("SuppOtherCharge", typeof(decimal));
    
            var supplierReferenceNoParameter = supplierReferenceNo != null ?
                new ObjectParameter("SupplierReferenceNo", supplierReferenceNo) :
                new ObjectParameter("SupplierReferenceNo", typeof(string));
    
            var termsOfPriceParameter = termsOfPrice != null ?
                new ObjectParameter("TermsOfPrice", termsOfPrice) :
                new ObjectParameter("TermsOfPrice", typeof(string));
    
            var paymentModeIDParameter = paymentModeID.HasValue ?
                new ObjectParameter("PaymentModeID", paymentModeID) :
                new ObjectParameter("PaymentModeID", typeof(int));
    
            var paymentWithinIDParameter = paymentWithinID.HasValue ?
                new ObjectParameter("PaymentWithinID", paymentWithinID) :
                new ObjectParameter("PaymentWithinID", typeof(int));
    
            var sGSTAmtParameter = sGSTAmt.HasValue ?
                new ObjectParameter("SGSTAmt", sGSTAmt) :
                new ObjectParameter("SGSTAmt", typeof(decimal));
    
            var cGSTAmtParameter = cGSTAmt.HasValue ?
                new ObjectParameter("CGSTAmt", cGSTAmt) :
                new ObjectParameter("CGSTAmt", typeof(decimal));
    
            var iGSTAmtParameter = iGSTAmt.HasValue ?
                new ObjectParameter("IGSTAmt", iGSTAmt) :
                new ObjectParameter("IGSTAmt", typeof(decimal));
    
            var vATAmountParameter = vATAmount.HasValue ?
                new ObjectParameter("VATAmount", vATAmount) :
                new ObjectParameter("VATAmount", typeof(decimal));
    
            var freightAmtParameter = freightAmt.HasValue ?
                new ObjectParameter("FreightAmt", freightAmt) :
                new ObjectParameter("FreightAmt", typeof(decimal));
    
            var otherChargesParameter = otherCharges.HasValue ?
                new ObjectParameter("OtherCharges", otherCharges) :
                new ObjectParameter("OtherCharges", typeof(decimal));
    
            var packingShippingChargesParameter = packingShippingCharges.HasValue ?
                new ObjectParameter("PackingShippingCharges", packingShippingCharges) :
                new ObjectParameter("PackingShippingCharges", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var netAmtParameter = netAmt.HasValue ?
                new ObjectParameter("NetAmt", netAmt) :
                new ObjectParameter("NetAmt", typeof(decimal));
    
            var grossAmountParameter = grossAmount.HasValue ?
                new ObjectParameter("GrossAmount", grossAmount) :
                new ObjectParameter("GrossAmount", typeof(decimal));
    
            var salesOrderLocationIDParameter = salesOrderLocationID.HasValue ?
                new ObjectParameter("SalesOrderLocationID", salesOrderLocationID) :
                new ObjectParameter("SalesOrderLocationID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdatePurchaseOrder", iDParameter, supplierIDParameter, deliveryWithinParameter, advancePercentageParameter, advanceAmountParameter, purchaseOrderDateParameter, shippingAddressIDParameter, billingAddressIDParameter, selectedQuotationIDParameter, otherQuotationIDSParameter, isDraftParameter, remarksParameter, suppDocCodeParameter, suppShipCodeParameter, suppOtherRemarkParameter, suppQuotNoParameter, shipmentParameter, orderTypeParameter, suppDocAmountParameter, suppShipAmountParameter, suppOtherChargeParameter, supplierReferenceNoParameter, termsOfPriceParameter, paymentModeIDParameter, paymentWithinIDParameter, sGSTAmtParameter, cGSTAmtParameter, iGSTAmtParameter, vATAmountParameter, freightAmtParameter, otherChargesParameter, packingShippingChargesParameter, discountParameter, netAmtParameter, grossAmountParameter, salesOrderLocationIDParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreatePurchaseOrderForService(string purchaseOrderNo, Nullable<System.DateTime> purchaseOrderDate, Nullable<int> supplierID, Nullable<int> advancePercentage, Nullable<decimal> advanceAmount, Nullable<int> paymentModeID, Nullable<int> shippingAddressID, Nullable<int> billingAddressID, Nullable<bool> inclusiveGST, Nullable<int> selectedQuotationID, string otherQuotationIDS, string deliveryWithin, Nullable<int> paymentWithinID, Nullable<decimal> sGSTAmt, Nullable<decimal> cGSTAmt, Nullable<decimal> iGSTAmt, Nullable<decimal> netAmt, Nullable<bool> orderMet, Nullable<bool> isDraft, string remarks, string supplierReferenceNo, string termsOfPrice, Nullable<bool> cancelled, Nullable<System.DateTime> cancelledDate, Nullable<int> createdUserID, Nullable<System.DateTime> createdDate, Nullable<bool> isDirectInvoice, string purchaseInvoiceNo, Nullable<System.DateTime> purchaseInvoiceDate, Nullable<decimal> purchaseInvoiceDiscount, Nullable<decimal> purchaseInvoiceDeductions, Nullable<int> itemID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter purchaseOrderID)
        {
            var purchaseOrderNoParameter = purchaseOrderNo != null ?
                new ObjectParameter("PurchaseOrderNo", purchaseOrderNo) :
                new ObjectParameter("PurchaseOrderNo", typeof(string));
    
            var purchaseOrderDateParameter = purchaseOrderDate.HasValue ?
                new ObjectParameter("PurchaseOrderDate", purchaseOrderDate) :
                new ObjectParameter("PurchaseOrderDate", typeof(System.DateTime));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var advancePercentageParameter = advancePercentage.HasValue ?
                new ObjectParameter("AdvancePercentage", advancePercentage) :
                new ObjectParameter("AdvancePercentage", typeof(int));
    
            var advanceAmountParameter = advanceAmount.HasValue ?
                new ObjectParameter("AdvanceAmount", advanceAmount) :
                new ObjectParameter("AdvanceAmount", typeof(decimal));
    
            var paymentModeIDParameter = paymentModeID.HasValue ?
                new ObjectParameter("PaymentModeID", paymentModeID) :
                new ObjectParameter("PaymentModeID", typeof(int));
    
            var shippingAddressIDParameter = shippingAddressID.HasValue ?
                new ObjectParameter("ShippingAddressID", shippingAddressID) :
                new ObjectParameter("ShippingAddressID", typeof(int));
    
            var billingAddressIDParameter = billingAddressID.HasValue ?
                new ObjectParameter("BillingAddressID", billingAddressID) :
                new ObjectParameter("BillingAddressID", typeof(int));
    
            var inclusiveGSTParameter = inclusiveGST.HasValue ?
                new ObjectParameter("InclusiveGST", inclusiveGST) :
                new ObjectParameter("InclusiveGST", typeof(bool));
    
            var selectedQuotationIDParameter = selectedQuotationID.HasValue ?
                new ObjectParameter("SelectedQuotationID", selectedQuotationID) :
                new ObjectParameter("SelectedQuotationID", typeof(int));
    
            var otherQuotationIDSParameter = otherQuotationIDS != null ?
                new ObjectParameter("OtherQuotationIDS", otherQuotationIDS) :
                new ObjectParameter("OtherQuotationIDS", typeof(string));
    
            var deliveryWithinParameter = deliveryWithin != null ?
                new ObjectParameter("DeliveryWithin", deliveryWithin) :
                new ObjectParameter("DeliveryWithin", typeof(string));
    
            var paymentWithinIDParameter = paymentWithinID.HasValue ?
                new ObjectParameter("PaymentWithinID", paymentWithinID) :
                new ObjectParameter("PaymentWithinID", typeof(int));
    
            var sGSTAmtParameter = sGSTAmt.HasValue ?
                new ObjectParameter("SGSTAmt", sGSTAmt) :
                new ObjectParameter("SGSTAmt", typeof(decimal));
    
            var cGSTAmtParameter = cGSTAmt.HasValue ?
                new ObjectParameter("CGSTAmt", cGSTAmt) :
                new ObjectParameter("CGSTAmt", typeof(decimal));
    
            var iGSTAmtParameter = iGSTAmt.HasValue ?
                new ObjectParameter("IGSTAmt", iGSTAmt) :
                new ObjectParameter("IGSTAmt", typeof(decimal));
    
            var netAmtParameter = netAmt.HasValue ?
                new ObjectParameter("NetAmt", netAmt) :
                new ObjectParameter("NetAmt", typeof(decimal));
    
            var orderMetParameter = orderMet.HasValue ?
                new ObjectParameter("OrderMet", orderMet) :
                new ObjectParameter("OrderMet", typeof(bool));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var supplierReferenceNoParameter = supplierReferenceNo != null ?
                new ObjectParameter("SupplierReferenceNo", supplierReferenceNo) :
                new ObjectParameter("SupplierReferenceNo", typeof(string));
    
            var termsOfPriceParameter = termsOfPrice != null ?
                new ObjectParameter("TermsOfPrice", termsOfPrice) :
                new ObjectParameter("TermsOfPrice", typeof(string));
    
            var cancelledParameter = cancelled.HasValue ?
                new ObjectParameter("Cancelled", cancelled) :
                new ObjectParameter("Cancelled", typeof(bool));
    
            var cancelledDateParameter = cancelledDate.HasValue ?
                new ObjectParameter("CancelledDate", cancelledDate) :
                new ObjectParameter("CancelledDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var isDirectInvoiceParameter = isDirectInvoice.HasValue ?
                new ObjectParameter("IsDirectInvoice", isDirectInvoice) :
                new ObjectParameter("IsDirectInvoice", typeof(bool));
    
            var purchaseInvoiceNoParameter = purchaseInvoiceNo != null ?
                new ObjectParameter("PurchaseInvoiceNo", purchaseInvoiceNo) :
                new ObjectParameter("PurchaseInvoiceNo", typeof(string));
    
            var purchaseInvoiceDateParameter = purchaseInvoiceDate.HasValue ?
                new ObjectParameter("PurchaseInvoiceDate", purchaseInvoiceDate) :
                new ObjectParameter("PurchaseInvoiceDate", typeof(System.DateTime));
    
            var purchaseInvoiceDiscountParameter = purchaseInvoiceDiscount.HasValue ?
                new ObjectParameter("PurchaseInvoiceDiscount", purchaseInvoiceDiscount) :
                new ObjectParameter("PurchaseInvoiceDiscount", typeof(decimal));
    
            var purchaseInvoiceDeductionsParameter = purchaseInvoiceDeductions.HasValue ?
                new ObjectParameter("PurchaseInvoiceDeductions", purchaseInvoiceDeductions) :
                new ObjectParameter("PurchaseInvoiceDeductions", typeof(decimal));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePurchaseOrderForService", purchaseOrderNoParameter, purchaseOrderDateParameter, supplierIDParameter, advancePercentageParameter, advanceAmountParameter, paymentModeIDParameter, shippingAddressIDParameter, billingAddressIDParameter, inclusiveGSTParameter, selectedQuotationIDParameter, otherQuotationIDSParameter, deliveryWithinParameter, paymentWithinIDParameter, sGSTAmtParameter, cGSTAmtParameter, iGSTAmtParameter, netAmtParameter, orderMetParameter, isDraftParameter, remarksParameter, supplierReferenceNoParameter, termsOfPriceParameter, cancelledParameter, cancelledDateParameter, createdUserIDParameter, createdDateParameter, isDirectInvoiceParameter, purchaseInvoiceNoParameter, purchaseInvoiceDateParameter, purchaseInvoiceDiscountParameter, purchaseInvoiceDeductionsParameter, itemIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, purchaseOrderID);
        }
    
        public virtual ObjectResult<SpGetPurchaseOrderForService_Result> SpGetPurchaseOrderForService(Nullable<int> iD, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPurchaseOrderForService_Result>("SpGetPurchaseOrderForService", iDParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdatePurchaseOrderForService(Nullable<int> iD, Nullable<int> supplierID, Nullable<int> advancePercentage, Nullable<decimal> advanceAmount, Nullable<int> paymentModeID, Nullable<int> shippingAddressID, Nullable<int> billingAddressID, Nullable<bool> inclusiveGST, Nullable<int> selectedQuotationID, string otherQuotationIDs, string deliveryWithIn, Nullable<int> paymentWithInID, Nullable<decimal> sGSTAmt, Nullable<decimal> cGSTAmt, Nullable<decimal> iGSTAmt, Nullable<decimal> netAmount, Nullable<bool> isDraft, string remarks, string supplierReferenceNo, string termsOfPrice, string purchaseInvoiceNo, Nullable<System.DateTime> purchaseInvoiceDate, Nullable<decimal> purchaseInvoiceDiscount, Nullable<decimal> purchaseInvoiceDeductions, Nullable<int> itemID, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, Nullable<bool> directInvoice)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var advancePercentageParameter = advancePercentage.HasValue ?
                new ObjectParameter("AdvancePercentage", advancePercentage) :
                new ObjectParameter("AdvancePercentage", typeof(int));
    
            var advanceAmountParameter = advanceAmount.HasValue ?
                new ObjectParameter("AdvanceAmount", advanceAmount) :
                new ObjectParameter("AdvanceAmount", typeof(decimal));
    
            var paymentModeIDParameter = paymentModeID.HasValue ?
                new ObjectParameter("PaymentModeID", paymentModeID) :
                new ObjectParameter("PaymentModeID", typeof(int));
    
            var shippingAddressIDParameter = shippingAddressID.HasValue ?
                new ObjectParameter("ShippingAddressID", shippingAddressID) :
                new ObjectParameter("ShippingAddressID", typeof(int));
    
            var billingAddressIDParameter = billingAddressID.HasValue ?
                new ObjectParameter("BillingAddressID", billingAddressID) :
                new ObjectParameter("BillingAddressID", typeof(int));
    
            var inclusiveGSTParameter = inclusiveGST.HasValue ?
                new ObjectParameter("InclusiveGST", inclusiveGST) :
                new ObjectParameter("InclusiveGST", typeof(bool));
    
            var selectedQuotationIDParameter = selectedQuotationID.HasValue ?
                new ObjectParameter("SelectedQuotationID", selectedQuotationID) :
                new ObjectParameter("SelectedQuotationID", typeof(int));
    
            var otherQuotationIDsParameter = otherQuotationIDs != null ?
                new ObjectParameter("OtherQuotationIDs", otherQuotationIDs) :
                new ObjectParameter("OtherQuotationIDs", typeof(string));
    
            var deliveryWithInParameter = deliveryWithIn != null ?
                new ObjectParameter("DeliveryWithIn", deliveryWithIn) :
                new ObjectParameter("DeliveryWithIn", typeof(string));
    
            var paymentWithInIDParameter = paymentWithInID.HasValue ?
                new ObjectParameter("PaymentWithInID", paymentWithInID) :
                new ObjectParameter("PaymentWithInID", typeof(int));
    
            var sGSTAmtParameter = sGSTAmt.HasValue ?
                new ObjectParameter("SGSTAmt", sGSTAmt) :
                new ObjectParameter("SGSTAmt", typeof(decimal));
    
            var cGSTAmtParameter = cGSTAmt.HasValue ?
                new ObjectParameter("CGSTAmt", cGSTAmt) :
                new ObjectParameter("CGSTAmt", typeof(decimal));
    
            var iGSTAmtParameter = iGSTAmt.HasValue ?
                new ObjectParameter("IGSTAmt", iGSTAmt) :
                new ObjectParameter("IGSTAmt", typeof(decimal));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var supplierReferenceNoParameter = supplierReferenceNo != null ?
                new ObjectParameter("SupplierReferenceNo", supplierReferenceNo) :
                new ObjectParameter("SupplierReferenceNo", typeof(string));
    
            var termsOfPriceParameter = termsOfPrice != null ?
                new ObjectParameter("TermsOfPrice", termsOfPrice) :
                new ObjectParameter("TermsOfPrice", typeof(string));
    
            var purchaseInvoiceNoParameter = purchaseInvoiceNo != null ?
                new ObjectParameter("PurchaseInvoiceNo", purchaseInvoiceNo) :
                new ObjectParameter("PurchaseInvoiceNo", typeof(string));
    
            var purchaseInvoiceDateParameter = purchaseInvoiceDate.HasValue ?
                new ObjectParameter("PurchaseInvoiceDate", purchaseInvoiceDate) :
                new ObjectParameter("PurchaseInvoiceDate", typeof(System.DateTime));
    
            var purchaseInvoiceDiscountParameter = purchaseInvoiceDiscount.HasValue ?
                new ObjectParameter("PurchaseInvoiceDiscount", purchaseInvoiceDiscount) :
                new ObjectParameter("PurchaseInvoiceDiscount", typeof(decimal));
    
            var purchaseInvoiceDeductionsParameter = purchaseInvoiceDeductions.HasValue ?
                new ObjectParameter("PurchaseInvoiceDeductions", purchaseInvoiceDeductions) :
                new ObjectParameter("PurchaseInvoiceDeductions", typeof(decimal));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var directInvoiceParameter = directInvoice.HasValue ?
                new ObjectParameter("DirectInvoice", directInvoice) :
                new ObjectParameter("DirectInvoice", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdatePurchaseOrderForService", iDParameter, supplierIDParameter, advancePercentageParameter, advanceAmountParameter, paymentModeIDParameter, shippingAddressIDParameter, billingAddressIDParameter, inclusiveGSTParameter, selectedQuotationIDParameter, otherQuotationIDsParameter, deliveryWithInParameter, paymentWithInIDParameter, sGSTAmtParameter, cGSTAmtParameter, iGSTAmtParameter, netAmountParameter, isDraftParameter, remarksParameter, supplierReferenceNoParameter, termsOfPriceParameter, purchaseInvoiceNoParameter, purchaseInvoiceDateParameter, purchaseInvoiceDiscountParameter, purchaseInvoiceDeductionsParameter, itemIDParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, directInvoiceParameter);
        }
    
        public virtual ObjectResult<SpGetPurchaseInvoiceTypeList_Result> SpGetPurchaseInvoiceTypeList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPurchaseInvoiceTypeList_Result>("SpGetPurchaseInvoiceTypeList");
        }
    
        public virtual ObjectResult<SpGetUnProcessedPurchaseOrder_Result> SpGetUnProcessedPurchaseOrder(Nullable<int> supplierID, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetUnProcessedPurchaseOrder_Result>("SpGetUnProcessedPurchaseOrder", supplierIDParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetUnProcessedPurchaseOrderTrans_Result> SpGetUnProcessedPurchaseOrderTrans(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetUnProcessedPurchaseOrderTrans_Result>("SpGetUnProcessedPurchaseOrderTrans", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateGRNTrans(Nullable<int> goodsReceiptNoteID, Nullable<int> purchaseOrderID, Nullable<int> pOTransID, Nullable<int> itemID, string batch, Nullable<System.DateTime> expiryDate, Nullable<decimal> purchaseOrderQty, Nullable<decimal> receivedQty, Nullable<decimal> looseRate, Nullable<decimal> looseQty, string remarks, Nullable<decimal> purchaseRate, Nullable<decimal> offerQty, Nullable<int> discountID, Nullable<decimal> discountPercent, Nullable<decimal> discountAmount, Nullable<int> batchID, Nullable<decimal> iGSTPercent, Nullable<decimal> cGSTPercent, Nullable<decimal> sGSTPercent, Nullable<decimal> iGSTAmt, Nullable<decimal> sGSTAmt, Nullable<decimal> cGSTAmt, Nullable<bool> isCheckedDirectInvoice, Nullable<decimal> vATAmount, Nullable<decimal> vATPercentage, Nullable<decimal> taxableAmount, Nullable<int> currencyID, Nullable<int> isGST, Nullable<int> isVat, string model, string remark, string partsNumber, string itemName, Nullable<decimal> itemNetAmount, string secondaryUnit, Nullable<decimal> secondaryRate, Nullable<decimal> secondaryUnitSize, Nullable<decimal> landingCost, Nullable<decimal> exchangeRate, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> unitID, string binCode, string purchaseOrderNo, ObjectParameter retValue)
        {
            var goodsReceiptNoteIDParameter = goodsReceiptNoteID.HasValue ?
                new ObjectParameter("GoodsReceiptNoteID", goodsReceiptNoteID) :
                new ObjectParameter("GoodsReceiptNoteID", typeof(int));
    
            var purchaseOrderIDParameter = purchaseOrderID.HasValue ?
                new ObjectParameter("PurchaseOrderID", purchaseOrderID) :
                new ObjectParameter("PurchaseOrderID", typeof(int));
    
            var pOTransIDParameter = pOTransID.HasValue ?
                new ObjectParameter("POTransID", pOTransID) :
                new ObjectParameter("POTransID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchParameter = batch != null ?
                new ObjectParameter("Batch", batch) :
                new ObjectParameter("Batch", typeof(string));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var purchaseOrderQtyParameter = purchaseOrderQty.HasValue ?
                new ObjectParameter("PurchaseOrderQty", purchaseOrderQty) :
                new ObjectParameter("PurchaseOrderQty", typeof(decimal));
    
            var receivedQtyParameter = receivedQty.HasValue ?
                new ObjectParameter("ReceivedQty", receivedQty) :
                new ObjectParameter("ReceivedQty", typeof(decimal));
    
            var looseRateParameter = looseRate.HasValue ?
                new ObjectParameter("LooseRate", looseRate) :
                new ObjectParameter("LooseRate", typeof(decimal));
    
            var looseQtyParameter = looseQty.HasValue ?
                new ObjectParameter("LooseQty", looseQty) :
                new ObjectParameter("LooseQty", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var purchaseRateParameter = purchaseRate.HasValue ?
                new ObjectParameter("PurchaseRate", purchaseRate) :
                new ObjectParameter("PurchaseRate", typeof(decimal));
    
            var offerQtyParameter = offerQty.HasValue ?
                new ObjectParameter("OfferQty", offerQty) :
                new ObjectParameter("OfferQty", typeof(decimal));
    
            var discountIDParameter = discountID.HasValue ?
                new ObjectParameter("DiscountID", discountID) :
                new ObjectParameter("DiscountID", typeof(int));
    
            var discountPercentParameter = discountPercent.HasValue ?
                new ObjectParameter("DiscountPercent", discountPercent) :
                new ObjectParameter("DiscountPercent", typeof(decimal));
    
            var discountAmountParameter = discountAmount.HasValue ?
                new ObjectParameter("DiscountAmount", discountAmount) :
                new ObjectParameter("DiscountAmount", typeof(decimal));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var iGSTPercentParameter = iGSTPercent.HasValue ?
                new ObjectParameter("IGSTPercent", iGSTPercent) :
                new ObjectParameter("IGSTPercent", typeof(decimal));
    
            var cGSTPercentParameter = cGSTPercent.HasValue ?
                new ObjectParameter("CGSTPercent", cGSTPercent) :
                new ObjectParameter("CGSTPercent", typeof(decimal));
    
            var sGSTPercentParameter = sGSTPercent.HasValue ?
                new ObjectParameter("SGSTPercent", sGSTPercent) :
                new ObjectParameter("SGSTPercent", typeof(decimal));
    
            var iGSTAmtParameter = iGSTAmt.HasValue ?
                new ObjectParameter("IGSTAmt", iGSTAmt) :
                new ObjectParameter("IGSTAmt", typeof(decimal));
    
            var sGSTAmtParameter = sGSTAmt.HasValue ?
                new ObjectParameter("SGSTAmt", sGSTAmt) :
                new ObjectParameter("SGSTAmt", typeof(decimal));
    
            var cGSTAmtParameter = cGSTAmt.HasValue ?
                new ObjectParameter("CGSTAmt", cGSTAmt) :
                new ObjectParameter("CGSTAmt", typeof(decimal));
    
            var isCheckedDirectInvoiceParameter = isCheckedDirectInvoice.HasValue ?
                new ObjectParameter("IsCheckedDirectInvoice", isCheckedDirectInvoice) :
                new ObjectParameter("IsCheckedDirectInvoice", typeof(bool));
    
            var vATAmountParameter = vATAmount.HasValue ?
                new ObjectParameter("VATAmount", vATAmount) :
                new ObjectParameter("VATAmount", typeof(decimal));
    
            var vATPercentageParameter = vATPercentage.HasValue ?
                new ObjectParameter("VATPercentage", vATPercentage) :
                new ObjectParameter("VATPercentage", typeof(decimal));
    
            var taxableAmountParameter = taxableAmount.HasValue ?
                new ObjectParameter("TaxableAmount", taxableAmount) :
                new ObjectParameter("TaxableAmount", typeof(decimal));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var isGSTParameter = isGST.HasValue ?
                new ObjectParameter("IsGST", isGST) :
                new ObjectParameter("IsGST", typeof(int));
    
            var isVatParameter = isVat.HasValue ?
                new ObjectParameter("IsVat", isVat) :
                new ObjectParameter("IsVat", typeof(int));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var partsNumberParameter = partsNumber != null ?
                new ObjectParameter("PartsNumber", partsNumber) :
                new ObjectParameter("PartsNumber", typeof(string));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var itemNetAmountParameter = itemNetAmount.HasValue ?
                new ObjectParameter("ItemNetAmount", itemNetAmount) :
                new ObjectParameter("ItemNetAmount", typeof(decimal));
    
            var secondaryUnitParameter = secondaryUnit != null ?
                new ObjectParameter("SecondaryUnit", secondaryUnit) :
                new ObjectParameter("SecondaryUnit", typeof(string));
    
            var secondaryRateParameter = secondaryRate.HasValue ?
                new ObjectParameter("SecondaryRate", secondaryRate) :
                new ObjectParameter("SecondaryRate", typeof(decimal));
    
            var secondaryUnitSizeParameter = secondaryUnitSize.HasValue ?
                new ObjectParameter("SecondaryUnitSize", secondaryUnitSize) :
                new ObjectParameter("SecondaryUnitSize", typeof(decimal));
    
            var landingCostParameter = landingCost.HasValue ?
                new ObjectParameter("LandingCost", landingCost) :
                new ObjectParameter("LandingCost", typeof(decimal));
    
            var exchangeRateParameter = exchangeRate.HasValue ?
                new ObjectParameter("ExchangeRate", exchangeRate) :
                new ObjectParameter("ExchangeRate", typeof(decimal));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var binCodeParameter = binCode != null ?
                new ObjectParameter("BinCode", binCode) :
                new ObjectParameter("BinCode", typeof(string));
    
            var purchaseOrderNoParameter = purchaseOrderNo != null ?
                new ObjectParameter("PurchaseOrderNo", purchaseOrderNo) :
                new ObjectParameter("PurchaseOrderNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateGRNTrans", goodsReceiptNoteIDParameter, purchaseOrderIDParameter, pOTransIDParameter, itemIDParameter, batchParameter, expiryDateParameter, purchaseOrderQtyParameter, receivedQtyParameter, looseRateParameter, looseQtyParameter, remarksParameter, purchaseRateParameter, offerQtyParameter, discountIDParameter, discountPercentParameter, discountAmountParameter, batchIDParameter, iGSTPercentParameter, cGSTPercentParameter, sGSTPercentParameter, iGSTAmtParameter, sGSTAmtParameter, cGSTAmtParameter, isCheckedDirectInvoiceParameter, vATAmountParameter, vATPercentageParameter, taxableAmountParameter, currencyIDParameter, isGSTParameter, isVatParameter, modelParameter, remarkParameter, partsNumberParameter, itemNameParameter, itemNetAmountParameter, secondaryUnitParameter, secondaryRateParameter, secondaryUnitSizeParameter, landingCostParameter, exchangeRateParameter, finYearParameter, locationIDParameter, applicationIDParameter, unitIDParameter, binCodeParameter, purchaseOrderNoParameter, retValue);
        }
    
        public virtual ObjectResult<SpGetGRNTransDetails_Result> SpGetGRNTransDetails(Nullable<int> iD, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetGRNTransDetails_Result>("SpGetGRNTransDetails", iDParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreatePurchaseRequisition(string code, Nullable<System.DateTime> date, Nullable<int> salesInquiryID, string requisitionNo, string purchaseRequisitedCustomer, string requisitedCustomerAddress, string requisitedPhoneNumber1, string requisitedPhoneNumber2, string remarks, Nullable<bool> quotationProcessed, Nullable<bool> fullyOrdered, Nullable<int> fromDeptID, Nullable<int> toDeptID, Nullable<bool> cancelled, Nullable<System.DateTime> cancelledDate, Nullable<int> createdUserID, Nullable<System.DateTime> createdDate, Nullable<bool> isDraft, Nullable<int> supplierID, string supplierName, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter purRequisitionID)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var salesInquiryIDParameter = salesInquiryID.HasValue ?
                new ObjectParameter("SalesInquiryID", salesInquiryID) :
                new ObjectParameter("SalesInquiryID", typeof(int));
    
            var requisitionNoParameter = requisitionNo != null ?
                new ObjectParameter("RequisitionNo", requisitionNo) :
                new ObjectParameter("RequisitionNo", typeof(string));
    
            var purchaseRequisitedCustomerParameter = purchaseRequisitedCustomer != null ?
                new ObjectParameter("PurchaseRequisitedCustomer", purchaseRequisitedCustomer) :
                new ObjectParameter("PurchaseRequisitedCustomer", typeof(string));
    
            var requisitedCustomerAddressParameter = requisitedCustomerAddress != null ?
                new ObjectParameter("RequisitedCustomerAddress", requisitedCustomerAddress) :
                new ObjectParameter("RequisitedCustomerAddress", typeof(string));
    
            var requisitedPhoneNumber1Parameter = requisitedPhoneNumber1 != null ?
                new ObjectParameter("RequisitedPhoneNumber1", requisitedPhoneNumber1) :
                new ObjectParameter("RequisitedPhoneNumber1", typeof(string));
    
            var requisitedPhoneNumber2Parameter = requisitedPhoneNumber2 != null ?
                new ObjectParameter("RequisitedPhoneNumber2", requisitedPhoneNumber2) :
                new ObjectParameter("RequisitedPhoneNumber2", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var quotationProcessedParameter = quotationProcessed.HasValue ?
                new ObjectParameter("QuotationProcessed", quotationProcessed) :
                new ObjectParameter("QuotationProcessed", typeof(bool));
    
            var fullyOrderedParameter = fullyOrdered.HasValue ?
                new ObjectParameter("FullyOrdered", fullyOrdered) :
                new ObjectParameter("FullyOrdered", typeof(bool));
    
            var fromDeptIDParameter = fromDeptID.HasValue ?
                new ObjectParameter("FromDeptID", fromDeptID) :
                new ObjectParameter("FromDeptID", typeof(int));
    
            var toDeptIDParameter = toDeptID.HasValue ?
                new ObjectParameter("ToDeptID", toDeptID) :
                new ObjectParameter("ToDeptID", typeof(int));
    
            var cancelledParameter = cancelled.HasValue ?
                new ObjectParameter("Cancelled", cancelled) :
                new ObjectParameter("Cancelled", typeof(bool));
    
            var cancelledDateParameter = cancelledDate.HasValue ?
                new ObjectParameter("CancelledDate", cancelledDate) :
                new ObjectParameter("CancelledDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var supplierNameParameter = supplierName != null ?
                new ObjectParameter("SupplierName", supplierName) :
                new ObjectParameter("SupplierName", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePurchaseRequisition", codeParameter, dateParameter, salesInquiryIDParameter, requisitionNoParameter, purchaseRequisitedCustomerParameter, requisitedCustomerAddressParameter, requisitedPhoneNumber1Parameter, requisitedPhoneNumber2Parameter, remarksParameter, quotationProcessedParameter, fullyOrderedParameter, fromDeptIDParameter, toDeptIDParameter, cancelledParameter, cancelledDateParameter, createdUserIDParameter, createdDateParameter, isDraftParameter, supplierIDParameter, supplierNameParameter, finYearParameter, locationIDParameter, applicationIDParameter, purRequisitionID);
        }
    
        public virtual ObjectResult<SpGetPurchaseRequisitionDetails_Result> SpGetPurchaseRequisitionDetails(Nullable<int> iD, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPurchaseRequisitionDetails_Result>("SpGetPurchaseRequisitionDetails", iDParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdatePurchaseRequisition(Nullable<int> iD, Nullable<int> fromDeptID, Nullable<int> toDeptID, Nullable<bool> isDraft, Nullable<int> supplierID, string supplierName, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var fromDeptIDParameter = fromDeptID.HasValue ?
                new ObjectParameter("FromDeptID", fromDeptID) :
                new ObjectParameter("FromDeptID", typeof(int));
    
            var toDeptIDParameter = toDeptID.HasValue ?
                new ObjectParameter("ToDeptID", toDeptID) :
                new ObjectParameter("ToDeptID", typeof(int));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var supplierNameParameter = supplierName != null ?
                new ObjectParameter("SupplierName", supplierName) :
                new ObjectParameter("SupplierName", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdatePurchaseRequisition", iDParameter, fromDeptIDParameter, toDeptIDParameter, isDraftParameter, supplierIDParameter, supplierNameParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPurchaseOrderDetails_Result> SpGetPurchaseOrderDetails(Nullable<int> iD, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPurchaseOrderDetails_Result>("SpGetPurchaseOrderDetails", iDParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetGRNDetail_Result> SpGetGRNDetail(Nullable<int> iD, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetGRNDetail_Result>("SpGetGRNDetail", iDParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPurchaseRequisitionListForPurchaseOrder_Result> SpGetPurchaseRequisitionListForPurchaseOrder(string type, string transNoHint, string transDateHint, string supplierNameHint, string customerPhoneHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var transNoHintParameter = transNoHint != null ?
                new ObjectParameter("TransNoHint", transNoHint) :
                new ObjectParameter("TransNoHint", typeof(string));
    
            var transDateHintParameter = transDateHint != null ?
                new ObjectParameter("TransDateHint", transDateHint) :
                new ObjectParameter("TransDateHint", typeof(string));
    
            var supplierNameHintParameter = supplierNameHint != null ?
                new ObjectParameter("SupplierNameHint", supplierNameHint) :
                new ObjectParameter("SupplierNameHint", typeof(string));
    
            var customerPhoneHintParameter = customerPhoneHint != null ?
                new ObjectParameter("CustomerPhoneHint", customerPhoneHint) :
                new ObjectParameter("CustomerPhoneHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPurchaseRequisitionListForPurchaseOrder_Result>("SpGetPurchaseRequisitionListForPurchaseOrder", typeParameter, transNoHintParameter, transDateHintParameter, supplierNameHintParameter, customerPhoneHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPurchaseOrdersForAdvance_Result> SpGetPurchaseOrdersForAdvance(Nullable<int> supplierID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPurchaseOrdersForAdvance_Result>("SpGetPurchaseOrdersForAdvance", supplierIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPurchaseInvoiceItemForPurchaseReturn_Result> SpGetPurchaseInvoiceItemForPurchaseReturn(Nullable<int> purchaseInvoiceID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var purchaseInvoiceIDParameter = purchaseInvoiceID.HasValue ?
                new ObjectParameter("PurchaseInvoiceID", purchaseInvoiceID) :
                new ObjectParameter("PurchaseInvoiceID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPurchaseInvoiceItemForPurchaseReturn_Result>("SpGetPurchaseInvoiceItemForPurchaseReturn", purchaseInvoiceIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreatePurchaseReturnTrans(Nullable<int> returnOrderID, Nullable<int> invoiceID, Nullable<int> invoiceTransID, Nullable<int> itemID, Nullable<decimal> qty, Nullable<decimal> offerQty, Nullable<decimal> rate, Nullable<decimal> sGSTPercent, Nullable<decimal> cGSTPercent, Nullable<decimal> iGSTPercent, Nullable<decimal> sGSTAmount, Nullable<decimal> cGSTAmount, Nullable<decimal> iGSTAmount, Nullable<decimal> amount, Nullable<decimal> discount, Nullable<decimal> secondaryUnitSize, string secondaryUnit, Nullable<decimal> secondaryReturnQty, Nullable<decimal> secondaryRate, string remarks, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> wareHouseID, Nullable<int> batchTypeID, Nullable<int> unitID, Nullable<decimal> vATPercentage, Nullable<decimal> vATAmount, Nullable<int> purchaseReturnID, ObjectParameter retValue)
        {
            var returnOrderIDParameter = returnOrderID.HasValue ?
                new ObjectParameter("ReturnOrderID", returnOrderID) :
                new ObjectParameter("ReturnOrderID", typeof(int));
    
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            var invoiceTransIDParameter = invoiceTransID.HasValue ?
                new ObjectParameter("InvoiceTransID", invoiceTransID) :
                new ObjectParameter("InvoiceTransID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(decimal));
    
            var offerQtyParameter = offerQty.HasValue ?
                new ObjectParameter("OfferQty", offerQty) :
                new ObjectParameter("OfferQty", typeof(decimal));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var sGSTPercentParameter = sGSTPercent.HasValue ?
                new ObjectParameter("SGSTPercent", sGSTPercent) :
                new ObjectParameter("SGSTPercent", typeof(decimal));
    
            var cGSTPercentParameter = cGSTPercent.HasValue ?
                new ObjectParameter("CGSTPercent", cGSTPercent) :
                new ObjectParameter("CGSTPercent", typeof(decimal));
    
            var iGSTPercentParameter = iGSTPercent.HasValue ?
                new ObjectParameter("IGSTPercent", iGSTPercent) :
                new ObjectParameter("IGSTPercent", typeof(decimal));
    
            var sGSTAmountParameter = sGSTAmount.HasValue ?
                new ObjectParameter("SGSTAmount", sGSTAmount) :
                new ObjectParameter("SGSTAmount", typeof(decimal));
    
            var cGSTAmountParameter = cGSTAmount.HasValue ?
                new ObjectParameter("CGSTAmount", cGSTAmount) :
                new ObjectParameter("CGSTAmount", typeof(decimal));
    
            var iGSTAmountParameter = iGSTAmount.HasValue ?
                new ObjectParameter("IGSTAmount", iGSTAmount) :
                new ObjectParameter("IGSTAmount", typeof(decimal));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var secondaryUnitSizeParameter = secondaryUnitSize.HasValue ?
                new ObjectParameter("SecondaryUnitSize", secondaryUnitSize) :
                new ObjectParameter("SecondaryUnitSize", typeof(decimal));
    
            var secondaryUnitParameter = secondaryUnit != null ?
                new ObjectParameter("SecondaryUnit", secondaryUnit) :
                new ObjectParameter("SecondaryUnit", typeof(string));
    
            var secondaryReturnQtyParameter = secondaryReturnQty.HasValue ?
                new ObjectParameter("SecondaryReturnQty", secondaryReturnQty) :
                new ObjectParameter("SecondaryReturnQty", typeof(decimal));
    
            var secondaryRateParameter = secondaryRate.HasValue ?
                new ObjectParameter("SecondaryRate", secondaryRate) :
                new ObjectParameter("SecondaryRate", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var vATPercentageParameter = vATPercentage.HasValue ?
                new ObjectParameter("VATPercentage", vATPercentage) :
                new ObjectParameter("VATPercentage", typeof(decimal));
    
            var vATAmountParameter = vATAmount.HasValue ?
                new ObjectParameter("VATAmount", vATAmount) :
                new ObjectParameter("VATAmount", typeof(decimal));
    
            var purchaseReturnIDParameter = purchaseReturnID.HasValue ?
                new ObjectParameter("PurchaseReturnID", purchaseReturnID) :
                new ObjectParameter("PurchaseReturnID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePurchaseReturnTrans", returnOrderIDParameter, invoiceIDParameter, invoiceTransIDParameter, itemIDParameter, qtyParameter, offerQtyParameter, rateParameter, sGSTPercentParameter, cGSTPercentParameter, iGSTPercentParameter, sGSTAmountParameter, cGSTAmountParameter, iGSTAmountParameter, amountParameter, discountParameter, secondaryUnitSizeParameter, secondaryUnitParameter, secondaryReturnQtyParameter, secondaryRateParameter, remarksParameter, finYearParameter, locationIDParameter, applicationIDParameter, wareHouseIDParameter, batchTypeIDParameter, unitIDParameter, vATPercentageParameter, vATAmountParameter, purchaseReturnIDParameter, retValue);
        }
    
        public virtual ObjectResult<SpGetPurchaseReturnOrderTrans_Result> SpGetPurchaseReturnOrderTrans(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPurchaseReturnOrderTrans_Result>("SpGetPurchaseReturnOrderTrans", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreatePurchaseInvoiceMaster(string purchaseNo, Nullable<System.DateTime> purchaseDate, Nullable<int> supplierID, string localSupplierName, string invoiceNo, Nullable<System.DateTime> invoiceDate, Nullable<decimal> grossAmount, Nullable<decimal> invoiceTotal, Nullable<decimal> totalDifference, Nullable<decimal> sGSTAmount, Nullable<decimal> cGSTAmount, Nullable<decimal> iGSTAmount, Nullable<decimal> discount, Nullable<decimal> vATAmount, Nullable<decimal> freightAmount, Nullable<decimal> packingCharges, Nullable<decimal> suppDocAmount, Nullable<decimal> suppShipAmount, Nullable<decimal> supplierOtherCharges, Nullable<int> currencyID, Nullable<int> isGST, Nullable<int> isVat, Nullable<decimal> packingForwarding, Nullable<decimal> localCustomsDuty, Nullable<decimal> localFreight, Nullable<decimal> localMiscCharge, Nullable<decimal> localOtherCharges, Nullable<decimal> currencyExchangeRate, Nullable<decimal> vatPercentage, Nullable<decimal> taxOnFreight, Nullable<decimal> taxOnPackingCharges, Nullable<decimal> taxOnOtherCharge, Nullable<decimal> tDSOnFreightPercentage, Nullable<decimal> lessTDS, Nullable<decimal> otherDeductions, Nullable<decimal> amountPayable, Nullable<decimal> netAmount, Nullable<bool> isDraft, Nullable<bool> isCancelled, Nullable<System.DateTime> cancelledDate, Nullable<int> createdUserID, Nullable<System.DateTime> createdDate, string status, Nullable<int> tDSID, Nullable<int> paymentModeID, Nullable<decimal> turnOverDiscount, Nullable<decimal> additionalDiscount, Nullable<decimal> taxableAmt, Nullable<decimal> tradeDiscount, Nullable<decimal> cashDiscount, Nullable<int> salesInvoiceID, Nullable<bool> cashDiscountEnabled, Nullable<int> selectedQuotationID, string remarks, string gRNNo, string freight, string wayBillNo, string invoiceType, Nullable<decimal> otherChargesVATAmount, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter purchaseInvoiceID)
        {
            var purchaseNoParameter = purchaseNo != null ?
                new ObjectParameter("PurchaseNo", purchaseNo) :
                new ObjectParameter("PurchaseNo", typeof(string));
    
            var purchaseDateParameter = purchaseDate.HasValue ?
                new ObjectParameter("PurchaseDate", purchaseDate) :
                new ObjectParameter("PurchaseDate", typeof(System.DateTime));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var localSupplierNameParameter = localSupplierName != null ?
                new ObjectParameter("LocalSupplierName", localSupplierName) :
                new ObjectParameter("LocalSupplierName", typeof(string));
    
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(string));
    
            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(System.DateTime));
    
            var grossAmountParameter = grossAmount.HasValue ?
                new ObjectParameter("GrossAmount", grossAmount) :
                new ObjectParameter("GrossAmount", typeof(decimal));
    
            var invoiceTotalParameter = invoiceTotal.HasValue ?
                new ObjectParameter("InvoiceTotal", invoiceTotal) :
                new ObjectParameter("InvoiceTotal", typeof(decimal));
    
            var totalDifferenceParameter = totalDifference.HasValue ?
                new ObjectParameter("TotalDifference", totalDifference) :
                new ObjectParameter("TotalDifference", typeof(decimal));
    
            var sGSTAmountParameter = sGSTAmount.HasValue ?
                new ObjectParameter("SGSTAmount", sGSTAmount) :
                new ObjectParameter("SGSTAmount", typeof(decimal));
    
            var cGSTAmountParameter = cGSTAmount.HasValue ?
                new ObjectParameter("CGSTAmount", cGSTAmount) :
                new ObjectParameter("CGSTAmount", typeof(decimal));
    
            var iGSTAmountParameter = iGSTAmount.HasValue ?
                new ObjectParameter("IGSTAmount", iGSTAmount) :
                new ObjectParameter("IGSTAmount", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var vATAmountParameter = vATAmount.HasValue ?
                new ObjectParameter("VATAmount", vATAmount) :
                new ObjectParameter("VATAmount", typeof(decimal));
    
            var freightAmountParameter = freightAmount.HasValue ?
                new ObjectParameter("FreightAmount", freightAmount) :
                new ObjectParameter("FreightAmount", typeof(decimal));
    
            var packingChargesParameter = packingCharges.HasValue ?
                new ObjectParameter("PackingCharges", packingCharges) :
                new ObjectParameter("PackingCharges", typeof(decimal));
    
            var suppDocAmountParameter = suppDocAmount.HasValue ?
                new ObjectParameter("SuppDocAmount", suppDocAmount) :
                new ObjectParameter("SuppDocAmount", typeof(decimal));
    
            var suppShipAmountParameter = suppShipAmount.HasValue ?
                new ObjectParameter("SuppShipAmount", suppShipAmount) :
                new ObjectParameter("SuppShipAmount", typeof(decimal));
    
            var supplierOtherChargesParameter = supplierOtherCharges.HasValue ?
                new ObjectParameter("SupplierOtherCharges", supplierOtherCharges) :
                new ObjectParameter("SupplierOtherCharges", typeof(decimal));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var isGSTParameter = isGST.HasValue ?
                new ObjectParameter("IsGST", isGST) :
                new ObjectParameter("IsGST", typeof(int));
    
            var isVatParameter = isVat.HasValue ?
                new ObjectParameter("IsVat", isVat) :
                new ObjectParameter("IsVat", typeof(int));
    
            var packingForwardingParameter = packingForwarding.HasValue ?
                new ObjectParameter("PackingForwarding", packingForwarding) :
                new ObjectParameter("PackingForwarding", typeof(decimal));
    
            var localCustomsDutyParameter = localCustomsDuty.HasValue ?
                new ObjectParameter("LocalCustomsDuty", localCustomsDuty) :
                new ObjectParameter("LocalCustomsDuty", typeof(decimal));
    
            var localFreightParameter = localFreight.HasValue ?
                new ObjectParameter("LocalFreight", localFreight) :
                new ObjectParameter("LocalFreight", typeof(decimal));
    
            var localMiscChargeParameter = localMiscCharge.HasValue ?
                new ObjectParameter("LocalMiscCharge", localMiscCharge) :
                new ObjectParameter("LocalMiscCharge", typeof(decimal));
    
            var localOtherChargesParameter = localOtherCharges.HasValue ?
                new ObjectParameter("LocalOtherCharges", localOtherCharges) :
                new ObjectParameter("LocalOtherCharges", typeof(decimal));
    
            var currencyExchangeRateParameter = currencyExchangeRate.HasValue ?
                new ObjectParameter("CurrencyExchangeRate", currencyExchangeRate) :
                new ObjectParameter("CurrencyExchangeRate", typeof(decimal));
    
            var vatPercentageParameter = vatPercentage.HasValue ?
                new ObjectParameter("VatPercentage", vatPercentage) :
                new ObjectParameter("VatPercentage", typeof(decimal));
    
            var taxOnFreightParameter = taxOnFreight.HasValue ?
                new ObjectParameter("TaxOnFreight", taxOnFreight) :
                new ObjectParameter("TaxOnFreight", typeof(decimal));
    
            var taxOnPackingChargesParameter = taxOnPackingCharges.HasValue ?
                new ObjectParameter("TaxOnPackingCharges", taxOnPackingCharges) :
                new ObjectParameter("TaxOnPackingCharges", typeof(decimal));
    
            var taxOnOtherChargeParameter = taxOnOtherCharge.HasValue ?
                new ObjectParameter("TaxOnOtherCharge", taxOnOtherCharge) :
                new ObjectParameter("TaxOnOtherCharge", typeof(decimal));
    
            var tDSOnFreightPercentageParameter = tDSOnFreightPercentage.HasValue ?
                new ObjectParameter("TDSOnFreightPercentage", tDSOnFreightPercentage) :
                new ObjectParameter("TDSOnFreightPercentage", typeof(decimal));
    
            var lessTDSParameter = lessTDS.HasValue ?
                new ObjectParameter("LessTDS", lessTDS) :
                new ObjectParameter("LessTDS", typeof(decimal));
    
            var otherDeductionsParameter = otherDeductions.HasValue ?
                new ObjectParameter("OtherDeductions", otherDeductions) :
                new ObjectParameter("OtherDeductions", typeof(decimal));
    
            var amountPayableParameter = amountPayable.HasValue ?
                new ObjectParameter("AmountPayable", amountPayable) :
                new ObjectParameter("AmountPayable", typeof(decimal));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var isCancelledParameter = isCancelled.HasValue ?
                new ObjectParameter("IsCancelled", isCancelled) :
                new ObjectParameter("IsCancelled", typeof(bool));
    
            var cancelledDateParameter = cancelledDate.HasValue ?
                new ObjectParameter("CancelledDate", cancelledDate) :
                new ObjectParameter("CancelledDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var tDSIDParameter = tDSID.HasValue ?
                new ObjectParameter("TDSID", tDSID) :
                new ObjectParameter("TDSID", typeof(int));
    
            var paymentModeIDParameter = paymentModeID.HasValue ?
                new ObjectParameter("PaymentModeID", paymentModeID) :
                new ObjectParameter("PaymentModeID", typeof(int));
    
            var turnOverDiscountParameter = turnOverDiscount.HasValue ?
                new ObjectParameter("TurnOverDiscount", turnOverDiscount) :
                new ObjectParameter("TurnOverDiscount", typeof(decimal));
    
            var additionalDiscountParameter = additionalDiscount.HasValue ?
                new ObjectParameter("AdditionalDiscount", additionalDiscount) :
                new ObjectParameter("AdditionalDiscount", typeof(decimal));
    
            var taxableAmtParameter = taxableAmt.HasValue ?
                new ObjectParameter("TaxableAmt", taxableAmt) :
                new ObjectParameter("TaxableAmt", typeof(decimal));
    
            var tradeDiscountParameter = tradeDiscount.HasValue ?
                new ObjectParameter("TradeDiscount", tradeDiscount) :
                new ObjectParameter("TradeDiscount", typeof(decimal));
    
            var cashDiscountParameter = cashDiscount.HasValue ?
                new ObjectParameter("CashDiscount", cashDiscount) :
                new ObjectParameter("CashDiscount", typeof(decimal));
    
            var salesInvoiceIDParameter = salesInvoiceID.HasValue ?
                new ObjectParameter("SalesInvoiceID", salesInvoiceID) :
                new ObjectParameter("SalesInvoiceID", typeof(int));
    
            var cashDiscountEnabledParameter = cashDiscountEnabled.HasValue ?
                new ObjectParameter("CashDiscountEnabled", cashDiscountEnabled) :
                new ObjectParameter("CashDiscountEnabled", typeof(bool));
    
            var selectedQuotationIDParameter = selectedQuotationID.HasValue ?
                new ObjectParameter("SelectedQuotationID", selectedQuotationID) :
                new ObjectParameter("SelectedQuotationID", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var gRNNoParameter = gRNNo != null ?
                new ObjectParameter("GRNNo", gRNNo) :
                new ObjectParameter("GRNNo", typeof(string));
    
            var freightParameter = freight != null ?
                new ObjectParameter("Freight", freight) :
                new ObjectParameter("Freight", typeof(string));
    
            var wayBillNoParameter = wayBillNo != null ?
                new ObjectParameter("WayBillNo", wayBillNo) :
                new ObjectParameter("WayBillNo", typeof(string));
    
            var invoiceTypeParameter = invoiceType != null ?
                new ObjectParameter("InvoiceType", invoiceType) :
                new ObjectParameter("InvoiceType", typeof(string));
    
            var otherChargesVATAmountParameter = otherChargesVATAmount.HasValue ?
                new ObjectParameter("OtherChargesVATAmount", otherChargesVATAmount) :
                new ObjectParameter("OtherChargesVATAmount", typeof(decimal));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePurchaseInvoiceMaster", purchaseNoParameter, purchaseDateParameter, supplierIDParameter, localSupplierNameParameter, invoiceNoParameter, invoiceDateParameter, grossAmountParameter, invoiceTotalParameter, totalDifferenceParameter, sGSTAmountParameter, cGSTAmountParameter, iGSTAmountParameter, discountParameter, vATAmountParameter, freightAmountParameter, packingChargesParameter, suppDocAmountParameter, suppShipAmountParameter, supplierOtherChargesParameter, currencyIDParameter, isGSTParameter, isVatParameter, packingForwardingParameter, localCustomsDutyParameter, localFreightParameter, localMiscChargeParameter, localOtherChargesParameter, currencyExchangeRateParameter, vatPercentageParameter, taxOnFreightParameter, taxOnPackingChargesParameter, taxOnOtherChargeParameter, tDSOnFreightPercentageParameter, lessTDSParameter, otherDeductionsParameter, amountPayableParameter, netAmountParameter, isDraftParameter, isCancelledParameter, cancelledDateParameter, createdUserIDParameter, createdDateParameter, statusParameter, tDSIDParameter, paymentModeIDParameter, turnOverDiscountParameter, additionalDiscountParameter, taxableAmtParameter, tradeDiscountParameter, cashDiscountParameter, salesInvoiceIDParameter, cashDiscountEnabledParameter, selectedQuotationIDParameter, remarksParameter, gRNNoParameter, freightParameter, wayBillNoParameter, invoiceTypeParameter, otherChargesVATAmountParameter, finYearParameter, locationIDParameter, applicationIDParameter, purchaseInvoiceID);
        }
    
        public virtual ObjectResult<SpGetPurchaseInvoiceDetailsByID_Result> SpGetPurchaseInvoiceDetailsByID(Nullable<int> purchaseInvoiceID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var purchaseInvoiceIDParameter = purchaseInvoiceID.HasValue ?
                new ObjectParameter("PurchaseInvoiceID", purchaseInvoiceID) :
                new ObjectParameter("PurchaseInvoiceID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPurchaseInvoiceDetailsByID_Result>("SpGetPurchaseInvoiceDetailsByID", purchaseInvoiceIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdatePurchaseInvoiceMaster(Nullable<int> purchaseInvoiceID, string invoiceNo, Nullable<System.DateTime> invoiceDate, Nullable<decimal> grossAmount, Nullable<decimal> invoiceTotal, Nullable<decimal> totalDifference, Nullable<decimal> sGSTAmount, Nullable<decimal> cGSTAmount, Nullable<decimal> iGSTAmount, Nullable<decimal> discount, Nullable<decimal> vATAmount, Nullable<decimal> suppDocAmount, Nullable<decimal> suppShipAmount, Nullable<decimal> supplierOtherCharges, Nullable<decimal> freightAmount, Nullable<decimal> packingCharges, Nullable<decimal> packingForwarding, Nullable<decimal> localCustomsDuty, Nullable<decimal> localFreight, Nullable<decimal> localMiscCharge, Nullable<decimal> localOtherCharges, Nullable<decimal> taxOnFreight, Nullable<decimal> taxOnPackingCharges, Nullable<decimal> taxOnOtherCharge, Nullable<decimal> tDSOnFreightPercentage, Nullable<decimal> lessTDS, Nullable<decimal> otherDeductions, Nullable<decimal> amountPayable, Nullable<decimal> netAmount, Nullable<bool> isDraft, Nullable<bool> isCancelled, Nullable<System.DateTime> cancelledDate, Nullable<int> selectedQuotationID, string remarks, Nullable<int> createdUserID, Nullable<System.DateTime> createdDate, string status, Nullable<int> tDSID, string gRNNo, string freight, string wayBillNo, string invoiceType, Nullable<decimal> otherChargesVATAmount, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var purchaseInvoiceIDParameter = purchaseInvoiceID.HasValue ?
                new ObjectParameter("PurchaseInvoiceID", purchaseInvoiceID) :
                new ObjectParameter("PurchaseInvoiceID", typeof(int));
    
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(string));
    
            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(System.DateTime));
    
            var grossAmountParameter = grossAmount.HasValue ?
                new ObjectParameter("GrossAmount", grossAmount) :
                new ObjectParameter("GrossAmount", typeof(decimal));
    
            var invoiceTotalParameter = invoiceTotal.HasValue ?
                new ObjectParameter("InvoiceTotal", invoiceTotal) :
                new ObjectParameter("InvoiceTotal", typeof(decimal));
    
            var totalDifferenceParameter = totalDifference.HasValue ?
                new ObjectParameter("TotalDifference", totalDifference) :
                new ObjectParameter("TotalDifference", typeof(decimal));
    
            var sGSTAmountParameter = sGSTAmount.HasValue ?
                new ObjectParameter("SGSTAmount", sGSTAmount) :
                new ObjectParameter("SGSTAmount", typeof(decimal));
    
            var cGSTAmountParameter = cGSTAmount.HasValue ?
                new ObjectParameter("CGSTAmount", cGSTAmount) :
                new ObjectParameter("CGSTAmount", typeof(decimal));
    
            var iGSTAmountParameter = iGSTAmount.HasValue ?
                new ObjectParameter("IGSTAmount", iGSTAmount) :
                new ObjectParameter("IGSTAmount", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var vATAmountParameter = vATAmount.HasValue ?
                new ObjectParameter("VATAmount", vATAmount) :
                new ObjectParameter("VATAmount", typeof(decimal));
    
            var suppDocAmountParameter = suppDocAmount.HasValue ?
                new ObjectParameter("SuppDocAmount", suppDocAmount) :
                new ObjectParameter("SuppDocAmount", typeof(decimal));
    
            var suppShipAmountParameter = suppShipAmount.HasValue ?
                new ObjectParameter("SuppShipAmount", suppShipAmount) :
                new ObjectParameter("SuppShipAmount", typeof(decimal));
    
            var supplierOtherChargesParameter = supplierOtherCharges.HasValue ?
                new ObjectParameter("SupplierOtherCharges", supplierOtherCharges) :
                new ObjectParameter("SupplierOtherCharges", typeof(decimal));
    
            var freightAmountParameter = freightAmount.HasValue ?
                new ObjectParameter("FreightAmount", freightAmount) :
                new ObjectParameter("FreightAmount", typeof(decimal));
    
            var packingChargesParameter = packingCharges.HasValue ?
                new ObjectParameter("PackingCharges", packingCharges) :
                new ObjectParameter("PackingCharges", typeof(decimal));
    
            var packingForwardingParameter = packingForwarding.HasValue ?
                new ObjectParameter("PackingForwarding", packingForwarding) :
                new ObjectParameter("PackingForwarding", typeof(decimal));
    
            var localCustomsDutyParameter = localCustomsDuty.HasValue ?
                new ObjectParameter("LocalCustomsDuty", localCustomsDuty) :
                new ObjectParameter("LocalCustomsDuty", typeof(decimal));
    
            var localFreightParameter = localFreight.HasValue ?
                new ObjectParameter("LocalFreight", localFreight) :
                new ObjectParameter("LocalFreight", typeof(decimal));
    
            var localMiscChargeParameter = localMiscCharge.HasValue ?
                new ObjectParameter("LocalMiscCharge", localMiscCharge) :
                new ObjectParameter("LocalMiscCharge", typeof(decimal));
    
            var localOtherChargesParameter = localOtherCharges.HasValue ?
                new ObjectParameter("LocalOtherCharges", localOtherCharges) :
                new ObjectParameter("LocalOtherCharges", typeof(decimal));
    
            var taxOnFreightParameter = taxOnFreight.HasValue ?
                new ObjectParameter("TaxOnFreight", taxOnFreight) :
                new ObjectParameter("TaxOnFreight", typeof(decimal));
    
            var taxOnPackingChargesParameter = taxOnPackingCharges.HasValue ?
                new ObjectParameter("TaxOnPackingCharges", taxOnPackingCharges) :
                new ObjectParameter("TaxOnPackingCharges", typeof(decimal));
    
            var taxOnOtherChargeParameter = taxOnOtherCharge.HasValue ?
                new ObjectParameter("TaxOnOtherCharge", taxOnOtherCharge) :
                new ObjectParameter("TaxOnOtherCharge", typeof(decimal));
    
            var tDSOnFreightPercentageParameter = tDSOnFreightPercentage.HasValue ?
                new ObjectParameter("TDSOnFreightPercentage", tDSOnFreightPercentage) :
                new ObjectParameter("TDSOnFreightPercentage", typeof(decimal));
    
            var lessTDSParameter = lessTDS.HasValue ?
                new ObjectParameter("LessTDS", lessTDS) :
                new ObjectParameter("LessTDS", typeof(decimal));
    
            var otherDeductionsParameter = otherDeductions.HasValue ?
                new ObjectParameter("OtherDeductions", otherDeductions) :
                new ObjectParameter("OtherDeductions", typeof(decimal));
    
            var amountPayableParameter = amountPayable.HasValue ?
                new ObjectParameter("AmountPayable", amountPayable) :
                new ObjectParameter("AmountPayable", typeof(decimal));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var isCancelledParameter = isCancelled.HasValue ?
                new ObjectParameter("IsCancelled", isCancelled) :
                new ObjectParameter("IsCancelled", typeof(bool));
    
            var cancelledDateParameter = cancelledDate.HasValue ?
                new ObjectParameter("CancelledDate", cancelledDate) :
                new ObjectParameter("CancelledDate", typeof(System.DateTime));
    
            var selectedQuotationIDParameter = selectedQuotationID.HasValue ?
                new ObjectParameter("SelectedQuotationID", selectedQuotationID) :
                new ObjectParameter("SelectedQuotationID", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var tDSIDParameter = tDSID.HasValue ?
                new ObjectParameter("TDSID", tDSID) :
                new ObjectParameter("TDSID", typeof(int));
    
            var gRNNoParameter = gRNNo != null ?
                new ObjectParameter("GRNNo", gRNNo) :
                new ObjectParameter("GRNNo", typeof(string));
    
            var freightParameter = freight != null ?
                new ObjectParameter("Freight", freight) :
                new ObjectParameter("Freight", typeof(string));
    
            var wayBillNoParameter = wayBillNo != null ?
                new ObjectParameter("WayBillNo", wayBillNo) :
                new ObjectParameter("WayBillNo", typeof(string));
    
            var invoiceTypeParameter = invoiceType != null ?
                new ObjectParameter("InvoiceType", invoiceType) :
                new ObjectParameter("InvoiceType", typeof(string));
    
            var otherChargesVATAmountParameter = otherChargesVATAmount.HasValue ?
                new ObjectParameter("OtherChargesVATAmount", otherChargesVATAmount) :
                new ObjectParameter("OtherChargesVATAmount", typeof(decimal));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdatePurchaseInvoiceMaster", purchaseInvoiceIDParameter, invoiceNoParameter, invoiceDateParameter, grossAmountParameter, invoiceTotalParameter, totalDifferenceParameter, sGSTAmountParameter, cGSTAmountParameter, iGSTAmountParameter, discountParameter, vATAmountParameter, suppDocAmountParameter, suppShipAmountParameter, supplierOtherChargesParameter, freightAmountParameter, packingChargesParameter, packingForwardingParameter, localCustomsDutyParameter, localFreightParameter, localMiscChargeParameter, localOtherChargesParameter, taxOnFreightParameter, taxOnPackingChargesParameter, taxOnOtherChargeParameter, tDSOnFreightPercentageParameter, lessTDSParameter, otherDeductionsParameter, amountPayableParameter, netAmountParameter, isDraftParameter, isCancelledParameter, cancelledDateParameter, selectedQuotationIDParameter, remarksParameter, createdUserIDParameter, createdDateParameter, statusParameter, tDSIDParameter, gRNNoParameter, freightParameter, wayBillNoParameter, invoiceTypeParameter, otherChargesVATAmountParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPurchaseOrderTransDetails_Result> SpGetPurchaseOrderTransDetails(Nullable<int> iD, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPurchaseOrderTransDetails_Result>("SpGetPurchaseOrderTransDetails", iDParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    }
}
