//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccessLayer.DBContext
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ProductionEntities : DbContext
    {
        public ProductionEntities()
            : base("name=ProductionEntities")
        {
            ((IObjectContextAdapter)this).ObjectContext.CommandTimeout = 0;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ProductionSchedule> ProductionSchedules { get; set; }
        public virtual DbSet<ProductionScheduleTran> ProductionScheduleTrans { get; set; }
    
        public virtual int SpCancelTransaction(Nullable<int> iD, string tableName, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCancelTransaction", iDParameter, tableNameParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateBatch(string itemType, Nullable<int> itemID, string batchNo, string customBatchNo, Nullable<System.DateTime> manufacturingDate, Nullable<System.DateTime> expiryDate, Nullable<int> batchTypeID, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter batchID)
        {
            var itemTypeParameter = itemType != null ?
                new ObjectParameter("ItemType", itemType) :
                new ObjectParameter("ItemType", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchNoParameter = batchNo != null ?
                new ObjectParameter("BatchNo", batchNo) :
                new ObjectParameter("BatchNo", typeof(string));
    
            var customBatchNoParameter = customBatchNo != null ?
                new ObjectParameter("CustomBatchNo", customBatchNo) :
                new ObjectParameter("CustomBatchNo", typeof(string));
    
            var manufacturingDateParameter = manufacturingDate.HasValue ?
                new ObjectParameter("ManufacturingDate", manufacturingDate) :
                new ObjectParameter("ManufacturingDate", typeof(System.DateTime));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateBatch", itemTypeParameter, itemIDParameter, batchNoParameter, customBatchNoParameter, manufacturingDateParameter, expiryDateParameter, batchTypeIDParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter, batchID);
        }
    
        public virtual ObjectResult<SpGetConfigByUser_Result> SpGetConfigByUser(string configName, Nullable<int> userID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var configNameParameter = configName != null ?
                new ObjectParameter("ConfigName", configName) :
                new ObjectParameter("ConfigName", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetConfigByUser_Result>("SpGetConfigByUser", configNameParameter, userIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCurrentFinYear_Result> SpGetCurrentFinYear(Nullable<int> applicationID)
        {
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCurrentFinYear_Result>("SpGetCurrentFinYear", applicationIDParameter);
        }
    
        public virtual int SpIsCodeAlreadyExists(string tableName, string fieldName, string code, Nullable<int> iD, ObjectParameter isExists)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("tableName", tableName) :
                new ObjectParameter("tableName", typeof(string));
    
            var fieldNameParameter = fieldName != null ?
                new ObjectParameter("FieldName", fieldName) :
                new ObjectParameter("FieldName", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpIsCodeAlreadyExists", tableNameParameter, fieldNameParameter, codeParameter, iDParameter, isExists);
        }
    
        public virtual int SpSuspendTransaction(Nullable<int> iD, string tableName, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter retValue)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpSuspendTransaction", iDParameter, tableNameParameter, finYearParameter, locationIDParameter, applicationIDParameter, retValue);
        }
    
        public virtual int SpUpdateSerialNo(string formName, string fieldName, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter serialNo)
        {
            var formNameParameter = formName != null ?
                new ObjectParameter("FormName", formName) :
                new ObjectParameter("FormName", typeof(string));
    
            var fieldNameParameter = fieldName != null ?
                new ObjectParameter("FieldName", fieldName) :
                new ObjectParameter("FieldName", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateSerialNo", formNameParameter, fieldNameParameter, finYearParameter, locationIDParameter, applicationIDParameter, serialNo);
        }
    
        public virtual int SpCreateJobWorkIssue(string issueNo, Nullable<System.DateTime> issueDate, Nullable<int> supplierID, Nullable<bool> isDraft, Nullable<int> createdUserID, Nullable<System.DateTime> createDate, Nullable<int> finYear, Nullable<int> applicationID, Nullable<int> locationID, ObjectParameter jobWorkIssueID)
        {
            var issueNoParameter = issueNo != null ?
                new ObjectParameter("IssueNo", issueNo) :
                new ObjectParameter("IssueNo", typeof(string));
    
            var issueDateParameter = issueDate.HasValue ?
                new ObjectParameter("IssueDate", issueDate) :
                new ObjectParameter("IssueDate", typeof(System.DateTime));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateJobWorkIssue", issueNoParameter, issueDateParameter, supplierIDParameter, isDraftParameter, createdUserIDParameter, createDateParameter, finYearParameter, applicationIDParameter, locationIDParameter, jobWorkIssueID);
        }
    
        public virtual int SpCreateJobWorkIssueTrans(Nullable<int> jobWorkIssueID, Nullable<int> issueItemID, string unit, Nullable<decimal> qty, Nullable<int> warehouseID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var jobWorkIssueIDParameter = jobWorkIssueID.HasValue ?
                new ObjectParameter("JobWorkIssueID", jobWorkIssueID) :
                new ObjectParameter("JobWorkIssueID", typeof(int));
    
            var issueItemIDParameter = issueItemID.HasValue ?
                new ObjectParameter("IssueItemID", issueItemID) :
                new ObjectParameter("IssueItemID", typeof(int));
    
            var unitParameter = unit != null ?
                new ObjectParameter("Unit", unit) :
                new ObjectParameter("Unit", typeof(string));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(decimal));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateJobWorkIssueTrans", jobWorkIssueIDParameter, issueItemIDParameter, unitParameter, qtyParameter, warehouseIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateJobWorkReceipt(string transNo, Nullable<System.DateTime> transDate, Nullable<int> supplierID, Nullable<int> issueID, Nullable<bool> isDraft, Nullable<int> createdUserID, Nullable<System.DateTime> createDate, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter jobWorkReceiptID)
        {
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var transDateParameter = transDate.HasValue ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(System.DateTime));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var issueIDParameter = issueID.HasValue ?
                new ObjectParameter("IssueID", issueID) :
                new ObjectParameter("IssueID", typeof(int));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateJobWorkReceipt", transNoParameter, transDateParameter, supplierIDParameter, issueIDParameter, isDraftParameter, createdUserIDParameter, createDateParameter, finYearParameter, locationIDParameter, applicationIDParameter, jobWorkReceiptID);
        }
    
        public virtual int SpCreateJobWorkReceiptIssueDetails(Nullable<int> jobWorkReceiptID, Nullable<int> jobWorkIssueTransID, Nullable<decimal> pendingQty, Nullable<bool> isCompleted, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var jobWorkReceiptIDParameter = jobWorkReceiptID.HasValue ?
                new ObjectParameter("JobWorkReceiptID", jobWorkReceiptID) :
                new ObjectParameter("JobWorkReceiptID", typeof(int));
    
            var jobWorkIssueTransIDParameter = jobWorkIssueTransID.HasValue ?
                new ObjectParameter("JobWorkIssueTransID", jobWorkIssueTransID) :
                new ObjectParameter("JobWorkIssueTransID", typeof(int));
    
            var pendingQtyParameter = pendingQty.HasValue ?
                new ObjectParameter("PendingQty", pendingQty) :
                new ObjectParameter("PendingQty", typeof(decimal));
    
            var isCompletedParameter = isCompleted.HasValue ?
                new ObjectParameter("IsCompleted", isCompleted) :
                new ObjectParameter("IsCompleted", typeof(bool));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateJobWorkReceiptIssueDetails", jobWorkReceiptIDParameter, jobWorkIssueTransIDParameter, pendingQtyParameter, isCompletedParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateJobWorkReceiptTrans(Nullable<int> jobWorkReceiptID, Nullable<int> receiptItemID, string unit, Nullable<decimal> qty, Nullable<System.DateTime> receiptDate, Nullable<int> warehouseID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var jobWorkReceiptIDParameter = jobWorkReceiptID.HasValue ?
                new ObjectParameter("JobWorkReceiptID", jobWorkReceiptID) :
                new ObjectParameter("JobWorkReceiptID", typeof(int));
    
            var receiptItemIDParameter = receiptItemID.HasValue ?
                new ObjectParameter("ReceiptItemID", receiptItemID) :
                new ObjectParameter("ReceiptItemID", typeof(int));
    
            var unitParameter = unit != null ?
                new ObjectParameter("Unit", unit) :
                new ObjectParameter("Unit", typeof(string));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(decimal));
    
            var receiptDateParameter = receiptDate.HasValue ?
                new ObjectParameter("ReceiptDate", receiptDate) :
                new ObjectParameter("ReceiptDate", typeof(System.DateTime));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateJobWorkReceiptTrans", jobWorkReceiptIDParameter, receiptItemIDParameter, unitParameter, qtyParameter, receiptDateParameter, warehouseIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateProduction(string transNo, Nullable<System.DateTime> transDate, Nullable<int> productionGroupID, Nullable<int> productionSequence, Nullable<int> productionScheduleID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> startTime, Nullable<System.DateTime> endDate, Nullable<System.DateTime> endTime, Nullable<decimal> averageCost, Nullable<decimal> outputQty, Nullable<int> productonLocationID, Nullable<bool> isDraft, Nullable<bool> isCompleted, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter productionID)
        {
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var transDateParameter = transDate.HasValue ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(System.DateTime));
    
            var productionGroupIDParameter = productionGroupID.HasValue ?
                new ObjectParameter("ProductionGroupID", productionGroupID) :
                new ObjectParameter("ProductionGroupID", typeof(int));
    
            var productionSequenceParameter = productionSequence.HasValue ?
                new ObjectParameter("ProductionSequence", productionSequence) :
                new ObjectParameter("ProductionSequence", typeof(int));
    
            var productionScheduleIDParameter = productionScheduleID.HasValue ?
                new ObjectParameter("ProductionScheduleID", productionScheduleID) :
                new ObjectParameter("ProductionScheduleID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            var averageCostParameter = averageCost.HasValue ?
                new ObjectParameter("AverageCost", averageCost) :
                new ObjectParameter("AverageCost", typeof(decimal));
    
            var outputQtyParameter = outputQty.HasValue ?
                new ObjectParameter("OutputQty", outputQty) :
                new ObjectParameter("OutputQty", typeof(decimal));
    
            var productonLocationIDParameter = productonLocationID.HasValue ?
                new ObjectParameter("ProductonLocationID", productonLocationID) :
                new ObjectParameter("ProductonLocationID", typeof(int));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var isCompletedParameter = isCompleted.HasValue ?
                new ObjectParameter("IsCompleted", isCompleted) :
                new ObjectParameter("IsCompleted", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateProduction", transNoParameter, transDateParameter, productionGroupIDParameter, productionSequenceParameter, productionScheduleIDParameter, startDateParameter, startTimeParameter, endDateParameter, endTimeParameter, averageCostParameter, outputQtyParameter, productonLocationIDParameter, isDraftParameter, isCompletedParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, productionID);
        }
    
        public virtual int SpCreateProductionIssueProcess(Nullable<int> productionIssueID, Nullable<int> processDefinitionTransID, string stage, string processName, Nullable<System.DateTime> startTime, Nullable<System.DateTime> endTime, Nullable<decimal> skilledLabourStandardHour, Nullable<decimal> skilledLabourActualHour, Nullable<decimal> unSkilledLabourStandardHour, Nullable<decimal> unSkilledLabourActualHour, Nullable<decimal> unSkilledLabourActual, Nullable<decimal> machineHourStandard, Nullable<decimal> machineHourActual, string doneBy, string processStatus, string remarks, Nullable<decimal> averageProcessCost, Nullable<int> createUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var productionIssueIDParameter = productionIssueID.HasValue ?
                new ObjectParameter("ProductionIssueID", productionIssueID) :
                new ObjectParameter("ProductionIssueID", typeof(int));
    
            var processDefinitionTransIDParameter = processDefinitionTransID.HasValue ?
                new ObjectParameter("ProcessDefinitionTransID", processDefinitionTransID) :
                new ObjectParameter("ProcessDefinitionTransID", typeof(int));
    
            var stageParameter = stage != null ?
                new ObjectParameter("Stage", stage) :
                new ObjectParameter("Stage", typeof(string));
    
            var processNameParameter = processName != null ?
                new ObjectParameter("ProcessName", processName) :
                new ObjectParameter("ProcessName", typeof(string));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            var skilledLabourStandardHourParameter = skilledLabourStandardHour.HasValue ?
                new ObjectParameter("SkilledLabourStandardHour", skilledLabourStandardHour) :
                new ObjectParameter("SkilledLabourStandardHour", typeof(decimal));
    
            var skilledLabourActualHourParameter = skilledLabourActualHour.HasValue ?
                new ObjectParameter("SkilledLabourActualHour", skilledLabourActualHour) :
                new ObjectParameter("SkilledLabourActualHour", typeof(decimal));
    
            var unSkilledLabourStandardHourParameter = unSkilledLabourStandardHour.HasValue ?
                new ObjectParameter("UnSkilledLabourStandardHour", unSkilledLabourStandardHour) :
                new ObjectParameter("UnSkilledLabourStandardHour", typeof(decimal));
    
            var unSkilledLabourActualHourParameter = unSkilledLabourActualHour.HasValue ?
                new ObjectParameter("UnSkilledLabourActualHour", unSkilledLabourActualHour) :
                new ObjectParameter("UnSkilledLabourActualHour", typeof(decimal));
    
            var unSkilledLabourActualParameter = unSkilledLabourActual.HasValue ?
                new ObjectParameter("UnSkilledLabourActual", unSkilledLabourActual) :
                new ObjectParameter("UnSkilledLabourActual", typeof(decimal));
    
            var machineHourStandardParameter = machineHourStandard.HasValue ?
                new ObjectParameter("MachineHourStandard", machineHourStandard) :
                new ObjectParameter("MachineHourStandard", typeof(decimal));
    
            var machineHourActualParameter = machineHourActual.HasValue ?
                new ObjectParameter("MachineHourActual", machineHourActual) :
                new ObjectParameter("MachineHourActual", typeof(decimal));
    
            var doneByParameter = doneBy != null ?
                new ObjectParameter("DoneBy", doneBy) :
                new ObjectParameter("DoneBy", typeof(string));
    
            var processStatusParameter = processStatus != null ?
                new ObjectParameter("ProcessStatus", processStatus) :
                new ObjectParameter("ProcessStatus", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var averageProcessCostParameter = averageProcessCost.HasValue ?
                new ObjectParameter("AverageProcessCost", averageProcessCost) :
                new ObjectParameter("AverageProcessCost", typeof(decimal));
    
            var createUserIDParameter = createUserID.HasValue ?
                new ObjectParameter("CreateUserID", createUserID) :
                new ObjectParameter("CreateUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateProductionIssueProcess", productionIssueIDParameter, processDefinitionTransIDParameter, stageParameter, processNameParameter, startTimeParameter, endTimeParameter, skilledLabourStandardHourParameter, skilledLabourActualHourParameter, unSkilledLabourStandardHourParameter, unSkilledLabourActualHourParameter, unSkilledLabourActualParameter, machineHourStandardParameter, machineHourActualParameter, doneByParameter, processStatusParameter, remarksParameter, averageProcessCostParameter, createUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateRepackingReceipt(Nullable<int> repackingIssueID, Nullable<int> itemID, Nullable<int> batchID, Nullable<int> batchTypeID, Nullable<int> issueBatchTypeID, Nullable<decimal> outputQuantity, Nullable<int> createdUserID, Nullable<System.DateTime> createdDate, Nullable<bool> isQCCompleted, Nullable<int> issueItemID, Nullable<decimal> inputQuantity, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, Nullable<System.DateTime> date, ObjectParameter repakingReceiptID)
        {
            var repackingIssueIDParameter = repackingIssueID.HasValue ?
                new ObjectParameter("RepackingIssueID", repackingIssueID) :
                new ObjectParameter("RepackingIssueID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var issueBatchTypeIDParameter = issueBatchTypeID.HasValue ?
                new ObjectParameter("IssueBatchTypeID", issueBatchTypeID) :
                new ObjectParameter("IssueBatchTypeID", typeof(int));
    
            var outputQuantityParameter = outputQuantity.HasValue ?
                new ObjectParameter("OutputQuantity", outputQuantity) :
                new ObjectParameter("OutputQuantity", typeof(decimal));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var isQCCompletedParameter = isQCCompleted.HasValue ?
                new ObjectParameter("IsQCCompleted", isQCCompleted) :
                new ObjectParameter("IsQCCompleted", typeof(bool));
    
            var issueItemIDParameter = issueItemID.HasValue ?
                new ObjectParameter("IssueItemID", issueItemID) :
                new ObjectParameter("IssueItemID", typeof(int));
    
            var inputQuantityParameter = inputQuantity.HasValue ?
                new ObjectParameter("InputQuantity", inputQuantity) :
                new ObjectParameter("InputQuantity", typeof(decimal));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateRepackingReceipt", repackingIssueIDParameter, itemIDParameter, batchIDParameter, batchTypeIDParameter, issueBatchTypeIDParameter, outputQuantityParameter, createdUserIDParameter, createdDateParameter, isQCCompletedParameter, issueItemIDParameter, inputQuantityParameter, finYearParameter, locationIDParameter, applicationIDParameter, dateParameter, repakingReceiptID);
        }
    
        public virtual int SpCreateRepakingIssue(string repackingNo, Nullable<System.DateTime> repackingDate, Nullable<int> itemID, Nullable<int> batchID, Nullable<int> batchTypeID, Nullable<int> receiptBatchTypeID, Nullable<int> receiptItemID, Nullable<decimal> quantity, Nullable<decimal> quantityOut, Nullable<bool> isProcessed, Nullable<bool> isDraft, Nullable<System.DateTime> createDate, Nullable<int> createdUserID, Nullable<decimal> standardQty, string remark, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter repakingIssueID)
        {
            var repackingNoParameter = repackingNo != null ?
                new ObjectParameter("RepackingNo", repackingNo) :
                new ObjectParameter("RepackingNo", typeof(string));
    
            var repackingDateParameter = repackingDate.HasValue ?
                new ObjectParameter("RepackingDate", repackingDate) :
                new ObjectParameter("RepackingDate", typeof(System.DateTime));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var receiptBatchTypeIDParameter = receiptBatchTypeID.HasValue ?
                new ObjectParameter("ReceiptBatchTypeID", receiptBatchTypeID) :
                new ObjectParameter("ReceiptBatchTypeID", typeof(int));
    
            var receiptItemIDParameter = receiptItemID.HasValue ?
                new ObjectParameter("ReceiptItemID", receiptItemID) :
                new ObjectParameter("ReceiptItemID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var quantityOutParameter = quantityOut.HasValue ?
                new ObjectParameter("QuantityOut", quantityOut) :
                new ObjectParameter("QuantityOut", typeof(decimal));
    
            var isProcessedParameter = isProcessed.HasValue ?
                new ObjectParameter("IsProcessed", isProcessed) :
                new ObjectParameter("IsProcessed", typeof(bool));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var standardQtyParameter = standardQty.HasValue ?
                new ObjectParameter("StandardQty", standardQty) :
                new ObjectParameter("StandardQty", typeof(decimal));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateRepakingIssue", repackingNoParameter, repackingDateParameter, itemIDParameter, batchIDParameter, batchTypeIDParameter, receiptBatchTypeIDParameter, receiptItemIDParameter, quantityParameter, quantityOutParameter, isProcessedParameter, isDraftParameter, createDateParameter, createdUserIDParameter, standardQtyParameter, remarkParameter, finYearParameter, locationIDParameter, applicationIDParameter, repakingIssueID);
        }
    
        public virtual int SpCreatRepackingMaterials(Nullable<int> repackingReceiptID, Nullable<int> itemID, Nullable<int> unitID, Nullable<int> batchTypeID, Nullable<decimal> quantity, Nullable<decimal> stdQtyForActualBatch, Nullable<int> createdUserId, Nullable<System.DateTime> createdDate, Nullable<decimal> stdQtyForStdBatch, Nullable<decimal> variance, Nullable<bool> isMaterialReturn, Nullable<bool> isAdditionalIssue, Nullable<int> finYear, Nullable<int> locationId, Nullable<int> applicationID, Nullable<bool> isDraft, ObjectParameter retValue)
        {
            var repackingReceiptIDParameter = repackingReceiptID.HasValue ?
                new ObjectParameter("RepackingReceiptID", repackingReceiptID) :
                new ObjectParameter("RepackingReceiptID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var stdQtyForActualBatchParameter = stdQtyForActualBatch.HasValue ?
                new ObjectParameter("StdQtyForActualBatch", stdQtyForActualBatch) :
                new ObjectParameter("StdQtyForActualBatch", typeof(decimal));
    
            var createdUserIdParameter = createdUserId.HasValue ?
                new ObjectParameter("CreatedUserId", createdUserId) :
                new ObjectParameter("CreatedUserId", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var stdQtyForStdBatchParameter = stdQtyForStdBatch.HasValue ?
                new ObjectParameter("StdQtyForStdBatch", stdQtyForStdBatch) :
                new ObjectParameter("StdQtyForStdBatch", typeof(decimal));
    
            var varianceParameter = variance.HasValue ?
                new ObjectParameter("Variance", variance) :
                new ObjectParameter("Variance", typeof(decimal));
    
            var isMaterialReturnParameter = isMaterialReturn.HasValue ?
                new ObjectParameter("IsMaterialReturn", isMaterialReturn) :
                new ObjectParameter("IsMaterialReturn", typeof(bool));
    
            var isAdditionalIssueParameter = isAdditionalIssue.HasValue ?
                new ObjectParameter("IsAdditionalIssue", isAdditionalIssue) :
                new ObjectParameter("IsAdditionalIssue", typeof(bool));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatRepackingMaterials", repackingReceiptIDParameter, itemIDParameter, unitIDParameter, batchTypeIDParameter, quantityParameter, stdQtyForActualBatchParameter, createdUserIdParameter, createdDateParameter, stdQtyForStdBatchParameter, varianceParameter, isMaterialReturnParameter, isAdditionalIssueParameter, finYearParameter, locationIdParameter, applicationIDParameter, isDraftParameter, retValue);
        }
    
        public virtual int SpCreatRepackingProcess(Nullable<int> repackingReceiptID, string stage, string processName, Nullable<System.DateTime> startTime, Nullable<System.DateTime> endTime, Nullable<decimal> skilledLabourStandardTime, Nullable<decimal> skilledLabourActualTime, Nullable<decimal> unSkilledLabourStandardTime, Nullable<decimal> unSkilledLabourActualTime, Nullable<decimal> machineHourStandard, Nullable<decimal> machineHourActual, string processStatus, string remarks, string doneBY, Nullable<int> batchTypeID, Nullable<decimal> averageProcessCost, Nullable<int> createdUserID, Nullable<System.DateTime> createdDate, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var repackingReceiptIDParameter = repackingReceiptID.HasValue ?
                new ObjectParameter("RepackingReceiptID", repackingReceiptID) :
                new ObjectParameter("RepackingReceiptID", typeof(int));
    
            var stageParameter = stage != null ?
                new ObjectParameter("Stage", stage) :
                new ObjectParameter("Stage", typeof(string));
    
            var processNameParameter = processName != null ?
                new ObjectParameter("ProcessName", processName) :
                new ObjectParameter("ProcessName", typeof(string));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            var skilledLabourStandardTimeParameter = skilledLabourStandardTime.HasValue ?
                new ObjectParameter("SkilledLabourStandardTime", skilledLabourStandardTime) :
                new ObjectParameter("SkilledLabourStandardTime", typeof(decimal));
    
            var skilledLabourActualTimeParameter = skilledLabourActualTime.HasValue ?
                new ObjectParameter("SkilledLabourActualTime", skilledLabourActualTime) :
                new ObjectParameter("SkilledLabourActualTime", typeof(decimal));
    
            var unSkilledLabourStandardTimeParameter = unSkilledLabourStandardTime.HasValue ?
                new ObjectParameter("UnSkilledLabourStandardTime", unSkilledLabourStandardTime) :
                new ObjectParameter("UnSkilledLabourStandardTime", typeof(decimal));
    
            var unSkilledLabourActualTimeParameter = unSkilledLabourActualTime.HasValue ?
                new ObjectParameter("UnSkilledLabourActualTime", unSkilledLabourActualTime) :
                new ObjectParameter("UnSkilledLabourActualTime", typeof(decimal));
    
            var machineHourStandardParameter = machineHourStandard.HasValue ?
                new ObjectParameter("MachineHourStandard", machineHourStandard) :
                new ObjectParameter("MachineHourStandard", typeof(decimal));
    
            var machineHourActualParameter = machineHourActual.HasValue ?
                new ObjectParameter("MachineHourActual", machineHourActual) :
                new ObjectParameter("MachineHourActual", typeof(decimal));
    
            var processStatusParameter = processStatus != null ?
                new ObjectParameter("ProcessStatus", processStatus) :
                new ObjectParameter("ProcessStatus", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var doneBYParameter = doneBY != null ?
                new ObjectParameter("DoneBY", doneBY) :
                new ObjectParameter("DoneBY", typeof(string));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var averageProcessCostParameter = averageProcessCost.HasValue ?
                new ObjectParameter("AverageProcessCost", averageProcessCost) :
                new ObjectParameter("AverageProcessCost", typeof(decimal));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatRepackingProcess", repackingReceiptIDParameter, stageParameter, processNameParameter, startTimeParameter, endTimeParameter, skilledLabourStandardTimeParameter, skilledLabourActualTimeParameter, unSkilledLabourStandardTimeParameter, unSkilledLabourActualTimeParameter, machineHourStandardParameter, machineHourActualParameter, processStatusParameter, remarksParameter, doneBYParameter, batchTypeIDParameter, averageProcessCostParameter, createdUserIDParameter, createdDateParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetIssueList_Result> SpGetIssueList(Nullable<int> supplierID, string issueNoHint, string supplierHint, string issueDateHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var issueNoHintParameter = issueNoHint != null ?
                new ObjectParameter("IssueNoHint", issueNoHint) :
                new ObjectParameter("IssueNoHint", typeof(string));
    
            var supplierHintParameter = supplierHint != null ?
                new ObjectParameter("SupplierHint", supplierHint) :
                new ObjectParameter("SupplierHint", typeof(string));
    
            var issueDateHintParameter = issueDateHint != null ?
                new ObjectParameter("IssueDateHint", issueDateHint) :
                new ObjectParameter("IssueDateHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetIssueList_Result>("SpGetIssueList", supplierIDParameter, issueNoHintParameter, supplierHintParameter, issueDateHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetJobWorkIssue_Result> SpGetJobWorkIssue(Nullable<int> jobWorkIssueID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var jobWorkIssueIDParameter = jobWorkIssueID.HasValue ?
                new ObjectParameter("JobWorkIssueID", jobWorkIssueID) :
                new ObjectParameter("JobWorkIssueID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetJobWorkIssue_Result>("SpGetJobWorkIssue", jobWorkIssueIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetJobWorkIssueDetails_Result> SpGetJobWorkIssueDetails(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetJobWorkIssueDetails_Result>("SpGetJobWorkIssueDetails", finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetJobWorkIssuedItems_Result> SpGetJobWorkIssuedItems(Nullable<int> jobWorkReceiptID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var jobWorkReceiptIDParameter = jobWorkReceiptID.HasValue ?
                new ObjectParameter("JobWorkReceiptID", jobWorkReceiptID) :
                new ObjectParameter("JobWorkReceiptID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetJobWorkIssuedItems_Result>("SpGetJobWorkIssuedItems", jobWorkReceiptIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetJobWorkIssueItems_Result> SpGetJobWorkIssueItems(Nullable<int> jobWorkIssueID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var jobWorkIssueIDParameter = jobWorkIssueID.HasValue ?
                new ObjectParameter("JobWorkIssueID", jobWorkIssueID) :
                new ObjectParameter("JobWorkIssueID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetJobWorkIssueItems_Result>("SpGetJobWorkIssueItems", jobWorkIssueIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetJobWorkReceipt_Result> SpGetJobWorkReceipt(Nullable<int> jobWorkReceiptID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var jobWorkReceiptIDParameter = jobWorkReceiptID.HasValue ?
                new ObjectParameter("JobWorkReceiptID", jobWorkReceiptID) :
                new ObjectParameter("JobWorkReceiptID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetJobWorkReceipt_Result>("SpGetJobWorkReceipt", jobWorkReceiptIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetJobWorkReceiptItems_Result> SpGetJobWorkReceiptItems(Nullable<int> jobWorkReceiptID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var jobWorkReceiptIDParameter = jobWorkReceiptID.HasValue ?
                new ObjectParameter("JobWorkReceiptID", jobWorkReceiptID) :
                new ObjectParameter("JobWorkReceiptID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetJobWorkReceiptItems_Result>("SpGetJobWorkReceiptItems", jobWorkReceiptIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetJobWorkReceipts_Result> SpGetJobWorkReceipts(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetJobWorkReceipts_Result>("SpGetJobWorkReceipts", finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetMaterialPurificationIssueTrans_Result> SpGetMaterialPurificationIssueTrans(Nullable<int> purificationIssueID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var purificationIssueIDParameter = purificationIssueID.HasValue ?
                new ObjectParameter("PurificationIssueID", purificationIssueID) :
                new ObjectParameter("PurificationIssueID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetMaterialPurificationIssueTrans_Result>("SpGetMaterialPurificationIssueTrans", purificationIssueIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPackingList_Result> SpGetPackingList(string type, string transNoHint, string transDateHint, string productionGroupNameHint, string itemNameHint, string batchNoHint, string packedQtyHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var transNoHintParameter = transNoHint != null ?
                new ObjectParameter("TransNoHint", transNoHint) :
                new ObjectParameter("TransNoHint", typeof(string));
    
            var transDateHintParameter = transDateHint != null ?
                new ObjectParameter("TransDateHint", transDateHint) :
                new ObjectParameter("TransDateHint", typeof(string));
    
            var productionGroupNameHintParameter = productionGroupNameHint != null ?
                new ObjectParameter("ProductionGroupNameHint", productionGroupNameHint) :
                new ObjectParameter("ProductionGroupNameHint", typeof(string));
    
            var itemNameHintParameter = itemNameHint != null ?
                new ObjectParameter("ItemNameHint", itemNameHint) :
                new ObjectParameter("ItemNameHint", typeof(string));
    
            var batchNoHintParameter = batchNoHint != null ?
                new ObjectParameter("BatchNoHint", batchNoHint) :
                new ObjectParameter("BatchNoHint", typeof(string));
    
            var packedQtyHintParameter = packedQtyHint != null ?
                new ObjectParameter("PackedQtyHint", packedQtyHint) :
                new ObjectParameter("PackedQtyHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPackingList_Result>("SpGetPackingList", typeParameter, transNoHintParameter, transDateHintParameter, productionGroupNameHintParameter, itemNameHintParameter, batchNoHintParameter, packedQtyHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPreProcessIssueList_Result> SpGetPreProcessIssueList(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPreProcessIssueList_Result>("SpGetPreProcessIssueList", finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetProcessForProductionIssue_Result> SpGetProcessForProductionIssue(Nullable<int> productionGroupID, Nullable<int> productionSequence, Nullable<int> itemID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var productionGroupIDParameter = productionGroupID.HasValue ?
                new ObjectParameter("ProductionGroupID", productionGroupID) :
                new ObjectParameter("ProductionGroupID", typeof(int));
    
            var productionSequenceParameter = productionSequence.HasValue ?
                new ObjectParameter("ProductionSequence", productionSequence) :
                new ObjectParameter("ProductionSequence", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetProcessForProductionIssue_Result>("SpGetProcessForProductionIssue", productionGroupIDParameter, productionSequenceParameter, itemIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetProductionIssueDetails_Result> SpGetProductionIssueDetails(Nullable<int> productionID, Nullable<int> productionIssueID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var productionIDParameter = productionID.HasValue ?
                new ObjectParameter("ProductionID", productionID) :
                new ObjectParameter("ProductionID", typeof(int));
    
            var productionIssueIDParameter = productionIssueID.HasValue ?
                new ObjectParameter("ProductionIssueID", productionIssueID) :
                new ObjectParameter("ProductionIssueID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetProductionIssueDetails_Result>("SpGetProductionIssueDetails", productionIDParameter, productionIssueIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetProductionIssueMaterialTrans_Result> SpGetProductionIssueMaterialTrans(Nullable<int> productionIssueMaterialsID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var productionIssueMaterialsIDParameter = productionIssueMaterialsID.HasValue ?
                new ObjectParameter("ProductionIssueMaterialsID", productionIssueMaterialsID) :
                new ObjectParameter("ProductionIssueMaterialsID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetProductionIssueMaterialTrans_Result>("SpGetProductionIssueMaterialTrans", productionIssueMaterialsIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetProductionIssueOutput_Result> SpGetProductionIssueOutput(Nullable<int> productionID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var productionIDParameter = productionID.HasValue ?
                new ObjectParameter("ProductionID", productionID) :
                new ObjectParameter("ProductionID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetProductionIssueOutput_Result>("SpGetProductionIssueOutput", productionIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetProductionIssueProcessDetails_Result> SpGetProductionIssueProcessDetails(Nullable<int> productionID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var productionIDParameter = productionID.HasValue ?
                new ObjectParameter("ProductionID", productionID) :
                new ObjectParameter("ProductionID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetProductionIssueProcessDetails_Result>("SpGetProductionIssueProcessDetails", productionIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetProductionPackingList_Result> SpGetProductionPackingList(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetProductionPackingList_Result>("SpGetProductionPackingList", finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetProductionSchedulesByItem_Result> SpGetProductionSchedulesByItem(Nullable<int> itemID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetProductionSchedulesByItem_Result>("SpGetProductionSchedulesByItem", itemIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetProductionSchedulesList_Result> SpGetProductionSchedulesList(string type, string transNoHint, string transDateHint, string productionGroupName, string productionStartDate, string actualBatchSize, string batch, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var transNoHintParameter = transNoHint != null ?
                new ObjectParameter("TransNoHint", transNoHint) :
                new ObjectParameter("TransNoHint", typeof(string));
    
            var transDateHintParameter = transDateHint != null ?
                new ObjectParameter("TransDateHint", transDateHint) :
                new ObjectParameter("TransDateHint", typeof(string));
    
            var productionGroupNameParameter = productionGroupName != null ?
                new ObjectParameter("ProductionGroupName", productionGroupName) :
                new ObjectParameter("ProductionGroupName", typeof(string));
    
            var productionStartDateParameter = productionStartDate != null ?
                new ObjectParameter("ProductionStartDate", productionStartDate) :
                new ObjectParameter("ProductionStartDate", typeof(string));
    
            var actualBatchSizeParameter = actualBatchSize != null ?
                new ObjectParameter("ActualBatchSize", actualBatchSize) :
                new ObjectParameter("ActualBatchSize", typeof(string));
    
            var batchParameter = batch != null ?
                new ObjectParameter("Batch", batch) :
                new ObjectParameter("Batch", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetProductionSchedulesList_Result>("SpGetProductionSchedulesList", typeParameter, transNoHintParameter, transDateHintParameter, productionGroupNameParameter, productionStartDateParameter, actualBatchSizeParameter, batchParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetProductionSequences_Result> SpGetProductionSequences(Nullable<int> productGroupID, Nullable<int> applicationID)
        {
            var productGroupIDParameter = productGroupID.HasValue ?
                new ObjectParameter("ProductGroupID", productGroupID) :
                new ObjectParameter("ProductGroupID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetProductionSequences_Result>("SpGetProductionSequences", productGroupIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<spGetQCProductionList_Result> spGetQCProductionList(string status, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> offset, Nullable<int> limit)
        {
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("offset", offset) :
                new ObjectParameter("offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("limit", limit) :
                new ObjectParameter("limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetQCProductionList_Result>("spGetQCProductionList", statusParameter, finYearParameter, locationIDParameter, applicationIDParameter, offsetParameter, limitParameter);
        }
    
        public virtual ObjectResult<spGetQCProductionMaterial_Result> spGetQCProductionMaterial(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetQCProductionMaterial_Result>("spGetQCProductionMaterial", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<spGetQCProductionTrans_Result> spGetQCProductionTrans(Nullable<int> qCID, string type, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var qCIDParameter = qCID.HasValue ?
                new ObjectParameter("QCID", qCID) :
                new ObjectParameter("QCID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetQCProductionTrans_Result>("spGetQCProductionTrans", qCIDParameter, typeParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetRepacking_Result> SpGetRepacking(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetRepacking_Result>("SpGetRepacking", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetRepackingMaterialsDetails_Result> SpGetRepackingMaterialsDetails(Nullable<int> repackingID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var repackingIDParameter = repackingID.HasValue ?
                new ObjectParameter("RepackingID", repackingID) :
                new ObjectParameter("RepackingID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetRepackingMaterialsDetails_Result>("SpGetRepackingMaterialsDetails", repackingIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetRepackingOutput_Result> SpGetRepackingOutput(Nullable<int> repackingID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var repackingIDParameter = repackingID.HasValue ?
                new ObjectParameter("RepackingID", repackingID) :
                new ObjectParameter("RepackingID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetRepackingOutput_Result>("SpGetRepackingOutput", repackingIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetRepackingProcess_Result> SpGetRepackingProcess(Nullable<int> rpackingID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var rpackingIDParameter = rpackingID.HasValue ?
                new ObjectParameter("RpackingID", rpackingID) :
                new ObjectParameter("RpackingID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetRepackingProcess_Result>("SpGetRepackingProcess", rpackingIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetRepackingReceipt_Result> SpGetRepackingReceipt(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetRepackingReceipt_Result>("SpGetRepackingReceipt", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpPCreateMaterialPurificationIssue(string code, Nullable<System.DateTime> transDate, Nullable<bool> isDraft, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter purificationIssueID)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var transDateParameter = transDate.HasValue ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(System.DateTime));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpPCreateMaterialPurificationIssue", codeParameter, transDateParameter, isDraftParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, purificationIssueID);
        }
    
        public virtual int SpPCreateMaterialPurificationIssueTrans(Nullable<int> purificationIssueID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var purificationIssueIDParameter = purificationIssueID.HasValue ?
                new ObjectParameter("PurificationIssueID", purificationIssueID) :
                new ObjectParameter("PurificationIssueID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpPCreateMaterialPurificationIssueTrans", purificationIssueIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpPCreateMaterialPurificationIssueTransBatchWise(Nullable<int> purificationIssueID, Nullable<bool> isDraft, Nullable<int> itemID, Nullable<decimal> quantity, Nullable<decimal> qtyMet, Nullable<int> processID, Nullable<int> unitID, Nullable<int> batchID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter retValue)
        {
            var purificationIssueIDParameter = purificationIssueID.HasValue ?
                new ObjectParameter("PurificationIssueID", purificationIssueID) :
                new ObjectParameter("PurificationIssueID", typeof(int));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var qtyMetParameter = qtyMet.HasValue ?
                new ObjectParameter("QtyMet", qtyMet) :
                new ObjectParameter("QtyMet", typeof(decimal));
    
            var processIDParameter = processID.HasValue ?
                new ObjectParameter("ProcessID", processID) :
                new ObjectParameter("ProcessID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpPCreateMaterialPurificationIssueTransBatchWise", purificationIssueIDParameter, isDraftParameter, itemIDParameter, quantityParameter, qtyMetParameter, processIDParameter, unitIDParameter, batchIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, retValue);
        }
    
        public virtual int SpPCreateMaterialPurificationReceipt(string code, Nullable<System.DateTime> transDate, Nullable<System.DateTime> transTime, Nullable<bool> isDraft, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter purificationReceiptID)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var transDateParameter = transDate.HasValue ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(System.DateTime));
    
            var transTimeParameter = transTime.HasValue ?
                new ObjectParameter("TransTime", transTime) :
                new ObjectParameter("TransTime", typeof(System.DateTime));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpPCreateMaterialPurificationReceipt", codeParameter, transDateParameter, transTimeParameter, isDraftParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, purificationReceiptID);
        }
    
        public virtual int SpPCreatePacking(string transNo, Nullable<System.DateTime> transDate, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> itemID, Nullable<int> productID, Nullable<int> productGroupID, Nullable<int> batchID, Nullable<decimal> batchSize, Nullable<decimal> packedQty, Nullable<bool> isDraft, Nullable<bool> isCompleted, string remarks, Nullable<int> createdUserID, Nullable<System.DateTime> createdDate, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter packingID)
        {
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var transDateParameter = transDate.HasValue ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(System.DateTime));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var productGroupIDParameter = productGroupID.HasValue ?
                new ObjectParameter("ProductGroupID", productGroupID) :
                new ObjectParameter("ProductGroupID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var batchSizeParameter = batchSize.HasValue ?
                new ObjectParameter("BatchSize", batchSize) :
                new ObjectParameter("BatchSize", typeof(decimal));
    
            var packedQtyParameter = packedQty.HasValue ?
                new ObjectParameter("PackedQty", packedQty) :
                new ObjectParameter("PackedQty", typeof(decimal));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var isCompletedParameter = isCompleted.HasValue ?
                new ObjectParameter("IsCompleted", isCompleted) :
                new ObjectParameter("IsCompleted", typeof(bool));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpPCreatePacking", transNoParameter, transDateParameter, startDateParameter, endDateParameter, itemIDParameter, productIDParameter, productGroupIDParameter, batchIDParameter, batchSizeParameter, packedQtyParameter, isDraftParameter, isCompletedParameter, remarksParameter, createdUserIDParameter, createdDateParameter, finYearParameter, locationIDParameter, applicationIDParameter, packingID);
        }
    
        public virtual int SpPCreatePackingIssue(Nullable<int> packingID, Nullable<int> itemID, Nullable<int> unitID, Nullable<int> batchID, Nullable<System.DateTime> date, Nullable<int> batchTypeID, Nullable<int> productionSequence, Nullable<decimal> packedQty, Nullable<int> receiptWareHouseID, Nullable<bool> iSCompleted, Nullable<bool> isDraft, Nullable<bool> isQCCompleted, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter packingIssueID)
        {
            var packingIDParameter = packingID.HasValue ?
                new ObjectParameter("PackingID", packingID) :
                new ObjectParameter("PackingID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var productionSequenceParameter = productionSequence.HasValue ?
                new ObjectParameter("ProductionSequence", productionSequence) :
                new ObjectParameter("ProductionSequence", typeof(int));
    
            var packedQtyParameter = packedQty.HasValue ?
                new ObjectParameter("PackedQty", packedQty) :
                new ObjectParameter("PackedQty", typeof(decimal));
    
            var receiptWareHouseIDParameter = receiptWareHouseID.HasValue ?
                new ObjectParameter("ReceiptWareHouseID", receiptWareHouseID) :
                new ObjectParameter("ReceiptWareHouseID", typeof(int));
    
            var iSCompletedParameter = iSCompleted.HasValue ?
                new ObjectParameter("ISCompleted", iSCompleted) :
                new ObjectParameter("ISCompleted", typeof(bool));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var isQCCompletedParameter = isQCCompleted.HasValue ?
                new ObjectParameter("IsQCCompleted", isQCCompleted) :
                new ObjectParameter("IsQCCompleted", typeof(bool));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpPCreatePackingIssue", packingIDParameter, itemIDParameter, unitIDParameter, batchIDParameter, dateParameter, batchTypeIDParameter, productionSequenceParameter, packedQtyParameter, receiptWareHouseIDParameter, iSCompletedParameter, isDraftParameter, isQCCompletedParameter, finYearParameter, locationIDParameter, applicationIDParameter, packingIssueID);
        }
    
        public virtual int SpPCreatePackingIssueMaterails(Nullable<int> packingIssueID, Nullable<int> itemID, Nullable<int> unitID, string batchNo, Nullable<int> batchID, Nullable<int> wareHouseID, Nullable<decimal> availableStock, Nullable<decimal> standardQty, Nullable<decimal> issuedQty, Nullable<bool> isCompleted, Nullable<bool> isDraft, Nullable<decimal> averageRate, string remarks, Nullable<int> packingDefinitionMasterID, Nullable<int> createUserID, Nullable<System.DateTime> createdDate, Nullable<bool> isMaterialReturn, Nullable<bool> isAdditionalIssue, Nullable<decimal> variance, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter retValue)
        {
            var packingIssueIDParameter = packingIssueID.HasValue ?
                new ObjectParameter("PackingIssueID", packingIssueID) :
                new ObjectParameter("PackingIssueID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var batchNoParameter = batchNo != null ?
                new ObjectParameter("BatchNo", batchNo) :
                new ObjectParameter("BatchNo", typeof(string));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            var availableStockParameter = availableStock.HasValue ?
                new ObjectParameter("AvailableStock", availableStock) :
                new ObjectParameter("AvailableStock", typeof(decimal));
    
            var standardQtyParameter = standardQty.HasValue ?
                new ObjectParameter("StandardQty", standardQty) :
                new ObjectParameter("StandardQty", typeof(decimal));
    
            var issuedQtyParameter = issuedQty.HasValue ?
                new ObjectParameter("IssuedQty", issuedQty) :
                new ObjectParameter("IssuedQty", typeof(decimal));
    
            var isCompletedParameter = isCompleted.HasValue ?
                new ObjectParameter("IsCompleted", isCompleted) :
                new ObjectParameter("IsCompleted", typeof(bool));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var averageRateParameter = averageRate.HasValue ?
                new ObjectParameter("AverageRate", averageRate) :
                new ObjectParameter("AverageRate", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var packingDefinitionMasterIDParameter = packingDefinitionMasterID.HasValue ?
                new ObjectParameter("PackingDefinitionMasterID", packingDefinitionMasterID) :
                new ObjectParameter("PackingDefinitionMasterID", typeof(int));
    
            var createUserIDParameter = createUserID.HasValue ?
                new ObjectParameter("CreateUserID", createUserID) :
                new ObjectParameter("CreateUserID", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var isMaterialReturnParameter = isMaterialReturn.HasValue ?
                new ObjectParameter("IsMaterialReturn", isMaterialReturn) :
                new ObjectParameter("IsMaterialReturn", typeof(bool));
    
            var isAdditionalIssueParameter = isAdditionalIssue.HasValue ?
                new ObjectParameter("IsAdditionalIssue", isAdditionalIssue) :
                new ObjectParameter("IsAdditionalIssue", typeof(bool));
    
            var varianceParameter = variance.HasValue ?
                new ObjectParameter("Variance", variance) :
                new ObjectParameter("Variance", typeof(decimal));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpPCreatePackingIssueMaterails", packingIssueIDParameter, itemIDParameter, unitIDParameter, batchNoParameter, batchIDParameter, wareHouseIDParameter, availableStockParameter, standardQtyParameter, issuedQtyParameter, isCompletedParameter, isDraftParameter, averageRateParameter, remarksParameter, packingDefinitionMasterIDParameter, createUserIDParameter, createdDateParameter, isMaterialReturnParameter, isAdditionalIssueParameter, varianceParameter, finYearParameter, locationIDParameter, applicationIDParameter, retValue);
        }
    
        public virtual int SpPCreatePackingIssueProcess(Nullable<int> packingIssueID, string stage, string processName, Nullable<System.DateTime> startTime, Nullable<System.DateTime> endTime, Nullable<decimal> skilledLabourStandardHour, Nullable<decimal> skilledLabourActualHour, Nullable<decimal> unSkilledLabourStandardHour, Nullable<decimal> unSkilledLabourActualHour, Nullable<decimal> unSkilledLabourActual, Nullable<decimal> machineHourStandard, Nullable<decimal> machineHourActual, string processStatus, string remarks, Nullable<decimal> averageProcessCost, string doneBY, Nullable<int> packingProcessDefinitionTransID, Nullable<int> createUserID, Nullable<System.DateTime> createdDate, Nullable<decimal> batchSize, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var packingIssueIDParameter = packingIssueID.HasValue ?
                new ObjectParameter("PackingIssueID", packingIssueID) :
                new ObjectParameter("PackingIssueID", typeof(int));
    
            var stageParameter = stage != null ?
                new ObjectParameter("Stage", stage) :
                new ObjectParameter("Stage", typeof(string));
    
            var processNameParameter = processName != null ?
                new ObjectParameter("ProcessName", processName) :
                new ObjectParameter("ProcessName", typeof(string));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            var skilledLabourStandardHourParameter = skilledLabourStandardHour.HasValue ?
                new ObjectParameter("SkilledLabourStandardHour", skilledLabourStandardHour) :
                new ObjectParameter("SkilledLabourStandardHour", typeof(decimal));
    
            var skilledLabourActualHourParameter = skilledLabourActualHour.HasValue ?
                new ObjectParameter("SkilledLabourActualHour", skilledLabourActualHour) :
                new ObjectParameter("SkilledLabourActualHour", typeof(decimal));
    
            var unSkilledLabourStandardHourParameter = unSkilledLabourStandardHour.HasValue ?
                new ObjectParameter("UnSkilledLabourStandardHour", unSkilledLabourStandardHour) :
                new ObjectParameter("UnSkilledLabourStandardHour", typeof(decimal));
    
            var unSkilledLabourActualHourParameter = unSkilledLabourActualHour.HasValue ?
                new ObjectParameter("UnSkilledLabourActualHour", unSkilledLabourActualHour) :
                new ObjectParameter("UnSkilledLabourActualHour", typeof(decimal));
    
            var unSkilledLabourActualParameter = unSkilledLabourActual.HasValue ?
                new ObjectParameter("UnSkilledLabourActual", unSkilledLabourActual) :
                new ObjectParameter("UnSkilledLabourActual", typeof(decimal));
    
            var machineHourStandardParameter = machineHourStandard.HasValue ?
                new ObjectParameter("MachineHourStandard", machineHourStandard) :
                new ObjectParameter("MachineHourStandard", typeof(decimal));
    
            var machineHourActualParameter = machineHourActual.HasValue ?
                new ObjectParameter("MachineHourActual", machineHourActual) :
                new ObjectParameter("MachineHourActual", typeof(decimal));
    
            var processStatusParameter = processStatus != null ?
                new ObjectParameter("ProcessStatus", processStatus) :
                new ObjectParameter("ProcessStatus", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var averageProcessCostParameter = averageProcessCost.HasValue ?
                new ObjectParameter("AverageProcessCost", averageProcessCost) :
                new ObjectParameter("AverageProcessCost", typeof(decimal));
    
            var doneBYParameter = doneBY != null ?
                new ObjectParameter("DoneBY", doneBY) :
                new ObjectParameter("DoneBY", typeof(string));
    
            var packingProcessDefinitionTransIDParameter = packingProcessDefinitionTransID.HasValue ?
                new ObjectParameter("PackingProcessDefinitionTransID", packingProcessDefinitionTransID) :
                new ObjectParameter("PackingProcessDefinitionTransID", typeof(int));
    
            var createUserIDParameter = createUserID.HasValue ?
                new ObjectParameter("CreateUserID", createUserID) :
                new ObjectParameter("CreateUserID", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var batchSizeParameter = batchSize.HasValue ?
                new ObjectParameter("BatchSize", batchSize) :
                new ObjectParameter("BatchSize", typeof(decimal));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpPCreatePackingIssueProcess", packingIssueIDParameter, stageParameter, processNameParameter, startTimeParameter, endTimeParameter, skilledLabourStandardHourParameter, skilledLabourActualHourParameter, unSkilledLabourStandardHourParameter, unSkilledLabourActualHourParameter, unSkilledLabourActualParameter, machineHourStandardParameter, machineHourActualParameter, processStatusParameter, remarksParameter, averageProcessCostParameter, doneBYParameter, packingProcessDefinitionTransIDParameter, createUserIDParameter, createdDateParameter, batchSizeParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpPCreateProductionIssue(Nullable<int> productionID, Nullable<int> productionSequence, Nullable<int> itemID, Nullable<int> batchID, Nullable<decimal> standardBatchSize, Nullable<decimal> actualBatchSize, Nullable<decimal> standardOutput, Nullable<decimal> actualOutput, Nullable<decimal> variance, Nullable<System.DateTime> startDate, Nullable<System.DateTime> startTime, Nullable<System.DateTime> endDate, Nullable<System.DateTime> endTime, Nullable<int> productonLocationID, Nullable<int> receiptStoreID, Nullable<bool> isCompleted, string productionStatus, Nullable<bool> isAborted, Nullable<decimal> averageCost, Nullable<int> createdUserID, string qCNo, Nullable<bool> isQcRequired, Nullable<bool> isSubProduct, string processStage, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter productionIssueID)
        {
            var productionIDParameter = productionID.HasValue ?
                new ObjectParameter("ProductionID", productionID) :
                new ObjectParameter("ProductionID", typeof(int));
    
            var productionSequenceParameter = productionSequence.HasValue ?
                new ObjectParameter("ProductionSequence", productionSequence) :
                new ObjectParameter("ProductionSequence", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var standardBatchSizeParameter = standardBatchSize.HasValue ?
                new ObjectParameter("StandardBatchSize", standardBatchSize) :
                new ObjectParameter("StandardBatchSize", typeof(decimal));
    
            var actualBatchSizeParameter = actualBatchSize.HasValue ?
                new ObjectParameter("ActualBatchSize", actualBatchSize) :
                new ObjectParameter("ActualBatchSize", typeof(decimal));
    
            var standardOutputParameter = standardOutput.HasValue ?
                new ObjectParameter("StandardOutput", standardOutput) :
                new ObjectParameter("StandardOutput", typeof(decimal));
    
            var actualOutputParameter = actualOutput.HasValue ?
                new ObjectParameter("ActualOutput", actualOutput) :
                new ObjectParameter("ActualOutput", typeof(decimal));
    
            var varianceParameter = variance.HasValue ?
                new ObjectParameter("Variance", variance) :
                new ObjectParameter("Variance", typeof(decimal));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            var productonLocationIDParameter = productonLocationID.HasValue ?
                new ObjectParameter("ProductonLocationID", productonLocationID) :
                new ObjectParameter("ProductonLocationID", typeof(int));
    
            var receiptStoreIDParameter = receiptStoreID.HasValue ?
                new ObjectParameter("ReceiptStoreID", receiptStoreID) :
                new ObjectParameter("ReceiptStoreID", typeof(int));
    
            var isCompletedParameter = isCompleted.HasValue ?
                new ObjectParameter("IsCompleted", isCompleted) :
                new ObjectParameter("IsCompleted", typeof(bool));
    
            var productionStatusParameter = productionStatus != null ?
                new ObjectParameter("ProductionStatus", productionStatus) :
                new ObjectParameter("ProductionStatus", typeof(string));
    
            var isAbortedParameter = isAborted.HasValue ?
                new ObjectParameter("IsAborted", isAborted) :
                new ObjectParameter("IsAborted", typeof(bool));
    
            var averageCostParameter = averageCost.HasValue ?
                new ObjectParameter("AverageCost", averageCost) :
                new ObjectParameter("AverageCost", typeof(decimal));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var qCNoParameter = qCNo != null ?
                new ObjectParameter("QCNo", qCNo) :
                new ObjectParameter("QCNo", typeof(string));
    
            var isQcRequiredParameter = isQcRequired.HasValue ?
                new ObjectParameter("IsQcRequired", isQcRequired) :
                new ObjectParameter("IsQcRequired", typeof(bool));
    
            var isSubProductParameter = isSubProduct.HasValue ?
                new ObjectParameter("IsSubProduct", isSubProduct) :
                new ObjectParameter("IsSubProduct", typeof(bool));
    
            var processStageParameter = processStage != null ?
                new ObjectParameter("ProcessStage", processStage) :
                new ObjectParameter("ProcessStage", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpPCreateProductionIssue", productionIDParameter, productionSequenceParameter, itemIDParameter, batchIDParameter, standardBatchSizeParameter, actualBatchSizeParameter, standardOutputParameter, actualOutputParameter, varianceParameter, startDateParameter, startTimeParameter, endDateParameter, endTimeParameter, productonLocationIDParameter, receiptStoreIDParameter, isCompletedParameter, productionStatusParameter, isAbortedParameter, averageCostParameter, createdUserIDParameter, qCNoParameter, isQcRequiredParameter, isSubProductParameter, processStageParameter, finYearParameter, locationIDParameter, applicationIDParameter, productionIssueID);
        }
    
        public virtual int SpPCreateProductionIssueMaterials(Nullable<int> productionIssueID, Nullable<int> rawMaterialItemID, Nullable<int> productDefinitionTransID, Nullable<decimal> standardQty, Nullable<decimal> actualStandardQty, Nullable<decimal> issueQty, Nullable<decimal> variance, string batchNo, Nullable<int> batchID, Nullable<int> wareHouseID, Nullable<System.DateTime> lastIssueDate, string remarks, Nullable<bool> isCompleted, Nullable<decimal> averageRate, Nullable<bool> isAdditionalIssue, Nullable<int> batchTypeID, Nullable<int> createUserID, Nullable<int> unitID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter retValue)
        {
            var productionIssueIDParameter = productionIssueID.HasValue ?
                new ObjectParameter("ProductionIssueID", productionIssueID) :
                new ObjectParameter("ProductionIssueID", typeof(int));
    
            var rawMaterialItemIDParameter = rawMaterialItemID.HasValue ?
                new ObjectParameter("rawMaterialItemID", rawMaterialItemID) :
                new ObjectParameter("rawMaterialItemID", typeof(int));
    
            var productDefinitionTransIDParameter = productDefinitionTransID.HasValue ?
                new ObjectParameter("ProductDefinitionTransID", productDefinitionTransID) :
                new ObjectParameter("ProductDefinitionTransID", typeof(int));
    
            var standardQtyParameter = standardQty.HasValue ?
                new ObjectParameter("StandardQty", standardQty) :
                new ObjectParameter("StandardQty", typeof(decimal));
    
            var actualStandardQtyParameter = actualStandardQty.HasValue ?
                new ObjectParameter("ActualStandardQty", actualStandardQty) :
                new ObjectParameter("ActualStandardQty", typeof(decimal));
    
            var issueQtyParameter = issueQty.HasValue ?
                new ObjectParameter("IssueQty", issueQty) :
                new ObjectParameter("IssueQty", typeof(decimal));
    
            var varianceParameter = variance.HasValue ?
                new ObjectParameter("Variance", variance) :
                new ObjectParameter("Variance", typeof(decimal));
    
            var batchNoParameter = batchNo != null ?
                new ObjectParameter("BatchNo", batchNo) :
                new ObjectParameter("BatchNo", typeof(string));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            var lastIssueDateParameter = lastIssueDate.HasValue ?
                new ObjectParameter("LastIssueDate", lastIssueDate) :
                new ObjectParameter("LastIssueDate", typeof(System.DateTime));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var isCompletedParameter = isCompleted.HasValue ?
                new ObjectParameter("IsCompleted", isCompleted) :
                new ObjectParameter("IsCompleted", typeof(bool));
    
            var averageRateParameter = averageRate.HasValue ?
                new ObjectParameter("AverageRate", averageRate) :
                new ObjectParameter("AverageRate", typeof(decimal));
    
            var isAdditionalIssueParameter = isAdditionalIssue.HasValue ?
                new ObjectParameter("IsAdditionalIssue", isAdditionalIssue) :
                new ObjectParameter("IsAdditionalIssue", typeof(bool));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var createUserIDParameter = createUserID.HasValue ?
                new ObjectParameter("CreateUserID", createUserID) :
                new ObjectParameter("CreateUserID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpPCreateProductionIssueMaterials", productionIssueIDParameter, rawMaterialItemIDParameter, productDefinitionTransIDParameter, standardQtyParameter, actualStandardQtyParameter, issueQtyParameter, varianceParameter, batchNoParameter, batchIDParameter, wareHouseIDParameter, lastIssueDateParameter, remarksParameter, isCompletedParameter, averageRateParameter, isAdditionalIssueParameter, batchTypeIDParameter, createUserIDParameter, unitIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, retValue);
        }
    
        public virtual int SpPCreateProductionSchedule(string transNo, Nullable<System.DateTime> transDate, Nullable<int> productionGroupID, Nullable<int> productID, Nullable<System.DateTime> productionStartDate, Nullable<System.DateTime> productionStartTime, string batchNO, Nullable<decimal> standardBatchSize, Nullable<decimal> actualBatchSize, Nullable<int> productonLocationID, Nullable<int> requestedStoreID, Nullable<bool> isDraft, Nullable<bool> isCompleted, string productionStatus, Nullable<bool> isAborted, string remarks, Nullable<int> createdUserID, Nullable<System.DateTime> createdDate, Nullable<int> machineID, Nullable<int> mouldID, Nullable<int> processID, string endDate, string endTime, string startTime, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter productionScheduleID, ObjectParameter stockRequisitionID)
        {
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var transDateParameter = transDate.HasValue ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(System.DateTime));
    
            var productionGroupIDParameter = productionGroupID.HasValue ?
                new ObjectParameter("ProductionGroupID", productionGroupID) :
                new ObjectParameter("ProductionGroupID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var productionStartDateParameter = productionStartDate.HasValue ?
                new ObjectParameter("ProductionStartDate", productionStartDate) :
                new ObjectParameter("ProductionStartDate", typeof(System.DateTime));
    
            var productionStartTimeParameter = productionStartTime.HasValue ?
                new ObjectParameter("ProductionStartTime", productionStartTime) :
                new ObjectParameter("ProductionStartTime", typeof(System.DateTime));
    
            var batchNOParameter = batchNO != null ?
                new ObjectParameter("BatchNO", batchNO) :
                new ObjectParameter("BatchNO", typeof(string));
    
            var standardBatchSizeParameter = standardBatchSize.HasValue ?
                new ObjectParameter("StandardBatchSize", standardBatchSize) :
                new ObjectParameter("StandardBatchSize", typeof(decimal));
    
            var actualBatchSizeParameter = actualBatchSize.HasValue ?
                new ObjectParameter("ActualBatchSize", actualBatchSize) :
                new ObjectParameter("ActualBatchSize", typeof(decimal));
    
            var productonLocationIDParameter = productonLocationID.HasValue ?
                new ObjectParameter("ProductonLocationID", productonLocationID) :
                new ObjectParameter("ProductonLocationID", typeof(int));
    
            var requestedStoreIDParameter = requestedStoreID.HasValue ?
                new ObjectParameter("RequestedStoreID", requestedStoreID) :
                new ObjectParameter("RequestedStoreID", typeof(int));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var isCompletedParameter = isCompleted.HasValue ?
                new ObjectParameter("IsCompleted", isCompleted) :
                new ObjectParameter("IsCompleted", typeof(bool));
    
            var productionStatusParameter = productionStatus != null ?
                new ObjectParameter("ProductionStatus", productionStatus) :
                new ObjectParameter("ProductionStatus", typeof(string));
    
            var isAbortedParameter = isAborted.HasValue ?
                new ObjectParameter("IsAborted", isAborted) :
                new ObjectParameter("IsAborted", typeof(bool));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var machineIDParameter = machineID.HasValue ?
                new ObjectParameter("MachineID", machineID) :
                new ObjectParameter("MachineID", typeof(int));
    
            var mouldIDParameter = mouldID.HasValue ?
                new ObjectParameter("MouldID", mouldID) :
                new ObjectParameter("MouldID", typeof(int));
    
            var processIDParameter = processID.HasValue ?
                new ObjectParameter("ProcessID", processID) :
                new ObjectParameter("ProcessID", typeof(int));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var endTimeParameter = endTime != null ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(string));
    
            var startTimeParameter = startTime != null ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpPCreateProductionSchedule", transNoParameter, transDateParameter, productionGroupIDParameter, productIDParameter, productionStartDateParameter, productionStartTimeParameter, batchNOParameter, standardBatchSizeParameter, actualBatchSizeParameter, productonLocationIDParameter, requestedStoreIDParameter, isDraftParameter, isCompletedParameter, productionStatusParameter, isAbortedParameter, remarksParameter, createdUserIDParameter, createdDateParameter, machineIDParameter, mouldIDParameter, processIDParameter, endDateParameter, endTimeParameter, startTimeParameter, finYearParameter, locationIDParameter, applicationIDParameter, productionScheduleID, stockRequisitionID);
        }
    
        public virtual int SpPCreateProductionScheduleTrans(Nullable<int> productionScheduleID, Nullable<int> stockRequisitionID, Nullable<int> productDefinitionTransID, Nullable<int> itemID, Nullable<decimal> requiredQty, Nullable<System.DateTime> requiredDate, string remarks, Nullable<decimal> qtyMet, Nullable<int> unitID, Nullable<decimal> stdQtyForStdBatch, Nullable<decimal> standardOutPutQty, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var productionScheduleIDParameter = productionScheduleID.HasValue ?
                new ObjectParameter("ProductionScheduleID", productionScheduleID) :
                new ObjectParameter("ProductionScheduleID", typeof(int));
    
            var stockRequisitionIDParameter = stockRequisitionID.HasValue ?
                new ObjectParameter("StockRequisitionID", stockRequisitionID) :
                new ObjectParameter("StockRequisitionID", typeof(int));
    
            var productDefinitionTransIDParameter = productDefinitionTransID.HasValue ?
                new ObjectParameter("ProductDefinitionTransID", productDefinitionTransID) :
                new ObjectParameter("ProductDefinitionTransID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var requiredQtyParameter = requiredQty.HasValue ?
                new ObjectParameter("RequiredQty", requiredQty) :
                new ObjectParameter("RequiredQty", typeof(decimal));
    
            var requiredDateParameter = requiredDate.HasValue ?
                new ObjectParameter("RequiredDate", requiredDate) :
                new ObjectParameter("RequiredDate", typeof(System.DateTime));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var qtyMetParameter = qtyMet.HasValue ?
                new ObjectParameter("QtyMet", qtyMet) :
                new ObjectParameter("QtyMet", typeof(decimal));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var stdQtyForStdBatchParameter = stdQtyForStdBatch.HasValue ?
                new ObjectParameter("StdQtyForStdBatch", stdQtyForStdBatch) :
                new ObjectParameter("StdQtyForStdBatch", typeof(decimal));
    
            var standardOutPutQtyParameter = standardOutPutQty.HasValue ?
                new ObjectParameter("StandardOutPutQty", standardOutPutQty) :
                new ObjectParameter("StandardOutPutQty", typeof(decimal));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpPCreateProductionScheduleTrans", productionScheduleIDParameter, stockRequisitionIDParameter, productDefinitionTransIDParameter, itemIDParameter, requiredQtyParameter, requiredDateParameter, remarksParameter, qtyMetParameter, unitIDParameter, stdQtyForStdBatchParameter, standardOutPutQtyParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpPGetMaterialPurificationIssue_Result> SpPGetMaterialPurificationIssue(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpPGetMaterialPurificationIssue_Result>("SpPGetMaterialPurificationIssue", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpPGetMaterialPurificationReceipt_Result> SpPGetMaterialPurificationReceipt(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpPGetMaterialPurificationReceipt_Result>("SpPGetMaterialPurificationReceipt", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpPGetMaterialPurificationReceiptDetails_Result> SpPGetMaterialPurificationReceiptDetails(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpPGetMaterialPurificationReceiptDetails_Result>("SpPGetMaterialPurificationReceiptDetails", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpPGetPackingIssueProcess_Result> SpPGetPackingIssueProcess(Nullable<int> packingID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var packingIDParameter = packingID.HasValue ?
                new ObjectParameter("PackingID", packingID) :
                new ObjectParameter("PackingID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpPGetPackingIssueProcess_Result>("SpPGetPackingIssueProcess", packingIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpPGetPackingMaterials_Result> SpPGetPackingMaterials(Nullable<int> itemID, Nullable<int> batchID, Nullable<int> productGroupID, Nullable<int> batchTypeID, Nullable<int> warehouseID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var productGroupIDParameter = productGroupID.HasValue ?
                new ObjectParameter("ProductGroupID", productGroupID) :
                new ObjectParameter("ProductGroupID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpPGetPackingMaterials_Result>("SpPGetPackingMaterials", itemIDParameter, batchIDParameter, productGroupIDParameter, batchTypeIDParameter, warehouseIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpPGetPackingProcesses_Result> SpPGetPackingProcesses(Nullable<int> productionGroupID, Nullable<int> productionSequence, Nullable<int> itemID, Nullable<int> batchTypeID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var productionGroupIDParameter = productionGroupID.HasValue ?
                new ObjectParameter("ProductionGroupID", productionGroupID) :
                new ObjectParameter("ProductionGroupID", typeof(int));
    
            var productionSequenceParameter = productionSequence.HasValue ?
                new ObjectParameter("ProductionSequence", productionSequence) :
                new ObjectParameter("ProductionSequence", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpPGetPackingProcesses_Result>("SpPGetPackingProcesses", productionGroupIDParameter, productionSequenceParameter, itemIDParameter, batchTypeIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpPGetProductionGroups_Result> SpPGetProductionGroups(string itemHind, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemHindParameter = itemHind != null ?
                new ObjectParameter("ItemHind", itemHind) :
                new ObjectParameter("ItemHind", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpPGetProductionGroups_Result>("SpPGetProductionGroups", itemHindParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpPGetProductionIssueItemsByProductionGroup_Result> SpPGetProductionIssueItemsByProductionGroup(Nullable<int> productionGroupID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var productionGroupIDParameter = productionGroupID.HasValue ?
                new ObjectParameter("ProductionGroupID", productionGroupID) :
                new ObjectParameter("ProductionGroupID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpPGetProductionIssueItemsByProductionGroup_Result>("SpPGetProductionIssueItemsByProductionGroup", productionGroupIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpPGetProductionPackingByProductionBatch_Result> SpPGetProductionPackingByProductionBatch(Nullable<int> itemID, Nullable<int> batchID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpPGetProductionPackingByProductionBatch_Result>("SpPGetProductionPackingByProductionBatch", itemIDParameter, batchIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpPGetProductionPackingOutput_Result> SpPGetProductionPackingOutput(Nullable<int> packingID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var packingIDParameter = packingID.HasValue ?
                new ObjectParameter("PackingID", packingID) :
                new ObjectParameter("PackingID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpPGetProductionPackingOutput_Result>("SpPGetProductionPackingOutput", packingIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpPGetProductionPackingOutputByBatchID_Result> SpPGetProductionPackingOutputByBatchID(Nullable<int> batchID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpPGetProductionPackingOutputByBatchID_Result>("SpPGetProductionPackingOutputByBatchID", batchIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpPGetUnProcessedMaterialPurificationIssueItemList_Result> SpPGetUnProcessedMaterialPurificationIssueItemList(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, string search)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpPGetUnProcessedMaterialPurificationIssueItemList_Result>("SpPGetUnProcessedMaterialPurificationIssueItemList", finYearParameter, locationIDParameter, applicationIDParameter, searchParameter);
        }
    
        public virtual int SpPUpdateProductionIssue(Nullable<int> productionIssueID, Nullable<decimal> standardOutput, Nullable<decimal> actualOutput, Nullable<decimal> variance, Nullable<int> receiptStoreID, Nullable<System.DateTime> endDate, Nullable<System.DateTime> endTime, Nullable<System.DateTime> startTime, Nullable<bool> isDraft, Nullable<bool> isCompleted, string productionStatus, Nullable<bool> isAborted, Nullable<decimal> averageCost, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var productionIssueIDParameter = productionIssueID.HasValue ?
                new ObjectParameter("ProductionIssueID", productionIssueID) :
                new ObjectParameter("ProductionIssueID", typeof(int));
    
            var standardOutputParameter = standardOutput.HasValue ?
                new ObjectParameter("StandardOutput", standardOutput) :
                new ObjectParameter("StandardOutput", typeof(decimal));
    
            var actualOutputParameter = actualOutput.HasValue ?
                new ObjectParameter("ActualOutput", actualOutput) :
                new ObjectParameter("ActualOutput", typeof(decimal));
    
            var varianceParameter = variance.HasValue ?
                new ObjectParameter("Variance", variance) :
                new ObjectParameter("Variance", typeof(decimal));
    
            var receiptStoreIDParameter = receiptStoreID.HasValue ?
                new ObjectParameter("ReceiptStoreID", receiptStoreID) :
                new ObjectParameter("ReceiptStoreID", typeof(int));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var isCompletedParameter = isCompleted.HasValue ?
                new ObjectParameter("IsCompleted", isCompleted) :
                new ObjectParameter("IsCompleted", typeof(bool));
    
            var productionStatusParameter = productionStatus != null ?
                new ObjectParameter("productionStatus", productionStatus) :
                new ObjectParameter("productionStatus", typeof(string));
    
            var isAbortedParameter = isAborted.HasValue ?
                new ObjectParameter("IsAborted", isAborted) :
                new ObjectParameter("IsAborted", typeof(bool));
    
            var averageCostParameter = averageCost.HasValue ?
                new ObjectParameter("AverageCost", averageCost) :
                new ObjectParameter("AverageCost", typeof(decimal));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpPUpdateProductionIssue", productionIssueIDParameter, standardOutputParameter, actualOutputParameter, varianceParameter, receiptStoreIDParameter, endDateParameter, endTimeParameter, startTimeParameter, isDraftParameter, isCompletedParameter, productionStatusParameter, isAbortedParameter, averageCostParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpPUpdateProductionIssueMaterials(Nullable<int> materialProductionIssueID, Nullable<int> productionIssueID, Nullable<int> itemID, Nullable<int> productDefinitionTransID, Nullable<decimal> issueQty, Nullable<decimal> additionalIssueQty, Nullable<decimal> variance, Nullable<int> wareHouseID, Nullable<System.DateTime> lastIssueDate, string remarks, Nullable<bool> isCompleted, Nullable<decimal> averageRate, Nullable<int> createUserID, Nullable<int> unitID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter retValue)
        {
            var materialProductionIssueIDParameter = materialProductionIssueID.HasValue ?
                new ObjectParameter("MaterialProductionIssueID", materialProductionIssueID) :
                new ObjectParameter("MaterialProductionIssueID", typeof(int));
    
            var productionIssueIDParameter = productionIssueID.HasValue ?
                new ObjectParameter("ProductionIssueID", productionIssueID) :
                new ObjectParameter("ProductionIssueID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var productDefinitionTransIDParameter = productDefinitionTransID.HasValue ?
                new ObjectParameter("ProductDefinitionTransID", productDefinitionTransID) :
                new ObjectParameter("ProductDefinitionTransID", typeof(int));
    
            var issueQtyParameter = issueQty.HasValue ?
                new ObjectParameter("IssueQty", issueQty) :
                new ObjectParameter("IssueQty", typeof(decimal));
    
            var additionalIssueQtyParameter = additionalIssueQty.HasValue ?
                new ObjectParameter("AdditionalIssueQty", additionalIssueQty) :
                new ObjectParameter("AdditionalIssueQty", typeof(decimal));
    
            var varianceParameter = variance.HasValue ?
                new ObjectParameter("Variance", variance) :
                new ObjectParameter("Variance", typeof(decimal));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            var lastIssueDateParameter = lastIssueDate.HasValue ?
                new ObjectParameter("LastIssueDate", lastIssueDate) :
                new ObjectParameter("LastIssueDate", typeof(System.DateTime));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var isCompletedParameter = isCompleted.HasValue ?
                new ObjectParameter("IsCompleted", isCompleted) :
                new ObjectParameter("IsCompleted", typeof(bool));
    
            var averageRateParameter = averageRate.HasValue ?
                new ObjectParameter("AverageRate", averageRate) :
                new ObjectParameter("AverageRate", typeof(decimal));
    
            var createUserIDParameter = createUserID.HasValue ?
                new ObjectParameter("CreateUserID", createUserID) :
                new ObjectParameter("CreateUserID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpPUpdateProductionIssueMaterials", materialProductionIssueIDParameter, productionIssueIDParameter, itemIDParameter, productDefinitionTransIDParameter, issueQtyParameter, additionalIssueQtyParameter, varianceParameter, wareHouseIDParameter, lastIssueDateParameter, remarksParameter, isCompletedParameter, averageRateParameter, createUserIDParameter, unitIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, retValue);
        }
    
        public virtual int SpUpdateJobWorkIssue(Nullable<int> iD, string issueNo, Nullable<System.DateTime> issueDate, Nullable<int> supplierID, Nullable<bool> isDraft, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var issueNoParameter = issueNo != null ?
                new ObjectParameter("IssueNo", issueNo) :
                new ObjectParameter("IssueNo", typeof(string));
    
            var issueDateParameter = issueDate.HasValue ?
                new ObjectParameter("IssueDate", issueDate) :
                new ObjectParameter("IssueDate", typeof(System.DateTime));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateJobWorkIssue", iDParameter, issueNoParameter, issueDateParameter, supplierIDParameter, isDraftParameter, createdUserIDParameter, finYearParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual int SpUpdateJobWorkReceipt(Nullable<int> iD, string transNo, Nullable<System.DateTime> transDate, Nullable<int> supplierID, Nullable<int> issueID, Nullable<bool> isDraft, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var transDateParameter = transDate.HasValue ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(System.DateTime));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var issueIDParameter = issueID.HasValue ?
                new ObjectParameter("IssueID", issueID) :
                new ObjectParameter("IssueID", typeof(int));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateJobWorkReceipt", iDParameter, transNoParameter, transDateParameter, supplierIDParameter, issueIDParameter, isDraftParameter, createdUserIDParameter, finYearParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual int SpUpdateRepackingIssue(Nullable<int> repackingIssueID, Nullable<System.DateTime> repackingDate, Nullable<int> batchTypeID, Nullable<decimal> quantity, Nullable<int> receiptBatchTypeID, Nullable<decimal> quantityOut, Nullable<bool> isDraft, Nullable<System.DateTime> createDate, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var repackingIssueIDParameter = repackingIssueID.HasValue ?
                new ObjectParameter("RepackingIssueID", repackingIssueID) :
                new ObjectParameter("RepackingIssueID", typeof(int));
    
            var repackingDateParameter = repackingDate.HasValue ?
                new ObjectParameter("RepackingDate", repackingDate) :
                new ObjectParameter("RepackingDate", typeof(System.DateTime));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var receiptBatchTypeIDParameter = receiptBatchTypeID.HasValue ?
                new ObjectParameter("ReceiptBatchTypeID", receiptBatchTypeID) :
                new ObjectParameter("ReceiptBatchTypeID", typeof(int));
    
            var quantityOutParameter = quantityOut.HasValue ?
                new ObjectParameter("QuantityOut", quantityOut) :
                new ObjectParameter("QuantityOut", typeof(decimal));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateRepackingIssue", repackingIssueIDParameter, repackingDateParameter, batchTypeIDParameter, quantityParameter, receiptBatchTypeIDParameter, quantityOutParameter, isDraftParameter, createDateParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpPCreateMaterialPurificationReceiptTrans(Nullable<int> purificationReceiptID, Nullable<int> purificationIssueTransID, Nullable<int> issueItemID, Nullable<int> receiptItemID, Nullable<decimal> receiptQuantity, Nullable<int> unitID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, Nullable<bool> isCompleted, Nullable<decimal> pendingQuantity)
        {
            var purificationReceiptIDParameter = purificationReceiptID.HasValue ?
                new ObjectParameter("PurificationReceiptID", purificationReceiptID) :
                new ObjectParameter("PurificationReceiptID", typeof(int));
    
            var purificationIssueTransIDParameter = purificationIssueTransID.HasValue ?
                new ObjectParameter("PurificationIssueTransID", purificationIssueTransID) :
                new ObjectParameter("PurificationIssueTransID", typeof(int));
    
            var issueItemIDParameter = issueItemID.HasValue ?
                new ObjectParameter("IssueItemID", issueItemID) :
                new ObjectParameter("IssueItemID", typeof(int));
    
            var receiptItemIDParameter = receiptItemID.HasValue ?
                new ObjectParameter("ReceiptItemID", receiptItemID) :
                new ObjectParameter("ReceiptItemID", typeof(int));
    
            var receiptQuantityParameter = receiptQuantity.HasValue ?
                new ObjectParameter("ReceiptQuantity", receiptQuantity) :
                new ObjectParameter("ReceiptQuantity", typeof(decimal));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var isCompletedParameter = isCompleted.HasValue ?
                new ObjectParameter("IsCompleted", isCompleted) :
                new ObjectParameter("IsCompleted", typeof(bool));
    
            var pendingQuantityParameter = pendingQuantity.HasValue ?
                new ObjectParameter("PendingQuantity", pendingQuantity) :
                new ObjectParameter("PendingQuantity", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpPCreateMaterialPurificationReceiptTrans", purificationReceiptIDParameter, purificationIssueTransIDParameter, issueItemIDParameter, receiptItemIDParameter, receiptQuantityParameter, unitIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, isCompletedParameter, pendingQuantityParameter);
        }
    
        public virtual ObjectResult<SpGetMaterialPurificationProcess_Result> SpGetMaterialPurificationProcess()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetMaterialPurificationProcess_Result>("SpGetMaterialPurificationProcess");
        }
    
        public virtual ObjectResult<SpGetRepackingIssue_Result> SpGetRepackingIssue(Nullable<int> rpackingID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var rpackingIDParameter = rpackingID.HasValue ?
                new ObjectParameter("RpackingID", rpackingID) :
                new ObjectParameter("RpackingID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetRepackingIssue_Result>("SpGetRepackingIssue", rpackingIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpPUpdateMaterialPurificationIssue(Nullable<bool> isDraft, Nullable<int> purificationIssueID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> createdUserID)
        {
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var purificationIssueIDParameter = purificationIssueID.HasValue ?
                new ObjectParameter("PurificationIssueID", purificationIssueID) :
                new ObjectParameter("PurificationIssueID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpPUpdateMaterialPurificationIssue", isDraftParameter, purificationIssueIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, createdUserIDParameter);
        }
    
        public virtual int SpPUpdateMaterialPurificationReceipt(Nullable<int> iD, Nullable<System.DateTime> transDate, Nullable<bool> isDraft, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> createdUserID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var transDateParameter = transDate.HasValue ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(System.DateTime));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpPUpdateMaterialPurificationReceipt", iDParameter, transDateParameter, isDraftParameter, finYearParameter, locationIDParameter, applicationIDParameter, createdUserIDParameter);
        }
    
        public virtual int SpUpdateProductionIssueProcess(Nullable<int> pIMID, Nullable<System.DateTime> startTime, Nullable<System.DateTime> endTime, Nullable<decimal> skilledLabourActualHour, Nullable<decimal> unSkilledLabourActualHour, Nullable<decimal> machineHourActual, string processStatus, string doneBy, string remarks, Nullable<decimal> averageProcessCost, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var pIMIDParameter = pIMID.HasValue ?
                new ObjectParameter("PIMID", pIMID) :
                new ObjectParameter("PIMID", typeof(int));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            var skilledLabourActualHourParameter = skilledLabourActualHour.HasValue ?
                new ObjectParameter("SkilledLabourActualHour", skilledLabourActualHour) :
                new ObjectParameter("SkilledLabourActualHour", typeof(decimal));
    
            var unSkilledLabourActualHourParameter = unSkilledLabourActualHour.HasValue ?
                new ObjectParameter("UnSkilledLabourActualHour", unSkilledLabourActualHour) :
                new ObjectParameter("UnSkilledLabourActualHour", typeof(decimal));
    
            var machineHourActualParameter = machineHourActual.HasValue ?
                new ObjectParameter("MachineHourActual", machineHourActual) :
                new ObjectParameter("MachineHourActual", typeof(decimal));
    
            var processStatusParameter = processStatus != null ?
                new ObjectParameter("ProcessStatus", processStatus) :
                new ObjectParameter("ProcessStatus", typeof(string));
    
            var doneByParameter = doneBy != null ?
                new ObjectParameter("DoneBy", doneBy) :
                new ObjectParameter("DoneBy", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var averageProcessCostParameter = averageProcessCost.HasValue ?
                new ObjectParameter("AverageProcessCost", averageProcessCost) :
                new ObjectParameter("AverageProcessCost", typeof(decimal));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateProductionIssueProcess", pIMIDParameter, startTimeParameter, endTimeParameter, skilledLabourActualHourParameter, unSkilledLabourActualHourParameter, machineHourActualParameter, processStatusParameter, doneByParameter, remarksParameter, averageProcessCostParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpPUpdateProduction(Nullable<int> productionID, Nullable<int> productionSequence, Nullable<System.DateTime> endDate, Nullable<System.DateTime> endTime, Nullable<bool> isDraft, Nullable<bool> isCompleted, Nullable<bool> isAborted, string currentStatus, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var productionIDParameter = productionID.HasValue ?
                new ObjectParameter("ProductionID", productionID) :
                new ObjectParameter("ProductionID", typeof(int));
    
            var productionSequenceParameter = productionSequence.HasValue ?
                new ObjectParameter("ProductionSequence", productionSequence) :
                new ObjectParameter("ProductionSequence", typeof(int));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var isCompletedParameter = isCompleted.HasValue ?
                new ObjectParameter("IsCompleted", isCompleted) :
                new ObjectParameter("IsCompleted", typeof(bool));
    
            var isAbortedParameter = isAborted.HasValue ?
                new ObjectParameter("IsAborted", isAborted) :
                new ObjectParameter("IsAborted", typeof(bool));
    
            var currentStatusParameter = currentStatus != null ?
                new ObjectParameter("CurrentStatus", currentStatus) :
                new ObjectParameter("CurrentStatus", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpPUpdateProduction", productionIDParameter, productionSequenceParameter, endDateParameter, endTimeParameter, isDraftParameter, isCompletedParameter, isAbortedParameter, currentStatusParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateQCProduction(Nullable<int> iD, Nullable<System.DateTime> qCDate, string qCStatus, Nullable<int> toWareHouseID, Nullable<decimal> approvedQty, Nullable<bool> isCancelled, Nullable<System.DateTime> cancelledDate, string remarks, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> createdUserID, ObjectParameter retValue)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var qCDateParameter = qCDate.HasValue ?
                new ObjectParameter("QCDate", qCDate) :
                new ObjectParameter("QCDate", typeof(System.DateTime));
    
            var qCStatusParameter = qCStatus != null ?
                new ObjectParameter("QCStatus", qCStatus) :
                new ObjectParameter("QCStatus", typeof(string));
    
            var toWareHouseIDParameter = toWareHouseID.HasValue ?
                new ObjectParameter("ToWareHouseID", toWareHouseID) :
                new ObjectParameter("ToWareHouseID", typeof(int));
    
            var approvedQtyParameter = approvedQty.HasValue ?
                new ObjectParameter("ApprovedQty", approvedQty) :
                new ObjectParameter("ApprovedQty", typeof(decimal));
    
            var isCancelledParameter = isCancelled.HasValue ?
                new ObjectParameter("IsCancelled", isCancelled) :
                new ObjectParameter("IsCancelled", typeof(bool));
    
            var cancelledDateParameter = cancelledDate.HasValue ?
                new ObjectParameter("CancelledDate", cancelledDate) :
                new ObjectParameter("CancelledDate", typeof(System.DateTime));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateQCProduction", iDParameter, qCDateParameter, qCStatusParameter, toWareHouseIDParameter, approvedQtyParameter, isCancelledParameter, cancelledDateParameter, remarksParameter, finYearParameter, locationIDParameter, applicationIDParameter, createdUserIDParameter, retValue);
        }
    
        public virtual int SpUpdateQCProductionTrans(Nullable<int> iD, Nullable<decimal> actualValue, string actualResult, string remarks, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> createdUserID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var actualValueParameter = actualValue.HasValue ?
                new ObjectParameter("ActualValue", actualValue) :
                new ObjectParameter("ActualValue", typeof(decimal));
    
            var actualResultParameter = actualResult != null ?
                new ObjectParameter("ActualResult", actualResult) :
                new ObjectParameter("ActualResult", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateQCProductionTrans", iDParameter, actualValueParameter, actualResultParameter, remarksParameter, finYearParameter, locationIDParameter, applicationIDParameter, createdUserIDParameter);
        }
    
        public virtual int SpPUpdateProductionPacking(Nullable<int> packingID, Nullable<System.DateTime> endDate, Nullable<decimal> packedQty, Nullable<bool> isDraft, Nullable<bool> isCompleted, string remarks, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var packingIDParameter = packingID.HasValue ?
                new ObjectParameter("PackingID", packingID) :
                new ObjectParameter("PackingID", typeof(int));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var packedQtyParameter = packedQty.HasValue ?
                new ObjectParameter("PackedQty", packedQty) :
                new ObjectParameter("PackedQty", typeof(decimal));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var isCompletedParameter = isCompleted.HasValue ?
                new ObjectParameter("IsCompleted", isCompleted) :
                new ObjectParameter("IsCompleted", typeof(bool));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpPUpdateProductionPacking", packingIDParameter, endDateParameter, packedQtyParameter, isDraftParameter, isCompletedParameter, remarksParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetProductionIssueList_Result> SpGetProductionIssueList(string type, string transNoHint, string transDateHint, string expectedDateHint, string productionGroupNameHint, string batchNoHint, string batchSizeHint, string unitHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var transNoHintParameter = transNoHint != null ?
                new ObjectParameter("TransNoHint", transNoHint) :
                new ObjectParameter("TransNoHint", typeof(string));
    
            var transDateHintParameter = transDateHint != null ?
                new ObjectParameter("TransDateHint", transDateHint) :
                new ObjectParameter("TransDateHint", typeof(string));
    
            var expectedDateHintParameter = expectedDateHint != null ?
                new ObjectParameter("ExpectedDateHint", expectedDateHint) :
                new ObjectParameter("ExpectedDateHint", typeof(string));
    
            var productionGroupNameHintParameter = productionGroupNameHint != null ?
                new ObjectParameter("ProductionGroupNameHint", productionGroupNameHint) :
                new ObjectParameter("ProductionGroupNameHint", typeof(string));
    
            var batchNoHintParameter = batchNoHint != null ?
                new ObjectParameter("BatchNoHint", batchNoHint) :
                new ObjectParameter("BatchNoHint", typeof(string));
    
            var batchSizeHintParameter = batchSizeHint != null ?
                new ObjectParameter("BatchSizeHint", batchSizeHint) :
                new ObjectParameter("BatchSizeHint", typeof(string));
    
            var unitHintParameter = unitHint != null ?
                new ObjectParameter("UnitHint", unitHint) :
                new ObjectParameter("UnitHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetProductionIssueList_Result>("SpGetProductionIssueList", typeParameter, transNoHintParameter, transDateHintParameter, expectedDateHintParameter, productionGroupNameHintParameter, batchNoHintParameter, batchSizeHintParameter, unitHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetProductionPackingMaterials_Result> SpGetProductionPackingMaterials(Nullable<int> packingID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var packingIDParameter = packingID.HasValue ?
                new ObjectParameter("PackingID", packingID) :
                new ObjectParameter("PackingID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetProductionPackingMaterials_Result>("SpGetProductionPackingMaterials", packingIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPreProcessIssueListForDatatable_Result> SpGetPreProcessIssueListForDatatable(string type, string transNoHint, string transDateHint, string createdUserHint, string itemNameHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var transNoHintParameter = transNoHint != null ?
                new ObjectParameter("TransNoHint", transNoHint) :
                new ObjectParameter("TransNoHint", typeof(string));
    
            var transDateHintParameter = transDateHint != null ?
                new ObjectParameter("TransDateHint", transDateHint) :
                new ObjectParameter("TransDateHint", typeof(string));
    
            var createdUserHintParameter = createdUserHint != null ?
                new ObjectParameter("CreatedUserHint", createdUserHint) :
                new ObjectParameter("CreatedUserHint", typeof(string));
    
            var itemNameHintParameter = itemNameHint != null ?
                new ObjectParameter("ItemNameHint", itemNameHint) :
                new ObjectParameter("ItemNameHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPreProcessIssueListForDatatable_Result>("SpGetPreProcessIssueListForDatatable", typeParameter, transNoHintParameter, transDateHintParameter, createdUserHintParameter, itemNameHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPreProcessReceiptList_Result> SpGetPreProcessReceiptList(string type, string receiptNoHint, string issueItemHint, string issuedUnitHint, string issueQtyHint, string receiptItemHint, string receiptUnit, string receiptQty, string activity, string quantityLoss, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var receiptNoHintParameter = receiptNoHint != null ?
                new ObjectParameter("ReceiptNoHint", receiptNoHint) :
                new ObjectParameter("ReceiptNoHint", typeof(string));
    
            var issueItemHintParameter = issueItemHint != null ?
                new ObjectParameter("IssueItemHint", issueItemHint) :
                new ObjectParameter("IssueItemHint", typeof(string));
    
            var issuedUnitHintParameter = issuedUnitHint != null ?
                new ObjectParameter("IssuedUnitHint", issuedUnitHint) :
                new ObjectParameter("IssuedUnitHint", typeof(string));
    
            var issueQtyHintParameter = issueQtyHint != null ?
                new ObjectParameter("IssueQtyHint", issueQtyHint) :
                new ObjectParameter("IssueQtyHint", typeof(string));
    
            var receiptItemHintParameter = receiptItemHint != null ?
                new ObjectParameter("ReceiptItemHint", receiptItemHint) :
                new ObjectParameter("ReceiptItemHint", typeof(string));
    
            var receiptUnitParameter = receiptUnit != null ?
                new ObjectParameter("ReceiptUnit", receiptUnit) :
                new ObjectParameter("ReceiptUnit", typeof(string));
    
            var receiptQtyParameter = receiptQty != null ?
                new ObjectParameter("ReceiptQty", receiptQty) :
                new ObjectParameter("ReceiptQty", typeof(string));
    
            var activityParameter = activity != null ?
                new ObjectParameter("Activity", activity) :
                new ObjectParameter("Activity", typeof(string));
    
            var quantityLossParameter = quantityLoss != null ?
                new ObjectParameter("QuantityLoss", quantityLoss) :
                new ObjectParameter("QuantityLoss", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPreProcessReceiptList_Result>("SpGetPreProcessReceiptList", typeParameter, receiptNoHintParameter, issueItemHintParameter, issuedUnitHintParameter, issueQtyHintParameter, receiptItemHintParameter, receiptUnitParameter, receiptQtyParameter, activityParameter, quantityLossParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetRepackingList_Result> SpGetRepackingList(string type, string transNoHint, string transDateHint, string itemNameHint, string batchNoHint, string batchTypeHint, string quantityInHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var transNoHintParameter = transNoHint != null ?
                new ObjectParameter("TransNoHint", transNoHint) :
                new ObjectParameter("TransNoHint", typeof(string));
    
            var transDateHintParameter = transDateHint != null ?
                new ObjectParameter("TransDateHint", transDateHint) :
                new ObjectParameter("TransDateHint", typeof(string));
    
            var itemNameHintParameter = itemNameHint != null ?
                new ObjectParameter("ItemNameHint", itemNameHint) :
                new ObjectParameter("ItemNameHint", typeof(string));
    
            var batchNoHintParameter = batchNoHint != null ?
                new ObjectParameter("BatchNoHint", batchNoHint) :
                new ObjectParameter("BatchNoHint", typeof(string));
    
            var batchTypeHintParameter = batchTypeHint != null ?
                new ObjectParameter("BatchTypeHint", batchTypeHint) :
                new ObjectParameter("BatchTypeHint", typeof(string));
    
            var quantityInHintParameter = quantityInHint != null ?
                new ObjectParameter("QuantityInHint", quantityInHint) :
                new ObjectParameter("QuantityInHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetRepackingList_Result>("SpGetRepackingList", typeParameter, transNoHintParameter, transDateHintParameter, itemNameHintParameter, batchNoHintParameter, batchTypeHintParameter, quantityInHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetQCListForDatatable_Result> SpGetQCListForDatatable(string type, string productionNoHint, string receiptDateHint, string itemHint, string batchNoHint, string unitHint, string acceptedQuantityHint, string approvedQuantityHint, string batchsizeHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var productionNoHintParameter = productionNoHint != null ?
                new ObjectParameter("ProductionNoHint", productionNoHint) :
                new ObjectParameter("ProductionNoHint", typeof(string));
    
            var receiptDateHintParameter = receiptDateHint != null ?
                new ObjectParameter("ReceiptDateHint", receiptDateHint) :
                new ObjectParameter("ReceiptDateHint", typeof(string));
    
            var itemHintParameter = itemHint != null ?
                new ObjectParameter("ItemHint", itemHint) :
                new ObjectParameter("ItemHint", typeof(string));
    
            var batchNoHintParameter = batchNoHint != null ?
                new ObjectParameter("BatchNoHint", batchNoHint) :
                new ObjectParameter("BatchNoHint", typeof(string));
    
            var unitHintParameter = unitHint != null ?
                new ObjectParameter("UnitHint", unitHint) :
                new ObjectParameter("UnitHint", typeof(string));
    
            var acceptedQuantityHintParameter = acceptedQuantityHint != null ?
                new ObjectParameter("AcceptedQuantityHint", acceptedQuantityHint) :
                new ObjectParameter("AcceptedQuantityHint", typeof(string));
    
            var approvedQuantityHintParameter = approvedQuantityHint != null ?
                new ObjectParameter("ApprovedQuantityHint", approvedQuantityHint) :
                new ObjectParameter("ApprovedQuantityHint", typeof(string));
    
            var batchsizeHintParameter = batchsizeHint != null ?
                new ObjectParameter("BatchsizeHint", batchsizeHint) :
                new ObjectParameter("BatchsizeHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetQCListForDatatable_Result>("SpGetQCListForDatatable", typeParameter, productionNoHintParameter, receiptDateHintParameter, itemHintParameter, batchNoHintParameter, unitHintParameter, acceptedQuantityHintParameter, approvedQuantityHintParameter, batchsizeHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpPGetRePackingMaterials_Result> SpPGetRePackingMaterials(Nullable<int> itemID, Nullable<int> productGroupID, Nullable<int> batchTypeID, Nullable<int> warehouseID, Nullable<int> issueItemID, Nullable<decimal> quantityIn, Nullable<decimal> packedQty, Nullable<int> issueBatchTypeID, Nullable<int> batchID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var productGroupIDParameter = productGroupID.HasValue ?
                new ObjectParameter("ProductGroupID", productGroupID) :
                new ObjectParameter("ProductGroupID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var issueItemIDParameter = issueItemID.HasValue ?
                new ObjectParameter("IssueItemID", issueItemID) :
                new ObjectParameter("IssueItemID", typeof(int));
    
            var quantityInParameter = quantityIn.HasValue ?
                new ObjectParameter("QuantityIn", quantityIn) :
                new ObjectParameter("QuantityIn", typeof(decimal));
    
            var packedQtyParameter = packedQty.HasValue ?
                new ObjectParameter("PackedQty", packedQty) :
                new ObjectParameter("PackedQty", typeof(decimal));
    
            var issueBatchTypeIDParameter = issueBatchTypeID.HasValue ?
                new ObjectParameter("IssueBatchTypeID", issueBatchTypeID) :
                new ObjectParameter("IssueBatchTypeID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpPGetRePackingMaterials_Result>("SpPGetRePackingMaterials", itemIDParameter, productGroupIDParameter, batchTypeIDParameter, warehouseIDParameter, issueItemIDParameter, quantityInParameter, packedQtyParameter, issueBatchTypeIDParameter, batchIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetProductionSchedule_Result> SpGetProductionSchedule(Nullable<int> productionScheduleID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var productionScheduleIDParameter = productionScheduleID.HasValue ?
                new ObjectParameter("ProductionScheduleID", productionScheduleID) :
                new ObjectParameter("ProductionScheduleID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetProductionSchedule_Result>("SpGetProductionSchedule", productionScheduleIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpPUpdateProductionSchedule(Nullable<int> productionScheduleID, Nullable<System.DateTime> transDate, Nullable<int> productionGroupID, Nullable<int> productID, Nullable<System.DateTime> productionStartDate, Nullable<System.DateTime> productionStartTime, Nullable<decimal> standardBatchSize, Nullable<decimal> actualBatchSize, Nullable<int> productionLocationID, Nullable<int> requestedStoreID, Nullable<bool> isDraft, Nullable<int> machineID, Nullable<int> mouldID, Nullable<int> processID, string endDate, string endTime, string remarks, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter stockRequisitionID)
        {
            var productionScheduleIDParameter = productionScheduleID.HasValue ?
                new ObjectParameter("ProductionScheduleID", productionScheduleID) :
                new ObjectParameter("ProductionScheduleID", typeof(int));
    
            var transDateParameter = transDate.HasValue ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(System.DateTime));
    
            var productionGroupIDParameter = productionGroupID.HasValue ?
                new ObjectParameter("ProductionGroupID", productionGroupID) :
                new ObjectParameter("ProductionGroupID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var productionStartDateParameter = productionStartDate.HasValue ?
                new ObjectParameter("ProductionStartDate", productionStartDate) :
                new ObjectParameter("ProductionStartDate", typeof(System.DateTime));
    
            var productionStartTimeParameter = productionStartTime.HasValue ?
                new ObjectParameter("ProductionStartTime", productionStartTime) :
                new ObjectParameter("ProductionStartTime", typeof(System.DateTime));
    
            var standardBatchSizeParameter = standardBatchSize.HasValue ?
                new ObjectParameter("StandardBatchSize", standardBatchSize) :
                new ObjectParameter("StandardBatchSize", typeof(decimal));
    
            var actualBatchSizeParameter = actualBatchSize.HasValue ?
                new ObjectParameter("ActualBatchSize", actualBatchSize) :
                new ObjectParameter("ActualBatchSize", typeof(decimal));
    
            var productionLocationIDParameter = productionLocationID.HasValue ?
                new ObjectParameter("ProductionLocationID", productionLocationID) :
                new ObjectParameter("ProductionLocationID", typeof(int));
    
            var requestedStoreIDParameter = requestedStoreID.HasValue ?
                new ObjectParameter("RequestedStoreID", requestedStoreID) :
                new ObjectParameter("RequestedStoreID", typeof(int));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var machineIDParameter = machineID.HasValue ?
                new ObjectParameter("MachineID", machineID) :
                new ObjectParameter("MachineID", typeof(int));
    
            var mouldIDParameter = mouldID.HasValue ?
                new ObjectParameter("MouldID", mouldID) :
                new ObjectParameter("MouldID", typeof(int));
    
            var processIDParameter = processID.HasValue ?
                new ObjectParameter("ProcessID", processID) :
                new ObjectParameter("ProcessID", typeof(int));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var endTimeParameter = endTime != null ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpPUpdateProductionSchedule", productionScheduleIDParameter, transDateParameter, productionGroupIDParameter, productIDParameter, productionStartDateParameter, productionStartTimeParameter, standardBatchSizeParameter, actualBatchSizeParameter, productionLocationIDParameter, requestedStoreIDParameter, isDraftParameter, machineIDParameter, mouldIDParameter, processIDParameter, endDateParameter, endTimeParameter, remarksParameter, finYearParameter, locationIDParameter, applicationIDParameter, stockRequisitionID);
        }
    
        public virtual ObjectResult<SpGetProductionPacking_Result> SpGetProductionPacking(Nullable<int> packingID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var packingIDParameter = packingID.HasValue ?
                new ObjectParameter("PackingID", packingID) :
                new ObjectParameter("PackingID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetProductionPacking_Result>("SpGetProductionPacking", packingIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetProductionIssueMaterialDetails_Result> SpGetProductionIssueMaterialDetails(Nullable<int> productionID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var productionIDParameter = productionID.HasValue ?
                new ObjectParameter("ProductionID", productionID) :
                new ObjectParameter("ProductionID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetProductionIssueMaterialDetails_Result>("SpGetProductionIssueMaterialDetails", productionIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetMaterialsForProductionIssue_Result> SpGetMaterialsForProductionIssue(Nullable<int> productionGroupID, Nullable<int> productionSequence, Nullable<int> itemID, Nullable<int> productID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var productionGroupIDParameter = productionGroupID.HasValue ?
                new ObjectParameter("ProductionGroupID", productionGroupID) :
                new ObjectParameter("ProductionGroupID", typeof(int));
    
            var productionSequenceParameter = productionSequence.HasValue ?
                new ObjectParameter("ProductionSequence", productionSequence) :
                new ObjectParameter("ProductionSequence", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetMaterialsForProductionIssue_Result>("SpGetMaterialsForProductionIssue", productionGroupIDParameter, productionSequenceParameter, itemIDParameter, productIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreatePackingSchedule(string transNo, Nullable<System.DateTime> transDate, Nullable<int> productionGroupID, Nullable<int> itemID, Nullable<decimal> packingQty, Nullable<System.DateTime> startDate, Nullable<int> batchID, Nullable<int> batchTypeID, string remarks, Nullable<bool> isDraft, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter stockRequisitionID, ObjectParameter packingScheduleID)
        {
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var transDateParameter = transDate.HasValue ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(System.DateTime));
    
            var productionGroupIDParameter = productionGroupID.HasValue ?
                new ObjectParameter("ProductionGroupID", productionGroupID) :
                new ObjectParameter("ProductionGroupID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var packingQtyParameter = packingQty.HasValue ?
                new ObjectParameter("PackingQty", packingQty) :
                new ObjectParameter("PackingQty", typeof(decimal));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePackingSchedule", transNoParameter, transDateParameter, productionGroupIDParameter, itemIDParameter, packingQtyParameter, startDateParameter, batchIDParameter, batchTypeIDParameter, remarksParameter, isDraftParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, stockRequisitionID, packingScheduleID);
        }
    
        public virtual int SpCreatePackingScheduleTrans(Nullable<int> packingScheduleID, Nullable<int> stockRequisitionID, Nullable<int> itemID, Nullable<decimal> requiredQty, Nullable<System.DateTime> requiredDate, string remarks, Nullable<int> productDefinitionTransID, Nullable<int> unitID, Nullable<decimal> stdQtyForStdBatch, Nullable<decimal> stdQtyForActualBatch, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var packingScheduleIDParameter = packingScheduleID.HasValue ?
                new ObjectParameter("PackingScheduleID", packingScheduleID) :
                new ObjectParameter("PackingScheduleID", typeof(int));
    
            var stockRequisitionIDParameter = stockRequisitionID.HasValue ?
                new ObjectParameter("StockRequisitionID", stockRequisitionID) :
                new ObjectParameter("StockRequisitionID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var requiredQtyParameter = requiredQty.HasValue ?
                new ObjectParameter("RequiredQty", requiredQty) :
                new ObjectParameter("RequiredQty", typeof(decimal));
    
            var requiredDateParameter = requiredDate.HasValue ?
                new ObjectParameter("RequiredDate", requiredDate) :
                new ObjectParameter("RequiredDate", typeof(System.DateTime));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var productDefinitionTransIDParameter = productDefinitionTransID.HasValue ?
                new ObjectParameter("ProductDefinitionTransID", productDefinitionTransID) :
                new ObjectParameter("ProductDefinitionTransID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var stdQtyForStdBatchParameter = stdQtyForStdBatch.HasValue ?
                new ObjectParameter("StdQtyForStdBatch", stdQtyForStdBatch) :
                new ObjectParameter("StdQtyForStdBatch", typeof(decimal));
    
            var stdQtyForActualBatchParameter = stdQtyForActualBatch.HasValue ?
                new ObjectParameter("StdQtyForActualBatch", stdQtyForActualBatch) :
                new ObjectParameter("StdQtyForActualBatch", typeof(decimal));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePackingScheduleTrans", packingScheduleIDParameter, stockRequisitionIDParameter, itemIDParameter, requiredQtyParameter, requiredDateParameter, remarksParameter, productDefinitionTransIDParameter, unitIDParameter, stdQtyForStdBatchParameter, stdQtyForActualBatchParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPackingSchedule_Result> SpGetPackingSchedule(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPackingSchedule_Result>("SpGetPackingSchedule", finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPackingScheduleByID_Result> SpGetPackingScheduleByID(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPackingScheduleByID_Result>("SpGetPackingScheduleByID", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPackingScheduleItems_Result> SpGetPackingScheduleItems(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPackingScheduleItems_Result>("SpGetPackingScheduleItems", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPackingScheduleList_Result> SpGetPackingScheduleList(string type, string transNoHint, string transDateHint, string itemNameHint, string batchNoHint, string batchTypeHint, string packedQtyHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var transNoHintParameter = transNoHint != null ?
                new ObjectParameter("TransNoHint", transNoHint) :
                new ObjectParameter("TransNoHint", typeof(string));
    
            var transDateHintParameter = transDateHint != null ?
                new ObjectParameter("TransDateHint", transDateHint) :
                new ObjectParameter("TransDateHint", typeof(string));
    
            var itemNameHintParameter = itemNameHint != null ?
                new ObjectParameter("ItemNameHint", itemNameHint) :
                new ObjectParameter("ItemNameHint", typeof(string));
    
            var batchNoHintParameter = batchNoHint != null ?
                new ObjectParameter("BatchNoHint", batchNoHint) :
                new ObjectParameter("BatchNoHint", typeof(string));
    
            var batchTypeHintParameter = batchTypeHint != null ?
                new ObjectParameter("BatchTypeHint", batchTypeHint) :
                new ObjectParameter("BatchTypeHint", typeof(string));
    
            var packedQtyHintParameter = packedQtyHint != null ?
                new ObjectParameter("PackedQtyHint", packedQtyHint) :
                new ObjectParameter("PackedQtyHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPackingScheduleList_Result>("SpGetPackingScheduleList", typeParameter, transNoHintParameter, transDateHintParameter, itemNameHintParameter, batchNoHintParameter, batchTypeHintParameter, packedQtyHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpPGetProductionScheduleTransDetails_Result> SpPGetProductionScheduleTransDetails(Nullable<int> productionScheduleID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var productionScheduleIDParameter = productionScheduleID.HasValue ?
                new ObjectParameter("ProductionScheduleID", productionScheduleID) :
                new ObjectParameter("ProductionScheduleID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpPGetProductionScheduleTransDetails_Result>("SpPGetProductionScheduleTransDetails", productionScheduleIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdatePackingSchedule(Nullable<int> iD, Nullable<int> productionGroupID, Nullable<int> itemID, Nullable<decimal> packingQty, Nullable<System.DateTime> startDate, Nullable<int> batchID, Nullable<int> batchTypeID, string remarks, Nullable<bool> isDraft, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter stockRequisitionID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var productionGroupIDParameter = productionGroupID.HasValue ?
                new ObjectParameter("ProductionGroupID", productionGroupID) :
                new ObjectParameter("ProductionGroupID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var packingQtyParameter = packingQty.HasValue ?
                new ObjectParameter("PackingQty", packingQty) :
                new ObjectParameter("PackingQty", typeof(decimal));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdatePackingSchedule", iDParameter, productionGroupIDParameter, itemIDParameter, packingQtyParameter, startDateParameter, batchIDParameter, batchTypeIDParameter, remarksParameter, isDraftParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, stockRequisitionID);
        }
    }
}
