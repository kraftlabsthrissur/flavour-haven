//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccessLayer.DBContext
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class StockEntities : DbContext
    {
        public StockEntities()
            : base("name=StockEntities")
        {
            ((IObjectContextAdapter)this).ObjectContext.CommandTimeout = 0;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<StockIssueTemplateItem> StockIssueTemplateItems { get; set; }
    
        public virtual int SpCancelTransaction(Nullable<int> iD, string tableName, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCancelTransaction", iDParameter, tableNameParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateBatch(string itemType, Nullable<int> itemID, string batchNo, string customBatchNo, Nullable<System.DateTime> manufacturingDate, Nullable<System.DateTime> expiryDate, Nullable<int> batchTypeID, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter batchID)
        {
            var itemTypeParameter = itemType != null ?
                new ObjectParameter("ItemType", itemType) :
                new ObjectParameter("ItemType", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchNoParameter = batchNo != null ?
                new ObjectParameter("BatchNo", batchNo) :
                new ObjectParameter("BatchNo", typeof(string));
    
            var customBatchNoParameter = customBatchNo != null ?
                new ObjectParameter("CustomBatchNo", customBatchNo) :
                new ObjectParameter("CustomBatchNo", typeof(string));
    
            var manufacturingDateParameter = manufacturingDate.HasValue ?
                new ObjectParameter("ManufacturingDate", manufacturingDate) :
                new ObjectParameter("ManufacturingDate", typeof(System.DateTime));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateBatch", itemTypeParameter, itemIDParameter, batchNoParameter, customBatchNoParameter, manufacturingDateParameter, expiryDateParameter, batchTypeIDParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter, batchID);
        }
    
        public virtual ObjectResult<SpGetConfigByUser_Result> SpGetConfigByUser(string configName, Nullable<int> userID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var configNameParameter = configName != null ?
                new ObjectParameter("ConfigName", configName) :
                new ObjectParameter("ConfigName", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetConfigByUser_Result>("SpGetConfigByUser", configNameParameter, userIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCurrentFinYear_Result> SpGetCurrentFinYear(Nullable<int> applicationID)
        {
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCurrentFinYear_Result>("SpGetCurrentFinYear", applicationIDParameter);
        }
    
        public virtual int SpIsCodeAlreadyExists(string tableName, string fieldName, string code, Nullable<int> iD, ObjectParameter isExists)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("tableName", tableName) :
                new ObjectParameter("tableName", typeof(string));
    
            var fieldNameParameter = fieldName != null ?
                new ObjectParameter("FieldName", fieldName) :
                new ObjectParameter("FieldName", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpIsCodeAlreadyExists", tableNameParameter, fieldNameParameter, codeParameter, iDParameter, isExists);
        }
    
        public virtual int SpSuspendTransaction(Nullable<int> iD, string tableName, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter retValue)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpSuspendTransaction", iDParameter, tableNameParameter, finYearParameter, locationIDParameter, applicationIDParameter, retValue);
        }
    
        public virtual int SpUpdateSerialNo(string formName, string fieldName, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter serialNo)
        {
            var formNameParameter = formName != null ?
                new ObjectParameter("FormName", formName) :
                new ObjectParameter("FormName", typeof(string));
    
            var fieldNameParameter = fieldName != null ?
                new ObjectParameter("FieldName", fieldName) :
                new ObjectParameter("FieldName", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateSerialNo", formNameParameter, fieldNameParameter, finYearParameter, locationIDParameter, applicationIDParameter, serialNo);
        }
    
        public virtual ObjectResult<GetBatchesByItemIDForDamageEntry_Result> GetBatchesByItemIDForDamageEntry(Nullable<int> warehouseID, Nullable<int> itemID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBatchesByItemIDForDamageEntry_Result>("GetBatchesByItemIDForDamageEntry", warehouseIDParameter, itemIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCancelStockIssue(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("finYear", finYear) :
                new ObjectParameter("finYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("locationID", locationID) :
                new ObjectParameter("locationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCancelStockIssue", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCancelStockRequisition(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("finYear", finYear) :
                new ObjectParameter("finYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("locationID", locationID) :
                new ObjectParameter("locationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCancelStockRequisition", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateDamageEntry(string transNo, Nullable<System.DateTime> date, Nullable<int> wareHouseID, Nullable<bool> isDraft, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter damageEntryID)
        {
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateDamageEntry", transNoParameter, dateParameter, wareHouseIDParameter, isDraftParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, damageEntryID);
        }
    
        public virtual int SpCreateDamageEntryTrans(Nullable<int> damageEntryID, Nullable<int> warehouseID, Nullable<int> itemID, Nullable<int> unitID, Nullable<int> batchTypeID, Nullable<int> batchID, Nullable<System.DateTime> expiryDate, Nullable<decimal> currentQty, Nullable<decimal> damageQty, Nullable<int> damageTypeID, string remarks, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var damageEntryIDParameter = damageEntryID.HasValue ?
                new ObjectParameter("DamageEntryID", damageEntryID) :
                new ObjectParameter("DamageEntryID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var currentQtyParameter = currentQty.HasValue ?
                new ObjectParameter("CurrentQty", currentQty) :
                new ObjectParameter("CurrentQty", typeof(decimal));
    
            var damageQtyParameter = damageQty.HasValue ?
                new ObjectParameter("DamageQty", damageQty) :
                new ObjectParameter("DamageQty", typeof(decimal));
    
            var damageTypeIDParameter = damageTypeID.HasValue ?
                new ObjectParameter("DamageTypeID", damageTypeID) :
                new ObjectParameter("DamageTypeID", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateDamageEntryTrans", damageEntryIDParameter, warehouseIDParameter, itemIDParameter, unitIDParameter, batchTypeIDParameter, batchIDParameter, expiryDateParameter, currentQtyParameter, damageQtyParameter, damageTypeIDParameter, remarksParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateMaterialRequirementPlan(string transNo, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter purchaseRequisitionID)
        {
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateMaterialRequirementPlan", transNoParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, purchaseRequisitionID);
        }
    
        public virtual int SpCreateMaterialRequirementPlanTrans(Nullable<int> purchaseRequisitionID, Nullable<int> itemID, Nullable<int> unitID, Nullable<decimal> requiredQty, Nullable<decimal> availableStock, Nullable<decimal> qtyInQC, Nullable<decimal> orderedQty, Nullable<decimal> requestedQty, Nullable<System.DateTime> requiredDate, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var purchaseRequisitionIDParameter = purchaseRequisitionID.HasValue ?
                new ObjectParameter("PurchaseRequisitionID", purchaseRequisitionID) :
                new ObjectParameter("PurchaseRequisitionID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var requiredQtyParameter = requiredQty.HasValue ?
                new ObjectParameter("RequiredQty", requiredQty) :
                new ObjectParameter("RequiredQty", typeof(decimal));
    
            var availableStockParameter = availableStock.HasValue ?
                new ObjectParameter("AvailableStock", availableStock) :
                new ObjectParameter("AvailableStock", typeof(decimal));
    
            var qtyInQCParameter = qtyInQC.HasValue ?
                new ObjectParameter("QtyInQC", qtyInQC) :
                new ObjectParameter("QtyInQC", typeof(decimal));
    
            var orderedQtyParameter = orderedQty.HasValue ?
                new ObjectParameter("OrderedQty", orderedQty) :
                new ObjectParameter("OrderedQty", typeof(decimal));
    
            var requestedQtyParameter = requestedQty.HasValue ?
                new ObjectParameter("RequestedQty", requestedQty) :
                new ObjectParameter("RequestedQty", typeof(decimal));
    
            var requiredDateParameter = requiredDate.HasValue ?
                new ObjectParameter("RequiredDate", requiredDate) :
                new ObjectParameter("RequiredDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateMaterialRequirementPlanTrans", purchaseRequisitionIDParameter, itemIDParameter, unitIDParameter, requiredQtyParameter, availableStockParameter, qtyInQCParameter, orderedQtyParameter, requestedQtyParameter, requiredDateParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateRateAdjustment(string transNo, Nullable<System.DateTime> date, Nullable<bool> isDraft, Nullable<int> createdUserID, Nullable<System.DateTime> createDate, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter rateAdjustmentID)
        {
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateRateAdjustment", transNoParameter, dateParameter, isDraftParameter, createdUserIDParameter, createDateParameter, finYearParameter, locationIDParameter, applicationIDParameter, rateAdjustmentID);
        }
    
        public virtual int SpCreateRateAdjustmentTrans(Nullable<int> rateAdjustmentID, Nullable<int> itemID, Nullable<decimal> systemStockQty, Nullable<decimal> systemAvgCost, Nullable<decimal> actualAvgCost, Nullable<decimal> diffInAvgCost, Nullable<decimal> systemStockValue, Nullable<decimal> actualStockValue, Nullable<decimal> differenceInStockQty, Nullable<System.DateTime> effectDate, string remark, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var rateAdjustmentIDParameter = rateAdjustmentID.HasValue ?
                new ObjectParameter("RateAdjustmentID", rateAdjustmentID) :
                new ObjectParameter("RateAdjustmentID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var systemStockQtyParameter = systemStockQty.HasValue ?
                new ObjectParameter("SystemStockQty", systemStockQty) :
                new ObjectParameter("SystemStockQty", typeof(decimal));
    
            var systemAvgCostParameter = systemAvgCost.HasValue ?
                new ObjectParameter("SystemAvgCost", systemAvgCost) :
                new ObjectParameter("SystemAvgCost", typeof(decimal));
    
            var actualAvgCostParameter = actualAvgCost.HasValue ?
                new ObjectParameter("ActualAvgCost", actualAvgCost) :
                new ObjectParameter("ActualAvgCost", typeof(decimal));
    
            var diffInAvgCostParameter = diffInAvgCost.HasValue ?
                new ObjectParameter("DiffInAvgCost", diffInAvgCost) :
                new ObjectParameter("DiffInAvgCost", typeof(decimal));
    
            var systemStockValueParameter = systemStockValue.HasValue ?
                new ObjectParameter("SystemStockValue", systemStockValue) :
                new ObjectParameter("SystemStockValue", typeof(decimal));
    
            var actualStockValueParameter = actualStockValue.HasValue ?
                new ObjectParameter("ActualStockValue", actualStockValue) :
                new ObjectParameter("ActualStockValue", typeof(decimal));
    
            var differenceInStockQtyParameter = differenceInStockQty.HasValue ?
                new ObjectParameter("DifferenceInStockQty", differenceInStockQty) :
                new ObjectParameter("DifferenceInStockQty", typeof(decimal));
    
            var effectDateParameter = effectDate.HasValue ?
                new ObjectParameter("EffectDate", effectDate) :
                new ObjectParameter("EffectDate", typeof(System.DateTime));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateRateAdjustmentTrans", rateAdjustmentIDParameter, itemIDParameter, systemStockQtyParameter, systemAvgCostParameter, actualAvgCostParameter, diffInAvgCostParameter, systemStockValueParameter, actualStockValueParameter, differenceInStockQtyParameter, effectDateParameter, remarkParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateServiceItemIssue(string issueNo, Nullable<System.DateTime> issueDate, Nullable<int> issueLocationID, Nullable<int> issuePremiseID, Nullable<int> receiptLocationID, Nullable<int> receiptPremiseID, Nullable<decimal> grossAmount, Nullable<decimal> tradeDiscount, Nullable<decimal> taxableAmount, Nullable<decimal> sGSTAmount, Nullable<decimal> cGSTAmount, Nullable<decimal> iGSTAmount, Nullable<decimal> roundOff, Nullable<decimal> netAmount, Nullable<int> createdUserID, Nullable<bool> isDraft, Nullable<bool> isService, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter stockIssueID)
        {
            var issueNoParameter = issueNo != null ?
                new ObjectParameter("IssueNo", issueNo) :
                new ObjectParameter("IssueNo", typeof(string));
    
            var issueDateParameter = issueDate.HasValue ?
                new ObjectParameter("IssueDate", issueDate) :
                new ObjectParameter("IssueDate", typeof(System.DateTime));
    
            var issueLocationIDParameter = issueLocationID.HasValue ?
                new ObjectParameter("IssueLocationID", issueLocationID) :
                new ObjectParameter("IssueLocationID", typeof(int));
    
            var issuePremiseIDParameter = issuePremiseID.HasValue ?
                new ObjectParameter("IssuePremiseID", issuePremiseID) :
                new ObjectParameter("IssuePremiseID", typeof(int));
    
            var receiptLocationIDParameter = receiptLocationID.HasValue ?
                new ObjectParameter("ReceiptLocationID", receiptLocationID) :
                new ObjectParameter("ReceiptLocationID", typeof(int));
    
            var receiptPremiseIDParameter = receiptPremiseID.HasValue ?
                new ObjectParameter("ReceiptPremiseID", receiptPremiseID) :
                new ObjectParameter("ReceiptPremiseID", typeof(int));
    
            var grossAmountParameter = grossAmount.HasValue ?
                new ObjectParameter("GrossAmount", grossAmount) :
                new ObjectParameter("GrossAmount", typeof(decimal));
    
            var tradeDiscountParameter = tradeDiscount.HasValue ?
                new ObjectParameter("TradeDiscount", tradeDiscount) :
                new ObjectParameter("TradeDiscount", typeof(decimal));
    
            var taxableAmountParameter = taxableAmount.HasValue ?
                new ObjectParameter("TaxableAmount", taxableAmount) :
                new ObjectParameter("TaxableAmount", typeof(decimal));
    
            var sGSTAmountParameter = sGSTAmount.HasValue ?
                new ObjectParameter("SGSTAmount", sGSTAmount) :
                new ObjectParameter("SGSTAmount", typeof(decimal));
    
            var cGSTAmountParameter = cGSTAmount.HasValue ?
                new ObjectParameter("CGSTAmount", cGSTAmount) :
                new ObjectParameter("CGSTAmount", typeof(decimal));
    
            var iGSTAmountParameter = iGSTAmount.HasValue ?
                new ObjectParameter("IGSTAmount", iGSTAmount) :
                new ObjectParameter("IGSTAmount", typeof(decimal));
    
            var roundOffParameter = roundOff.HasValue ?
                new ObjectParameter("RoundOff", roundOff) :
                new ObjectParameter("RoundOff", typeof(decimal));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var isServiceParameter = isService.HasValue ?
                new ObjectParameter("IsService", isService) :
                new ObjectParameter("IsService", typeof(bool));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateServiceItemIssue", issueNoParameter, issueDateParameter, issueLocationIDParameter, issuePremiseIDParameter, receiptLocationIDParameter, receiptPremiseIDParameter, grossAmountParameter, tradeDiscountParameter, taxableAmountParameter, sGSTAmountParameter, cGSTAmountParameter, iGSTAmountParameter, roundOffParameter, netAmountParameter, createdUserIDParameter, isDraftParameter, isServiceParameter, finYearParameter, locationIDParameter, applicationIDParameter, stockIssueID);
        }
    
        public virtual int SpCreateServiceItemIssueTrans(Nullable<int> stockIssueID, Nullable<int> itemID, Nullable<decimal> issueQty, Nullable<decimal> rate, Nullable<decimal> basicPrice, Nullable<decimal> grossAmount, Nullable<decimal> tradeDiscountPercentage, Nullable<decimal> tradeDiscount, Nullable<decimal> taxableAmount, Nullable<decimal> sGSTPercentage, Nullable<decimal> cGSTPercentage, Nullable<decimal> iGSTPercentage, Nullable<decimal> sGSTAmount, Nullable<decimal> cGSTAmount, Nullable<decimal> iGSTAmount, Nullable<decimal> netAmount, Nullable<int> unitID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var stockIssueIDParameter = stockIssueID.HasValue ?
                new ObjectParameter("StockIssueID", stockIssueID) :
                new ObjectParameter("StockIssueID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var issueQtyParameter = issueQty.HasValue ?
                new ObjectParameter("IssueQty", issueQty) :
                new ObjectParameter("IssueQty", typeof(decimal));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var basicPriceParameter = basicPrice.HasValue ?
                new ObjectParameter("BasicPrice", basicPrice) :
                new ObjectParameter("BasicPrice", typeof(decimal));
    
            var grossAmountParameter = grossAmount.HasValue ?
                new ObjectParameter("GrossAmount", grossAmount) :
                new ObjectParameter("GrossAmount", typeof(decimal));
    
            var tradeDiscountPercentageParameter = tradeDiscountPercentage.HasValue ?
                new ObjectParameter("TradeDiscountPercentage", tradeDiscountPercentage) :
                new ObjectParameter("TradeDiscountPercentage", typeof(decimal));
    
            var tradeDiscountParameter = tradeDiscount.HasValue ?
                new ObjectParameter("TradeDiscount", tradeDiscount) :
                new ObjectParameter("TradeDiscount", typeof(decimal));
    
            var taxableAmountParameter = taxableAmount.HasValue ?
                new ObjectParameter("TaxableAmount", taxableAmount) :
                new ObjectParameter("TaxableAmount", typeof(decimal));
    
            var sGSTPercentageParameter = sGSTPercentage.HasValue ?
                new ObjectParameter("SGSTPercentage", sGSTPercentage) :
                new ObjectParameter("SGSTPercentage", typeof(decimal));
    
            var cGSTPercentageParameter = cGSTPercentage.HasValue ?
                new ObjectParameter("CGSTPercentage", cGSTPercentage) :
                new ObjectParameter("CGSTPercentage", typeof(decimal));
    
            var iGSTPercentageParameter = iGSTPercentage.HasValue ?
                new ObjectParameter("IGSTPercentage", iGSTPercentage) :
                new ObjectParameter("IGSTPercentage", typeof(decimal));
    
            var sGSTAmountParameter = sGSTAmount.HasValue ?
                new ObjectParameter("SGSTAmount", sGSTAmount) :
                new ObjectParameter("SGSTAmount", typeof(decimal));
    
            var cGSTAmountParameter = cGSTAmount.HasValue ?
                new ObjectParameter("CGSTAmount", cGSTAmount) :
                new ObjectParameter("CGSTAmount", typeof(decimal));
    
            var iGSTAmountParameter = iGSTAmount.HasValue ?
                new ObjectParameter("IGSTAmount", iGSTAmount) :
                new ObjectParameter("IGSTAmount", typeof(decimal));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateServiceItemIssueTrans", stockIssueIDParameter, itemIDParameter, issueQtyParameter, rateParameter, basicPriceParameter, grossAmountParameter, tradeDiscountPercentageParameter, tradeDiscountParameter, taxableAmountParameter, sGSTPercentageParameter, cGSTPercentageParameter, iGSTPercentageParameter, sGSTAmountParameter, cGSTAmountParameter, iGSTAmountParameter, netAmountParameter, unitIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateServiceItemReceiptTrans(Nullable<int> stockReceiptID, Nullable<int> stockIssueTransID, Nullable<int> stockIssueID, Nullable<int> receiptLocationID, Nullable<int> receiptPremisesID, Nullable<int> issueLocationID, Nullable<int> issuePremisesID, Nullable<int> itemID, Nullable<int> batchID, Nullable<int> batchTypeID, Nullable<decimal> receiptQty, Nullable<decimal> issueQty, Nullable<decimal> rate, Nullable<decimal> netAmount, Nullable<decimal> basicPrice, Nullable<decimal> grossAmount, Nullable<decimal> tradeDiscountPercentage, Nullable<decimal> tradeDiscount, Nullable<decimal> taxableAmount, Nullable<decimal> sGSTPercent, Nullable<decimal> cGSTPercent, Nullable<decimal> iGSTPercent, Nullable<decimal> sGSTAmount, Nullable<decimal> cGSTAmount, Nullable<decimal> iGSTAmount, Nullable<int> unitID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var stockReceiptIDParameter = stockReceiptID.HasValue ?
                new ObjectParameter("StockReceiptID", stockReceiptID) :
                new ObjectParameter("StockReceiptID", typeof(int));
    
            var stockIssueTransIDParameter = stockIssueTransID.HasValue ?
                new ObjectParameter("StockIssueTransID", stockIssueTransID) :
                new ObjectParameter("StockIssueTransID", typeof(int));
    
            var stockIssueIDParameter = stockIssueID.HasValue ?
                new ObjectParameter("StockIssueID", stockIssueID) :
                new ObjectParameter("StockIssueID", typeof(int));
    
            var receiptLocationIDParameter = receiptLocationID.HasValue ?
                new ObjectParameter("ReceiptLocationID", receiptLocationID) :
                new ObjectParameter("ReceiptLocationID", typeof(int));
    
            var receiptPremisesIDParameter = receiptPremisesID.HasValue ?
                new ObjectParameter("ReceiptPremisesID", receiptPremisesID) :
                new ObjectParameter("ReceiptPremisesID", typeof(int));
    
            var issueLocationIDParameter = issueLocationID.HasValue ?
                new ObjectParameter("IssueLocationID", issueLocationID) :
                new ObjectParameter("IssueLocationID", typeof(int));
    
            var issuePremisesIDParameter = issuePremisesID.HasValue ?
                new ObjectParameter("IssuePremisesID", issuePremisesID) :
                new ObjectParameter("IssuePremisesID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var receiptQtyParameter = receiptQty.HasValue ?
                new ObjectParameter("ReceiptQty", receiptQty) :
                new ObjectParameter("ReceiptQty", typeof(decimal));
    
            var issueQtyParameter = issueQty.HasValue ?
                new ObjectParameter("IssueQty", issueQty) :
                new ObjectParameter("IssueQty", typeof(decimal));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var basicPriceParameter = basicPrice.HasValue ?
                new ObjectParameter("BasicPrice", basicPrice) :
                new ObjectParameter("BasicPrice", typeof(decimal));
    
            var grossAmountParameter = grossAmount.HasValue ?
                new ObjectParameter("GrossAmount", grossAmount) :
                new ObjectParameter("GrossAmount", typeof(decimal));
    
            var tradeDiscountPercentageParameter = tradeDiscountPercentage.HasValue ?
                new ObjectParameter("TradeDiscountPercentage", tradeDiscountPercentage) :
                new ObjectParameter("TradeDiscountPercentage", typeof(decimal));
    
            var tradeDiscountParameter = tradeDiscount.HasValue ?
                new ObjectParameter("TradeDiscount", tradeDiscount) :
                new ObjectParameter("TradeDiscount", typeof(decimal));
    
            var taxableAmountParameter = taxableAmount.HasValue ?
                new ObjectParameter("TaxableAmount", taxableAmount) :
                new ObjectParameter("TaxableAmount", typeof(decimal));
    
            var sGSTPercentParameter = sGSTPercent.HasValue ?
                new ObjectParameter("SGSTPercent", sGSTPercent) :
                new ObjectParameter("SGSTPercent", typeof(decimal));
    
            var cGSTPercentParameter = cGSTPercent.HasValue ?
                new ObjectParameter("CGSTPercent", cGSTPercent) :
                new ObjectParameter("CGSTPercent", typeof(decimal));
    
            var iGSTPercentParameter = iGSTPercent.HasValue ?
                new ObjectParameter("IGSTPercent", iGSTPercent) :
                new ObjectParameter("IGSTPercent", typeof(decimal));
    
            var sGSTAmountParameter = sGSTAmount.HasValue ?
                new ObjectParameter("SGSTAmount", sGSTAmount) :
                new ObjectParameter("SGSTAmount", typeof(decimal));
    
            var cGSTAmountParameter = cGSTAmount.HasValue ?
                new ObjectParameter("CGSTAmount", cGSTAmount) :
                new ObjectParameter("CGSTAmount", typeof(decimal));
    
            var iGSTAmountParameter = iGSTAmount.HasValue ?
                new ObjectParameter("IGSTAmount", iGSTAmount) :
                new ObjectParameter("IGSTAmount", typeof(decimal));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateServiceItemReceiptTrans", stockReceiptIDParameter, stockIssueTransIDParameter, stockIssueIDParameter, receiptLocationIDParameter, receiptPremisesIDParameter, issueLocationIDParameter, issuePremisesIDParameter, itemIDParameter, batchIDParameter, batchTypeIDParameter, receiptQtyParameter, issueQtyParameter, rateParameter, netAmountParameter, basicPriceParameter, grossAmountParameter, tradeDiscountPercentageParameter, tradeDiscountParameter, taxableAmountParameter, sGSTPercentParameter, cGSTPercentParameter, iGSTPercentParameter, sGSTAmountParameter, cGSTAmountParameter, iGSTAmountParameter, unitIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateStockAdjustment(string transNo, Nullable<System.DateTime> date, Nullable<int> wareHouseID, Nullable<bool> isDraft, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter stockAdjustmentID)
        {
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateStockAdjustment", transNoParameter, dateParameter, wareHouseIDParameter, isDraftParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, stockAdjustmentID);
        }
    
        public virtual int SpCreateStockIssueTemplateItem(Nullable<int> itemID, Nullable<int> issuePremiseID, Nullable<int> batchTypeID, Nullable<decimal> issueQty, Nullable<int> unitID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var issuePremiseIDParameter = issuePremiseID.HasValue ?
                new ObjectParameter("IssuePremiseID", issuePremiseID) :
                new ObjectParameter("IssuePremiseID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var issueQtyParameter = issueQty.HasValue ?
                new ObjectParameter("IssueQty", issueQty) :
                new ObjectParameter("IssueQty", typeof(decimal));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateStockIssueTemplateItem", itemIDParameter, issuePremiseIDParameter, batchTypeIDParameter, issueQtyParameter, unitIDParameter);
        }
    
        public virtual int SpCreateStockReceipt(string receiptNo, Nullable<System.DateTime> receiptDate, Nullable<decimal> netAmount, Nullable<bool> isService, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter stockReceiptID)
        {
            var receiptNoParameter = receiptNo != null ?
                new ObjectParameter("ReceiptNo", receiptNo) :
                new ObjectParameter("ReceiptNo", typeof(string));
    
            var receiptDateParameter = receiptDate.HasValue ?
                new ObjectParameter("ReceiptDate", receiptDate) :
                new ObjectParameter("ReceiptDate", typeof(System.DateTime));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var isServiceParameter = isService.HasValue ?
                new ObjectParameter("IsService", isService) :
                new ObjectParameter("IsService", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateStockReceipt", receiptNoParameter, receiptDateParameter, netAmountParameter, isServiceParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, stockReceiptID);
        }
    
        public virtual int SpCreateStockReceiptTrans(Nullable<int> stockReceiptID, Nullable<int> stockIssueTransID, Nullable<int> stockIssueID, Nullable<int> receiptLocationID, Nullable<int> receiptPremisesID, Nullable<int> issueLocationID, Nullable<int> issuePremisesID, Nullable<int> itemID, Nullable<int> batchID, Nullable<int> batchTypeID, Nullable<decimal> receiptQty, Nullable<decimal> issueQty, Nullable<decimal> secondaryIssueQty, string secondaryUnit, Nullable<decimal> secondaryUnitSize, Nullable<decimal> secondaryReceiptQty, Nullable<decimal> rate, Nullable<decimal> netAmount, Nullable<decimal> basicPrice, Nullable<decimal> grossAmount, Nullable<decimal> tradeDiscountPercentage, Nullable<decimal> tradeDiscount, Nullable<decimal> taxableAmount, Nullable<decimal> sGSTPercent, Nullable<decimal> cGSTPercent, Nullable<decimal> iGSTPercent, Nullable<decimal> sGSTAmount, Nullable<decimal> cGSTAmount, Nullable<decimal> iGSTAmount, Nullable<int> unitID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter retValue)
        {
            var stockReceiptIDParameter = stockReceiptID.HasValue ?
                new ObjectParameter("StockReceiptID", stockReceiptID) :
                new ObjectParameter("StockReceiptID", typeof(int));
    
            var stockIssueTransIDParameter = stockIssueTransID.HasValue ?
                new ObjectParameter("StockIssueTransID", stockIssueTransID) :
                new ObjectParameter("StockIssueTransID", typeof(int));
    
            var stockIssueIDParameter = stockIssueID.HasValue ?
                new ObjectParameter("StockIssueID", stockIssueID) :
                new ObjectParameter("StockIssueID", typeof(int));
    
            var receiptLocationIDParameter = receiptLocationID.HasValue ?
                new ObjectParameter("ReceiptLocationID", receiptLocationID) :
                new ObjectParameter("ReceiptLocationID", typeof(int));
    
            var receiptPremisesIDParameter = receiptPremisesID.HasValue ?
                new ObjectParameter("ReceiptPremisesID", receiptPremisesID) :
                new ObjectParameter("ReceiptPremisesID", typeof(int));
    
            var issueLocationIDParameter = issueLocationID.HasValue ?
                new ObjectParameter("IssueLocationID", issueLocationID) :
                new ObjectParameter("IssueLocationID", typeof(int));
    
            var issuePremisesIDParameter = issuePremisesID.HasValue ?
                new ObjectParameter("IssuePremisesID", issuePremisesID) :
                new ObjectParameter("IssuePremisesID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var receiptQtyParameter = receiptQty.HasValue ?
                new ObjectParameter("ReceiptQty", receiptQty) :
                new ObjectParameter("ReceiptQty", typeof(decimal));
    
            var issueQtyParameter = issueQty.HasValue ?
                new ObjectParameter("IssueQty", issueQty) :
                new ObjectParameter("IssueQty", typeof(decimal));
    
            var secondaryIssueQtyParameter = secondaryIssueQty.HasValue ?
                new ObjectParameter("SecondaryIssueQty", secondaryIssueQty) :
                new ObjectParameter("SecondaryIssueQty", typeof(decimal));
    
            var secondaryUnitParameter = secondaryUnit != null ?
                new ObjectParameter("SecondaryUnit", secondaryUnit) :
                new ObjectParameter("SecondaryUnit", typeof(string));
    
            var secondaryUnitSizeParameter = secondaryUnitSize.HasValue ?
                new ObjectParameter("SecondaryUnitSize", secondaryUnitSize) :
                new ObjectParameter("SecondaryUnitSize", typeof(decimal));
    
            var secondaryReceiptQtyParameter = secondaryReceiptQty.HasValue ?
                new ObjectParameter("SecondaryReceiptQty", secondaryReceiptQty) :
                new ObjectParameter("SecondaryReceiptQty", typeof(decimal));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var basicPriceParameter = basicPrice.HasValue ?
                new ObjectParameter("BasicPrice", basicPrice) :
                new ObjectParameter("BasicPrice", typeof(decimal));
    
            var grossAmountParameter = grossAmount.HasValue ?
                new ObjectParameter("GrossAmount", grossAmount) :
                new ObjectParameter("GrossAmount", typeof(decimal));
    
            var tradeDiscountPercentageParameter = tradeDiscountPercentage.HasValue ?
                new ObjectParameter("TradeDiscountPercentage", tradeDiscountPercentage) :
                new ObjectParameter("TradeDiscountPercentage", typeof(decimal));
    
            var tradeDiscountParameter = tradeDiscount.HasValue ?
                new ObjectParameter("TradeDiscount", tradeDiscount) :
                new ObjectParameter("TradeDiscount", typeof(decimal));
    
            var taxableAmountParameter = taxableAmount.HasValue ?
                new ObjectParameter("TaxableAmount", taxableAmount) :
                new ObjectParameter("TaxableAmount", typeof(decimal));
    
            var sGSTPercentParameter = sGSTPercent.HasValue ?
                new ObjectParameter("SGSTPercent", sGSTPercent) :
                new ObjectParameter("SGSTPercent", typeof(decimal));
    
            var cGSTPercentParameter = cGSTPercent.HasValue ?
                new ObjectParameter("CGSTPercent", cGSTPercent) :
                new ObjectParameter("CGSTPercent", typeof(decimal));
    
            var iGSTPercentParameter = iGSTPercent.HasValue ?
                new ObjectParameter("IGSTPercent", iGSTPercent) :
                new ObjectParameter("IGSTPercent", typeof(decimal));
    
            var sGSTAmountParameter = sGSTAmount.HasValue ?
                new ObjectParameter("SGSTAmount", sGSTAmount) :
                new ObjectParameter("SGSTAmount", typeof(decimal));
    
            var cGSTAmountParameter = cGSTAmount.HasValue ?
                new ObjectParameter("CGSTAmount", cGSTAmount) :
                new ObjectParameter("CGSTAmount", typeof(decimal));
    
            var iGSTAmountParameter = iGSTAmount.HasValue ?
                new ObjectParameter("IGSTAmount", iGSTAmount) :
                new ObjectParameter("IGSTAmount", typeof(decimal));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateStockReceiptTrans", stockReceiptIDParameter, stockIssueTransIDParameter, stockIssueIDParameter, receiptLocationIDParameter, receiptPremisesIDParameter, issueLocationIDParameter, issuePremisesIDParameter, itemIDParameter, batchIDParameter, batchTypeIDParameter, receiptQtyParameter, issueQtyParameter, secondaryIssueQtyParameter, secondaryUnitParameter, secondaryUnitSizeParameter, secondaryReceiptQtyParameter, rateParameter, netAmountParameter, basicPriceParameter, grossAmountParameter, tradeDiscountPercentageParameter, tradeDiscountParameter, taxableAmountParameter, sGSTPercentParameter, cGSTPercentParameter, iGSTPercentParameter, sGSTAmountParameter, cGSTAmountParameter, iGSTAmountParameter, unitIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, retValue);
        }
    
        public virtual int SpCreateStockRequisition(string requestNO, Nullable<System.DateTime> requestedDate, Nullable<int> issueLocationID, Nullable<int> issuePremiseID, Nullable<int> receiptLocationID, Nullable<int> receiptPremiseID, Nullable<int> createdUserID, Nullable<bool> isDraft, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter stockRequisitionID)
        {
            var requestNOParameter = requestNO != null ?
                new ObjectParameter("RequestNO", requestNO) :
                new ObjectParameter("RequestNO", typeof(string));
    
            var requestedDateParameter = requestedDate.HasValue ?
                new ObjectParameter("RequestedDate", requestedDate) :
                new ObjectParameter("RequestedDate", typeof(System.DateTime));
    
            var issueLocationIDParameter = issueLocationID.HasValue ?
                new ObjectParameter("IssueLocationID", issueLocationID) :
                new ObjectParameter("IssueLocationID", typeof(int));
    
            var issuePremiseIDParameter = issuePremiseID.HasValue ?
                new ObjectParameter("IssuePremiseID", issuePremiseID) :
                new ObjectParameter("IssuePremiseID", typeof(int));
    
            var receiptLocationIDParameter = receiptLocationID.HasValue ?
                new ObjectParameter("ReceiptLocationID", receiptLocationID) :
                new ObjectParameter("ReceiptLocationID", typeof(int));
    
            var receiptPremiseIDParameter = receiptPremiseID.HasValue ?
                new ObjectParameter("ReceiptPremiseID", receiptPremiseID) :
                new ObjectParameter("ReceiptPremiseID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateStockRequisition", requestNOParameter, requestedDateParameter, issueLocationIDParameter, issuePremiseIDParameter, receiptLocationIDParameter, receiptPremiseIDParameter, createdUserIDParameter, isDraftParameter, finYearParameter, locationIDParameter, applicationIDParameter, stockRequisitionID);
        }
    
        public virtual int SpCreateStockRequisitionTrans(Nullable<int> stockRequisitionID, Nullable<int> itemID, Nullable<decimal> requiredQty, Nullable<System.DateTime> requiredDate, Nullable<System.DateTime> requiredTime, string remarks, Nullable<int> batchTypeID, Nullable<decimal> stock, Nullable<decimal> averageSales, Nullable<decimal> suggestedQty, Nullable<int> unitID, string secondaryUnit, Nullable<decimal> secondaryUnitSize, Nullable<decimal> secondaryQty, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var stockRequisitionIDParameter = stockRequisitionID.HasValue ?
                new ObjectParameter("StockRequisitionID", stockRequisitionID) :
                new ObjectParameter("StockRequisitionID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var requiredQtyParameter = requiredQty.HasValue ?
                new ObjectParameter("RequiredQty", requiredQty) :
                new ObjectParameter("RequiredQty", typeof(decimal));
    
            var requiredDateParameter = requiredDate.HasValue ?
                new ObjectParameter("RequiredDate", requiredDate) :
                new ObjectParameter("RequiredDate", typeof(System.DateTime));
    
            var requiredTimeParameter = requiredTime.HasValue ?
                new ObjectParameter("RequiredTime", requiredTime) :
                new ObjectParameter("RequiredTime", typeof(System.DateTime));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var stockParameter = stock.HasValue ?
                new ObjectParameter("Stock", stock) :
                new ObjectParameter("Stock", typeof(decimal));
    
            var averageSalesParameter = averageSales.HasValue ?
                new ObjectParameter("AverageSales", averageSales) :
                new ObjectParameter("AverageSales", typeof(decimal));
    
            var suggestedQtyParameter = suggestedQty.HasValue ?
                new ObjectParameter("SuggestedQty", suggestedQty) :
                new ObjectParameter("SuggestedQty", typeof(decimal));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var secondaryUnitParameter = secondaryUnit != null ?
                new ObjectParameter("SecondaryUnit", secondaryUnit) :
                new ObjectParameter("SecondaryUnit", typeof(string));
    
            var secondaryUnitSizeParameter = secondaryUnitSize.HasValue ?
                new ObjectParameter("SecondaryUnitSize", secondaryUnitSize) :
                new ObjectParameter("SecondaryUnitSize", typeof(decimal));
    
            var secondaryQtyParameter = secondaryQty.HasValue ?
                new ObjectParameter("SecondaryQty", secondaryQty) :
                new ObjectParameter("SecondaryQty", typeof(decimal));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateStockRequisitionTrans", stockRequisitionIDParameter, itemIDParameter, requiredQtyParameter, requiredDateParameter, requiredTimeParameter, remarksParameter, batchTypeIDParameter, stockParameter, averageSalesParameter, suggestedQtyParameter, unitIDParameter, secondaryUnitParameter, secondaryUnitSizeParameter, secondaryQtyParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetAvailableBatchesForStockIssue_Result> SpGetAvailableBatchesForStockIssue(Nullable<int> itemID, Nullable<decimal> requiredQty, Nullable<int> stockIssueID, Nullable<int> warehouseID, string requestTransIDs, Nullable<int> batchTypeID, Nullable<int> unitID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var requiredQtyParameter = requiredQty.HasValue ?
                new ObjectParameter("RequiredQty", requiredQty) :
                new ObjectParameter("RequiredQty", typeof(decimal));
    
            var stockIssueIDParameter = stockIssueID.HasValue ?
                new ObjectParameter("StockIssueID", stockIssueID) :
                new ObjectParameter("StockIssueID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var requestTransIDsParameter = requestTransIDs != null ?
                new ObjectParameter("RequestTransIDs", requestTransIDs) :
                new ObjectParameter("RequestTransIDs", typeof(string));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAvailableBatchesForStockIssue_Result>("SpGetAvailableBatchesForStockIssue", itemIDParameter, requiredQtyParameter, stockIssueIDParameter, warehouseIDParameter, requestTransIDsParameter, batchTypeIDParameter, unitIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetDamageEntry_Result> SpGetDamageEntry(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDamageEntry_Result>("SpGetDamageEntry", finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetDamageEntryDetail_Result> SpGetDamageEntryDetail(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDamageEntryDetail_Result>("SpGetDamageEntryDetail", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetDamageEntryItem_Result> SpGetDamageEntryItem(Nullable<int> warehouseID, Nullable<int> categoryID, Nullable<int> itemID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDamageEntryItem_Result>("SpGetDamageEntryItem", warehouseIDParameter, categoryIDParameter, itemIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetDamageEntryTrans_Result> SpGetDamageEntryTrans(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDamageEntryTrans_Result>("SpGetDamageEntryTrans", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetItemStockValueList_Result> SpGetItemStockValueList(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetItemStockValueList_Result>("SpGetItemStockValueList", finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetMaterialRequirmentPlanList_Result> SpGetMaterialRequirmentPlanList(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetMaterialRequirmentPlanList_Result>("SpGetMaterialRequirmentPlanList", fromDateParameter, toDateParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetOpeningStock_Result> SpGetOpeningStock(Nullable<int> openingStockID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var openingStockIDParameter = openingStockID.HasValue ?
                new ObjectParameter("OpeningStockID", openingStockID) :
                new ObjectParameter("OpeningStockID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetOpeningStock_Result>("SpGetOpeningStock", openingStockIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetOpeningStockItemDetails_Result> SpGetOpeningStockItemDetails(Nullable<int> openingStockID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var openingStockIDParameter = openingStockID.HasValue ?
                new ObjectParameter("OpeningStockID", openingStockID) :
                new ObjectParameter("OpeningStockID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetOpeningStockItemDetails_Result>("SpGetOpeningStockItemDetails", openingStockIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetRateAdjustment_Result> SpGetRateAdjustment(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetRateAdjustment_Result>("SpGetRateAdjustment", finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetRateAdjustmentDetail_Result> SpGetRateAdjustmentDetail(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetRateAdjustmentDetail_Result>("SpGetRateAdjustmentDetail", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetRateAdjustmentItemForRateAdjustment_Result> SpGetRateAdjustmentItemForRateAdjustment(Nullable<int> categoryID, Nullable<int> itemID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetRateAdjustmentItemForRateAdjustment_Result>("SpGetRateAdjustmentItemForRateAdjustment", categoryIDParameter, itemIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetRateAdjustmentTrans_Result> SpGetRateAdjustmentTrans(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetRateAdjustmentTrans_Result>("SpGetRateAdjustmentTrans", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetServiceItemIssueList_Result> SpGetServiceItemIssueList(string type, string transNoHint, string transDateHint, string issueLocationHint, string issuePremiseHint, string receiptLocationHint, string receiptPremiseHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var transNoHintParameter = transNoHint != null ?
                new ObjectParameter("TransNoHint", transNoHint) :
                new ObjectParameter("TransNoHint", typeof(string));
    
            var transDateHintParameter = transDateHint != null ?
                new ObjectParameter("TransDateHint", transDateHint) :
                new ObjectParameter("TransDateHint", typeof(string));
    
            var issueLocationHintParameter = issueLocationHint != null ?
                new ObjectParameter("IssueLocationHint", issueLocationHint) :
                new ObjectParameter("IssueLocationHint", typeof(string));
    
            var issuePremiseHintParameter = issuePremiseHint != null ?
                new ObjectParameter("IssuePremiseHint", issuePremiseHint) :
                new ObjectParameter("IssuePremiseHint", typeof(string));
    
            var receiptLocationHintParameter = receiptLocationHint != null ?
                new ObjectParameter("ReceiptLocationHint", receiptLocationHint) :
                new ObjectParameter("ReceiptLocationHint", typeof(string));
    
            var receiptPremiseHintParameter = receiptPremiseHint != null ?
                new ObjectParameter("ReceiptPremiseHint", receiptPremiseHint) :
                new ObjectParameter("ReceiptPremiseHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetServiceItemIssueList_Result>("SpGetServiceItemIssueList", typeParameter, transNoHintParameter, transDateHintParameter, issueLocationHintParameter, issuePremiseHintParameter, receiptLocationHintParameter, receiptPremiseHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<spGetServiceItemReceiptDetail_Result> spGetServiceItemReceiptDetail(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetServiceItemReceiptDetail_Result>("spGetServiceItemReceiptDetail", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetServiceItemReceiptList_Result> SpGetServiceItemReceiptList(string transNoHint, string transDateHint, string issueLocationHint, string issuePremiseHint, string receiptLocationHint, string receiptPremiseHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var transNoHintParameter = transNoHint != null ?
                new ObjectParameter("TransNoHint", transNoHint) :
                new ObjectParameter("TransNoHint", typeof(string));
    
            var transDateHintParameter = transDateHint != null ?
                new ObjectParameter("TransDateHint", transDateHint) :
                new ObjectParameter("TransDateHint", typeof(string));
    
            var issueLocationHintParameter = issueLocationHint != null ?
                new ObjectParameter("IssueLocationHint", issueLocationHint) :
                new ObjectParameter("IssueLocationHint", typeof(string));
    
            var issuePremiseHintParameter = issuePremiseHint != null ?
                new ObjectParameter("IssuePremiseHint", issuePremiseHint) :
                new ObjectParameter("IssuePremiseHint", typeof(string));
    
            var receiptLocationHintParameter = receiptLocationHint != null ?
                new ObjectParameter("ReceiptLocationHint", receiptLocationHint) :
                new ObjectParameter("ReceiptLocationHint", typeof(string));
    
            var receiptPremiseHintParameter = receiptPremiseHint != null ?
                new ObjectParameter("ReceiptPremiseHint", receiptPremiseHint) :
                new ObjectParameter("ReceiptPremiseHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetServiceItemReceiptList_Result>("SpGetServiceItemReceiptList", transNoHintParameter, transDateHintParameter, issueLocationHintParameter, issuePremiseHintParameter, receiptLocationHintParameter, receiptPremiseHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetServiceItemReceiptTrans_Result> SpGetServiceItemReceiptTrans(Nullable<int> stockReceiptID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var stockReceiptIDParameter = stockReceiptID.HasValue ?
                new ObjectParameter("StockReceiptID", stockReceiptID) :
                new ObjectParameter("StockReceiptID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetServiceItemReceiptTrans_Result>("SpGetServiceItemReceiptTrans", stockReceiptIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetStockAdjustment_Result> SpGetStockAdjustment(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetStockAdjustment_Result>("SpGetStockAdjustment", finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetStockAdjustmentDetail_Result> SpGetStockAdjustmentDetail(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetStockAdjustmentDetail_Result>("SpGetStockAdjustmentDetail", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetStockAdjustmentItems_Result> SpGetStockAdjustmentItems(string items, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemsParameter = items != null ?
                new ObjectParameter("Items", items) :
                new ObjectParameter("Items", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetStockAdjustmentItems_Result>("SpGetStockAdjustmentItems", itemsParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<spGetStockIssue_Result> spGetStockIssue(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetStockIssue_Result>("spGetStockIssue", finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetStockIssueCdeAutoComplete_Result> SpGetStockIssueCdeAutoComplete(string codeHint, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetStockIssueCdeAutoComplete_Result>("SpGetStockIssueCdeAutoComplete", codeHintParameter, fromDateParameter, toDateParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetStockIssueList_Result> SpGetStockIssueList(string type, string transNoHint, string transDateHint, string issueLocationHint, string issuePremiseHint, string receiptLocationHint, string receiptPremiseHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var transNoHintParameter = transNoHint != null ?
                new ObjectParameter("TransNoHint", transNoHint) :
                new ObjectParameter("TransNoHint", typeof(string));
    
            var transDateHintParameter = transDateHint != null ?
                new ObjectParameter("TransDateHint", transDateHint) :
                new ObjectParameter("TransDateHint", typeof(string));
    
            var issueLocationHintParameter = issueLocationHint != null ?
                new ObjectParameter("IssueLocationHint", issueLocationHint) :
                new ObjectParameter("IssueLocationHint", typeof(string));
    
            var issuePremiseHintParameter = issuePremiseHint != null ?
                new ObjectParameter("IssuePremiseHint", issuePremiseHint) :
                new ObjectParameter("IssuePremiseHint", typeof(string));
    
            var receiptLocationHintParameter = receiptLocationHint != null ?
                new ObjectParameter("ReceiptLocationHint", receiptLocationHint) :
                new ObjectParameter("ReceiptLocationHint", typeof(string));
    
            var receiptPremiseHintParameter = receiptPremiseHint != null ?
                new ObjectParameter("ReceiptPremiseHint", receiptPremiseHint) :
                new ObjectParameter("ReceiptPremiseHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetStockIssueList_Result>("SpGetStockIssueList", typeParameter, transNoHintParameter, transDateHintParameter, issueLocationHintParameter, issuePremiseHintParameter, receiptLocationHintParameter, receiptPremiseHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<spGetStockReceipt_Result> spGetStockReceipt(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetStockReceipt_Result>("spGetStockReceipt", finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<spGetStockReceiptDetail_Result> spGetStockReceiptDetail(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetStockReceiptDetail_Result>("spGetStockReceiptDetail", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetStockReceiptList_Result> SpGetStockReceiptList(string transNoHint, string transDateHint, string issueLocationHint, string issuePremiseHint, string receiptLocationHint, string receiptPremiseHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var transNoHintParameter = transNoHint != null ?
                new ObjectParameter("TransNoHint", transNoHint) :
                new ObjectParameter("TransNoHint", typeof(string));
    
            var transDateHintParameter = transDateHint != null ?
                new ObjectParameter("TransDateHint", transDateHint) :
                new ObjectParameter("TransDateHint", typeof(string));
    
            var issueLocationHintParameter = issueLocationHint != null ?
                new ObjectParameter("IssueLocationHint", issueLocationHint) :
                new ObjectParameter("IssueLocationHint", typeof(string));
    
            var issuePremiseHintParameter = issuePremiseHint != null ?
                new ObjectParameter("IssuePremiseHint", issuePremiseHint) :
                new ObjectParameter("IssuePremiseHint", typeof(string));
    
            var receiptLocationHintParameter = receiptLocationHint != null ?
                new ObjectParameter("ReceiptLocationHint", receiptLocationHint) :
                new ObjectParameter("ReceiptLocationHint", typeof(string));
    
            var receiptPremiseHintParameter = receiptPremiseHint != null ?
                new ObjectParameter("ReceiptPremiseHint", receiptPremiseHint) :
                new ObjectParameter("ReceiptPremiseHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetStockReceiptList_Result>("SpGetStockReceiptList", transNoHintParameter, transDateHintParameter, issueLocationHintParameter, issuePremiseHintParameter, receiptLocationHintParameter, receiptPremiseHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<spGetStockRequisition_Result> spGetStockRequisition(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetStockRequisition_Result>("spGetStockRequisition", finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetStockRequisitionItemForStockIssue_Result> SpGetStockRequisitionItemForStockIssue(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetStockRequisitionItemForStockIssue_Result>("SpGetStockRequisitionItemForStockIssue", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetStockRequisitionList_Result> SpGetStockRequisitionList(string type, string transNoHint, string transDateHint, string issueLocationHint, string issuePremiseHint, string receiptLocationHint, string receiptPremiseHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var transNoHintParameter = transNoHint != null ?
                new ObjectParameter("TransNoHint", transNoHint) :
                new ObjectParameter("TransNoHint", typeof(string));
    
            var transDateHintParameter = transDateHint != null ?
                new ObjectParameter("TransDateHint", transDateHint) :
                new ObjectParameter("TransDateHint", typeof(string));
    
            var issueLocationHintParameter = issueLocationHint != null ?
                new ObjectParameter("IssueLocationHint", issueLocationHint) :
                new ObjectParameter("IssueLocationHint", typeof(string));
    
            var issuePremiseHintParameter = issuePremiseHint != null ?
                new ObjectParameter("IssuePremiseHint", issuePremiseHint) :
                new ObjectParameter("IssuePremiseHint", typeof(string));
    
            var receiptLocationHintParameter = receiptLocationHint != null ?
                new ObjectParameter("ReceiptLocationHint", receiptLocationHint) :
                new ObjectParameter("ReceiptLocationHint", typeof(string));
    
            var receiptPremiseHintParameter = receiptPremiseHint != null ?
                new ObjectParameter("ReceiptPremiseHint", receiptPremiseHint) :
                new ObjectParameter("ReceiptPremiseHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetStockRequisitionList_Result>("SpGetStockRequisitionList", typeParameter, transNoHintParameter, transDateHintParameter, issueLocationHintParameter, issuePremiseHintParameter, receiptLocationHintParameter, receiptPremiseHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetStockValueList_Result> SpGetStockValueList(string nameHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetStockValueList_Result>("SpGetStockValueList", nameHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpGetTradeDiscountPercent(Nullable<int> applicationID, ObjectParameter tradeDiscountPercent)
        {
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetTradeDiscountPercent", applicationIDParameter, tradeDiscountPercent);
        }
    
        public virtual ObjectResult<SpGetUnprocessedServiceItemIssue_Result> SpGetUnprocessedServiceItemIssue(Nullable<int> issueLocationID, Nullable<int> issuePremisesID, Nullable<int> receiptLocationID, Nullable<int> receiptPremisesID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var issueLocationIDParameter = issueLocationID.HasValue ?
                new ObjectParameter("IssueLocationID", issueLocationID) :
                new ObjectParameter("IssueLocationID", typeof(int));
    
            var issuePremisesIDParameter = issuePremisesID.HasValue ?
                new ObjectParameter("IssuePremisesID", issuePremisesID) :
                new ObjectParameter("IssuePremisesID", typeof(int));
    
            var receiptLocationIDParameter = receiptLocationID.HasValue ?
                new ObjectParameter("ReceiptLocationID", receiptLocationID) :
                new ObjectParameter("ReceiptLocationID", typeof(int));
    
            var receiptPremisesIDParameter = receiptPremisesID.HasValue ?
                new ObjectParameter("ReceiptPremisesID", receiptPremisesID) :
                new ObjectParameter("ReceiptPremisesID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetUnprocessedServiceItemIssue_Result>("SpGetUnprocessedServiceItemIssue", issueLocationIDParameter, issuePremisesIDParameter, receiptLocationIDParameter, receiptPremisesIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetUnprocessedStockIssue_Result> SpGetUnprocessedStockIssue(Nullable<int> issueLocationID, Nullable<int> issuePremisesID, Nullable<int> receiptLocationID, Nullable<int> receiptPremisesID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var issueLocationIDParameter = issueLocationID.HasValue ?
                new ObjectParameter("IssueLocationID", issueLocationID) :
                new ObjectParameter("IssueLocationID", typeof(int));
    
            var issuePremisesIDParameter = issuePremisesID.HasValue ?
                new ObjectParameter("IssuePremisesID", issuePremisesID) :
                new ObjectParameter("IssuePremisesID", typeof(int));
    
            var receiptLocationIDParameter = receiptLocationID.HasValue ?
                new ObjectParameter("ReceiptLocationID", receiptLocationID) :
                new ObjectParameter("ReceiptLocationID", typeof(int));
    
            var receiptPremisesIDParameter = receiptPremisesID.HasValue ?
                new ObjectParameter("ReceiptPremisesID", receiptPremisesID) :
                new ObjectParameter("ReceiptPremisesID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetUnprocessedStockIssue_Result>("SpGetUnprocessedStockIssue", issueLocationIDParameter, issuePremisesIDParameter, receiptLocationIDParameter, receiptPremisesIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetUnProcessedStockRequisition_Result> SpGetUnProcessedStockRequisition(Nullable<int> issueLocationID, Nullable<int> issuePremiseID, Nullable<int> receiptLocationID, Nullable<int> receiptPremiseID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var issueLocationIDParameter = issueLocationID.HasValue ?
                new ObjectParameter("IssueLocationID", issueLocationID) :
                new ObjectParameter("IssueLocationID", typeof(int));
    
            var issuePremiseIDParameter = issuePremiseID.HasValue ?
                new ObjectParameter("IssuePremiseID", issuePremiseID) :
                new ObjectParameter("IssuePremiseID", typeof(int));
    
            var receiptLocationIDParameter = receiptLocationID.HasValue ?
                new ObjectParameter("ReceiptLocationID", receiptLocationID) :
                new ObjectParameter("ReceiptLocationID", typeof(int));
    
            var receiptPremiseIDParameter = receiptPremiseID.HasValue ?
                new ObjectParameter("ReceiptPremiseID", receiptPremiseID) :
                new ObjectParameter("ReceiptPremiseID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetUnProcessedStockRequisition_Result>("SpGetUnProcessedStockRequisition", issueLocationIDParameter, issuePremiseIDParameter, receiptLocationIDParameter, receiptPremiseIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpIsServiceOrStockIssue(Nullable<int> iD, string type, Nullable<int> applicationID, ObjectParameter returnValue)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpIsServiceOrStockIssue", iDParameter, typeParameter, applicationIDParameter, returnValue);
        }
    
        public virtual int SpIsServiceOrStockReceipt(Nullable<int> iD, string type, Nullable<int> applicationID, ObjectParameter returnValue)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpIsServiceOrStockReceipt", iDParameter, typeParameter, applicationIDParameter, returnValue);
        }
    
        public virtual ObjectResult<SpOpeningStockDetails_Result> SpOpeningStockDetails(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpOpeningStockDetails_Result>("SpOpeningStockDetails", finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpStartCostingActivities(Nullable<System.DateTime> date, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpStartCostingActivities", dateParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateDamageEntry(Nullable<int> iD, Nullable<System.DateTime> date, Nullable<int> wareHouseID, Nullable<bool> isDraft, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateDamageEntry", iDParameter, dateParameter, wareHouseIDParameter, isDraftParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateOpeningStock(Nullable<int> iD, string openingStockNo, Nullable<System.DateTime> date, Nullable<bool> isDraft, Nullable<int> storeID, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var openingStockNoParameter = openingStockNo != null ?
                new ObjectParameter("OpeningStockNo", openingStockNo) :
                new ObjectParameter("OpeningStockNo", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("storeID", storeID) :
                new ObjectParameter("storeID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateOpeningStock", iDParameter, openingStockNoParameter, dateParameter, isDraftParameter, storeIDParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateRateAdjustment(Nullable<int> iD, Nullable<System.DateTime> date, Nullable<bool> isDraft, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateRateAdjustment", iDParameter, dateParameter, isDraftParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateServiceItemIssue(Nullable<int> iD, Nullable<System.DateTime> issueDate, Nullable<int> issueLocationID, Nullable<int> issuePremiseID, Nullable<int> receiptLocationID, Nullable<int> receiptPremiseID, Nullable<decimal> grossAmount, Nullable<decimal> tradeDiscount, Nullable<decimal> taxableAmount, Nullable<decimal> sGSTAmount, Nullable<decimal> cGSTAmount, Nullable<decimal> iGSTAmount, Nullable<decimal> roundOff, Nullable<decimal> netAmount, Nullable<int> createdUserID, Nullable<bool> isDraft, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var issueDateParameter = issueDate.HasValue ?
                new ObjectParameter("IssueDate", issueDate) :
                new ObjectParameter("IssueDate", typeof(System.DateTime));
    
            var issueLocationIDParameter = issueLocationID.HasValue ?
                new ObjectParameter("IssueLocationID", issueLocationID) :
                new ObjectParameter("IssueLocationID", typeof(int));
    
            var issuePremiseIDParameter = issuePremiseID.HasValue ?
                new ObjectParameter("IssuePremiseID", issuePremiseID) :
                new ObjectParameter("IssuePremiseID", typeof(int));
    
            var receiptLocationIDParameter = receiptLocationID.HasValue ?
                new ObjectParameter("ReceiptLocationID", receiptLocationID) :
                new ObjectParameter("ReceiptLocationID", typeof(int));
    
            var receiptPremiseIDParameter = receiptPremiseID.HasValue ?
                new ObjectParameter("ReceiptPremiseID", receiptPremiseID) :
                new ObjectParameter("ReceiptPremiseID", typeof(int));
    
            var grossAmountParameter = grossAmount.HasValue ?
                new ObjectParameter("GrossAmount", grossAmount) :
                new ObjectParameter("GrossAmount", typeof(decimal));
    
            var tradeDiscountParameter = tradeDiscount.HasValue ?
                new ObjectParameter("TradeDiscount", tradeDiscount) :
                new ObjectParameter("TradeDiscount", typeof(decimal));
    
            var taxableAmountParameter = taxableAmount.HasValue ?
                new ObjectParameter("TaxableAmount", taxableAmount) :
                new ObjectParameter("TaxableAmount", typeof(decimal));
    
            var sGSTAmountParameter = sGSTAmount.HasValue ?
                new ObjectParameter("SGSTAmount", sGSTAmount) :
                new ObjectParameter("SGSTAmount", typeof(decimal));
    
            var cGSTAmountParameter = cGSTAmount.HasValue ?
                new ObjectParameter("CGSTAmount", cGSTAmount) :
                new ObjectParameter("CGSTAmount", typeof(decimal));
    
            var iGSTAmountParameter = iGSTAmount.HasValue ?
                new ObjectParameter("IGSTAmount", iGSTAmount) :
                new ObjectParameter("IGSTAmount", typeof(decimal));
    
            var roundOffParameter = roundOff.HasValue ?
                new ObjectParameter("RoundOff", roundOff) :
                new ObjectParameter("RoundOff", typeof(decimal));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateServiceItemIssue", iDParameter, issueDateParameter, issueLocationIDParameter, issuePremiseIDParameter, receiptLocationIDParameter, receiptPremiseIDParameter, grossAmountParameter, tradeDiscountParameter, taxableAmountParameter, sGSTAmountParameter, cGSTAmountParameter, iGSTAmountParameter, roundOffParameter, netAmountParameter, createdUserIDParameter, isDraftParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateStockAdjustment(Nullable<int> iD, Nullable<System.DateTime> date, Nullable<int> wareHouseID, Nullable<bool> isDraft, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateStockAdjustment", iDParameter, dateParameter, wareHouseIDParameter, isDraftParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateStockIssue(Nullable<int> iD, Nullable<System.DateTime> issueDate, string requestNo, Nullable<int> issueLocationID, Nullable<int> issuePremiseID, Nullable<int> receiptLocationID, Nullable<int> receiptPremiseID, Nullable<decimal> grossAmount, Nullable<decimal> tradeDiscount, Nullable<decimal> taxableAmount, Nullable<decimal> sGSTAmount, Nullable<decimal> cGSTAmount, Nullable<decimal> iGSTAmount, Nullable<decimal> roundOff, Nullable<decimal> netAmount, string remark, Nullable<int> createdUserID, Nullable<bool> isDraft, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var issueDateParameter = issueDate.HasValue ?
                new ObjectParameter("IssueDate", issueDate) :
                new ObjectParameter("IssueDate", typeof(System.DateTime));
    
            var requestNoParameter = requestNo != null ?
                new ObjectParameter("RequestNo", requestNo) :
                new ObjectParameter("RequestNo", typeof(string));
    
            var issueLocationIDParameter = issueLocationID.HasValue ?
                new ObjectParameter("IssueLocationID", issueLocationID) :
                new ObjectParameter("IssueLocationID", typeof(int));
    
            var issuePremiseIDParameter = issuePremiseID.HasValue ?
                new ObjectParameter("IssuePremiseID", issuePremiseID) :
                new ObjectParameter("IssuePremiseID", typeof(int));
    
            var receiptLocationIDParameter = receiptLocationID.HasValue ?
                new ObjectParameter("ReceiptLocationID", receiptLocationID) :
                new ObjectParameter("ReceiptLocationID", typeof(int));
    
            var receiptPremiseIDParameter = receiptPremiseID.HasValue ?
                new ObjectParameter("ReceiptPremiseID", receiptPremiseID) :
                new ObjectParameter("ReceiptPremiseID", typeof(int));
    
            var grossAmountParameter = grossAmount.HasValue ?
                new ObjectParameter("GrossAmount", grossAmount) :
                new ObjectParameter("GrossAmount", typeof(decimal));
    
            var tradeDiscountParameter = tradeDiscount.HasValue ?
                new ObjectParameter("TradeDiscount", tradeDiscount) :
                new ObjectParameter("TradeDiscount", typeof(decimal));
    
            var taxableAmountParameter = taxableAmount.HasValue ?
                new ObjectParameter("TaxableAmount", taxableAmount) :
                new ObjectParameter("TaxableAmount", typeof(decimal));
    
            var sGSTAmountParameter = sGSTAmount.HasValue ?
                new ObjectParameter("SGSTAmount", sGSTAmount) :
                new ObjectParameter("SGSTAmount", typeof(decimal));
    
            var cGSTAmountParameter = cGSTAmount.HasValue ?
                new ObjectParameter("CGSTAmount", cGSTAmount) :
                new ObjectParameter("CGSTAmount", typeof(decimal));
    
            var iGSTAmountParameter = iGSTAmount.HasValue ?
                new ObjectParameter("IGSTAmount", iGSTAmount) :
                new ObjectParameter("IGSTAmount", typeof(decimal));
    
            var roundOffParameter = roundOff.HasValue ?
                new ObjectParameter("RoundOff", roundOff) :
                new ObjectParameter("RoundOff", typeof(decimal));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateStockIssue", iDParameter, issueDateParameter, requestNoParameter, issueLocationIDParameter, issuePremiseIDParameter, receiptLocationIDParameter, receiptPremiseIDParameter, grossAmountParameter, tradeDiscountParameter, taxableAmountParameter, sGSTAmountParameter, cGSTAmountParameter, iGSTAmountParameter, roundOffParameter, netAmountParameter, remarkParameter, createdUserIDParameter, isDraftParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateStockRequisition(Nullable<int> iD, Nullable<System.DateTime> requestedDate, Nullable<int> issueLocationID, Nullable<int> issuePremiseID, Nullable<int> receiptLocationID, Nullable<int> receiptPremiseID, Nullable<int> createdUserID, Nullable<bool> isDraft, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var requestedDateParameter = requestedDate.HasValue ?
                new ObjectParameter("RequestedDate", requestedDate) :
                new ObjectParameter("RequestedDate", typeof(System.DateTime));
    
            var issueLocationIDParameter = issueLocationID.HasValue ?
                new ObjectParameter("IssueLocationID", issueLocationID) :
                new ObjectParameter("IssueLocationID", typeof(int));
    
            var issuePremiseIDParameter = issuePremiseID.HasValue ?
                new ObjectParameter("IssuePremiseID", issuePremiseID) :
                new ObjectParameter("IssuePremiseID", typeof(int));
    
            var receiptLocationIDParameter = receiptLocationID.HasValue ?
                new ObjectParameter("ReceiptLocationID", receiptLocationID) :
                new ObjectParameter("ReceiptLocationID", typeof(int));
    
            var receiptPremiseIDParameter = receiptPremiseID.HasValue ?
                new ObjectParameter("ReceiptPremiseID", receiptPremiseID) :
                new ObjectParameter("ReceiptPremiseID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateStockRequisition", iDParameter, requestedDateParameter, issueLocationIDParameter, issuePremiseIDParameter, receiptLocationIDParameter, receiptPremiseIDParameter, createdUserIDParameter, isDraftParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetStockAdjustmentTrans_Result> SpGetStockAdjustmentTrans(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetStockAdjustmentTrans_Result>("SpGetStockAdjustmentTrans", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateOpeningStock(string openingStockNo, Nullable<System.DateTime> date, Nullable<bool> isDraft, Nullable<int> storeID, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter openingStockID)
        {
            var openingStockNoParameter = openingStockNo != null ?
                new ObjectParameter("OpeningStockNo", openingStockNo) :
                new ObjectParameter("OpeningStockNo", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("storeID", storeID) :
                new ObjectParameter("storeID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateOpeningStock", openingStockNoParameter, dateParameter, isDraftParameter, storeIDParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, openingStockID);
        }
    
        public virtual ObjectResult<spGetStockRequisitionDetail_Result> spGetStockRequisitionDetail(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetStockRequisitionDetail_Result>("spGetStockRequisitionDetail", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateStockIssue(string issueNo, Nullable<System.DateTime> issueDate, string requestNo, Nullable<int> issueLocationID, Nullable<int> issuePremiseID, Nullable<int> receiptLocationID, Nullable<int> receiptPremiseID, Nullable<decimal> grossAmount, Nullable<decimal> tradeDiscount, Nullable<decimal> taxableAmount, Nullable<decimal> sGSTAmount, Nullable<decimal> cGSTAmount, Nullable<decimal> iGSTAmount, Nullable<decimal> roundOff, Nullable<decimal> netAmount, string remark, Nullable<int> createdUserID, Nullable<bool> isDraft, Nullable<bool> isService, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter stockIssueID)
        {
            var issueNoParameter = issueNo != null ?
                new ObjectParameter("IssueNo", issueNo) :
                new ObjectParameter("IssueNo", typeof(string));
    
            var issueDateParameter = issueDate.HasValue ?
                new ObjectParameter("IssueDate", issueDate) :
                new ObjectParameter("IssueDate", typeof(System.DateTime));
    
            var requestNoParameter = requestNo != null ?
                new ObjectParameter("RequestNo", requestNo) :
                new ObjectParameter("RequestNo", typeof(string));
    
            var issueLocationIDParameter = issueLocationID.HasValue ?
                new ObjectParameter("IssueLocationID", issueLocationID) :
                new ObjectParameter("IssueLocationID", typeof(int));
    
            var issuePremiseIDParameter = issuePremiseID.HasValue ?
                new ObjectParameter("IssuePremiseID", issuePremiseID) :
                new ObjectParameter("IssuePremiseID", typeof(int));
    
            var receiptLocationIDParameter = receiptLocationID.HasValue ?
                new ObjectParameter("ReceiptLocationID", receiptLocationID) :
                new ObjectParameter("ReceiptLocationID", typeof(int));
    
            var receiptPremiseIDParameter = receiptPremiseID.HasValue ?
                new ObjectParameter("ReceiptPremiseID", receiptPremiseID) :
                new ObjectParameter("ReceiptPremiseID", typeof(int));
    
            var grossAmountParameter = grossAmount.HasValue ?
                new ObjectParameter("GrossAmount", grossAmount) :
                new ObjectParameter("GrossAmount", typeof(decimal));
    
            var tradeDiscountParameter = tradeDiscount.HasValue ?
                new ObjectParameter("TradeDiscount", tradeDiscount) :
                new ObjectParameter("TradeDiscount", typeof(decimal));
    
            var taxableAmountParameter = taxableAmount.HasValue ?
                new ObjectParameter("TaxableAmount", taxableAmount) :
                new ObjectParameter("TaxableAmount", typeof(decimal));
    
            var sGSTAmountParameter = sGSTAmount.HasValue ?
                new ObjectParameter("SGSTAmount", sGSTAmount) :
                new ObjectParameter("SGSTAmount", typeof(decimal));
    
            var cGSTAmountParameter = cGSTAmount.HasValue ?
                new ObjectParameter("CGSTAmount", cGSTAmount) :
                new ObjectParameter("CGSTAmount", typeof(decimal));
    
            var iGSTAmountParameter = iGSTAmount.HasValue ?
                new ObjectParameter("IGSTAmount", iGSTAmount) :
                new ObjectParameter("IGSTAmount", typeof(decimal));
    
            var roundOffParameter = roundOff.HasValue ?
                new ObjectParameter("RoundOff", roundOff) :
                new ObjectParameter("RoundOff", typeof(decimal));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var isServiceParameter = isService.HasValue ?
                new ObjectParameter("IsService", isService) :
                new ObjectParameter("IsService", typeof(bool));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateStockIssue", issueNoParameter, issueDateParameter, requestNoParameter, issueLocationIDParameter, issuePremiseIDParameter, receiptLocationIDParameter, receiptPremiseIDParameter, grossAmountParameter, tradeDiscountParameter, taxableAmountParameter, sGSTAmountParameter, cGSTAmountParameter, iGSTAmountParameter, roundOffParameter, netAmountParameter, remarkParameter, createdUserIDParameter, isDraftParameter, isServiceParameter, finYearParameter, locationIDParameter, applicationIDParameter, stockIssueID);
        }
    
        public virtual int SpCreatePackingDetails(Nullable<int> refID, string type, string packSize, Nullable<int> unitID, Nullable<decimal> quantity, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var refIDParameter = refID.HasValue ?
                new ObjectParameter("RefID", refID) :
                new ObjectParameter("RefID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var packSizeParameter = packSize != null ?
                new ObjectParameter("PackSize", packSize) :
                new ObjectParameter("PackSize", typeof(string));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePackingDetails", refIDParameter, typeParameter, packSizeParameter, unitIDParameter, quantityParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPackingDetails_Result> SpGetPackingDetails(Nullable<int> referenceID, string type, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var referenceIDParameter = referenceID.HasValue ?
                new ObjectParameter("ReferenceID", referenceID) :
                new ObjectParameter("ReferenceID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPackingDetails_Result>("SpGetPackingDetails", referenceIDParameter, typeParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<GetBatchesByItemIDForStockAdjustment_Result> GetBatchesByItemIDForStockAdjustment(Nullable<int> warehouseID, Nullable<int> itemID, Nullable<int> batchTypeID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBatchesByItemIDForStockAdjustment_Result>("GetBatchesByItemIDForStockAdjustment", warehouseIDParameter, itemIDParameter, batchTypeIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpOpeningStockTransDetails_Result> SpOpeningStockTransDetails(Nullable<int> openingStockID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var openingStockIDParameter = openingStockID.HasValue ?
                new ObjectParameter("OpeningStockID", openingStockID) :
                new ObjectParameter("OpeningStockID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpOpeningStockTransDetails_Result>("SpOpeningStockTransDetails", openingStockIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetStockAdjustmentList_Result> SpGetStockAdjustmentList(string transNoHint, string transDateHint, string storeHint, string itemNameHint, string salesCategoryHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var transNoHintParameter = transNoHint != null ?
                new ObjectParameter("TransNoHint", transNoHint) :
                new ObjectParameter("TransNoHint", typeof(string));
    
            var transDateHintParameter = transDateHint != null ?
                new ObjectParameter("TransDateHint", transDateHint) :
                new ObjectParameter("TransDateHint", typeof(string));
    
            var storeHintParameter = storeHint != null ?
                new ObjectParameter("StoreHint", storeHint) :
                new ObjectParameter("StoreHint", typeof(string));
    
            var itemNameHintParameter = itemNameHint != null ?
                new ObjectParameter("ItemNameHint", itemNameHint) :
                new ObjectParameter("ItemNameHint", typeof(string));
    
            var salesCategoryHintParameter = salesCategoryHint != null ?
                new ObjectParameter("SalesCategoryHint", salesCategoryHint) :
                new ObjectParameter("SalesCategoryHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetStockAdjustmentList_Result>("SpGetStockAdjustmentList", transNoHintParameter, transDateHintParameter, storeHintParameter, itemNameHintParameter, salesCategoryHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<spGetStockIssueDetail_Result> spGetStockIssueDetail(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetStockIssueDetail_Result>("spGetStockIssueDetail", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetBatchwiseItemsOfIssueTemplate_Result> SpGetBatchwiseItemsOfIssueTemplate(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetBatchwiseItemsOfIssueTemplate_Result>("SpGetBatchwiseItemsOfIssueTemplate", finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpReleaseHoldedStock(string transaction, string transNo, Nullable<int> transID, Nullable<int> toWarehouseID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var transactionParameter = transaction != null ?
                new ObjectParameter("Transaction", transaction) :
                new ObjectParameter("Transaction", typeof(string));
    
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var transIDParameter = transID.HasValue ?
                new ObjectParameter("TransID", transID) :
                new ObjectParameter("TransID", typeof(int));
    
            var toWarehouseIDParameter = toWarehouseID.HasValue ?
                new ObjectParameter("ToWarehouseID", toWarehouseID) :
                new ObjectParameter("ToWarehouseID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpReleaseHoldedStock", transactionParameter, transNoParameter, transIDParameter, toWarehouseIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetRateAdjustmentListForDataTable_Result> SpGetRateAdjustmentListForDataTable(string type, string transNo, string transDate, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var transDateParameter = transDate != null ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetRateAdjustmentListForDataTable_Result>("SpGetRateAdjustmentListForDataTable", typeParameter, transNoParameter, transDateParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetOpeningStockList_Result> SpGetOpeningStockList(string type, string transNo, string date, string store, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var storeParameter = store != null ?
                new ObjectParameter("Store", store) :
                new ObjectParameter("Store", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetOpeningStockList_Result>("SpGetOpeningStockList", typeParameter, transNoParameter, dateParameter, storeParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateStockConsumption(string transNo, Nullable<System.DateTime> date, Nullable<int> wareHouseID, Nullable<bool> isDraft, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter stockConsumptionID)
        {
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateStockConsumption", transNoParameter, dateParameter, wareHouseIDParameter, isDraftParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, stockConsumptionID);
        }
    
        public virtual int SpCreateStockConsumptionTrans(Nullable<int> stockConsumptionID, Nullable<int> warehouseID, Nullable<int> itemID, Nullable<int> batchTypeID, Nullable<int> batchID, Nullable<int> unitID, Nullable<decimal> availableQty, Nullable<decimal> consumptionQty, Nullable<System.DateTime> expiryDate, Nullable<decimal> rate, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter returnValue)
        {
            var stockConsumptionIDParameter = stockConsumptionID.HasValue ?
                new ObjectParameter("StockConsumptionID", stockConsumptionID) :
                new ObjectParameter("StockConsumptionID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var availableQtyParameter = availableQty.HasValue ?
                new ObjectParameter("AvailableQty", availableQty) :
                new ObjectParameter("AvailableQty", typeof(decimal));
    
            var consumptionQtyParameter = consumptionQty.HasValue ?
                new ObjectParameter("ConsumptionQty", consumptionQty) :
                new ObjectParameter("ConsumptionQty", typeof(decimal));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateStockConsumptionTrans", stockConsumptionIDParameter, warehouseIDParameter, itemIDParameter, batchTypeIDParameter, batchIDParameter, unitIDParameter, availableQtyParameter, consumptionQtyParameter, expiryDateParameter, rateParameter, finYearParameter, locationIDParameter, applicationIDParameter, returnValue);
        }
    
        public virtual ObjectResult<SpGetStockConsumptionDetail_Result> SpGetStockConsumptionDetail(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetStockConsumptionDetail_Result>("SpGetStockConsumptionDetail", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetStockConsumptionItem_Result> SpGetStockConsumptionItem(Nullable<int> warehouseID, Nullable<int> categoryID, Nullable<int> itemID, Nullable<int> salesCategoryID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var salesCategoryIDParameter = salesCategoryID.HasValue ?
                new ObjectParameter("SalesCategoryID", salesCategoryID) :
                new ObjectParameter("SalesCategoryID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetStockConsumptionItem_Result>("SpGetStockConsumptionItem", warehouseIDParameter, categoryIDParameter, itemIDParameter, salesCategoryIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetStockConsumptionList_Result> SpGetStockConsumptionList(string type, string transNoHint, string transDateHint, string storeHint, string itemNameHint, string salesCategoryHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var transNoHintParameter = transNoHint != null ?
                new ObjectParameter("TransNoHint", transNoHint) :
                new ObjectParameter("TransNoHint", typeof(string));
    
            var transDateHintParameter = transDateHint != null ?
                new ObjectParameter("TransDateHint", transDateHint) :
                new ObjectParameter("TransDateHint", typeof(string));
    
            var storeHintParameter = storeHint != null ?
                new ObjectParameter("StoreHint", storeHint) :
                new ObjectParameter("StoreHint", typeof(string));
    
            var itemNameHintParameter = itemNameHint != null ?
                new ObjectParameter("ItemNameHint", itemNameHint) :
                new ObjectParameter("ItemNameHint", typeof(string));
    
            var salesCategoryHintParameter = salesCategoryHint != null ?
                new ObjectParameter("SalesCategoryHint", salesCategoryHint) :
                new ObjectParameter("SalesCategoryHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetStockConsumptionList_Result>("SpGetStockConsumptionList", typeParameter, transNoHintParameter, transDateHintParameter, storeHintParameter, itemNameHintParameter, salesCategoryHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetStockConsumptionTrans_Result> SpGetStockConsumptionTrans(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetStockConsumptionTrans_Result>("SpGetStockConsumptionTrans", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateStockConsumption(Nullable<int> iD, Nullable<System.DateTime> date, Nullable<int> wareHouseID, Nullable<bool> isDraft, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateStockConsumption", iDParameter, dateParameter, wareHouseIDParameter, isDraftParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateOpeningStockTrans(Nullable<int> openingStockID, string openingStockNo, Nullable<System.DateTime> date, Nullable<int> warehouseID, Nullable<int> itemID, Nullable<int> batchTypeID, string batch, Nullable<decimal> qty, Nullable<decimal> value, Nullable<int> unitID, Nullable<System.DateTime> expDate, Nullable<bool> isDraft, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter retValue)
        {
            var openingStockIDParameter = openingStockID.HasValue ?
                new ObjectParameter("OpeningStockID", openingStockID) :
                new ObjectParameter("OpeningStockID", typeof(int));
    
            var openingStockNoParameter = openingStockNo != null ?
                new ObjectParameter("OpeningStockNo", openingStockNo) :
                new ObjectParameter("OpeningStockNo", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var batchParameter = batch != null ?
                new ObjectParameter("Batch", batch) :
                new ObjectParameter("Batch", typeof(string));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(decimal));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(decimal));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var expDateParameter = expDate.HasValue ?
                new ObjectParameter("ExpDate", expDate) :
                new ObjectParameter("ExpDate", typeof(System.DateTime));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateOpeningStockTrans", openingStockIDParameter, openingStockNoParameter, dateParameter, warehouseIDParameter, itemIDParameter, batchTypeIDParameter, batchParameter, qtyParameter, valueParameter, unitIDParameter, expDateParameter, isDraftParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, retValue);
        }
    
        public virtual ObjectResult<SpGetMRPForOpeningStock_Result> SpGetMRPForOpeningStock(Nullable<int> itemID, Nullable<int> batchTypeID, string batch, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var batchParameter = batch != null ?
                new ObjectParameter("Batch", batch) :
                new ObjectParameter("Batch", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetMRPForOpeningStock_Result>("SpGetMRPForOpeningStock", itemIDParameter, batchTypeIDParameter, batchParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetOpeningStockTransDetails_Result> SpGetOpeningStockTransDetails(Nullable<int> openingStockID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var openingStockIDParameter = openingStockID.HasValue ?
                new ObjectParameter("OpeningStockID", openingStockID) :
                new ObjectParameter("OpeningStockID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetOpeningStockTransDetails_Result>("SpGetOpeningStockTransDetails", openingStockIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetStockAdjustmentItem_Result> SpGetStockAdjustmentItem(Nullable<int> warehouseID, Nullable<int> categoryID, Nullable<int> itemID, Nullable<int> salesCategoryID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var salesCategoryIDParameter = salesCategoryID.HasValue ?
                new ObjectParameter("SalesCategoryID", salesCategoryID) :
                new ObjectParameter("SalesCategoryID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetStockAdjustmentItem_Result>("SpGetStockAdjustmentItem", warehouseIDParameter, categoryIDParameter, itemIDParameter, salesCategoryIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetMRPForPurchaseInvoice_Result> SpGetMRPForPurchaseInvoice(Nullable<int> itemID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetMRPForPurchaseInvoice_Result>("SpGetMRPForPurchaseInvoice", itemIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetStockAdjustmentScheduledItemsForPrint_Result> SpGetStockAdjustmentScheduledItemsForPrint(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> locationID, Nullable<int> finYear, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetStockAdjustmentScheduledItemsForPrint_Result>("SpGetStockAdjustmentScheduledItemsForPrint", fromDateParameter, toDateParameter, locationIDParameter, finYearParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateStockAdjustmentTrans(Nullable<int> stockAdjustmentID, Nullable<int> iD, Nullable<int> warehouseID, Nullable<int> itemID, Nullable<int> batchTypeID, Nullable<int> batchID, Nullable<int> unitID, Nullable<decimal> currentQty, Nullable<decimal> physicalQty, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter retVal)
        {
            var stockAdjustmentIDParameter = stockAdjustmentID.HasValue ?
                new ObjectParameter("StockAdjustmentID", stockAdjustmentID) :
                new ObjectParameter("StockAdjustmentID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var currentQtyParameter = currentQty.HasValue ?
                new ObjectParameter("CurrentQty", currentQty) :
                new ObjectParameter("CurrentQty", typeof(decimal));
    
            var physicalQtyParameter = physicalQty.HasValue ?
                new ObjectParameter("PhysicalQty", physicalQty) :
                new ObjectParameter("PhysicalQty", typeof(decimal));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateStockAdjustmentTrans", stockAdjustmentIDParameter, iDParameter, warehouseIDParameter, itemIDParameter, batchTypeIDParameter, batchIDParameter, unitIDParameter, currentQtyParameter, physicalQtyParameter, finYearParameter, locationIDParameter, applicationIDParameter, retVal);
        }
    
        public virtual int SpReleaseHoldedStock1(string transaction, string transNo, Nullable<int> transID, Nullable<int> toWarehouseID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var transactionParameter = transaction != null ?
                new ObjectParameter("Transaction", transaction) :
                new ObjectParameter("Transaction", typeof(string));
    
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var transIDParameter = transID.HasValue ?
                new ObjectParameter("TransID", transID) :
                new ObjectParameter("TransID", typeof(int));
    
            var toWarehouseIDParameter = toWarehouseID.HasValue ?
                new ObjectParameter("ToWarehouseID", toWarehouseID) :
                new ObjectParameter("ToWarehouseID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpReleaseHoldedStock1", transactionParameter, transNoParameter, transIDParameter, toWarehouseIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpRevertHoldStock(Nullable<int> scheduleID, Nullable<int> itemID, Nullable<int> batchID, Nullable<int> batchTypeID, Nullable<int> wareHouseID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var scheduleIDParameter = scheduleID.HasValue ?
                new ObjectParameter("scheduleID", scheduleID) :
                new ObjectParameter("scheduleID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpRevertHoldStock", scheduleIDParameter, itemIDParameter, batchIDParameter, batchTypeIDParameter, wareHouseIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateStockAdjustmentTransV3(Nullable<int> stockAdjustmentID, Nullable<int> iD, Nullable<int> warehouseID, Nullable<int> itemID, Nullable<int> batchTypeID, Nullable<int> batchID, Nullable<int> unitID, Nullable<decimal> currentQty, Nullable<decimal> physicalQty, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var stockAdjustmentIDParameter = stockAdjustmentID.HasValue ?
                new ObjectParameter("StockAdjustmentID", stockAdjustmentID) :
                new ObjectParameter("StockAdjustmentID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var currentQtyParameter = currentQty.HasValue ?
                new ObjectParameter("CurrentQty", currentQty) :
                new ObjectParameter("CurrentQty", typeof(decimal));
    
            var physicalQtyParameter = physicalQty.HasValue ?
                new ObjectParameter("PhysicalQty", physicalQty) :
                new ObjectParameter("PhysicalQty", typeof(decimal));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateStockAdjustmentTransV3", stockAdjustmentIDParameter, iDParameter, warehouseIDParameter, itemIDParameter, batchTypeIDParameter, batchIDParameter, unitIDParameter, currentQtyParameter, physicalQtyParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpGetScheduleDate(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter scheduleDate)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetScheduleDate", finYearParameter, locationIDParameter, applicationIDParameter, scheduleDate);
        }
    
        public virtual int SpCreateStockAdjustmentForAPI(string transNo, string itemCode, string batch, Nullable<decimal> qty, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter stockAdjustmentID, ObjectParameter retVal)
        {
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var batchParameter = batch != null ?
                new ObjectParameter("Batch", batch) :
                new ObjectParameter("Batch", typeof(string));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(decimal));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateStockAdjustmentForAPI", transNoParameter, itemCodeParameter, batchParameter, qtyParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, stockAdjustmentID, retVal);
        }
    
        public virtual ObjectResult<SpGetStockAdjustmentItemForAlopathyAPI_Result> SpGetStockAdjustmentItemForAlopathyAPI(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> itemID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetStockAdjustmentItemForAlopathyAPI_Result>("SpGetStockAdjustmentItemForAlopathyAPI", fromDateParameter, toDateParameter, itemIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<spGetIsStockCheckingDone_Result> spGetIsStockCheckingDone(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, string itemCode, string batch)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var batchParameter = batch != null ?
                new ObjectParameter("Batch", batch) :
                new ObjectParameter("Batch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetIsStockCheckingDone_Result>("spGetIsStockCheckingDone", finYearParameter, locationIDParameter, applicationIDParameter, itemCodeParameter, batchParameter);
        }
    
        public virtual ObjectResult<SpGetStockAdjustmentItemForAlopathy_Result> SpGetStockAdjustmentItemForAlopathy(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> itemID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetStockAdjustmentItemForAlopathy_Result>("SpGetStockAdjustmentItemForAlopathy", fromDateParameter, toDateParameter, itemIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetBatchwiseItemsOfStockRequest_Result> SpGetBatchwiseItemsOfStockRequest(string requisitionIDs, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var requisitionIDsParameter = requisitionIDs != null ?
                new ObjectParameter("RequisitionIDs", requisitionIDs) :
                new ObjectParameter("RequisitionIDs", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetBatchwiseItemsOfStockRequest_Result>("SpGetBatchwiseItemsOfStockRequest", requisitionIDsParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetStockRequisitionTrans_Result> SpGetStockRequisitionTrans(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetStockRequisitionTrans_Result>("SpGetStockRequisitionTrans", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetBatchwiseItemsForStockIssue_Result> SpGetBatchwiseItemsForStockIssue(Nullable<int> itemID, Nullable<int> batchTypeID, Nullable<int> warehouseID, Nullable<decimal> qty, Nullable<int> unitID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(decimal));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetBatchwiseItemsForStockIssue_Result>("SpGetBatchwiseItemsForStockIssue", itemIDParameter, batchTypeIDParameter, warehouseIDParameter, qtyParameter, unitIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateStockIssueTrans(Nullable<int> stockIssueID, Nullable<int> stockRequestTransID, Nullable<int> stockRequestID, Nullable<int> itemID, Nullable<int> batchID, Nullable<int> batchTypeID, Nullable<decimal> issueQty, Nullable<decimal> requestedQty, Nullable<decimal> secondaryIssueQty, Nullable<decimal> secondaryQty, string secondaryUnit, Nullable<decimal> secondaryUnitSize, Nullable<decimal> rate, Nullable<decimal> basicPrice, Nullable<decimal> grossAmount, Nullable<decimal> tradeDiscountPercentage, Nullable<decimal> tradeDiscount, Nullable<decimal> taxableAmount, Nullable<decimal> sGSTPercentage, Nullable<decimal> cGSTPercentage, Nullable<decimal> iGSTPercentage, Nullable<decimal> sGSTAmount, Nullable<decimal> cGSTAmount, Nullable<decimal> iGSTAmount, Nullable<decimal> netAmount, Nullable<int> unitID, string remark, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter retValue)
        {
            var stockIssueIDParameter = stockIssueID.HasValue ?
                new ObjectParameter("StockIssueID", stockIssueID) :
                new ObjectParameter("StockIssueID", typeof(int));
    
            var stockRequestTransIDParameter = stockRequestTransID.HasValue ?
                new ObjectParameter("StockRequestTransID", stockRequestTransID) :
                new ObjectParameter("StockRequestTransID", typeof(int));
    
            var stockRequestIDParameter = stockRequestID.HasValue ?
                new ObjectParameter("StockRequestID", stockRequestID) :
                new ObjectParameter("StockRequestID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var issueQtyParameter = issueQty.HasValue ?
                new ObjectParameter("IssueQty", issueQty) :
                new ObjectParameter("IssueQty", typeof(decimal));
    
            var requestedQtyParameter = requestedQty.HasValue ?
                new ObjectParameter("RequestedQty", requestedQty) :
                new ObjectParameter("RequestedQty", typeof(decimal));
    
            var secondaryIssueQtyParameter = secondaryIssueQty.HasValue ?
                new ObjectParameter("SecondaryIssueQty", secondaryIssueQty) :
                new ObjectParameter("SecondaryIssueQty", typeof(decimal));
    
            var secondaryQtyParameter = secondaryQty.HasValue ?
                new ObjectParameter("SecondaryQty", secondaryQty) :
                new ObjectParameter("SecondaryQty", typeof(decimal));
    
            var secondaryUnitParameter = secondaryUnit != null ?
                new ObjectParameter("SecondaryUnit", secondaryUnit) :
                new ObjectParameter("SecondaryUnit", typeof(string));
    
            var secondaryUnitSizeParameter = secondaryUnitSize.HasValue ?
                new ObjectParameter("SecondaryUnitSize", secondaryUnitSize) :
                new ObjectParameter("SecondaryUnitSize", typeof(decimal));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var basicPriceParameter = basicPrice.HasValue ?
                new ObjectParameter("BasicPrice", basicPrice) :
                new ObjectParameter("BasicPrice", typeof(decimal));
    
            var grossAmountParameter = grossAmount.HasValue ?
                new ObjectParameter("GrossAmount", grossAmount) :
                new ObjectParameter("GrossAmount", typeof(decimal));
    
            var tradeDiscountPercentageParameter = tradeDiscountPercentage.HasValue ?
                new ObjectParameter("TradeDiscountPercentage", tradeDiscountPercentage) :
                new ObjectParameter("TradeDiscountPercentage", typeof(decimal));
    
            var tradeDiscountParameter = tradeDiscount.HasValue ?
                new ObjectParameter("TradeDiscount", tradeDiscount) :
                new ObjectParameter("TradeDiscount", typeof(decimal));
    
            var taxableAmountParameter = taxableAmount.HasValue ?
                new ObjectParameter("TaxableAmount", taxableAmount) :
                new ObjectParameter("TaxableAmount", typeof(decimal));
    
            var sGSTPercentageParameter = sGSTPercentage.HasValue ?
                new ObjectParameter("SGSTPercentage", sGSTPercentage) :
                new ObjectParameter("SGSTPercentage", typeof(decimal));
    
            var cGSTPercentageParameter = cGSTPercentage.HasValue ?
                new ObjectParameter("CGSTPercentage", cGSTPercentage) :
                new ObjectParameter("CGSTPercentage", typeof(decimal));
    
            var iGSTPercentageParameter = iGSTPercentage.HasValue ?
                new ObjectParameter("IGSTPercentage", iGSTPercentage) :
                new ObjectParameter("IGSTPercentage", typeof(decimal));
    
            var sGSTAmountParameter = sGSTAmount.HasValue ?
                new ObjectParameter("SGSTAmount", sGSTAmount) :
                new ObjectParameter("SGSTAmount", typeof(decimal));
    
            var cGSTAmountParameter = cGSTAmount.HasValue ?
                new ObjectParameter("CGSTAmount", cGSTAmount) :
                new ObjectParameter("CGSTAmount", typeof(decimal));
    
            var iGSTAmountParameter = iGSTAmount.HasValue ?
                new ObjectParameter("IGSTAmount", iGSTAmount) :
                new ObjectParameter("IGSTAmount", typeof(decimal));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateStockIssueTrans", stockIssueIDParameter, stockRequestTransIDParameter, stockRequestIDParameter, itemIDParameter, batchIDParameter, batchTypeIDParameter, issueQtyParameter, requestedQtyParameter, secondaryIssueQtyParameter, secondaryQtyParameter, secondaryUnitParameter, secondaryUnitSizeParameter, rateParameter, basicPriceParameter, grossAmountParameter, tradeDiscountPercentageParameter, tradeDiscountParameter, taxableAmountParameter, sGSTPercentageParameter, cGSTPercentageParameter, iGSTPercentageParameter, sGSTAmountParameter, cGSTAmountParameter, iGSTAmountParameter, netAmountParameter, unitIDParameter, remarkParameter, finYearParameter, locationIDParameter, applicationIDParameter, retValue);
        }
    
        public virtual ObjectResult<SpGetStockReceiptTrans_Result> SpGetStockReceiptTrans(Nullable<int> stockReceiptID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var stockReceiptIDParameter = stockReceiptID.HasValue ?
                new ObjectParameter("StockReceiptID", stockReceiptID) :
                new ObjectParameter("StockReceiptID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetStockReceiptTrans_Result>("SpGetStockReceiptTrans", stockReceiptIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetStockIssueTrans_Result> SpGetStockIssueTrans(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetStockIssueTrans_Result>("SpGetStockIssueTrans", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetStockIssueItemForStockReceipt_Result> SpGetStockIssueItemForStockReceipt(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetStockIssueItemForStockReceipt_Result>("SpGetStockIssueItemForStockReceipt", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    }
}
