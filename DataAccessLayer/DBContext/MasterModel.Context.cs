//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccessLayer.DBContext
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MasterEntities : DbContext
    {
        public MasterEntities()
            : base("name=MasterEntities")
        {
            ((IObjectContextAdapter)this).ObjectContext.CommandTimeout = 0;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<GSTCategory> GSTCategories { get; set; }
        public virtual DbSet<PaymentType> PaymentTypes { get; set; }
        public virtual DbSet<SLA> SLAs { get; set; }
        public virtual DbSet<CustomerAccountsCategory> CustomerAccountsCategories { get; set; }
        public virtual DbSet<CustomerCategory> CustomerCategories { get; set; }
        public virtual DbSet<CustomerTaxCategory> CustomerTaxCategories { get; set; }
        public virtual DbSet<DiscountCategory> DiscountCategories { get; set; }
        public virtual DbSet<DrugScheduleType> DrugScheduleTypes { get; set; }
        public virtual DbSet<PriceList> PriceLists { get; set; }
        public virtual DbSet<PaymentMode> PaymentModes { get; set; }
        public virtual DbSet<Item> Items { get; set; }
    
        public virtual int SpCancelTransaction(Nullable<int> iD, string tableName, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCancelTransaction", iDParameter, tableNameParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateBatch(string itemType, Nullable<int> itemID, string batchNo, string customBatchNo, Nullable<System.DateTime> manufacturingDate, Nullable<System.DateTime> expiryDate, Nullable<int> batchTypeID, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter batchID)
        {
            var itemTypeParameter = itemType != null ?
                new ObjectParameter("ItemType", itemType) :
                new ObjectParameter("ItemType", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchNoParameter = batchNo != null ?
                new ObjectParameter("BatchNo", batchNo) :
                new ObjectParameter("BatchNo", typeof(string));
    
            var customBatchNoParameter = customBatchNo != null ?
                new ObjectParameter("CustomBatchNo", customBatchNo) :
                new ObjectParameter("CustomBatchNo", typeof(string));
    
            var manufacturingDateParameter = manufacturingDate.HasValue ?
                new ObjectParameter("ManufacturingDate", manufacturingDate) :
                new ObjectParameter("ManufacturingDate", typeof(System.DateTime));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateBatch", itemTypeParameter, itemIDParameter, batchNoParameter, customBatchNoParameter, manufacturingDateParameter, expiryDateParameter, batchTypeIDParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter, batchID);
        }
    
        public virtual ObjectResult<SpGetConfigByUser_Result> SpGetConfigByUser(string configName, Nullable<int> userID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var configNameParameter = configName != null ?
                new ObjectParameter("ConfigName", configName) :
                new ObjectParameter("ConfigName", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetConfigByUser_Result>("SpGetConfigByUser", configNameParameter, userIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpIsCodeAlreadyExists(string tableName, string fieldName, string code, Nullable<int> iD, ObjectParameter isExists)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("tableName", tableName) :
                new ObjectParameter("tableName", typeof(string));
    
            var fieldNameParameter = fieldName != null ?
                new ObjectParameter("FieldName", fieldName) :
                new ObjectParameter("FieldName", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpIsCodeAlreadyExists", tableNameParameter, fieldNameParameter, codeParameter, iDParameter, isExists);
        }
    
        public virtual int SpSuspendTransaction(Nullable<int> iD, string tableName, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter retValue)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpSuspendTransaction", iDParameter, tableNameParameter, finYearParameter, locationIDParameter, applicationIDParameter, retValue);
        }
    
        public virtual int SpUpdateSerialNo(string formName, string fieldName, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter serialNo)
        {
            var formNameParameter = formName != null ?
                new ObjectParameter("FormName", formName) :
                new ObjectParameter("FormName", typeof(string));
    
            var fieldNameParameter = fieldName != null ?
                new ObjectParameter("FieldName", fieldName) :
                new ObjectParameter("FieldName", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateSerialNo", formNameParameter, fieldNameParameter, finYearParameter, locationIDParameter, applicationIDParameter, serialNo);
        }
    
        public virtual ObjectResult<GetSchemeAllocationTransList_Result> GetSchemeAllocationTransList(Nullable<int> iD, string nameHint, string salesCategoryHint, string startDate, string endDate, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var salesCategoryHintParameter = salesCategoryHint != null ?
                new ObjectParameter("SalesCategoryHint", salesCategoryHint) :
                new ObjectParameter("SalesCategoryHint", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchemeAllocationTransList_Result>("GetSchemeAllocationTransList", iDParameter, nameHintParameter, salesCategoryHintParameter, startDateParameter, endDateParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpAutomateCustomerAndSchemeItem()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpAutomateCustomerAndSchemeItem");
        }
    
        public virtual int SpCheckIsCustomerDetailsExit(Nullable<int> iD, string customerName, string gSTNumber, string pAN, string adhar, string mobile, string landNo, string landNo2, ObjectParameter retVal)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var gSTNumberParameter = gSTNumber != null ?
                new ObjectParameter("GSTNumber", gSTNumber) :
                new ObjectParameter("GSTNumber", typeof(string));
    
            var pANParameter = pAN != null ?
                new ObjectParameter("PAN", pAN) :
                new ObjectParameter("PAN", typeof(string));
    
            var adharParameter = adhar != null ?
                new ObjectParameter("Adhar", adhar) :
                new ObjectParameter("Adhar", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var landNoParameter = landNo != null ?
                new ObjectParameter("LandNo", landNo) :
                new ObjectParameter("LandNo", typeof(string));
    
            var landNo2Parameter = landNo2 != null ?
                new ObjectParameter("LandNo2", landNo2) :
                new ObjectParameter("LandNo2", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCheckIsCustomerDetailsExit", iDParameter, customerNameParameter, gSTNumberParameter, pANParameter, adharParameter, mobileParameter, landNoParameter, landNo2Parameter, retVal);
        }
    
        public virtual int SpCheckIsSupplierDetailsExit(Nullable<int> iD, string supplierName, string gSTNumber, string pAN, string adhar, string mobile, string landNo, string landNo2, string bankAcc, ObjectParameter retVal)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var supplierNameParameter = supplierName != null ?
                new ObjectParameter("SupplierName", supplierName) :
                new ObjectParameter("SupplierName", typeof(string));
    
            var gSTNumberParameter = gSTNumber != null ?
                new ObjectParameter("GSTNumber", gSTNumber) :
                new ObjectParameter("GSTNumber", typeof(string));
    
            var pANParameter = pAN != null ?
                new ObjectParameter("PAN", pAN) :
                new ObjectParameter("PAN", typeof(string));
    
            var adharParameter = adhar != null ?
                new ObjectParameter("Adhar", adhar) :
                new ObjectParameter("Adhar", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var landNoParameter = landNo != null ?
                new ObjectParameter("LandNo", landNo) :
                new ObjectParameter("LandNo", typeof(string));
    
            var landNo2Parameter = landNo2 != null ?
                new ObjectParameter("LandNo2", landNo2) :
                new ObjectParameter("LandNo2", typeof(string));
    
            var bankAccParameter = bankAcc != null ?
                new ObjectParameter("BankAcc", bankAcc) :
                new ObjectParameter("BankAcc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCheckIsSupplierDetailsExit", iDParameter, supplierNameParameter, gSTNumberParameter, pANParameter, adharParameter, mobileParameter, landNoParameter, landNo2Parameter, bankAccParameter, retVal);
        }
    
        public virtual int SpCreateAgeingBucket(string name, string code, ObjectParameter bucketID)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateAgeingBucket", nameParameter, codeParameter, bucketID);
        }
    
        public virtual int SpCreateAgeingBucketTrans(Nullable<int> bucketID, string name, Nullable<int> start, Nullable<int> end)
        {
            var bucketIDParameter = bucketID.HasValue ?
                new ObjectParameter("BucketID", bucketID) :
                new ObjectParameter("BucketID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(int));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("End", end) :
                new ObjectParameter("End", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateAgeingBucketTrans", bucketIDParameter, nameParameter, startParameter, endParameter);
        }
    
        public virtual int SpCreateCategories(string categoryType, string categoryName, Nullable<int> applicationID, Nullable<int> createdUserID, Nullable<int> locationID)
        {
            var categoryTypeParameter = categoryType != null ?
                new ObjectParameter("CategoryType", categoryType) :
                new ObjectParameter("CategoryType", typeof(string));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateCategories", categoryTypeParameter, categoryNameParameter, applicationIDParameter, createdUserIDParameter, locationIDParameter);
        }
    
        public virtual int SpCreateCategory(string name, Nullable<int> categoryGroupID, Nullable<int> createdUserID, Nullable<System.DateTime> createdDate)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var categoryGroupIDParameter = categoryGroupID.HasValue ?
                new ObjectParameter("CategoryGroupID", categoryGroupID) :
                new ObjectParameter("CategoryGroupID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateCategory", nameParameter, categoryGroupIDParameter, createdUserIDParameter, createdDateParameter);
        }
    
        public virtual int SpCreateChartOfAccount(string accountID, string accountName, Nullable<decimal> openingAmount, Nullable<bool> isManual, Nullable<int> parentID, Nullable<int> level, Nullable<int> createdUserID, Nullable<int> applicationID, ObjectParameter returnValue)
        {
            var accountIDParameter = accountID != null ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(string));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var openingAmountParameter = openingAmount.HasValue ?
                new ObjectParameter("OpeningAmount", openingAmount) :
                new ObjectParameter("OpeningAmount", typeof(decimal));
    
            var isManualParameter = isManual.HasValue ?
                new ObjectParameter("IsManual", isManual) :
                new ObjectParameter("IsManual", typeof(bool));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var levelParameter = level.HasValue ?
                new ObjectParameter("Level", level) :
                new ObjectParameter("Level", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateChartOfAccount", accountIDParameter, accountNameParameter, openingAmountParameter, isManualParameter, parentIDParameter, levelParameter, createdUserIDParameter, applicationIDParameter, returnValue);
        }
    
        public virtual int SpCreateConfiguration(string storeName, Nullable<int> storeID, Nullable<int> userID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var storeNameParameter = storeName != null ?
                new ObjectParameter("StoreName", storeName) :
                new ObjectParameter("StoreName", typeof(string));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateConfiguration", storeNameParameter, storeIDParameter, userIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateCreditDays(string name, Nullable<int> days, Nullable<int> applicationID)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var daysParameter = days.HasValue ?
                new ObjectParameter("Days", days) :
                new ObjectParameter("Days", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateCreditDays", nameParameter, daysParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateCustomerCategory(Nullable<int> iD, string customerCategoryName, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var customerCategoryNameParameter = customerCategoryName != null ?
                new ObjectParameter("CustomerCategoryName", customerCategoryName) :
                new ObjectParameter("CustomerCategoryName", typeof(string));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateCustomerCategory", iDParameter, customerCategoryNameParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateCustomerLocationMapping(Nullable<int> customerID, string customerName, Nullable<int> locationID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateCustomerLocationMapping", customerIDParameter, customerNameParameter, locationIDParameter);
        }
    
        public virtual int SpCreateDefinition(Nullable<int> productionGroupID, Nullable<int> productID, Nullable<int> itemID, Nullable<int> unitID, Nullable<decimal> batchSize, Nullable<decimal> standardOutputQty, string processStage, Nullable<int> productionSequence, Nullable<int> applicationID, ObjectParameter definitionID)
        {
            var productionGroupIDParameter = productionGroupID.HasValue ?
                new ObjectParameter("ProductionGroupID", productionGroupID) :
                new ObjectParameter("ProductionGroupID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var batchSizeParameter = batchSize.HasValue ?
                new ObjectParameter("BatchSize", batchSize) :
                new ObjectParameter("BatchSize", typeof(decimal));
    
            var standardOutputQtyParameter = standardOutputQty.HasValue ?
                new ObjectParameter("StandardOutputQty", standardOutputQty) :
                new ObjectParameter("StandardOutputQty", typeof(decimal));
    
            var processStageParameter = processStage != null ?
                new ObjectParameter("ProcessStage", processStage) :
                new ObjectParameter("ProcessStage", typeof(string));
    
            var productionSequenceParameter = productionSequence.HasValue ?
                new ObjectParameter("ProductionSequence", productionSequence) :
                new ObjectParameter("ProductionSequence", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateDefinition", productionGroupIDParameter, productIDParameter, itemIDParameter, unitIDParameter, batchSizeParameter, standardOutputQtyParameter, processStageParameter, productionSequenceParameter, applicationIDParameter, definitionID);
        }
    
        public virtual int SpCreateDefinitionTrans(Nullable<int> productDefinitionMasterID, Nullable<int> materialID, Nullable<int> unitID, Nullable<decimal> qty, string usageMode, Nullable<int> applicationID)
        {
            var productDefinitionMasterIDParameter = productDefinitionMasterID.HasValue ?
                new ObjectParameter("ProductDefinitionMasterID", productDefinitionMasterID) :
                new ObjectParameter("ProductDefinitionMasterID", typeof(int));
    
            var materialIDParameter = materialID.HasValue ?
                new ObjectParameter("MaterialID", materialID) :
                new ObjectParameter("MaterialID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(decimal));
    
            var usageModeParameter = usageMode != null ?
                new ObjectParameter("UsageMode", usageMode) :
                new ObjectParameter("UsageMode", typeof(string));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateDefinitionTrans", productDefinitionMasterIDParameter, materialIDParameter, unitIDParameter, qtyParameter, usageModeParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateDepartment(string code, string name, Nullable<int> departmentGroupID, Nullable<bool> isActive, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> createdUserID)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var departmentGroupIDParameter = departmentGroupID.HasValue ?
                new ObjectParameter("DepartmentGroupID", departmentGroupID) :
                new ObjectParameter("DepartmentGroupID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateDepartment", codeParameter, nameParameter, departmentGroupIDParameter, isActiveParameter, startDateParameter, endDateParameter, createdUserIDParameter);
        }
    
        public virtual int SpCreateDesignation(string code, string name, Nullable<int> departmentID, Nullable<bool> isActive, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> createdUserID)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateDesignation", codeParameter, nameParameter, departmentIDParameter, isActiveParameter, startDateParameter, endDateParameter, createdUserIDParameter);
        }
    
        public virtual int SpCreateDiscount(Nullable<int> itemID, Nullable<int> customerID, Nullable<int> customerCategoryID, Nullable<int> customerStateID, Nullable<int> businessCategoryID, Nullable<int> salesIncentiveCategoryID, Nullable<int> salesCategoryID, Nullable<int> discountCategoryID, Nullable<decimal> discountPercentage, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customerCategoryIDParameter = customerCategoryID.HasValue ?
                new ObjectParameter("CustomerCategoryID", customerCategoryID) :
                new ObjectParameter("CustomerCategoryID", typeof(int));
    
            var customerStateIDParameter = customerStateID.HasValue ?
                new ObjectParameter("CustomerStateID", customerStateID) :
                new ObjectParameter("CustomerStateID", typeof(int));
    
            var businessCategoryIDParameter = businessCategoryID.HasValue ?
                new ObjectParameter("BusinessCategoryID", businessCategoryID) :
                new ObjectParameter("BusinessCategoryID", typeof(int));
    
            var salesIncentiveCategoryIDParameter = salesIncentiveCategoryID.HasValue ?
                new ObjectParameter("SalesIncentiveCategoryID", salesIncentiveCategoryID) :
                new ObjectParameter("SalesIncentiveCategoryID", typeof(int));
    
            var salesCategoryIDParameter = salesCategoryID.HasValue ?
                new ObjectParameter("SalesCategoryID", salesCategoryID) :
                new ObjectParameter("SalesCategoryID", typeof(int));
    
            var discountCategoryIDParameter = discountCategoryID.HasValue ?
                new ObjectParameter("DiscountCategoryID", discountCategoryID) :
                new ObjectParameter("DiscountCategoryID", typeof(int));
    
            var discountPercentageParameter = discountPercentage.HasValue ?
                new ObjectParameter("DiscountPercentage", discountPercentage) :
                new ObjectParameter("DiscountPercentage", typeof(decimal));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateDiscount", itemIDParameter, customerIDParameter, customerCategoryIDParameter, customerStateIDParameter, businessCategoryIDParameter, salesIncentiveCategoryIDParameter, salesCategoryIDParameter, discountCategoryIDParameter, discountPercentageParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateDiscountCategory(Nullable<decimal> discountPercentage, string discountType, Nullable<int> days, Nullable<int> applicationID, ObjectParameter returnValue)
        {
            var discountPercentageParameter = discountPercentage.HasValue ?
                new ObjectParameter("DiscountPercentage", discountPercentage) :
                new ObjectParameter("DiscountPercentage", typeof(decimal));
    
            var discountTypeParameter = discountType != null ?
                new ObjectParameter("DiscountType", discountType) :
                new ObjectParameter("DiscountType", typeof(string));
    
            var daysParameter = days.HasValue ?
                new ObjectParameter("Days", days) :
                new ObjectParameter("Days", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateDiscountCategory", discountPercentageParameter, discountTypeParameter, daysParameter, applicationIDParameter, returnValue);
        }
    
        public virtual int SpCreateDistrict(string name, Nullable<int> stateID, Nullable<int> pIN, string officeName, string taluk, ObjectParameter returnValue)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var pINParameter = pIN.HasValue ?
                new ObjectParameter("PIN", pIN) :
                new ObjectParameter("PIN", typeof(int));
    
            var officeNameParameter = officeName != null ?
                new ObjectParameter("OfficeName", officeName) :
                new ObjectParameter("OfficeName", typeof(string));
    
            var talukParameter = taluk != null ?
                new ObjectParameter("Taluk", taluk) :
                new ObjectParameter("Taluk", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateDistrict", nameParameter, stateIDParameter, pINParameter, officeNameParameter, talukParameter, returnValue);
        }
    
        public virtual int SpCreateDriver(string name, string code, string address, string licenseNo, string phoneNo, Nullable<bool> isActive, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> createdUserID)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var licenseNoParameter = licenseNo != null ?
                new ObjectParameter("LicenseNo", licenseNo) :
                new ObjectParameter("LicenseNo", typeof(string));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateDriver", nameParameter, codeParameter, addressParameter, licenseNoParameter, phoneNoParameter, isActiveParameter, locationIDParameter, applicationIDParameter, createdUserIDParameter);
        }
    
        public virtual int SpCreateEmployee(string code, string title, string name, Nullable<int> departmentID, string mobileNo, string place, Nullable<int> userID, Nullable<int> employeeCategoryID, Nullable<int> designationID, Nullable<System.DateTime> joiningDate, string gender, string martialStatus, Nullable<System.DateTime> dOB, string qualification1, string qualification2, string qualification3, string bloodGroup, Nullable<int> noOfDependent, string nameOfSpouse, string nameOfGuardian, Nullable<bool> excludeFromPayroll, Nullable<System.DateTime> confirmationDate, Nullable<int> payrollCategoryID, string payGrade, string companyEmail, string reportingToCode, string reportingToName, string transcationRole, string d2DReportRole, string mISReportRole, Nullable<int> interCompany, Nullable<System.DateTime> dateOfSeverance, Nullable<System.DateTime> dateOfRejoin, string probationDuration, Nullable<int> employmentJobTypeID, string printPayroll, Nullable<bool> pFStatus, Nullable<bool> eSIStatus, Nullable<bool> nPSStatus, Nullable<bool> medicalInsuranceStatus, Nullable<bool> attandancePunchingStatus, Nullable<bool> multiLocationPunchingStatus, Nullable<bool> specialLeaveStatus, Nullable<bool> probationStatus, Nullable<bool> productionIncentiveStatus, Nullable<bool> salesIncentiveStatus, Nullable<bool> fixedIncentiveStatus, Nullable<bool> minimumWagesStatus, Nullable<bool> isERPUser, Nullable<bool> medicalAidStatus, Nullable<bool> bonusStatus, Nullable<bool> professionalTaxStatus, Nullable<bool> welfareDeductionStatus, string panNo, string aadhaarNo, string accountNumber, string bankName, string bankBranchName, string iFSC, Nullable<bool> isEnglish, Nullable<bool> isHindi, Nullable<bool> isMalayalam, Nullable<bool> isTamil, Nullable<bool> isTelugu, Nullable<bool> isKannada, string pFVoluntaryContribution, string pFAccountNo, string pFUAN, string eSINo, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter employeeID)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var placeParameter = place != null ?
                new ObjectParameter("Place", place) :
                new ObjectParameter("Place", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var employeeCategoryIDParameter = employeeCategoryID.HasValue ?
                new ObjectParameter("EmployeeCategoryID", employeeCategoryID) :
                new ObjectParameter("EmployeeCategoryID", typeof(int));
    
            var designationIDParameter = designationID.HasValue ?
                new ObjectParameter("DesignationID", designationID) :
                new ObjectParameter("DesignationID", typeof(int));
    
            var joiningDateParameter = joiningDate.HasValue ?
                new ObjectParameter("JoiningDate", joiningDate) :
                new ObjectParameter("JoiningDate", typeof(System.DateTime));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var martialStatusParameter = martialStatus != null ?
                new ObjectParameter("MartialStatus", martialStatus) :
                new ObjectParameter("MartialStatus", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var qualification1Parameter = qualification1 != null ?
                new ObjectParameter("Qualification1", qualification1) :
                new ObjectParameter("Qualification1", typeof(string));
    
            var qualification2Parameter = qualification2 != null ?
                new ObjectParameter("Qualification2", qualification2) :
                new ObjectParameter("Qualification2", typeof(string));
    
            var qualification3Parameter = qualification3 != null ?
                new ObjectParameter("Qualification3", qualification3) :
                new ObjectParameter("Qualification3", typeof(string));
    
            var bloodGroupParameter = bloodGroup != null ?
                new ObjectParameter("BloodGroup", bloodGroup) :
                new ObjectParameter("BloodGroup", typeof(string));
    
            var noOfDependentParameter = noOfDependent.HasValue ?
                new ObjectParameter("NoOfDependent", noOfDependent) :
                new ObjectParameter("NoOfDependent", typeof(int));
    
            var nameOfSpouseParameter = nameOfSpouse != null ?
                new ObjectParameter("NameOfSpouse", nameOfSpouse) :
                new ObjectParameter("NameOfSpouse", typeof(string));
    
            var nameOfGuardianParameter = nameOfGuardian != null ?
                new ObjectParameter("NameOfGuardian", nameOfGuardian) :
                new ObjectParameter("NameOfGuardian", typeof(string));
    
            var excludeFromPayrollParameter = excludeFromPayroll.HasValue ?
                new ObjectParameter("ExcludeFromPayroll", excludeFromPayroll) :
                new ObjectParameter("ExcludeFromPayroll", typeof(bool));
    
            var confirmationDateParameter = confirmationDate.HasValue ?
                new ObjectParameter("ConfirmationDate", confirmationDate) :
                new ObjectParameter("ConfirmationDate", typeof(System.DateTime));
    
            var payrollCategoryIDParameter = payrollCategoryID.HasValue ?
                new ObjectParameter("PayrollCategoryID", payrollCategoryID) :
                new ObjectParameter("PayrollCategoryID", typeof(int));
    
            var payGradeParameter = payGrade != null ?
                new ObjectParameter("PayGrade", payGrade) :
                new ObjectParameter("PayGrade", typeof(string));
    
            var companyEmailParameter = companyEmail != null ?
                new ObjectParameter("CompanyEmail", companyEmail) :
                new ObjectParameter("CompanyEmail", typeof(string));
    
            var reportingToCodeParameter = reportingToCode != null ?
                new ObjectParameter("ReportingToCode", reportingToCode) :
                new ObjectParameter("ReportingToCode", typeof(string));
    
            var reportingToNameParameter = reportingToName != null ?
                new ObjectParameter("ReportingToName", reportingToName) :
                new ObjectParameter("ReportingToName", typeof(string));
    
            var transcationRoleParameter = transcationRole != null ?
                new ObjectParameter("TranscationRole", transcationRole) :
                new ObjectParameter("TranscationRole", typeof(string));
    
            var d2DReportRoleParameter = d2DReportRole != null ?
                new ObjectParameter("D2DReportRole", d2DReportRole) :
                new ObjectParameter("D2DReportRole", typeof(string));
    
            var mISReportRoleParameter = mISReportRole != null ?
                new ObjectParameter("MISReportRole", mISReportRole) :
                new ObjectParameter("MISReportRole", typeof(string));
    
            var interCompanyParameter = interCompany.HasValue ?
                new ObjectParameter("InterCompany", interCompany) :
                new ObjectParameter("InterCompany", typeof(int));
    
            var dateOfSeveranceParameter = dateOfSeverance.HasValue ?
                new ObjectParameter("DateOfSeverance", dateOfSeverance) :
                new ObjectParameter("DateOfSeverance", typeof(System.DateTime));
    
            var dateOfRejoinParameter = dateOfRejoin.HasValue ?
                new ObjectParameter("DateOfRejoin", dateOfRejoin) :
                new ObjectParameter("DateOfRejoin", typeof(System.DateTime));
    
            var probationDurationParameter = probationDuration != null ?
                new ObjectParameter("ProbationDuration", probationDuration) :
                new ObjectParameter("ProbationDuration", typeof(string));
    
            var employmentJobTypeIDParameter = employmentJobTypeID.HasValue ?
                new ObjectParameter("EmploymentJobTypeID", employmentJobTypeID) :
                new ObjectParameter("EmploymentJobTypeID", typeof(int));
    
            var printPayrollParameter = printPayroll != null ?
                new ObjectParameter("PrintPayroll", printPayroll) :
                new ObjectParameter("PrintPayroll", typeof(string));
    
            var pFStatusParameter = pFStatus.HasValue ?
                new ObjectParameter("PFStatus", pFStatus) :
                new ObjectParameter("PFStatus", typeof(bool));
    
            var eSIStatusParameter = eSIStatus.HasValue ?
                new ObjectParameter("ESIStatus", eSIStatus) :
                new ObjectParameter("ESIStatus", typeof(bool));
    
            var nPSStatusParameter = nPSStatus.HasValue ?
                new ObjectParameter("NPSStatus", nPSStatus) :
                new ObjectParameter("NPSStatus", typeof(bool));
    
            var medicalInsuranceStatusParameter = medicalInsuranceStatus.HasValue ?
                new ObjectParameter("MedicalInsuranceStatus", medicalInsuranceStatus) :
                new ObjectParameter("MedicalInsuranceStatus", typeof(bool));
    
            var attandancePunchingStatusParameter = attandancePunchingStatus.HasValue ?
                new ObjectParameter("AttandancePunchingStatus", attandancePunchingStatus) :
                new ObjectParameter("AttandancePunchingStatus", typeof(bool));
    
            var multiLocationPunchingStatusParameter = multiLocationPunchingStatus.HasValue ?
                new ObjectParameter("MultiLocationPunchingStatus", multiLocationPunchingStatus) :
                new ObjectParameter("MultiLocationPunchingStatus", typeof(bool));
    
            var specialLeaveStatusParameter = specialLeaveStatus.HasValue ?
                new ObjectParameter("SpecialLeaveStatus", specialLeaveStatus) :
                new ObjectParameter("SpecialLeaveStatus", typeof(bool));
    
            var probationStatusParameter = probationStatus.HasValue ?
                new ObjectParameter("ProbationStatus", probationStatus) :
                new ObjectParameter("ProbationStatus", typeof(bool));
    
            var productionIncentiveStatusParameter = productionIncentiveStatus.HasValue ?
                new ObjectParameter("ProductionIncentiveStatus", productionIncentiveStatus) :
                new ObjectParameter("ProductionIncentiveStatus", typeof(bool));
    
            var salesIncentiveStatusParameter = salesIncentiveStatus.HasValue ?
                new ObjectParameter("SalesIncentiveStatus", salesIncentiveStatus) :
                new ObjectParameter("SalesIncentiveStatus", typeof(bool));
    
            var fixedIncentiveStatusParameter = fixedIncentiveStatus.HasValue ?
                new ObjectParameter("FixedIncentiveStatus", fixedIncentiveStatus) :
                new ObjectParameter("FixedIncentiveStatus", typeof(bool));
    
            var minimumWagesStatusParameter = minimumWagesStatus.HasValue ?
                new ObjectParameter("MinimumWagesStatus", minimumWagesStatus) :
                new ObjectParameter("MinimumWagesStatus", typeof(bool));
    
            var isERPUserParameter = isERPUser.HasValue ?
                new ObjectParameter("IsERPUser", isERPUser) :
                new ObjectParameter("IsERPUser", typeof(bool));
    
            var medicalAidStatusParameter = medicalAidStatus.HasValue ?
                new ObjectParameter("MedicalAidStatus", medicalAidStatus) :
                new ObjectParameter("MedicalAidStatus", typeof(bool));
    
            var bonusStatusParameter = bonusStatus.HasValue ?
                new ObjectParameter("BonusStatus", bonusStatus) :
                new ObjectParameter("BonusStatus", typeof(bool));
    
            var professionalTaxStatusParameter = professionalTaxStatus.HasValue ?
                new ObjectParameter("ProfessionalTaxStatus", professionalTaxStatus) :
                new ObjectParameter("ProfessionalTaxStatus", typeof(bool));
    
            var welfareDeductionStatusParameter = welfareDeductionStatus.HasValue ?
                new ObjectParameter("WelfareDeductionStatus", welfareDeductionStatus) :
                new ObjectParameter("WelfareDeductionStatus", typeof(bool));
    
            var panNoParameter = panNo != null ?
                new ObjectParameter("PanNo", panNo) :
                new ObjectParameter("PanNo", typeof(string));
    
            var aadhaarNoParameter = aadhaarNo != null ?
                new ObjectParameter("AadhaarNo", aadhaarNo) :
                new ObjectParameter("AadhaarNo", typeof(string));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var bankBranchNameParameter = bankBranchName != null ?
                new ObjectParameter("BankBranchName", bankBranchName) :
                new ObjectParameter("BankBranchName", typeof(string));
    
            var iFSCParameter = iFSC != null ?
                new ObjectParameter("IFSC", iFSC) :
                new ObjectParameter("IFSC", typeof(string));
    
            var isEnglishParameter = isEnglish.HasValue ?
                new ObjectParameter("IsEnglish", isEnglish) :
                new ObjectParameter("IsEnglish", typeof(bool));
    
            var isHindiParameter = isHindi.HasValue ?
                new ObjectParameter("IsHindi", isHindi) :
                new ObjectParameter("IsHindi", typeof(bool));
    
            var isMalayalamParameter = isMalayalam.HasValue ?
                new ObjectParameter("IsMalayalam", isMalayalam) :
                new ObjectParameter("IsMalayalam", typeof(bool));
    
            var isTamilParameter = isTamil.HasValue ?
                new ObjectParameter("IsTamil", isTamil) :
                new ObjectParameter("IsTamil", typeof(bool));
    
            var isTeluguParameter = isTelugu.HasValue ?
                new ObjectParameter("IsTelugu", isTelugu) :
                new ObjectParameter("IsTelugu", typeof(bool));
    
            var isKannadaParameter = isKannada.HasValue ?
                new ObjectParameter("IsKannada", isKannada) :
                new ObjectParameter("IsKannada", typeof(bool));
    
            var pFVoluntaryContributionParameter = pFVoluntaryContribution != null ?
                new ObjectParameter("PFVoluntaryContribution", pFVoluntaryContribution) :
                new ObjectParameter("PFVoluntaryContribution", typeof(string));
    
            var pFAccountNoParameter = pFAccountNo != null ?
                new ObjectParameter("PFAccountNo", pFAccountNo) :
                new ObjectParameter("PFAccountNo", typeof(string));
    
            var pFUANParameter = pFUAN != null ?
                new ObjectParameter("PFUAN", pFUAN) :
                new ObjectParameter("PFUAN", typeof(string));
    
            var eSINoParameter = eSINo != null ?
                new ObjectParameter("ESINo", eSINo) :
                new ObjectParameter("ESINo", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateEmployee", codeParameter, titleParameter, nameParameter, departmentIDParameter, mobileNoParameter, placeParameter, userIDParameter, employeeCategoryIDParameter, designationIDParameter, joiningDateParameter, genderParameter, martialStatusParameter, dOBParameter, qualification1Parameter, qualification2Parameter, qualification3Parameter, bloodGroupParameter, noOfDependentParameter, nameOfSpouseParameter, nameOfGuardianParameter, excludeFromPayrollParameter, confirmationDateParameter, payrollCategoryIDParameter, payGradeParameter, companyEmailParameter, reportingToCodeParameter, reportingToNameParameter, transcationRoleParameter, d2DReportRoleParameter, mISReportRoleParameter, interCompanyParameter, dateOfSeveranceParameter, dateOfRejoinParameter, probationDurationParameter, employmentJobTypeIDParameter, printPayrollParameter, pFStatusParameter, eSIStatusParameter, nPSStatusParameter, medicalInsuranceStatusParameter, attandancePunchingStatusParameter, multiLocationPunchingStatusParameter, specialLeaveStatusParameter, probationStatusParameter, productionIncentiveStatusParameter, salesIncentiveStatusParameter, fixedIncentiveStatusParameter, minimumWagesStatusParameter, isERPUserParameter, medicalAidStatusParameter, bonusStatusParameter, professionalTaxStatusParameter, welfareDeductionStatusParameter, panNoParameter, aadhaarNoParameter, accountNumberParameter, bankNameParameter, bankBranchNameParameter, iFSCParameter, isEnglishParameter, isHindiParameter, isMalayalamParameter, isTamilParameter, isTeluguParameter, isKannadaParameter, pFVoluntaryContributionParameter, pFAccountNoParameter, pFUANParameter, eSINoParameter, locationIDParameter, applicationIDParameter, employeeID);
        }
    
        public virtual int SpCreateEmployeeFreeMedicineCreditLimit(string items, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemsParameter = items != null ?
                new ObjectParameter("Items", items) :
                new ObjectParameter("Items", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateEmployeeFreeMedicineCreditLimit", itemsParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateExEmployment(Nullable<int> employeeID, string employerName, string designation, string addressLine1, string addressLine2, string addressLine3, string place, string pin, Nullable<System.DateTime> dateOfJoinning, Nullable<System.DateTime> dateOfSeverance, string contactPerson, string contactNumber, Nullable<int> stateID, Nullable<int> countryID, Nullable<int> districtID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("employeeID", employeeID) :
                new ObjectParameter("employeeID", typeof(int));
    
            var employerNameParameter = employerName != null ?
                new ObjectParameter("EmployerName", employerName) :
                new ObjectParameter("EmployerName", typeof(string));
    
            var designationParameter = designation != null ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(string));
    
            var addressLine1Parameter = addressLine1 != null ?
                new ObjectParameter("AddressLine1", addressLine1) :
                new ObjectParameter("AddressLine1", typeof(string));
    
            var addressLine2Parameter = addressLine2 != null ?
                new ObjectParameter("AddressLine2", addressLine2) :
                new ObjectParameter("AddressLine2", typeof(string));
    
            var addressLine3Parameter = addressLine3 != null ?
                new ObjectParameter("AddressLine3", addressLine3) :
                new ObjectParameter("AddressLine3", typeof(string));
    
            var placeParameter = place != null ?
                new ObjectParameter("Place", place) :
                new ObjectParameter("Place", typeof(string));
    
            var pinParameter = pin != null ?
                new ObjectParameter("Pin", pin) :
                new ObjectParameter("Pin", typeof(string));
    
            var dateOfJoinningParameter = dateOfJoinning.HasValue ?
                new ObjectParameter("DateOfJoinning", dateOfJoinning) :
                new ObjectParameter("DateOfJoinning", typeof(System.DateTime));
    
            var dateOfSeveranceParameter = dateOfSeverance.HasValue ?
                new ObjectParameter("DateOfSeverance", dateOfSeverance) :
                new ObjectParameter("DateOfSeverance", typeof(System.DateTime));
    
            var contactPersonParameter = contactPerson != null ?
                new ObjectParameter("ContactPerson", contactPerson) :
                new ObjectParameter("ContactPerson", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateExEmployment", employeeIDParameter, employerNameParameter, designationParameter, addressLine1Parameter, addressLine2Parameter, addressLine3Parameter, placeParameter, pinParameter, dateOfJoinningParameter, dateOfSeveranceParameter, contactPersonParameter, contactNumberParameter, stateIDParameter, countryIDParameter, districtIDParameter);
        }
    
        public virtual int SpCreateFleet(string vehicleNo, string vehicleName, string travellingAgency, Nullable<System.DateTime> testExpairyDate, Nullable<System.DateTime> taxExpairyDate, Nullable<System.DateTime> purchaseDate, string policyNo, Nullable<System.DateTime> permitExpairyDate, string ownerName, string otherDetails, string licenseNo, Nullable<System.DateTime> insuranceExpairyDate, string insuranceCompany, string driverName, Nullable<int> canCapacity, Nullable<int> boxCapacity, Nullable<int> bagCapacity, Nullable<int> createdUserID, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var vehicleNoParameter = vehicleNo != null ?
                new ObjectParameter("VehicleNo", vehicleNo) :
                new ObjectParameter("VehicleNo", typeof(string));
    
            var vehicleNameParameter = vehicleName != null ?
                new ObjectParameter("VehicleName", vehicleName) :
                new ObjectParameter("VehicleName", typeof(string));
    
            var travellingAgencyParameter = travellingAgency != null ?
                new ObjectParameter("TravellingAgency", travellingAgency) :
                new ObjectParameter("TravellingAgency", typeof(string));
    
            var testExpairyDateParameter = testExpairyDate.HasValue ?
                new ObjectParameter("TestExpairyDate", testExpairyDate) :
                new ObjectParameter("TestExpairyDate", typeof(System.DateTime));
    
            var taxExpairyDateParameter = taxExpairyDate.HasValue ?
                new ObjectParameter("TaxExpairyDate", taxExpairyDate) :
                new ObjectParameter("TaxExpairyDate", typeof(System.DateTime));
    
            var purchaseDateParameter = purchaseDate.HasValue ?
                new ObjectParameter("PurchaseDate", purchaseDate) :
                new ObjectParameter("PurchaseDate", typeof(System.DateTime));
    
            var policyNoParameter = policyNo != null ?
                new ObjectParameter("PolicyNo", policyNo) :
                new ObjectParameter("PolicyNo", typeof(string));
    
            var permitExpairyDateParameter = permitExpairyDate.HasValue ?
                new ObjectParameter("PermitExpairyDate", permitExpairyDate) :
                new ObjectParameter("PermitExpairyDate", typeof(System.DateTime));
    
            var ownerNameParameter = ownerName != null ?
                new ObjectParameter("OwnerName", ownerName) :
                new ObjectParameter("OwnerName", typeof(string));
    
            var otherDetailsParameter = otherDetails != null ?
                new ObjectParameter("OtherDetails", otherDetails) :
                new ObjectParameter("OtherDetails", typeof(string));
    
            var licenseNoParameter = licenseNo != null ?
                new ObjectParameter("LicenseNo", licenseNo) :
                new ObjectParameter("LicenseNo", typeof(string));
    
            var insuranceExpairyDateParameter = insuranceExpairyDate.HasValue ?
                new ObjectParameter("InsuranceExpairyDate", insuranceExpairyDate) :
                new ObjectParameter("InsuranceExpairyDate", typeof(System.DateTime));
    
            var insuranceCompanyParameter = insuranceCompany != null ?
                new ObjectParameter("InsuranceCompany", insuranceCompany) :
                new ObjectParameter("InsuranceCompany", typeof(string));
    
            var driverNameParameter = driverName != null ?
                new ObjectParameter("DriverName", driverName) :
                new ObjectParameter("DriverName", typeof(string));
    
            var canCapacityParameter = canCapacity.HasValue ?
                new ObjectParameter("CanCapacity", canCapacity) :
                new ObjectParameter("CanCapacity", typeof(int));
    
            var boxCapacityParameter = boxCapacity.HasValue ?
                new ObjectParameter("BoxCapacity", boxCapacity) :
                new ObjectParameter("BoxCapacity", typeof(int));
    
            var bagCapacityParameter = bagCapacity.HasValue ?
                new ObjectParameter("BagCapacity", bagCapacity) :
                new ObjectParameter("BagCapacity", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateFleet", vehicleNoParameter, vehicleNameParameter, travellingAgencyParameter, testExpairyDateParameter, taxExpairyDateParameter, purchaseDateParameter, policyNoParameter, permitExpairyDateParameter, ownerNameParameter, otherDetailsParameter, licenseNoParameter, insuranceExpairyDateParameter, insuranceCompanyParameter, driverNameParameter, canCapacityParameter, boxCapacityParameter, bagCapacityParameter, createdUserIDParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual int SpCreateFreeMedicineLocationMapping(Nullable<int> employeeID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateFreeMedicineLocationMapping", employeeIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateFSO(string fSOCode, Nullable<bool> isAreaManager, Nullable<bool> isZonalManager, Nullable<bool> isRegionalSalesManager, Nullable<bool> isSalesManager, Nullable<int> businessCategoryID, Nullable<int> salesIncentiveCategoryID, Nullable<int> salesCategoryID, string routeCode, string routeName, string zoneCode, string zoneName, string fSOName, Nullable<int> reportingToID, Nullable<int> areaManagerID, Nullable<int> zonalManagerID, Nullable<int> salesManagerID, Nullable<int> regionalSalesManagerID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> employeeID, Nullable<bool> isActive, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter fSOID)
        {
            var fSOCodeParameter = fSOCode != null ?
                new ObjectParameter("FSOCode", fSOCode) :
                new ObjectParameter("FSOCode", typeof(string));
    
            var isAreaManagerParameter = isAreaManager.HasValue ?
                new ObjectParameter("IsAreaManager", isAreaManager) :
                new ObjectParameter("IsAreaManager", typeof(bool));
    
            var isZonalManagerParameter = isZonalManager.HasValue ?
                new ObjectParameter("IsZonalManager", isZonalManager) :
                new ObjectParameter("IsZonalManager", typeof(bool));
    
            var isRegionalSalesManagerParameter = isRegionalSalesManager.HasValue ?
                new ObjectParameter("IsRegionalSalesManager", isRegionalSalesManager) :
                new ObjectParameter("IsRegionalSalesManager", typeof(bool));
    
            var isSalesManagerParameter = isSalesManager.HasValue ?
                new ObjectParameter("IsSalesManager", isSalesManager) :
                new ObjectParameter("IsSalesManager", typeof(bool));
    
            var businessCategoryIDParameter = businessCategoryID.HasValue ?
                new ObjectParameter("BusinessCategoryID", businessCategoryID) :
                new ObjectParameter("BusinessCategoryID", typeof(int));
    
            var salesIncentiveCategoryIDParameter = salesIncentiveCategoryID.HasValue ?
                new ObjectParameter("SalesIncentiveCategoryID", salesIncentiveCategoryID) :
                new ObjectParameter("SalesIncentiveCategoryID", typeof(int));
    
            var salesCategoryIDParameter = salesCategoryID.HasValue ?
                new ObjectParameter("SalesCategoryID", salesCategoryID) :
                new ObjectParameter("SalesCategoryID", typeof(int));
    
            var routeCodeParameter = routeCode != null ?
                new ObjectParameter("RouteCode", routeCode) :
                new ObjectParameter("RouteCode", typeof(string));
    
            var routeNameParameter = routeName != null ?
                new ObjectParameter("RouteName", routeName) :
                new ObjectParameter("RouteName", typeof(string));
    
            var zoneCodeParameter = zoneCode != null ?
                new ObjectParameter("ZoneCode", zoneCode) :
                new ObjectParameter("ZoneCode", typeof(string));
    
            var zoneNameParameter = zoneName != null ?
                new ObjectParameter("ZoneName", zoneName) :
                new ObjectParameter("ZoneName", typeof(string));
    
            var fSONameParameter = fSOName != null ?
                new ObjectParameter("FSOName", fSOName) :
                new ObjectParameter("FSOName", typeof(string));
    
            var reportingToIDParameter = reportingToID.HasValue ?
                new ObjectParameter("ReportingToID", reportingToID) :
                new ObjectParameter("ReportingToID", typeof(int));
    
            var areaManagerIDParameter = areaManagerID.HasValue ?
                new ObjectParameter("AreaManagerID", areaManagerID) :
                new ObjectParameter("AreaManagerID", typeof(int));
    
            var zonalManagerIDParameter = zonalManagerID.HasValue ?
                new ObjectParameter("ZonalManagerID", zonalManagerID) :
                new ObjectParameter("ZonalManagerID", typeof(int));
    
            var salesManagerIDParameter = salesManagerID.HasValue ?
                new ObjectParameter("SalesManagerID", salesManagerID) :
                new ObjectParameter("SalesManagerID", typeof(int));
    
            var regionalSalesManagerIDParameter = regionalSalesManagerID.HasValue ?
                new ObjectParameter("RegionalSalesManagerID", regionalSalesManagerID) :
                new ObjectParameter("RegionalSalesManagerID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateFSO", fSOCodeParameter, isAreaManagerParameter, isZonalManagerParameter, isRegionalSalesManagerParameter, isSalesManagerParameter, businessCategoryIDParameter, salesIncentiveCategoryIDParameter, salesCategoryIDParameter, routeCodeParameter, routeNameParameter, zoneCodeParameter, zoneNameParameter, fSONameParameter, reportingToIDParameter, areaManagerIDParameter, zonalManagerIDParameter, salesManagerIDParameter, regionalSalesManagerIDParameter, fromDateParameter, toDateParameter, employeeIDParameter, isActiveParameter, locationIDParameter, applicationIDParameter, fSOID);
        }
    
        public virtual int SpCreateFSOIncentiveMapping(Nullable<int> fSOID, string items)
        {
            var fSOIDParameter = fSOID.HasValue ?
                new ObjectParameter("FSOID", fSOID) :
                new ObjectParameter("FSOID", typeof(int));
    
            var itemsParameter = items != null ?
                new ObjectParameter("Items", items) :
                new ObjectParameter("Items", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateFSOIncentiveMapping", fSOIDParameter, itemsParameter);
        }
    
        public virtual int SpCreateGSTCategory(string name, Nullable<decimal> sGSTPercent, Nullable<decimal> cGSTPercent, Nullable<decimal> iGSTPercent, Nullable<int> createdUserID)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var sGSTPercentParameter = sGSTPercent.HasValue ?
                new ObjectParameter("SGSTPercent", sGSTPercent) :
                new ObjectParameter("SGSTPercent", typeof(decimal));
    
            var cGSTPercentParameter = cGSTPercent.HasValue ?
                new ObjectParameter("CGSTPercent", cGSTPercent) :
                new ObjectParameter("CGSTPercent", typeof(decimal));
    
            var iGSTPercentParameter = iGSTPercent.HasValue ?
                new ObjectParameter("IGSTPercent", iGSTPercent) :
                new ObjectParameter("IGSTPercent", typeof(decimal));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateGSTCategory", nameParameter, sGSTPercentParameter, cGSTPercentParameter, iGSTPercentParameter, createdUserIDParameter);
        }
    
        public virtual int SpCreateGSTSubCategory(string name, string description, Nullable<decimal> percentage)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var percentageParameter = percentage.HasValue ?
                new ObjectParameter("Percentage", percentage) :
                new ObjectParameter("Percentage", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateGSTSubCategory", nameParameter, descriptionParameter, percentageParameter);
        }
    
        public virtual int SpCreateInterCompany(string code, string name, string description, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateInterCompany", codeParameter, nameParameter, descriptionParameter, startDateParameter, endDateParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateLogicCode(string code, string name, string remarks, Nullable<int> applicationID, Nullable<int> locationID, ObjectParameter returnValue)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateLogicCode", codeParameter, nameParameter, remarksParameter, applicationIDParameter, locationIDParameter, returnValue);
        }
    
        public virtual int SpCreateMachine(string machineCode, Nullable<System.DateTime> insulationDate, Nullable<int> machineTypeID, string model, Nullable<int> currentLocationId, string machineName, Nullable<int> processID, string motor, Nullable<decimal> powerConsuptionPerHour, string softwareVersion, string machineNumber, string manufacturer, Nullable<int> numberOfOperators, Nullable<int> numberOfHelpers, Nullable<int> maintenancePeriodInDays, Nullable<decimal> averageCostPerHour, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var machineCodeParameter = machineCode != null ?
                new ObjectParameter("MachineCode", machineCode) :
                new ObjectParameter("MachineCode", typeof(string));
    
            var insulationDateParameter = insulationDate.HasValue ?
                new ObjectParameter("InsulationDate", insulationDate) :
                new ObjectParameter("InsulationDate", typeof(System.DateTime));
    
            var machineTypeIDParameter = machineTypeID.HasValue ?
                new ObjectParameter("MachineTypeID", machineTypeID) :
                new ObjectParameter("MachineTypeID", typeof(int));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var currentLocationIdParameter = currentLocationId.HasValue ?
                new ObjectParameter("CurrentLocationId", currentLocationId) :
                new ObjectParameter("CurrentLocationId", typeof(int));
    
            var machineNameParameter = machineName != null ?
                new ObjectParameter("MachineName", machineName) :
                new ObjectParameter("MachineName", typeof(string));
    
            var processIDParameter = processID.HasValue ?
                new ObjectParameter("ProcessID", processID) :
                new ObjectParameter("ProcessID", typeof(int));
    
            var motorParameter = motor != null ?
                new ObjectParameter("Motor", motor) :
                new ObjectParameter("Motor", typeof(string));
    
            var powerConsuptionPerHourParameter = powerConsuptionPerHour.HasValue ?
                new ObjectParameter("PowerConsuptionPerHour", powerConsuptionPerHour) :
                new ObjectParameter("PowerConsuptionPerHour", typeof(decimal));
    
            var softwareVersionParameter = softwareVersion != null ?
                new ObjectParameter("SoftwareVersion", softwareVersion) :
                new ObjectParameter("SoftwareVersion", typeof(string));
    
            var machineNumberParameter = machineNumber != null ?
                new ObjectParameter("MachineNumber", machineNumber) :
                new ObjectParameter("MachineNumber", typeof(string));
    
            var manufacturerParameter = manufacturer != null ?
                new ObjectParameter("Manufacturer", manufacturer) :
                new ObjectParameter("Manufacturer", typeof(string));
    
            var numberOfOperatorsParameter = numberOfOperators.HasValue ?
                new ObjectParameter("NumberOfOperators", numberOfOperators) :
                new ObjectParameter("NumberOfOperators", typeof(int));
    
            var numberOfHelpersParameter = numberOfHelpers.HasValue ?
                new ObjectParameter("NumberOfHelpers", numberOfHelpers) :
                new ObjectParameter("NumberOfHelpers", typeof(int));
    
            var maintenancePeriodInDaysParameter = maintenancePeriodInDays.HasValue ?
                new ObjectParameter("MaintenancePeriodInDays", maintenancePeriodInDays) :
                new ObjectParameter("MaintenancePeriodInDays", typeof(int));
    
            var averageCostPerHourParameter = averageCostPerHour.HasValue ?
                new ObjectParameter("AverageCostPerHour", averageCostPerHour) :
                new ObjectParameter("AverageCostPerHour", typeof(decimal));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateMachine", machineCodeParameter, insulationDateParameter, machineTypeIDParameter, modelParameter, currentLocationIdParameter, machineNameParameter, processIDParameter, motorParameter, powerConsuptionPerHourParameter, softwareVersionParameter, machineNumberParameter, manufacturerParameter, numberOfOperatorsParameter, numberOfHelpersParameter, maintenancePeriodInDaysParameter, averageCostPerHourParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateMaterialPurification(Nullable<int> itemID, Nullable<int> unitID, Nullable<int> processID, Nullable<int> purificationItemID, Nullable<int> purificationUnitID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var processIDParameter = processID.HasValue ?
                new ObjectParameter("ProcessID", processID) :
                new ObjectParameter("ProcessID", typeof(int));
    
            var purificationItemIDParameter = purificationItemID.HasValue ?
                new ObjectParameter("PurificationItemID", purificationItemID) :
                new ObjectParameter("PurificationItemID", typeof(int));
    
            var purificationUnitIDParameter = purificationUnitID.HasValue ?
                new ObjectParameter("PurificationUnitID", purificationUnitID) :
                new ObjectParameter("PurificationUnitID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateMaterialPurification", itemIDParameter, unitIDParameter, processIDParameter, purificationItemIDParameter, purificationUnitIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateMould(string code, string mouldName, Nullable<System.DateTime> inceptionDate, Nullable<System.DateTime> expairyDate, Nullable<int> mandatoryMaintenanceTime, string manufacturedBy, Nullable<int> currentLocationID, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter mouldID)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var mouldNameParameter = mouldName != null ?
                new ObjectParameter("MouldName", mouldName) :
                new ObjectParameter("MouldName", typeof(string));
    
            var inceptionDateParameter = inceptionDate.HasValue ?
                new ObjectParameter("InceptionDate", inceptionDate) :
                new ObjectParameter("InceptionDate", typeof(System.DateTime));
    
            var expairyDateParameter = expairyDate.HasValue ?
                new ObjectParameter("ExpairyDate", expairyDate) :
                new ObjectParameter("ExpairyDate", typeof(System.DateTime));
    
            var mandatoryMaintenanceTimeParameter = mandatoryMaintenanceTime.HasValue ?
                new ObjectParameter("MandatoryMaintenanceTime", mandatoryMaintenanceTime) :
                new ObjectParameter("MandatoryMaintenanceTime", typeof(int));
    
            var manufacturedByParameter = manufacturedBy != null ?
                new ObjectParameter("ManufacturedBy", manufacturedBy) :
                new ObjectParameter("ManufacturedBy", typeof(string));
    
            var currentLocationIDParameter = currentLocationID.HasValue ?
                new ObjectParameter("CurrentLocationID", currentLocationID) :
                new ObjectParameter("CurrentLocationID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateMould", codeParameter, mouldNameParameter, inceptionDateParameter, expairyDateParameter, mandatoryMaintenanceTimeParameter, manufacturedByParameter, currentLocationIDParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, mouldID);
        }
    
        public virtual int SpCreateMouldItems(Nullable<int> mouldID, Nullable<int> itemID, Nullable<int> noOfCavity, Nullable<int> stdTime, Nullable<decimal> stdWeight, Nullable<decimal> stdRunningWaste, Nullable<decimal> stdShootingWaste, Nullable<decimal> stdGrindingWaste, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var mouldIDParameter = mouldID.HasValue ?
                new ObjectParameter("MouldID", mouldID) :
                new ObjectParameter("MouldID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var noOfCavityParameter = noOfCavity.HasValue ?
                new ObjectParameter("NoOfCavity", noOfCavity) :
                new ObjectParameter("NoOfCavity", typeof(int));
    
            var stdTimeParameter = stdTime.HasValue ?
                new ObjectParameter("StdTime", stdTime) :
                new ObjectParameter("StdTime", typeof(int));
    
            var stdWeightParameter = stdWeight.HasValue ?
                new ObjectParameter("StdWeight", stdWeight) :
                new ObjectParameter("StdWeight", typeof(decimal));
    
            var stdRunningWasteParameter = stdRunningWaste.HasValue ?
                new ObjectParameter("StdRunningWaste", stdRunningWaste) :
                new ObjectParameter("StdRunningWaste", typeof(decimal));
    
            var stdShootingWasteParameter = stdShootingWaste.HasValue ?
                new ObjectParameter("StdShootingWaste", stdShootingWaste) :
                new ObjectParameter("StdShootingWaste", typeof(decimal));
    
            var stdGrindingWasteParameter = stdGrindingWaste.HasValue ?
                new ObjectParameter("StdGrindingWaste", stdGrindingWaste) :
                new ObjectParameter("StdGrindingWaste", typeof(decimal));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateMouldItems", mouldIDParameter, itemIDParameter, noOfCavityParameter, stdTimeParameter, stdWeightParameter, stdRunningWasteParameter, stdShootingWasteParameter, stdGrindingWasteParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateMouldMachines(Nullable<int> mouldID, Nullable<int> machineID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var mouldIDParameter = mouldID.HasValue ?
                new ObjectParameter("MouldID", mouldID) :
                new ObjectParameter("MouldID", typeof(int));
    
            var machineIDParameter = machineID.HasValue ?
                new ObjectParameter("MachineID", machineID) :
                new ObjectParameter("MachineID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateMouldMachines", mouldIDParameter, machineIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateMouldSettings(Nullable<int> iD, Nullable<int> mouldID, string settingTime, string reason, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var mouldIDParameter = mouldID.HasValue ?
                new ObjectParameter("MouldID", mouldID) :
                new ObjectParameter("MouldID", typeof(int));
    
            var settingTimeParameter = settingTime != null ?
                new ObjectParameter("SettingTime", settingTime) :
                new ObjectParameter("SettingTime", typeof(string));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateMouldSettings", iDParameter, mouldIDParameter, settingTimeParameter, reasonParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreatePackingDefinition(Nullable<int> productionGroupID, Nullable<int> itemID, Nullable<int> unitID, Nullable<int> batchTypeID, Nullable<int> packingSequence, string processStage, Nullable<int> applicationID, ObjectParameter packingDefinitionID)
        {
            var productionGroupIDParameter = productionGroupID.HasValue ?
                new ObjectParameter("ProductionGroupID", productionGroupID) :
                new ObjectParameter("ProductionGroupID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var packingSequenceParameter = packingSequence.HasValue ?
                new ObjectParameter("PackingSequence", packingSequence) :
                new ObjectParameter("PackingSequence", typeof(int));
    
            var processStageParameter = processStage != null ?
                new ObjectParameter("ProcessStage", processStage) :
                new ObjectParameter("ProcessStage", typeof(string));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePackingDefinition", productionGroupIDParameter, itemIDParameter, unitIDParameter, batchTypeIDParameter, packingSequenceParameter, processStageParameter, applicationIDParameter, packingDefinitionID);
        }
    
        public virtual int SpCreatePackingDefinitionMaterials(Nullable<int> packingDefinitionMasterID, Nullable<int> materialID, Nullable<int> unitID, Nullable<decimal> qty, Nullable<decimal> primaryToPackingUnitConversionFactor, Nullable<int> productionGroupID, Nullable<int> batchTypeID, Nullable<int> packingSequence, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> applicationID)
        {
            var packingDefinitionMasterIDParameter = packingDefinitionMasterID.HasValue ?
                new ObjectParameter("PackingDefinitionMasterID", packingDefinitionMasterID) :
                new ObjectParameter("PackingDefinitionMasterID", typeof(int));
    
            var materialIDParameter = materialID.HasValue ?
                new ObjectParameter("MaterialID", materialID) :
                new ObjectParameter("MaterialID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(decimal));
    
            var primaryToPackingUnitConversionFactorParameter = primaryToPackingUnitConversionFactor.HasValue ?
                new ObjectParameter("PrimaryToPackingUnitConversionFactor", primaryToPackingUnitConversionFactor) :
                new ObjectParameter("PrimaryToPackingUnitConversionFactor", typeof(decimal));
    
            var productionGroupIDParameter = productionGroupID.HasValue ?
                new ObjectParameter("ProductionGroupID", productionGroupID) :
                new ObjectParameter("ProductionGroupID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var packingSequenceParameter = packingSequence.HasValue ?
                new ObjectParameter("PackingSequence", packingSequence) :
                new ObjectParameter("PackingSequence", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePackingDefinitionMaterials", packingDefinitionMasterIDParameter, materialIDParameter, unitIDParameter, qtyParameter, primaryToPackingUnitConversionFactorParameter, productionGroupIDParameter, batchTypeIDParameter, packingSequenceParameter, startDateParameter, endDateParameter, applicationIDParameter);
        }
    
        public virtual int SpCreatePackingDefinitionProcesses(Nullable<int> packingDefinitionMasterID, string processName, string steps, Nullable<decimal> skilledLabourMinutes, Nullable<decimal> skilledLabourCost, Nullable<decimal> unSkilledLabourMinutes, Nullable<decimal> unSkilledLabourCost, Nullable<decimal> machineMinutes, Nullable<decimal> machineCost, Nullable<int> productionGroupID, Nullable<int> batchTypeID, Nullable<int> packingSequence, Nullable<int> applicationID)
        {
            var packingDefinitionMasterIDParameter = packingDefinitionMasterID.HasValue ?
                new ObjectParameter("PackingDefinitionMasterID", packingDefinitionMasterID) :
                new ObjectParameter("PackingDefinitionMasterID", typeof(int));
    
            var processNameParameter = processName != null ?
                new ObjectParameter("ProcessName", processName) :
                new ObjectParameter("ProcessName", typeof(string));
    
            var stepsParameter = steps != null ?
                new ObjectParameter("Steps", steps) :
                new ObjectParameter("Steps", typeof(string));
    
            var skilledLabourMinutesParameter = skilledLabourMinutes.HasValue ?
                new ObjectParameter("SkilledLabourMinutes", skilledLabourMinutes) :
                new ObjectParameter("SkilledLabourMinutes", typeof(decimal));
    
            var skilledLabourCostParameter = skilledLabourCost.HasValue ?
                new ObjectParameter("SkilledLabourCost", skilledLabourCost) :
                new ObjectParameter("SkilledLabourCost", typeof(decimal));
    
            var unSkilledLabourMinutesParameter = unSkilledLabourMinutes.HasValue ?
                new ObjectParameter("UnSkilledLabourMinutes", unSkilledLabourMinutes) :
                new ObjectParameter("UnSkilledLabourMinutes", typeof(decimal));
    
            var unSkilledLabourCostParameter = unSkilledLabourCost.HasValue ?
                new ObjectParameter("UnSkilledLabourCost", unSkilledLabourCost) :
                new ObjectParameter("UnSkilledLabourCost", typeof(decimal));
    
            var machineMinutesParameter = machineMinutes.HasValue ?
                new ObjectParameter("MachineMinutes", machineMinutes) :
                new ObjectParameter("MachineMinutes", typeof(decimal));
    
            var machineCostParameter = machineCost.HasValue ?
                new ObjectParameter("MachineCost", machineCost) :
                new ObjectParameter("MachineCost", typeof(decimal));
    
            var productionGroupIDParameter = productionGroupID.HasValue ?
                new ObjectParameter("ProductionGroupID", productionGroupID) :
                new ObjectParameter("ProductionGroupID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var packingSequenceParameter = packingSequence.HasValue ?
                new ObjectParameter("PackingSequence", packingSequence) :
                new ObjectParameter("PackingSequence", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePackingDefinitionProcesses", packingDefinitionMasterIDParameter, processNameParameter, stepsParameter, skilledLabourMinutesParameter, skilledLabourCostParameter, unSkilledLabourMinutesParameter, unSkilledLabourCostParameter, machineMinutesParameter, machineCostParameter, productionGroupIDParameter, batchTypeIDParameter, packingSequenceParameter, applicationIDParameter);
        }
    
        public virtual int SpCreatePackingDefinitionTrans(Nullable<int> packingDefinitionMasterID, Nullable<int> materialID, Nullable<int> unitID, Nullable<decimal> qty, Nullable<decimal> primaryToPackingUnitConversionFactor, Nullable<int> applicationID)
        {
            var packingDefinitionMasterIDParameter = packingDefinitionMasterID.HasValue ?
                new ObjectParameter("PackingDefinitionMasterID", packingDefinitionMasterID) :
                new ObjectParameter("PackingDefinitionMasterID", typeof(int));
    
            var materialIDParameter = materialID.HasValue ?
                new ObjectParameter("MaterialID", materialID) :
                new ObjectParameter("MaterialID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(decimal));
    
            var primaryToPackingUnitConversionFactorParameter = primaryToPackingUnitConversionFactor.HasValue ?
                new ObjectParameter("PrimaryToPackingUnitConversionFactor", primaryToPackingUnitConversionFactor) :
                new ObjectParameter("PrimaryToPackingUnitConversionFactor", typeof(decimal));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePackingDefinitionTrans", packingDefinitionMasterIDParameter, materialIDParameter, unitIDParameter, qtyParameter, primaryToPackingUnitConversionFactorParameter, applicationIDParameter);
        }
    
        public virtual int SpCreatePatient(string code, string name, Nullable<int> age, string sex, Nullable<System.DateTime> dob, string address1, string address2, string place, string email, string mob, string pinCode, Nullable<int> doctorID, string doctorName, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter patientID)
        {
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(int));
    
            var sexParameter = sex != null ?
                new ObjectParameter("Sex", sex) :
                new ObjectParameter("Sex", typeof(string));
    
            var dobParameter = dob.HasValue ?
                new ObjectParameter("Dob", dob) :
                new ObjectParameter("Dob", typeof(System.DateTime));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var placeParameter = place != null ?
                new ObjectParameter("Place", place) :
                new ObjectParameter("Place", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var mobParameter = mob != null ?
                new ObjectParameter("Mob", mob) :
                new ObjectParameter("Mob", typeof(string));
    
            var pinCodeParameter = pinCode != null ?
                new ObjectParameter("PinCode", pinCode) :
                new ObjectParameter("PinCode", typeof(string));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var doctorNameParameter = doctorName != null ?
                new ObjectParameter("DoctorName", doctorName) :
                new ObjectParameter("DoctorName", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePatient", codeParameter, nameParameter, ageParameter, sexParameter, dobParameter, address1Parameter, address2Parameter, placeParameter, emailParameter, mobParameter, pinCodeParameter, doctorIDParameter, doctorNameParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, patientID);
        }
    
        public virtual int SpCreatePaymentDays(string name, Nullable<int> days, Nullable<int> createdUserID)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var daysParameter = days.HasValue ?
                new ObjectParameter("Days", days) :
                new ObjectParameter("Days", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePaymentDays", nameParameter, daysParameter, createdUserIDParameter);
        }
    
        public virtual int SpCreatePaymentGroup(string name, Nullable<int> paymentWeek, Nullable<int> createdUserID, Nullable<int> applicationID)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var paymentWeekParameter = paymentWeek.HasValue ?
                new ObjectParameter("PaymentWeek", paymentWeek) :
                new ObjectParameter("PaymentWeek", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePaymentGroup", nameParameter, paymentWeekParameter, createdUserIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreatePaymentMode(string name, Nullable<int> createdUserID)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePaymentMode", nameParameter, createdUserIDParameter);
        }
    
        public virtual int SpCreatePaymentType(string name, Nullable<int> createdUserID)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePaymentType", nameParameter, createdUserIDParameter);
        }
    
        public virtual int SpCreatePlaces(string code, string name, string address, Nullable<int> districtID, Nullable<int> stateID, Nullable<int> countryID)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePlaces", codeParameter, nameParameter, addressParameter, districtIDParameter, stateIDParameter, countryIDParameter);
        }
    
        public virtual int SpCreatePowerConsumption(Nullable<int> location, string time, Nullable<decimal> amount, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var locationParameter = location.HasValue ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(int));
    
            var timeParameter = time != null ?
                new ObjectParameter("Time", time) :
                new ObjectParameter("Time", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePowerConsumption", locationParameter, timeParameter, amountParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreatePriceListDetail(Nullable<int> basePriceListID, string itemCode, Nullable<decimal> mRP, Nullable<decimal> loosePrice, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var basePriceListIDParameter = basePriceListID.HasValue ?
                new ObjectParameter("BasePriceListID", basePriceListID) :
                new ObjectParameter("BasePriceListID", typeof(int));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var mRPParameter = mRP.HasValue ?
                new ObjectParameter("MRP", mRP) :
                new ObjectParameter("MRP", typeof(decimal));
    
            var loosePriceParameter = loosePrice.HasValue ?
                new ObjectParameter("LoosePrice", loosePrice) :
                new ObjectParameter("LoosePrice", typeof(decimal));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePriceListDetail", basePriceListIDParameter, itemCodeParameter, mRPParameter, loosePriceParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreatePriceListDetails(Nullable<int> basePriceListID, string items, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var basePriceListIDParameter = basePriceListID.HasValue ?
                new ObjectParameter("BasePriceListID", basePriceListID) :
                new ObjectParameter("BasePriceListID", typeof(int));
    
            var itemsParameter = items != null ?
                new ObjectParameter("Items", items) :
                new ObjectParameter("Items", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePriceListDetails", basePriceListIDParameter, itemsParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateProcess(string code, string process, Nullable<int> createdUserID, Nullable<int> applicationID, Nullable<int> locationID, ObjectParameter returnValue)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var processParameter = process != null ?
                new ObjectParameter("Process", process) :
                new ObjectParameter("Process", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateProcess", codeParameter, processParameter, createdUserIDParameter, applicationIDParameter, locationIDParameter, returnValue);
        }
    
        public virtual int SpCreateProcessDefinitionTrans(Nullable<int> productDefinitionMasterID, string processName, string steps, Nullable<decimal> skilledLabourMinutes, Nullable<decimal> skilledLabourCost, Nullable<decimal> unSkilledLabourMinutes, Nullable<decimal> unSkilledLabourCost, Nullable<decimal> machineMinutes, Nullable<decimal> machineCost, string process, Nullable<int> applicationID)
        {
            var productDefinitionMasterIDParameter = productDefinitionMasterID.HasValue ?
                new ObjectParameter("ProductDefinitionMasterID", productDefinitionMasterID) :
                new ObjectParameter("ProductDefinitionMasterID", typeof(int));
    
            var processNameParameter = processName != null ?
                new ObjectParameter("ProcessName", processName) :
                new ObjectParameter("ProcessName", typeof(string));
    
            var stepsParameter = steps != null ?
                new ObjectParameter("Steps", steps) :
                new ObjectParameter("Steps", typeof(string));
    
            var skilledLabourMinutesParameter = skilledLabourMinutes.HasValue ?
                new ObjectParameter("SkilledLabourMinutes", skilledLabourMinutes) :
                new ObjectParameter("SkilledLabourMinutes", typeof(decimal));
    
            var skilledLabourCostParameter = skilledLabourCost.HasValue ?
                new ObjectParameter("SkilledLabourCost", skilledLabourCost) :
                new ObjectParameter("SkilledLabourCost", typeof(decimal));
    
            var unSkilledLabourMinutesParameter = unSkilledLabourMinutes.HasValue ?
                new ObjectParameter("UnSkilledLabourMinutes", unSkilledLabourMinutes) :
                new ObjectParameter("UnSkilledLabourMinutes", typeof(decimal));
    
            var unSkilledLabourCostParameter = unSkilledLabourCost.HasValue ?
                new ObjectParameter("UnSkilledLabourCost", unSkilledLabourCost) :
                new ObjectParameter("UnSkilledLabourCost", typeof(decimal));
    
            var machineMinutesParameter = machineMinutes.HasValue ?
                new ObjectParameter("MachineMinutes", machineMinutes) :
                new ObjectParameter("MachineMinutes", typeof(decimal));
    
            var machineCostParameter = machineCost.HasValue ?
                new ObjectParameter("MachineCost", machineCost) :
                new ObjectParameter("MachineCost", typeof(decimal));
    
            var processParameter = process != null ?
                new ObjectParameter("Process", process) :
                new ObjectParameter("Process", typeof(string));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateProcessDefinitionTrans", productDefinitionMasterIDParameter, processNameParameter, stepsParameter, skilledLabourMinutesParameter, skilledLabourCostParameter, unSkilledLabourMinutesParameter, unSkilledLabourCostParameter, machineMinutesParameter, machineCostParameter, processParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateProductionDefinition(Nullable<int> productionGroupID, Nullable<int> productID, Nullable<decimal> batchSize, Nullable<int> itemID, Nullable<int> unitID, Nullable<decimal> standardOutputQty, string processStage, Nullable<int> productionSequence, Nullable<int> applicationID, ObjectParameter definitionID)
        {
            var productionGroupIDParameter = productionGroupID.HasValue ?
                new ObjectParameter("ProductionGroupID", productionGroupID) :
                new ObjectParameter("ProductionGroupID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var batchSizeParameter = batchSize.HasValue ?
                new ObjectParameter("BatchSize", batchSize) :
                new ObjectParameter("BatchSize", typeof(decimal));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var standardOutputQtyParameter = standardOutputQty.HasValue ?
                new ObjectParameter("StandardOutputQty", standardOutputQty) :
                new ObjectParameter("StandardOutputQty", typeof(decimal));
    
            var processStageParameter = processStage != null ?
                new ObjectParameter("ProcessStage", processStage) :
                new ObjectParameter("ProcessStage", typeof(string));
    
            var productionSequenceParameter = productionSequence.HasValue ?
                new ObjectParameter("ProductionSequence", productionSequence) :
                new ObjectParameter("ProductionSequence", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateProductionDefinition", productionGroupIDParameter, productIDParameter, batchSizeParameter, itemIDParameter, unitIDParameter, standardOutputQtyParameter, processStageParameter, productionSequenceParameter, applicationIDParameter, definitionID);
        }
    
        public virtual int SpCreateProductionDefinitionMaterials(Nullable<int> productDefinitionMasterID, Nullable<int> materialID, Nullable<int> unitID, Nullable<decimal> qty, string usageMode, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> applicationID)
        {
            var productDefinitionMasterIDParameter = productDefinitionMasterID.HasValue ?
                new ObjectParameter("ProductDefinitionMasterID", productDefinitionMasterID) :
                new ObjectParameter("ProductDefinitionMasterID", typeof(int));
    
            var materialIDParameter = materialID.HasValue ?
                new ObjectParameter("MaterialID", materialID) :
                new ObjectParameter("MaterialID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(decimal));
    
            var usageModeParameter = usageMode != null ?
                new ObjectParameter("UsageMode", usageMode) :
                new ObjectParameter("UsageMode", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateProductionDefinitionMaterials", productDefinitionMasterIDParameter, materialIDParameter, unitIDParameter, qtyParameter, usageModeParameter, startDateParameter, endDateParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateProductionDefinitionProcesses(Nullable<int> productDefinitionMasterID, string processName, string steps, Nullable<decimal> skilledLabourMinutes, Nullable<decimal> skilledLabourCost, Nullable<decimal> unSkilledLabourMinutes, Nullable<decimal> unSkilledLabourCost, Nullable<decimal> machineMinutes, Nullable<decimal> machineCost, string process, Nullable<int> applicationID)
        {
            var productDefinitionMasterIDParameter = productDefinitionMasterID.HasValue ?
                new ObjectParameter("ProductDefinitionMasterID", productDefinitionMasterID) :
                new ObjectParameter("ProductDefinitionMasterID", typeof(int));
    
            var processNameParameter = processName != null ?
                new ObjectParameter("ProcessName", processName) :
                new ObjectParameter("ProcessName", typeof(string));
    
            var stepsParameter = steps != null ?
                new ObjectParameter("Steps", steps) :
                new ObjectParameter("Steps", typeof(string));
    
            var skilledLabourMinutesParameter = skilledLabourMinutes.HasValue ?
                new ObjectParameter("SkilledLabourMinutes", skilledLabourMinutes) :
                new ObjectParameter("SkilledLabourMinutes", typeof(decimal));
    
            var skilledLabourCostParameter = skilledLabourCost.HasValue ?
                new ObjectParameter("SkilledLabourCost", skilledLabourCost) :
                new ObjectParameter("SkilledLabourCost", typeof(decimal));
    
            var unSkilledLabourMinutesParameter = unSkilledLabourMinutes.HasValue ?
                new ObjectParameter("UnSkilledLabourMinutes", unSkilledLabourMinutes) :
                new ObjectParameter("UnSkilledLabourMinutes", typeof(decimal));
    
            var unSkilledLabourCostParameter = unSkilledLabourCost.HasValue ?
                new ObjectParameter("UnSkilledLabourCost", unSkilledLabourCost) :
                new ObjectParameter("UnSkilledLabourCost", typeof(decimal));
    
            var machineMinutesParameter = machineMinutes.HasValue ?
                new ObjectParameter("MachineMinutes", machineMinutes) :
                new ObjectParameter("MachineMinutes", typeof(decimal));
    
            var machineCostParameter = machineCost.HasValue ?
                new ObjectParameter("MachineCost", machineCost) :
                new ObjectParameter("MachineCost", typeof(decimal));
    
            var processParameter = process != null ?
                new ObjectParameter("Process", process) :
                new ObjectParameter("Process", typeof(string));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateProductionDefinitionProcesses", productDefinitionMasterIDParameter, processNameParameter, stepsParameter, skilledLabourMinutesParameter, skilledLabourCostParameter, unSkilledLabourMinutesParameter, unSkilledLabourCostParameter, machineMinutesParameter, machineCostParameter, processParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateProductionGroup(Nullable<int> productionGroupItemID, string productionGroupName, Nullable<bool> isKalkan, Nullable<int> productionLocationID, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter productionGroupID)
        {
            var productionGroupItemIDParameter = productionGroupItemID.HasValue ?
                new ObjectParameter("ProductionGroupItemID", productionGroupItemID) :
                new ObjectParameter("ProductionGroupItemID", typeof(int));
    
            var productionGroupNameParameter = productionGroupName != null ?
                new ObjectParameter("ProductionGroupName", productionGroupName) :
                new ObjectParameter("ProductionGroupName", typeof(string));
    
            var isKalkanParameter = isKalkan.HasValue ?
                new ObjectParameter("IsKalkan", isKalkan) :
                new ObjectParameter("IsKalkan", typeof(bool));
    
            var productionLocationIDParameter = productionLocationID.HasValue ?
                new ObjectParameter("ProductionLocationID", productionLocationID) :
                new ObjectParameter("ProductionLocationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateProductionGroup", productionGroupItemIDParameter, productionGroupNameParameter, isKalkanParameter, productionLocationIDParameter, locationIDParameter, applicationIDParameter, productionGroupID);
        }
    
        public virtual int SpCreateProductionLocationMapping(Nullable<int> productionGroupID, string productionGroupName, Nullable<int> locationID)
        {
            var productionGroupIDParameter = productionGroupID.HasValue ?
                new ObjectParameter("ProductionGroupID", productionGroupID) :
                new ObjectParameter("ProductionGroupID", typeof(int));
    
            var productionGroupNameParameter = productionGroupName != null ?
                new ObjectParameter("ProductionGroupName", productionGroupName) :
                new ObjectParameter("ProductionGroupName", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateProductionLocationMapping", productionGroupIDParameter, productionGroupNameParameter, locationIDParameter);
        }
    
        public virtual int SpCreateProject(string name, string description, string code, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter returnValue)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateProject", nameParameter, descriptionParameter, codeParameter, startDateParameter, endDateParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter, returnValue);
        }
    
        public virtual int SpCreateQCTest(string name, string type, Nullable<int> createdUserID, Nullable<int> applicationID, ObjectParameter returnValue)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateQCTest", nameParameter, typeParameter, createdUserIDParameter, applicationIDParameter, returnValue);
        }
    
        public virtual int SpCreateQCTestDefinition(Nullable<int> itemID, Nullable<int> qCTestID, Nullable<decimal> rangefrom, Nullable<decimal> rangeto, string result, Nullable<bool> ismandatory, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> createdUserID, Nullable<int> applicationID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var qCTestIDParameter = qCTestID.HasValue ?
                new ObjectParameter("QCTestID", qCTestID) :
                new ObjectParameter("QCTestID", typeof(int));
    
            var rangefromParameter = rangefrom.HasValue ?
                new ObjectParameter("Rangefrom", rangefrom) :
                new ObjectParameter("Rangefrom", typeof(decimal));
    
            var rangetoParameter = rangeto.HasValue ?
                new ObjectParameter("Rangeto", rangeto) :
                new ObjectParameter("Rangeto", typeof(decimal));
    
            var resultParameter = result != null ?
                new ObjectParameter("Result", result) :
                new ObjectParameter("Result", typeof(string));
    
            var ismandatoryParameter = ismandatory.HasValue ?
                new ObjectParameter("Ismandatory", ismandatory) :
                new ObjectParameter("Ismandatory", typeof(bool));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateQCTestDefinition", itemIDParameter, qCTestIDParameter, rangefromParameter, rangetoParameter, resultParameter, ismandatoryParameter, startDateParameter, endDateParameter, createdUserIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateRole(string code, string rolename, string remarks, Nullable<int> applicationID, ObjectParameter roleID)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var rolenameParameter = rolename != null ?
                new ObjectParameter("Rolename", rolename) :
                new ObjectParameter("Rolename", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateRole", codeParameter, rolenameParameter, remarksParameter, applicationIDParameter, roleID);
        }
    
        public virtual int SpCreateRolePrivileges(Nullable<int> roleID, Nullable<int> actionID, Nullable<int> applicationID)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var actionIDParameter = actionID.HasValue ?
                new ObjectParameter("ActionID", actionID) :
                new ObjectParameter("ActionID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateRolePrivileges", roleIDParameter, actionIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateRoleTabPrivileges(Nullable<int> roleID, Nullable<int> tabID, Nullable<int> applicationID)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var tabIDParameter = tabID.HasValue ?
                new ObjectParameter("TabID", tabID) :
                new ObjectParameter("TabID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateRoleTabPrivileges", roleIDParameter, tabIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateSalaryDetails(Nullable<int> employeeid, string payType, Nullable<decimal> salaryMonthly, Nullable<decimal> salaryAnnual, Nullable<bool> isFinancePayRoll, Nullable<bool> isProductionIncentivePayRoll, Nullable<bool> isSalesIncentivePayRoll)
        {
            var employeeidParameter = employeeid.HasValue ?
                new ObjectParameter("employeeid", employeeid) :
                new ObjectParameter("employeeid", typeof(int));
    
            var payTypeParameter = payType != null ?
                new ObjectParameter("PayType", payType) :
                new ObjectParameter("PayType", typeof(string));
    
            var salaryMonthlyParameter = salaryMonthly.HasValue ?
                new ObjectParameter("SalaryMonthly", salaryMonthly) :
                new ObjectParameter("SalaryMonthly", typeof(decimal));
    
            var salaryAnnualParameter = salaryAnnual.HasValue ?
                new ObjectParameter("SalaryAnnual", salaryAnnual) :
                new ObjectParameter("SalaryAnnual", typeof(decimal));
    
            var isFinancePayRollParameter = isFinancePayRoll.HasValue ?
                new ObjectParameter("IsFinancePayRoll", isFinancePayRoll) :
                new ObjectParameter("IsFinancePayRoll", typeof(bool));
    
            var isProductionIncentivePayRollParameter = isProductionIncentivePayRoll.HasValue ?
                new ObjectParameter("IsProductionIncentivePayRoll", isProductionIncentivePayRoll) :
                new ObjectParameter("IsProductionIncentivePayRoll", typeof(bool));
    
            var isSalesIncentivePayRollParameter = isSalesIncentivePayRoll.HasValue ?
                new ObjectParameter("IsSalesIncentivePayRoll", isSalesIncentivePayRoll) :
                new ObjectParameter("IsSalesIncentivePayRoll", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateSalaryDetails", employeeidParameter, payTypeParameter, salaryMonthlyParameter, salaryAnnualParameter, isFinancePayRollParameter, isProductionIncentivePayRollParameter, isSalesIncentivePayRollParameter);
        }
    
        public virtual int SpCreateSalesBudget(Nullable<int> locationID, Nullable<int> applicationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateSalesBudget", locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateSalesRepresentatives(Nullable<int> iD, Nullable<int> employeeID, string fSOName, Nullable<int> parentID, Nullable<int> designationID, Nullable<bool> isSubLevel, Nullable<int> salesIncentiveCategoryID, Nullable<int> areaID, Nullable<int> createdUserID, Nullable<int> applicationID, ObjectParameter returnValue)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var fSONameParameter = fSOName != null ?
                new ObjectParameter("FSOName", fSOName) :
                new ObjectParameter("FSOName", typeof(string));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var designationIDParameter = designationID.HasValue ?
                new ObjectParameter("DesignationID", designationID) :
                new ObjectParameter("DesignationID", typeof(int));
    
            var isSubLevelParameter = isSubLevel.HasValue ?
                new ObjectParameter("IsSubLevel", isSubLevel) :
                new ObjectParameter("IsSubLevel", typeof(bool));
    
            var salesIncentiveCategoryIDParameter = salesIncentiveCategoryID.HasValue ?
                new ObjectParameter("SalesIncentiveCategoryID", salesIncentiveCategoryID) :
                new ObjectParameter("SalesIncentiveCategoryID", typeof(int));
    
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("AreaID", areaID) :
                new ObjectParameter("AreaID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateSalesRepresentatives", iDParameter, employeeIDParameter, fSONameParameter, parentIDParameter, designationIDParameter, isSubLevelParameter, salesIncentiveCategoryIDParameter, areaIDParameter, createdUserIDParameter, applicationIDParameter, returnValue);
        }
    
        public virtual int SpCreateScheme(string schemeName, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter schemeID)
        {
            var schemeNameParameter = schemeName != null ?
                new ObjectParameter("SchemeName", schemeName) :
                new ObjectParameter("SchemeName", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateScheme", schemeNameParameter, startDateParameter, endDateParameter, finYearParameter, locationIDParameter, applicationIDParameter, schemeID);
        }
    
        public virtual int SpCreateSerialNumber(string form, string field, string locationPrefix, string prefix, string specialPrefix, string finYearPrefix, Nullable<int> value, Nullable<bool> isLeadingZero, Nullable<int> noOfDigits, string suffix, Nullable<bool> isMaster, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var formParameter = form != null ?
                new ObjectParameter("Form", form) :
                new ObjectParameter("Form", typeof(string));
    
            var fieldParameter = field != null ?
                new ObjectParameter("Field", field) :
                new ObjectParameter("Field", typeof(string));
    
            var locationPrefixParameter = locationPrefix != null ?
                new ObjectParameter("LocationPrefix", locationPrefix) :
                new ObjectParameter("LocationPrefix", typeof(string));
    
            var prefixParameter = prefix != null ?
                new ObjectParameter("Prefix", prefix) :
                new ObjectParameter("Prefix", typeof(string));
    
            var specialPrefixParameter = specialPrefix != null ?
                new ObjectParameter("SpecialPrefix", specialPrefix) :
                new ObjectParameter("SpecialPrefix", typeof(string));
    
            var finYearPrefixParameter = finYearPrefix != null ?
                new ObjectParameter("FinYearPrefix", finYearPrefix) :
                new ObjectParameter("FinYearPrefix", typeof(string));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(int));
    
            var isLeadingZeroParameter = isLeadingZero.HasValue ?
                new ObjectParameter("IsLeadingZero", isLeadingZero) :
                new ObjectParameter("IsLeadingZero", typeof(bool));
    
            var noOfDigitsParameter = noOfDigits.HasValue ?
                new ObjectParameter("NoOfDigits", noOfDigits) :
                new ObjectParameter("NoOfDigits", typeof(int));
    
            var suffixParameter = suffix != null ?
                new ObjectParameter("suffix", suffix) :
                new ObjectParameter("suffix", typeof(string));
    
            var isMasterParameter = isMaster.HasValue ?
                new ObjectParameter("IsMaster", isMaster) :
                new ObjectParameter("IsMaster", typeof(bool));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateSerialNumber", formParameter, fieldParameter, locationPrefixParameter, prefixParameter, specialPrefixParameter, finYearPrefixParameter, valueParameter, isLeadingZeroParameter, noOfDigitsParameter, suffixParameter, isMasterParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateSerialNumberNew(string form, string field, string locationPrefix, string prefix, string specialPrefix, string finYearPrefix, Nullable<int> value, Nullable<bool> isLeadingZero, Nullable<int> noOfDigits, string suffix, Nullable<bool> isMaster, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter retValue)
        {
            var formParameter = form != null ?
                new ObjectParameter("Form", form) :
                new ObjectParameter("Form", typeof(string));
    
            var fieldParameter = field != null ?
                new ObjectParameter("Field", field) :
                new ObjectParameter("Field", typeof(string));
    
            var locationPrefixParameter = locationPrefix != null ?
                new ObjectParameter("LocationPrefix", locationPrefix) :
                new ObjectParameter("LocationPrefix", typeof(string));
    
            var prefixParameter = prefix != null ?
                new ObjectParameter("Prefix", prefix) :
                new ObjectParameter("Prefix", typeof(string));
    
            var specialPrefixParameter = specialPrefix != null ?
                new ObjectParameter("SpecialPrefix", specialPrefix) :
                new ObjectParameter("SpecialPrefix", typeof(string));
    
            var finYearPrefixParameter = finYearPrefix != null ?
                new ObjectParameter("FinYearPrefix", finYearPrefix) :
                new ObjectParameter("FinYearPrefix", typeof(string));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(int));
    
            var isLeadingZeroParameter = isLeadingZero.HasValue ?
                new ObjectParameter("IsLeadingZero", isLeadingZero) :
                new ObjectParameter("IsLeadingZero", typeof(bool));
    
            var noOfDigitsParameter = noOfDigits.HasValue ?
                new ObjectParameter("NoOfDigits", noOfDigits) :
                new ObjectParameter("NoOfDigits", typeof(int));
    
            var suffixParameter = suffix != null ?
                new ObjectParameter("suffix", suffix) :
                new ObjectParameter("suffix", typeof(string));
    
            var isMasterParameter = isMaster.HasValue ?
                new ObjectParameter("IsMaster", isMaster) :
                new ObjectParameter("IsMaster", typeof(bool));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateSerialNumberNew", formParameter, fieldParameter, locationPrefixParameter, prefixParameter, specialPrefixParameter, finYearPrefixParameter, valueParameter, isLeadingZeroParameter, noOfDigitsParameter, suffixParameter, isMasterParameter, finYearParameter, locationIDParameter, applicationIDParameter, retValue);
        }
    
        public virtual int SpCreateState(string name, string gSTState, Nullable<int> countryID, Nullable<int> createdUserID, ObjectParameter returnValue)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var gSTStateParameter = gSTState != null ?
                new ObjectParameter("GSTState", gSTState) :
                new ObjectParameter("GSTState", typeof(string));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateState", nameParameter, gSTStateParameter, countryIDParameter, createdUserIDParameter, returnValue);
        }
    
        public virtual int SpCreateStockAdjustmentReasons(string name, string code, string remarks, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> finYear, ObjectParameter returnValue)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateStockAdjustmentReasons", nameParameter, codeParameter, remarksParameter, locationIDParameter, applicationIDParameter, finYearParameter, returnValue);
        }
    
        public virtual int SpCreateSupplierAccountsCategory(string name, Nullable<int> createdUserID, Nullable<int> applicationID, ObjectParameter returnValue)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateSupplierAccountsCategory", nameParameter, createdUserIDParameter, applicationIDParameter, returnValue);
        }
    
        public virtual int SpCreateSupplierCategory(string name, string remarks, Nullable<int> createdUserID, Nullable<int> applicationID, ObjectParameter returnValue)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateSupplierCategory", nameParameter, remarksParameter, createdUserIDParameter, applicationIDParameter, returnValue);
        }
    
        public virtual int SpCreateSupplierItemCategory(Nullable<int> supplierID, Nullable<int> itemCategoryID, Nullable<int> createdUserID, Nullable<System.DateTime> createdDate)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateSupplierItemCategory", supplierIDParameter, itemCategoryIDParameter, createdUserIDParameter, createdDateParameter);
        }
    
        public virtual int SpCreateSupplierLocation(Nullable<int> supplierID, string supplierName, Nullable<int> locationID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var supplierNameParameter = supplierName != null ?
                new ObjectParameter("SupplierName", supplierName) :
                new ObjectParameter("SupplierName", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateSupplierLocation", supplierIDParameter, supplierNameParameter, locationIDParameter);
        }
    
        public virtual int SpCreateTDS(string code, string name, string itemAccountCategory, Nullable<decimal> tDSRate, string companyType, string expenseType, string iTSection, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string remark)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var itemAccountCategoryParameter = itemAccountCategory != null ?
                new ObjectParameter("ItemAccountCategory", itemAccountCategory) :
                new ObjectParameter("ItemAccountCategory", typeof(string));
    
            var tDSRateParameter = tDSRate.HasValue ?
                new ObjectParameter("TDSRate", tDSRate) :
                new ObjectParameter("TDSRate", typeof(decimal));
    
            var companyTypeParameter = companyType != null ?
                new ObjectParameter("CompanyType", companyType) :
                new ObjectParameter("CompanyType", typeof(string));
    
            var expenseTypeParameter = expenseType != null ?
                new ObjectParameter("ExpenseType", expenseType) :
                new ObjectParameter("ExpenseType", typeof(string));
    
            var iTSectionParameter = iTSection != null ?
                new ObjectParameter("ITSection", iTSection) :
                new ObjectParameter("ITSection", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateTDS", codeParameter, nameParameter, itemAccountCategoryParameter, tDSRateParameter, companyTypeParameter, expenseTypeParameter, iTSectionParameter, startDateParameter, endDateParameter, remarkParameter);
        }
    
        public virtual int SpCreateTurnOverDiscount(string date, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter tODID)
        {
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateTurnOverDiscount", dateParameter, locationIDParameter, applicationIDParameter, tODID);
        }
    
        public virtual int SpCreateTurnOverDiscountDetails(Nullable<int> tODID, string code, Nullable<decimal> turnOverDiscount, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string location, string month, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var tODIDParameter = tODID.HasValue ?
                new ObjectParameter("TODID", tODID) :
                new ObjectParameter("TODID", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var turnOverDiscountParameter = turnOverDiscount.HasValue ?
                new ObjectParameter("TurnOverDiscount", turnOverDiscount) :
                new ObjectParameter("TurnOverDiscount", typeof(decimal));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var monthParameter = month != null ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateTurnOverDiscountDetails", tODIDParameter, codeParameter, turnOverDiscountParameter, fromDateParameter, toDateParameter, locationParameter, monthParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateUserLocation(string userID, string locationIDStr)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var locationIDStrParameter = locationIDStr != null ?
                new ObjectParameter("LocationIDStr", locationIDStr) :
                new ObjectParameter("LocationIDStr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateUserLocation", userIDParameter, locationIDStrParameter);
        }
    
        public virtual int SpCreateUserRoles(Nullable<int> userID, Nullable<int> roleID, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateUserRoles", userIDParameter, roleIDParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual int SpCreateWareHouse(string code, string name, string place, string builtIn, string isDamageStore, Nullable<int> itemTypeID, string remarks, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> createdUserID, Nullable<System.DateTime> createDate, ObjectParameter retValue)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var placeParameter = place != null ?
                new ObjectParameter("Place", place) :
                new ObjectParameter("Place", typeof(string));
    
            var builtInParameter = builtIn != null ?
                new ObjectParameter("BuiltIn", builtIn) :
                new ObjectParameter("BuiltIn", typeof(string));
    
            var isDamageStoreParameter = isDamageStore != null ?
                new ObjectParameter("IsDamageStore", isDamageStore) :
                new ObjectParameter("IsDamageStore", typeof(string));
    
            var itemTypeIDParameter = itemTypeID.HasValue ?
                new ObjectParameter("ItemTypeID", itemTypeID) :
                new ObjectParameter("ItemTypeID", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateWareHouse", codeParameter, nameParameter, placeParameter, builtInParameter, isDamageStoreParameter, itemTypeIDParameter, remarksParameter, locationIDParameter, applicationIDParameter, createdUserIDParameter, createDateParameter, retValue);
        }
    
        public virtual int SpDeletePowerConsumption(Nullable<int> location, Nullable<int> applicationID)
        {
            var locationParameter = location.HasValue ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpDeletePowerConsumption", locationParameter, applicationIDParameter);
        }
    
        public virtual int SpDeleteProductionDefinitionMaterials(Nullable<int> iD, Nullable<bool> packingSequence, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var packingSequenceParameter = packingSequence.HasValue ?
                new ObjectParameter("PackingSequence", packingSequence) :
                new ObjectParameter("PackingSequence", typeof(bool));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpDeleteProductionDefinitionMaterials", iDParameter, packingSequenceParameter, applicationIDParameter);
        }
    
        public virtual int SpDeleteProductionDefinitionProcesses(Nullable<int> processID, Nullable<bool> packingSequence, Nullable<int> applicationID)
        {
            var processIDParameter = processID.HasValue ?
                new ObjectParameter("ProcessID", processID) :
                new ObjectParameter("ProcessID", typeof(int));
    
            var packingSequenceParameter = packingSequence.HasValue ?
                new ObjectParameter("PackingSequence", packingSequence) :
                new ObjectParameter("PackingSequence", typeof(bool));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpDeleteProductionDefinitionProcesses", processIDParameter, packingSequenceParameter, applicationIDParameter);
        }
    
        public virtual int SpDeleteQCTestDefinition(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpDeleteQCTestDefinition", iDParameter);
        }
    
        public virtual int SpFSOIncentiveMapping(Nullable<int> customerID, Nullable<int> fSOID, Nullable<int> salesIncenticeCategoryID, Nullable<System.DateTime> startDate)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var fSOIDParameter = fSOID.HasValue ?
                new ObjectParameter("FSOID", fSOID) :
                new ObjectParameter("FSOID", typeof(int));
    
            var salesIncenticeCategoryIDParameter = salesIncenticeCategoryID.HasValue ?
                new ObjectParameter("SalesIncenticeCategoryID", salesIncenticeCategoryID) :
                new ObjectParameter("SalesIncenticeCategoryID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpFSOIncentiveMapping", customerIDParameter, fSOIDParameter, salesIncenticeCategoryIDParameter, startDateParameter);
        }
    
        public virtual ObjectResult<SpGetAccountHeadList_Result> SpGetAccountHeadList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAccountHeadList_Result>("SpGetAccountHeadList");
        }
    
        public virtual ObjectResult<SpGetActions_Result> SpGetActions(Nullable<int> applicationID, Nullable<int> roleID)
        {
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetActions_Result>("SpGetActions", applicationIDParameter, roleIDParameter);
        }
    
        public virtual ObjectResult<SpGetActualAndBudgetSalesDetailsByCategoryWise_Result> SpGetActualAndBudgetSalesDetailsByCategoryWise(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetActualAndBudgetSalesDetailsByCategoryWise_Result>("SpGetActualAndBudgetSalesDetailsByCategoryWise", finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetActualAndBudgetSalesDetailsForDashBoard_Result> SpGetActualAndBudgetSalesDetailsForDashBoard(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetActualAndBudgetSalesDetailsForDashBoard_Result>("SpGetActualAndBudgetSalesDetailsForDashBoard", finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetActualAndBudgetSalesDetailsForYear_Result> SpGetActualAndBudgetSalesDetailsForYear(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetActualAndBudgetSalesDetailsForYear_Result>("SpGetActualAndBudgetSalesDetailsForYear", finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetAgeingBucketTrans_Result> SpGetAgeingBucketTrans(Nullable<int> bucketID)
        {
            var bucketIDParameter = bucketID.HasValue ?
                new ObjectParameter("BucketID", bucketID) :
                new ObjectParameter("BucketID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAgeingBucketTrans_Result>("SpGetAgeingBucketTrans", bucketIDParameter);
        }
    
        public virtual ObjectResult<SpGetAllMachineList_Result> SpGetAllMachineList(string machineCodeHint, string machineNameHint, string loadedMouldHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var machineCodeHintParameter = machineCodeHint != null ?
                new ObjectParameter("MachineCodeHint", machineCodeHint) :
                new ObjectParameter("MachineCodeHint", typeof(string));
    
            var machineNameHintParameter = machineNameHint != null ?
                new ObjectParameter("MachineNameHint", machineNameHint) :
                new ObjectParameter("MachineNameHint", typeof(string));
    
            var loadedMouldHintParameter = loadedMouldHint != null ?
                new ObjectParameter("LoadedMouldHint", loadedMouldHint) :
                new ObjectParameter("LoadedMouldHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAllMachineList_Result>("SpGetAllMachineList", machineCodeHintParameter, machineNameHintParameter, loadedMouldHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetAllPriceList_Result> SpGetAllPriceList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAllPriceList_Result>("SpGetAllPriceList");
        }
    
        public virtual ObjectResult<SpGetAllPriceListDetails_Result> SpGetAllPriceListDetails(Nullable<int> priceListID)
        {
            var priceListIDParameter = priceListID.HasValue ?
                new ObjectParameter("PriceListID", priceListID) :
                new ObjectParameter("PriceListID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAllPriceListDetails_Result>("SpGetAllPriceListDetails", priceListIDParameter);
        }
    
        public virtual ObjectResult<SpGetAllSLAList_Result> SpGetAllSLAList(string cycleHint, string transactionTypeHint, string keyValueHint, string itemHint, string supplierHint, string customerHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit)
        {
            var cycleHintParameter = cycleHint != null ?
                new ObjectParameter("CycleHint", cycleHint) :
                new ObjectParameter("CycleHint", typeof(string));
    
            var transactionTypeHintParameter = transactionTypeHint != null ?
                new ObjectParameter("TransactionTypeHint", transactionTypeHint) :
                new ObjectParameter("TransactionTypeHint", typeof(string));
    
            var keyValueHintParameter = keyValueHint != null ?
                new ObjectParameter("KeyValueHint", keyValueHint) :
                new ObjectParameter("KeyValueHint", typeof(string));
    
            var itemHintParameter = itemHint != null ?
                new ObjectParameter("ItemHint", itemHint) :
                new ObjectParameter("ItemHint", typeof(string));
    
            var supplierHintParameter = supplierHint != null ?
                new ObjectParameter("SupplierHint", supplierHint) :
                new ObjectParameter("SupplierHint", typeof(string));
    
            var customerHintParameter = customerHint != null ?
                new ObjectParameter("CustomerHint", customerHint) :
                new ObjectParameter("CustomerHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAllSLAList_Result>("SpGetAllSLAList", cycleHintParameter, transactionTypeHintParameter, keyValueHintParameter, itemHintParameter, supplierHintParameter, customerHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter);
        }
    
        public virtual ObjectResult<SpGetAreaManagerCategory_Result> SpGetAreaManagerCategory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAreaManagerCategory_Result>("SpGetAreaManagerCategory");
        }
    
        public virtual ObjectResult<SpGetAspNetUsers_Result> SpGetAspNetUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAspNetUsers_Result>("SpGetAspNetUsers");
        }
    
        public virtual ObjectResult<SpGetAttachments_Result> SpGetAttachments(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAttachments_Result>("SpGetAttachments", iDParameter);
        }
    
        public virtual int SpGetAvailableStock(Nullable<int> itemID, Nullable<int> batchID, Nullable<int> batchTypeID, Nullable<int> wareHouseID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter stock)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetAvailableStock", itemIDParameter, batchIDParameter, batchTypeIDParameter, wareHouseIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, stock);
        }
    
        public virtual ObjectResult<SpGetAvailableStockItemAutoComplete_Result> SpGetAvailableStockItemAutoComplete(Nullable<int> itemCategoryID, Nullable<int> warehouseID, string hint, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var hintParameter = hint != null ?
                new ObjectParameter("Hint", hint) :
                new ObjectParameter("Hint", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAvailableStockItemAutoComplete_Result>("SpGetAvailableStockItemAutoComplete", itemCategoryIDParameter, warehouseIDParameter, hintParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetAvailableStockItemListForCounterSales_Result> SpGetAvailableStockItemListForCounterSales(Nullable<int> itemCategoryID, Nullable<int> wareHouseID, Nullable<int> priceListID, string codeHint, string nameHint, string itemCategoryHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            var priceListIDParameter = priceListID.HasValue ?
                new ObjectParameter("PriceListID", priceListID) :
                new ObjectParameter("PriceListID", typeof(int));
    
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var itemCategoryHintParameter = itemCategoryHint != null ?
                new ObjectParameter("ItemCategoryHint", itemCategoryHint) :
                new ObjectParameter("ItemCategoryHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAvailableStockItemListForCounterSales_Result>("SpGetAvailableStockItemListForCounterSales", itemCategoryIDParameter, wareHouseIDParameter, priceListIDParameter, codeHintParameter, nameHintParameter, itemCategoryHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetBatchForProductionIssueMaterialReturn_Result> SpGetBatchForProductionIssueMaterialReturn(Nullable<int> productionID, Nullable<int> itemID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var productionIDParameter = productionID.HasValue ?
                new ObjectParameter("productionID", productionID) :
                new ObjectParameter("productionID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetBatchForProductionIssueMaterialReturn_Result>("SpGetBatchForProductionIssueMaterialReturn", productionIDParameter, itemIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetBatchwiseItemsForPurificationIssue_Result> SpGetBatchwiseItemsForPurificationIssue(Nullable<int> itemID, Nullable<int> unitID, Nullable<decimal> quantity, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetBatchwiseItemsForPurificationIssue_Result>("SpGetBatchwiseItemsForPurificationIssue", itemIDParameter, unitIDParameter, quantityParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> SpGetBatchWiseStock(Nullable<int> batchID, Nullable<int> warehouseID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("SpGetBatchWiseStock", batchIDParameter, warehouseIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> SpGetBatchWiseStockForPackingSemiFinishedGood(Nullable<int> batchID, Nullable<int> warehouseID, Nullable<int> productGroupID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var productGroupIDParameter = productGroupID.HasValue ?
                new ObjectParameter("ProductGroupID", productGroupID) :
                new ObjectParameter("ProductGroupID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("SpGetBatchWiseStockForPackingSemiFinishedGood", batchIDParameter, warehouseIDParameter, productGroupIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetBatchWithStock_Result> SpGetBatchWithStock(Nullable<int> itemID, Nullable<int> warehouseID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetBatchWithStock_Result>("SpGetBatchWithStock", itemIDParameter, warehouseIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetBatchWithStockBatchTypeWise_Result> SpGetBatchWithStockBatchTypeWise(Nullable<int> itemID, Nullable<int> warehouseID, Nullable<int> batchTypeID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetBatchWithStockBatchTypeWise_Result>("SpGetBatchWithStockBatchTypeWise", itemIDParameter, warehouseIDParameter, batchTypeIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetBillingAddressLocation_Result> SpGetBillingAddressLocation(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetBillingAddressLocation_Result>("SpGetBillingAddressLocation", locationIDParameter);
        }
    
        public virtual ObjectResult<SpGetBloodeGroup_Result> SpGetBloodeGroup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetBloodeGroup_Result>("SpGetBloodeGroup");
        }
    
        public virtual ObjectResult<SpGetBranchList_Result> SpGetBranchList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetBranchList_Result>("SpGetBranchList");
        }
    
        public virtual ObjectResult<SpGetBusinessCategories_Result> SpGetBusinessCategories()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetBusinessCategories_Result>("SpGetBusinessCategories");
        }
    
        public virtual ObjectResult<SpGetCashDiscountList_Result> SpGetCashDiscountList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCashDiscountList_Result>("SpGetCashDiscountList");
        }
    
        public virtual int SpGetCashPayementLimit(Nullable<int> applicationID, ObjectParameter cashLimit)
        {
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetCashPayementLimit", applicationIDParameter, cashLimit);
        }
    
        public virtual ObjectResult<SpGetCategories_Result> SpGetCategories()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCategories_Result>("SpGetCategories");
        }
    
        public virtual ObjectResult<SpGetCategoriesDetails_Result> SpGetCategoriesDetails(Nullable<int> iD, string tableName, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCategoriesDetails_Result>("SpGetCategoriesDetails", iDParameter, tableNameParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCategoryByGroupID_Result> SpGetCategoryByGroupID(Nullable<int> categoryGroupID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var categoryGroupIDParameter = categoryGroupID.HasValue ?
                new ObjectParameter("CategoryGroupID", categoryGroupID) :
                new ObjectParameter("CategoryGroupID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCategoryByGroupID_Result>("SpGetCategoryByGroupID", categoryGroupIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCategoryByID_Result> SpGetCategoryByID(Nullable<int> categoryId)
        {
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCategoryByID_Result>("SpGetCategoryByID", categoryIdParameter);
        }
    
        public virtual ObjectResult<SpGetCategoryGroup_Result> SpGetCategoryGroup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCategoryGroup_Result>("SpGetCategoryGroup");
        }
    
        public virtual int SpGetCategoryIDByCategory(string categoryName, ObjectParameter categoryID)
        {
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetCategoryIDByCategory", categoryNameParameter, categoryID);
        }
    
        public virtual ObjectResult<SpGetCategoryList_Result> SpGetCategoryList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCategoryList_Result>("SpGetCategoryList");
        }
    
        public virtual ObjectResult<SpGetCategoryWiseSales_Result> SpGetCategoryWiseSales(string type, string batchType, Nullable<int> finYear, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var batchTypeParameter = batchType != null ?
                new ObjectParameter("BatchType", batchType) :
                new ObjectParameter("BatchType", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCategoryWiseSales_Result>("SpGetCategoryWiseSales", typeParameter, batchTypeParameter, finYearParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetChartOfAccounts_Result> SpGetChartOfAccounts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetChartOfAccounts_Result>("SpGetChartOfAccounts");
        }
    
        public virtual int SpGetCheckSLARuleExist(string cycle, string transactionType, string keyValue, string item, string itemAccountsCategory, string itemTaxCategory, string batchPrefix, string supplier, string supplierAccountsCategory, string supplierTaxCategory, string customer, string customerAccountsCategory, string customerCategory, string customerTaxCategory, string costComponent, string departmentCategory, string capitilization, string location, ObjectParameter count)
        {
            var cycleParameter = cycle != null ?
                new ObjectParameter("Cycle", cycle) :
                new ObjectParameter("Cycle", typeof(string));
    
            var transactionTypeParameter = transactionType != null ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(string));
    
            var keyValueParameter = keyValue != null ?
                new ObjectParameter("KeyValue", keyValue) :
                new ObjectParameter("KeyValue", typeof(string));
    
            var itemParameter = item != null ?
                new ObjectParameter("Item", item) :
                new ObjectParameter("Item", typeof(string));
    
            var itemAccountsCategoryParameter = itemAccountsCategory != null ?
                new ObjectParameter("ItemAccountsCategory", itemAccountsCategory) :
                new ObjectParameter("ItemAccountsCategory", typeof(string));
    
            var itemTaxCategoryParameter = itemTaxCategory != null ?
                new ObjectParameter("ItemTaxCategory", itemTaxCategory) :
                new ObjectParameter("ItemTaxCategory", typeof(string));
    
            var batchPrefixParameter = batchPrefix != null ?
                new ObjectParameter("BatchPrefix", batchPrefix) :
                new ObjectParameter("BatchPrefix", typeof(string));
    
            var supplierParameter = supplier != null ?
                new ObjectParameter("Supplier", supplier) :
                new ObjectParameter("Supplier", typeof(string));
    
            var supplierAccountsCategoryParameter = supplierAccountsCategory != null ?
                new ObjectParameter("SupplierAccountsCategory", supplierAccountsCategory) :
                new ObjectParameter("SupplierAccountsCategory", typeof(string));
    
            var supplierTaxCategoryParameter = supplierTaxCategory != null ?
                new ObjectParameter("SupplierTaxCategory", supplierTaxCategory) :
                new ObjectParameter("SupplierTaxCategory", typeof(string));
    
            var customerParameter = customer != null ?
                new ObjectParameter("Customer", customer) :
                new ObjectParameter("Customer", typeof(string));
    
            var customerAccountsCategoryParameter = customerAccountsCategory != null ?
                new ObjectParameter("CustomerAccountsCategory", customerAccountsCategory) :
                new ObjectParameter("CustomerAccountsCategory", typeof(string));
    
            var customerCategoryParameter = customerCategory != null ?
                new ObjectParameter("CustomerCategory", customerCategory) :
                new ObjectParameter("CustomerCategory", typeof(string));
    
            var customerTaxCategoryParameter = customerTaxCategory != null ?
                new ObjectParameter("CustomerTaxCategory", customerTaxCategory) :
                new ObjectParameter("CustomerTaxCategory", typeof(string));
    
            var costComponentParameter = costComponent != null ?
                new ObjectParameter("CostComponent", costComponent) :
                new ObjectParameter("CostComponent", typeof(string));
    
            var departmentCategoryParameter = departmentCategory != null ?
                new ObjectParameter("DepartmentCategory", departmentCategory) :
                new ObjectParameter("DepartmentCategory", typeof(string));
    
            var capitilizationParameter = capitilization != null ?
                new ObjectParameter("Capitilization", capitilization) :
                new ObjectParameter("Capitilization", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetCheckSLARuleExist", cycleParameter, transactionTypeParameter, keyValueParameter, itemParameter, itemAccountsCategoryParameter, itemTaxCategoryParameter, batchPrefixParameter, supplierParameter, supplierAccountsCategoryParameter, supplierTaxCategoryParameter, customerParameter, customerAccountsCategoryParameter, customerCategoryParameter, customerTaxCategoryParameter, costComponentParameter, departmentCategoryParameter, capitilizationParameter, locationParameter, count);
        }
    
        public virtual int SpGetClosedMonths(string type, string month, Nullable<int> year, Nullable<int> applicationID, ObjectParameter returnValue)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var monthParameter = month != null ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetClosedMonths", typeParameter, monthParameter, yearParameter, applicationIDParameter, returnValue);
        }
    
        public virtual ObjectResult<SpGetCountrywiseState_Result> SpGetCountrywiseState(Nullable<int> countryID)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCountrywiseState_Result>("SpGetCountrywiseState", countryIDParameter);
        }
    
        public virtual ObjectResult<SpGetCreditDays_Result> SpGetCreditDays()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCreditDays_Result>("SpGetCreditDays");
        }
    
        public virtual ObjectResult<SpGetCreditDaysDetails_Result> SpGetCreditDaysDetails(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCreditDaysDetails_Result>("SpGetCreditDaysDetails", iDParameter);
        }
    
        public virtual ObjectResult<SpGetCustomer_Result> SpGetCustomer(Nullable<int> customerID, Nullable<int> applicationID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCustomer_Result>("SpGetCustomer", customerIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCustomerCategory_Result> SpGetCustomerCategory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCustomerCategory_Result>("SpGetCustomerCategory");
        }
    
        public virtual ObjectResult<SpGetCustomerDetails_Result> SpGetCustomerDetails(string codeHint, string customerNameHint, string categoryHint, string locationHint, string customerSchemeHint, string discountPercentageHint, string priceListHint, string minCreditLimitHint, string maxCreditLimitHint, string outStandingAmountHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var customerNameHintParameter = customerNameHint != null ?
                new ObjectParameter("CustomerNameHint", customerNameHint) :
                new ObjectParameter("CustomerNameHint", typeof(string));
    
            var categoryHintParameter = categoryHint != null ?
                new ObjectParameter("CategoryHint", categoryHint) :
                new ObjectParameter("CategoryHint", typeof(string));
    
            var locationHintParameter = locationHint != null ?
                new ObjectParameter("LocationHint", locationHint) :
                new ObjectParameter("LocationHint", typeof(string));
    
            var customerSchemeHintParameter = customerSchemeHint != null ?
                new ObjectParameter("CustomerSchemeHint", customerSchemeHint) :
                new ObjectParameter("CustomerSchemeHint", typeof(string));
    
            var discountPercentageHintParameter = discountPercentageHint != null ?
                new ObjectParameter("DiscountPercentageHint", discountPercentageHint) :
                new ObjectParameter("DiscountPercentageHint", typeof(string));
    
            var priceListHintParameter = priceListHint != null ?
                new ObjectParameter("PriceListHint", priceListHint) :
                new ObjectParameter("PriceListHint", typeof(string));
    
            var minCreditLimitHintParameter = minCreditLimitHint != null ?
                new ObjectParameter("MinCreditLimitHint", minCreditLimitHint) :
                new ObjectParameter("MinCreditLimitHint", typeof(string));
    
            var maxCreditLimitHintParameter = maxCreditLimitHint != null ?
                new ObjectParameter("MaxCreditLimitHint", maxCreditLimitHint) :
                new ObjectParameter("MaxCreditLimitHint", typeof(string));
    
            var outStandingAmountHintParameter = outStandingAmountHint != null ?
                new ObjectParameter("OutStandingAmountHint", outStandingAmountHint) :
                new ObjectParameter("OutStandingAmountHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCustomerDetails_Result>("SpGetCustomerDetails", codeHintParameter, customerNameHintParameter, categoryHintParameter, locationHintParameter, customerSchemeHintParameter, discountPercentageHintParameter, priceListHintParameter, minCreditLimitHintParameter, maxCreditLimitHintParameter, outStandingAmountHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpGetCustomerIDOfSupplier(Nullable<int> supplierID, Nullable<int> applicationID, ObjectParameter customerID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetCustomerIDOfSupplier", supplierIDParameter, applicationIDParameter, customerID);
        }
    
        public virtual ObjectResult<SpGetCustomerItemDetails_Result> SpGetCustomerItemDetails(Nullable<int> customerID, string codeHint, string itemNameHint, string mRPHint, string discountPercentageHint, string quantityHint, string offerQuantityHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var itemNameHintParameter = itemNameHint != null ?
                new ObjectParameter("ItemNameHint", itemNameHint) :
                new ObjectParameter("ItemNameHint", typeof(string));
    
            var mRPHintParameter = mRPHint != null ?
                new ObjectParameter("MRPHint", mRPHint) :
                new ObjectParameter("MRPHint", typeof(string));
    
            var discountPercentageHintParameter = discountPercentageHint != null ?
                new ObjectParameter("DiscountPercentageHint", discountPercentageHint) :
                new ObjectParameter("DiscountPercentageHint", typeof(string));
    
            var quantityHintParameter = quantityHint != null ?
                new ObjectParameter("QuantityHint", quantityHint) :
                new ObjectParameter("QuantityHint", typeof(string));
    
            var offerQuantityHintParameter = offerQuantityHint != null ?
                new ObjectParameter("OfferQuantityHint", offerQuantityHint) :
                new ObjectParameter("OfferQuantityHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCustomerItemDetails_Result>("SpGetCustomerItemDetails", customerIDParameter, codeHintParameter, itemNameHintParameter, mRPHintParameter, discountPercentageHintParameter, quantityHintParameter, offerQuantityHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCustomerListForLocation_Result> SpGetCustomerListForLocation(Nullable<int> customerLocationID, string customerCodeHint, string customerNameHint, string customerLocationHint, string customerCategoryHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var customerLocationIDParameter = customerLocationID.HasValue ?
                new ObjectParameter("CustomerLocationID", customerLocationID) :
                new ObjectParameter("CustomerLocationID", typeof(int));
    
            var customerCodeHintParameter = customerCodeHint != null ?
                new ObjectParameter("CustomerCodeHint", customerCodeHint) :
                new ObjectParameter("CustomerCodeHint", typeof(string));
    
            var customerNameHintParameter = customerNameHint != null ?
                new ObjectParameter("CustomerNameHint", customerNameHint) :
                new ObjectParameter("CustomerNameHint", typeof(string));
    
            var customerLocationHintParameter = customerLocationHint != null ?
                new ObjectParameter("CustomerLocationHint", customerLocationHint) :
                new ObjectParameter("CustomerLocationHint", typeof(string));
    
            var customerCategoryHintParameter = customerCategoryHint != null ?
                new ObjectParameter("CustomerCategoryHint", customerCategoryHint) :
                new ObjectParameter("CustomerCategoryHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCustomerListForLocation_Result>("SpGetCustomerListForLocation", customerLocationIDParameter, customerCodeHintParameter, customerNameHintParameter, customerLocationHintParameter, customerCategoryHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCustomerLocationMapping_Result> SpGetCustomerLocationMapping(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCustomerLocationMapping_Result>("SpGetCustomerLocationMapping", customerIDParameter);
        }
    
        public virtual ObjectResult<SpGetCustomers_Result> SpGetCustomers(string hint, Nullable<int> customerCategoryID, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var hintParameter = hint != null ?
                new ObjectParameter("Hint", hint) :
                new ObjectParameter("Hint", typeof(string));
    
            var customerCategoryIDParameter = customerCategoryID.HasValue ?
                new ObjectParameter("CustomerCategoryID", customerCategoryID) :
                new ObjectParameter("CustomerCategoryID", typeof(int));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCustomers_Result>("SpGetCustomers", hintParameter, customerCategoryIDParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCustomersByCodes_Result> SpGetCustomersByCodes(string codes, Nullable<int> applicationID)
        {
            var codesParameter = codes != null ?
                new ObjectParameter("Codes", codes) :
                new ObjectParameter("Codes", typeof(string));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCustomersByCodes_Result>("SpGetCustomersByCodes", codesParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCustomersByFilterForFSO_Result> SpGetCustomersByFilterForFSO(Nullable<int> stateID, Nullable<int> districtID, Nullable<int> customerCategoryID, Nullable<int> fSOID, Nullable<int> salesIncentiveCategoryID)
        {
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var customerCategoryIDParameter = customerCategoryID.HasValue ?
                new ObjectParameter("CustomerCategoryID", customerCategoryID) :
                new ObjectParameter("CustomerCategoryID", typeof(int));
    
            var fSOIDParameter = fSOID.HasValue ?
                new ObjectParameter("FSOID", fSOID) :
                new ObjectParameter("FSOID", typeof(int));
    
            var salesIncentiveCategoryIDParameter = salesIncentiveCategoryID.HasValue ?
                new ObjectParameter("SalesIncentiveCategoryID", salesIncentiveCategoryID) :
                new ObjectParameter("SalesIncentiveCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCustomersByFilterForFSO_Result>("SpGetCustomersByFilterForFSO", stateIDParameter, districtIDParameter, customerCategoryIDParameter, fSOIDParameter, salesIncentiveCategoryIDParameter);
        }
    
        public virtual ObjectResult<SpGetCustomersByFSO_Result> SpGetCustomersByFSO(Nullable<int> fSOID)
        {
            var fSOIDParameter = fSOID.HasValue ?
                new ObjectParameter("FSOID", fSOID) :
                new ObjectParameter("FSOID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCustomersByFSO_Result>("SpGetCustomersByFSO", fSOIDParameter);
        }
    
        public virtual ObjectResult<SpGetDamageType_Result> SpGetDamageType(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDamageType_Result>("SpGetDamageType", finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetDebitAndCreditNoteItemAutoComplete_Result> SpGetDebitAndCreditNoteItemAutoComplete(string type, string hint, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var hintParameter = hint != null ?
                new ObjectParameter("Hint", hint) :
                new ObjectParameter("Hint", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDebitAndCreditNoteItemAutoComplete_Result>("SpGetDebitAndCreditNoteItemAutoComplete", typeParameter, hintParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetDebitAndCreditNoteItemList_Result> SpGetDebitAndCreditNoteItemList(string type, string codeHint, string nameHint, string unitHint, string itemCategoryHint, string purchaseCategoryHint, string salesCategoryHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var unitHintParameter = unitHint != null ?
                new ObjectParameter("UnitHint", unitHint) :
                new ObjectParameter("UnitHint", typeof(string));
    
            var itemCategoryHintParameter = itemCategoryHint != null ?
                new ObjectParameter("ItemCategoryHint", itemCategoryHint) :
                new ObjectParameter("ItemCategoryHint", typeof(string));
    
            var purchaseCategoryHintParameter = purchaseCategoryHint != null ?
                new ObjectParameter("PurchaseCategoryHint", purchaseCategoryHint) :
                new ObjectParameter("PurchaseCategoryHint", typeof(string));
    
            var salesCategoryHintParameter = salesCategoryHint != null ?
                new ObjectParameter("SalesCategoryHint", salesCategoryHint) :
                new ObjectParameter("SalesCategoryHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDebitAndCreditNoteItemList_Result>("SpGetDebitAndCreditNoteItemList", typeParameter, codeHintParameter, nameHintParameter, unitHintParameter, itemCategoryHintParameter, purchaseCategoryHintParameter, salesCategoryHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetDefaultStore_Result> SpGetDefaultStore(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDefaultStore_Result>("SpGetDefaultStore", locationIDParameter);
        }
    
        public virtual ObjectResult<SpGetDepartment_Result> SpGetDepartment()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDepartment_Result>("SpGetDepartment");
        }
    
        public virtual ObjectResult<SpGetDepartmentDetails_Result> SpGetDepartmentDetails(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDepartmentDetails_Result>("SpGetDepartmentDetails", iDParameter);
        }
    
        public virtual ObjectResult<SpGetDepartmentGroup_Result> SpGetDepartmentGroup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDepartmentGroup_Result>("SpGetDepartmentGroup");
        }
    
        public virtual ObjectResult<SpGetDepartmentList_Result> SpGetDepartmentList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDepartmentList_Result>("SpGetDepartmentList");
        }
    
        public virtual ObjectResult<SpGetDesignationDetails_Result> SpGetDesignationDetails(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDesignationDetails_Result>("SpGetDesignationDetails", iDParameter);
        }
    
        public virtual ObjectResult<SpGetDesignationList_Result> SpGetDesignationList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDesignationList_Result>("SpGetDesignationList");
        }
    
        public virtual ObjectResult<SpGetDiscountCategory_Result> SpGetDiscountCategory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDiscountCategory_Result>("SpGetDiscountCategory");
        }
    
        public virtual ObjectResult<SpGetDiscountCategoryByID_Result> SpGetDiscountCategoryByID(Nullable<int> iD, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDiscountCategoryByID_Result>("SpGetDiscountCategoryByID", iDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetDiscountCategoryList_Result> SpGetDiscountCategoryList(Nullable<int> applicationID)
        {
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDiscountCategoryList_Result>("SpGetDiscountCategoryList", applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetDiscountDetails_Result> SpGetDiscountDetails(Nullable<int> itemID, Nullable<int> customerID, Nullable<int> customerCategoryID, Nullable<int> customerStateID, Nullable<int> businessCategoryID, Nullable<int> salesIncentiveCategoryID, Nullable<int> salesCategoryID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customerCategoryIDParameter = customerCategoryID.HasValue ?
                new ObjectParameter("CustomerCategoryID", customerCategoryID) :
                new ObjectParameter("CustomerCategoryID", typeof(int));
    
            var customerStateIDParameter = customerStateID.HasValue ?
                new ObjectParameter("CustomerStateID", customerStateID) :
                new ObjectParameter("CustomerStateID", typeof(int));
    
            var businessCategoryIDParameter = businessCategoryID.HasValue ?
                new ObjectParameter("BusinessCategoryID", businessCategoryID) :
                new ObjectParameter("BusinessCategoryID", typeof(int));
    
            var salesIncentiveCategoryIDParameter = salesIncentiveCategoryID.HasValue ?
                new ObjectParameter("SalesIncentiveCategoryID", salesIncentiveCategoryID) :
                new ObjectParameter("SalesIncentiveCategoryID", typeof(int));
    
            var salesCategoryIDParameter = salesCategoryID.HasValue ?
                new ObjectParameter("SalesCategoryID", salesCategoryID) :
                new ObjectParameter("SalesCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDiscountDetails_Result>("SpGetDiscountDetails", itemIDParameter, customerIDParameter, customerCategoryIDParameter, customerStateIDParameter, businessCategoryIDParameter, salesIncentiveCategoryIDParameter, salesCategoryIDParameter);
        }
    
        public virtual ObjectResult<SpGetDiscountList_Result> SpGetDiscountList(string codeHint, string nameHint, string customerNameHint, string customerCategoryHint, string stateHint, string businessCategoryHint, string salesIncentiveCategoryHint, string salesCategoryHint, string discountCategoryHint, string discountPercentageHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var customerNameHintParameter = customerNameHint != null ?
                new ObjectParameter("CustomerNameHint", customerNameHint) :
                new ObjectParameter("CustomerNameHint", typeof(string));
    
            var customerCategoryHintParameter = customerCategoryHint != null ?
                new ObjectParameter("CustomerCategoryHint", customerCategoryHint) :
                new ObjectParameter("CustomerCategoryHint", typeof(string));
    
            var stateHintParameter = stateHint != null ?
                new ObjectParameter("StateHint", stateHint) :
                new ObjectParameter("StateHint", typeof(string));
    
            var businessCategoryHintParameter = businessCategoryHint != null ?
                new ObjectParameter("BusinessCategoryHint", businessCategoryHint) :
                new ObjectParameter("BusinessCategoryHint", typeof(string));
    
            var salesIncentiveCategoryHintParameter = salesIncentiveCategoryHint != null ?
                new ObjectParameter("SalesIncentiveCategoryHint", salesIncentiveCategoryHint) :
                new ObjectParameter("SalesIncentiveCategoryHint", typeof(string));
    
            var salesCategoryHintParameter = salesCategoryHint != null ?
                new ObjectParameter("SalesCategoryHint", salesCategoryHint) :
                new ObjectParameter("SalesCategoryHint", typeof(string));
    
            var discountCategoryHintParameter = discountCategoryHint != null ?
                new ObjectParameter("DiscountCategoryHint", discountCategoryHint) :
                new ObjectParameter("DiscountCategoryHint", typeof(string));
    
            var discountPercentageHintParameter = discountPercentageHint != null ?
                new ObjectParameter("DiscountPercentageHint", discountPercentageHint) :
                new ObjectParameter("DiscountPercentageHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDiscountList_Result>("SpGetDiscountList", codeHintParameter, nameHintParameter, customerNameHintParameter, customerCategoryHintParameter, stateHintParameter, businessCategoryHintParameter, salesIncentiveCategoryHintParameter, salesCategoryHintParameter, discountCategoryHintParameter, discountPercentageHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetDiscountListForDropdown_Result> SpGetDiscountListForDropdown()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDiscountListForDropdown_Result>("SpGetDiscountListForDropdown");
        }
    
        public virtual ObjectResult<SpGetDistrictByID_Result> SpGetDistrictByID(Nullable<int> districtID)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDistrictByID_Result>("SpGetDistrictByID", districtIDParameter);
        }
    
        public virtual ObjectResult<SpGetDistrictList_Result> SpGetDistrictList(Nullable<int> stateID)
        {
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDistrictList_Result>("SpGetDistrictList", stateIDParameter);
        }
    
        public virtual ObjectResult<SpGetDoctor_Result> SpGetDoctor(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDoctor_Result>("SpGetDoctor", locationIDParameter);
        }
    
        public virtual ObjectResult<SpGetDoctorByID_Result> SpGetDoctorByID(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDoctorByID_Result>("SpGetDoctorByID", iDParameter);
        }
    
        public virtual ObjectResult<SpGetDoctorForList_Result> SpGetDoctorForList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDoctorForList_Result>("SpGetDoctorForList");
        }
    
        public virtual ObjectResult<SpGetDoctorList_Result> SpGetDoctorList(string codeHint, string nameHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDoctorList_Result>("SpGetDoctorList", codeHintParameter, nameHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetDriverDetails_Result> SpGetDriverDetails(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDriverDetails_Result>("SpGetDriverDetails", idParameter);
        }
    
        public virtual ObjectResult<SpGetDriverList_Result> SpGetDriverList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDriverList_Result>("SpGetDriverList");
        }
    
        public virtual ObjectResult<SpGetEmployee_Result> SpGetEmployee()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetEmployee_Result>("SpGetEmployee");
        }
    
        public virtual ObjectResult<SpGetEmployeeAutoComplete_Result> SpGetEmployeeAutoComplete(Nullable<int> locationID, Nullable<int> applicationID, string hint, Nullable<int> offset, Nullable<int> limit)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var hintParameter = hint != null ?
                new ObjectParameter("Hint", hint) :
                new ObjectParameter("Hint", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetEmployeeAutoComplete_Result>("SpGetEmployeeAutoComplete", locationIDParameter, applicationIDParameter, hintParameter, offsetParameter, limitParameter);
        }
    
        public virtual ObjectResult<SpGetEmployeeByDepartment_Result> SpGetEmployeeByDepartment(Nullable<int> departmentID, Nullable<int> locationID)
        {
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetEmployeeByDepartment_Result>("SpGetEmployeeByDepartment", departmentIDParameter, locationIDParameter);
        }
    
        public virtual ObjectResult<SpGetEmployeeByFilterForFreeMedicineCreditLimit_Result> SpGetEmployeeByFilterForFreeMedicineCreditLimit(Nullable<int> employeeCategoryID, Nullable<int> employeeID, Nullable<int> locationID)
        {
            var employeeCategoryIDParameter = employeeCategoryID.HasValue ?
                new ObjectParameter("EmployeeCategoryID", employeeCategoryID) :
                new ObjectParameter("EmployeeCategoryID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetEmployeeByFilterForFreeMedicineCreditLimit_Result>("SpGetEmployeeByFilterForFreeMedicineCreditLimit", employeeCategoryIDParameter, employeeIDParameter, locationIDParameter);
        }
    
        public virtual ObjectResult<SpGetEmployeeCategoryList_Result> SpGetEmployeeCategoryList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetEmployeeCategoryList_Result>("SpGetEmployeeCategoryList");
        }
    
        public virtual ObjectResult<SpGetEmployeeFreeMedicineCreditLimitList_Result> SpGetEmployeeFreeMedicineCreditLimitList(string employeeCodeHint, string employeeNameHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var employeeCodeHintParameter = employeeCodeHint != null ?
                new ObjectParameter("EmployeeCodeHint", employeeCodeHint) :
                new ObjectParameter("EmployeeCodeHint", typeof(string));
    
            var employeeNameHintParameter = employeeNameHint != null ?
                new ObjectParameter("EmployeeNameHint", employeeNameHint) :
                new ObjectParameter("EmployeeNameHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetEmployeeFreeMedicineCreditLimitList_Result>("SpGetEmployeeFreeMedicineCreditLimitList", employeeCodeHintParameter, employeeNameHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetEmployeeJobTypeList_Result> SpGetEmployeeJobTypeList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetEmployeeJobTypeList_Result>("SpGetEmployeeJobTypeList");
        }
    
        public virtual ObjectResult<SpGetEmployeeList_Result> SpGetEmployeeList(Nullable<int> employeeCategoryID, Nullable<int> defaultLocationID, string type, string codeHint, string nameHint, string departmentHint, string placeHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var employeeCategoryIDParameter = employeeCategoryID.HasValue ?
                new ObjectParameter("EmployeeCategoryID", employeeCategoryID) :
                new ObjectParameter("EmployeeCategoryID", typeof(int));
    
            var defaultLocationIDParameter = defaultLocationID.HasValue ?
                new ObjectParameter("DefaultLocationID", defaultLocationID) :
                new ObjectParameter("DefaultLocationID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var departmentHintParameter = departmentHint != null ?
                new ObjectParameter("DepartmentHint", departmentHint) :
                new ObjectParameter("DepartmentHint", typeof(string));
    
            var placeHintParameter = placeHint != null ?
                new ObjectParameter("PlaceHint", placeHint) :
                new ObjectParameter("PlaceHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetEmployeeList_Result>("SpGetEmployeeList", employeeCategoryIDParameter, defaultLocationIDParameter, typeParameter, codeHintParameter, nameHintParameter, departmentHintParameter, placeHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetEmployeeListForFreeMedicine_Result> SpGetEmployeeListForFreeMedicine(string codeHint, string nameHint, string departmentHint, string placeHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var departmentHintParameter = departmentHint != null ?
                new ObjectParameter("DepartmentHint", departmentHint) :
                new ObjectParameter("DepartmentHint", typeof(string));
    
            var placeHintParameter = placeHint != null ?
                new ObjectParameter("PlaceHint", placeHint) :
                new ObjectParameter("PlaceHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetEmployeeListForFreeMedicine_Result>("SpGetEmployeeListForFreeMedicine", codeHintParameter, nameHintParameter, departmentHintParameter, placeHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetEmployeeListForUserRoles_Result> SpGetEmployeeListForUserRoles(string codeHint, string nameHint, string departmentHint, string placeHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var departmentHintParameter = departmentHint != null ?
                new ObjectParameter("DepartmentHint", departmentHint) :
                new ObjectParameter("DepartmentHint", typeof(string));
    
            var placeHintParameter = placeHint != null ?
                new ObjectParameter("PlaceHint", placeHint) :
                new ObjectParameter("PlaceHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetEmployeeListForUserRoles_Result>("SpGetEmployeeListForUserRoles", codeHintParameter, nameHintParameter, departmentHintParameter, placeHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetExEmployDetails_Result> SpGetExEmployDetails(Nullable<int> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetExEmployDetails_Result>("SpGetExEmployDetails", employeeIDParameter);
        }
    
        public virtual int SpGetFirstOpenMonth(string type, ObjectParameter returnValue)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetFirstOpenMonth", typeParameter, returnValue);
        }
    
        public virtual ObjectResult<SpGetFleetDetails_Result> SpGetFleetDetails(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetFleetDetails_Result>("SpGetFleetDetails", iDParameter);
        }
    
        public virtual ObjectResult<SpGetFleetList_Result> SpGetFleetList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetFleetList_Result>("SpGetFleetList");
        }
    
        public virtual ObjectResult<SpGetFreeMedicineLocationMapping_Result> SpGetFreeMedicineLocationMapping(Nullable<int> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetFreeMedicineLocationMapping_Result>("SpGetFreeMedicineLocationMapping", employeeIDParameter);
        }
    
        public virtual ObjectResult<SpGetFSOList_Result> SpGetFSOList(string codeHint, string nameHint, string salesManagerHint, string regionalManagerHint, string zonalManagerHint, string areaManagerHint, string routeCodeHint, string routeNameHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var salesManagerHintParameter = salesManagerHint != null ?
                new ObjectParameter("SalesManagerHint", salesManagerHint) :
                new ObjectParameter("SalesManagerHint", typeof(string));
    
            var regionalManagerHintParameter = regionalManagerHint != null ?
                new ObjectParameter("RegionalManagerHint", regionalManagerHint) :
                new ObjectParameter("RegionalManagerHint", typeof(string));
    
            var zonalManagerHintParameter = zonalManagerHint != null ?
                new ObjectParameter("ZonalManagerHint", zonalManagerHint) :
                new ObjectParameter("ZonalManagerHint", typeof(string));
    
            var areaManagerHintParameter = areaManagerHint != null ?
                new ObjectParameter("AreaManagerHint", areaManagerHint) :
                new ObjectParameter("AreaManagerHint", typeof(string));
    
            var routeCodeHintParameter = routeCodeHint != null ?
                new ObjectParameter("RouteCodeHint", routeCodeHint) :
                new ObjectParameter("RouteCodeHint", typeof(string));
    
            var routeNameHintParameter = routeNameHint != null ?
                new ObjectParameter("RouteNameHint", routeNameHint) :
                new ObjectParameter("RouteNameHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetFSOList_Result>("SpGetFSOList", codeHintParameter, nameHintParameter, salesManagerHintParameter, regionalManagerHintParameter, zonalManagerHintParameter, areaManagerHintParameter, routeCodeHintParameter, routeNameHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetFSOLst_Result> SpGetFSOLst(Nullable<int> locationID, Nullable<int> applicationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetFSOLst_Result>("SpGetFSOLst", locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetGRNWiseItemsForAutoComplete_Result> SpGetGRNWiseItemsForAutoComplete(string hint, Nullable<int> supplierID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var hintParameter = hint != null ?
                new ObjectParameter("Hint", hint) :
                new ObjectParameter("Hint", typeof(string));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetGRNWiseItemsForAutoComplete_Result>("SpGetGRNWiseItemsForAutoComplete", hintParameter, supplierIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetGRNWiseItemsList_Result> SpGetGRNWiseItemsList(Nullable<int> supplierID, string codeHint, string nameHint, string itemCategoryHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var itemCategoryHintParameter = itemCategoryHint != null ?
                new ObjectParameter("ItemCategoryHint", itemCategoryHint) :
                new ObjectParameter("ItemCategoryHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetGRNWiseItemsList_Result>("SpGetGRNWiseItemsList", supplierIDParameter, codeHintParameter, nameHintParameter, itemCategoryHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetGRNWiseSupplierForAutoComplete_Result> SpGetGRNWiseSupplierForAutoComplete(string hint, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var hintParameter = hint != null ?
                new ObjectParameter("Hint", hint) :
                new ObjectParameter("Hint", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetGRNWiseSupplierForAutoComplete_Result>("SpGetGRNWiseSupplierForAutoComplete", hintParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetGSTCategoryDetails_Result> SpGetGSTCategoryDetails(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetGSTCategoryDetails_Result>("SpGetGSTCategoryDetails", iDParameter);
        }
    
        public virtual ObjectResult<SpGetGSTCategorylist_Result> SpGetGSTCategorylist()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetGSTCategorylist_Result>("SpGetGSTCategorylist");
        }
    
        public virtual ObjectResult<SpGetGSTSubCategoryDetails_Result> SpGetGSTSubCategoryDetails(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetGSTSubCategoryDetails_Result>("SpGetGSTSubCategoryDetails", iDParameter);
        }
    
        public virtual ObjectResult<SpGetGSTSubCategoryList_Result> SpGetGSTSubCategoryList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetGSTSubCategoryList_Result>("SpGetGSTSubCategoryList");
        }
    
        public virtual ObjectResult<SpGetHeadLocation_Result> SpGetHeadLocation(Nullable<int> locationID, Nullable<int> applicationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetHeadLocation_Result>("SpGetHeadLocation", locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetInterCompany_Result> SpGetInterCompany()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetInterCompany_Result>("SpGetInterCompany");
        }
    
        public virtual ObjectResult<SpGetInterCompanyDetails_Result> SpGetInterCompanyDetails(Nullable<int> iD, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetInterCompanyDetails_Result>("SpGetInterCompanyDetails", iDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetItemByPurchaseOrderID_Result> SpGetItemByPurchaseOrderID(Nullable<int> purchaseOrderID, string transNo, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, string hint)
        {
            var purchaseOrderIDParameter = purchaseOrderID.HasValue ?
                new ObjectParameter("PurchaseOrderID", purchaseOrderID) :
                new ObjectParameter("PurchaseOrderID", typeof(int));
    
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var hintParameter = hint != null ?
                new ObjectParameter("Hint", hint) :
                new ObjectParameter("Hint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetItemByPurchaseOrderID_Result>("SpGetItemByPurchaseOrderID", purchaseOrderIDParameter, transNoParameter, finYearParameter, locationIDParameter, applicationIDParameter, hintParameter);
        }
    
        public virtual ObjectResult<SpGetItemCategory_Result> SpGetItemCategory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetItemCategory_Result>("SpGetItemCategory");
        }
    
        public virtual ObjectResult<SpGetItemDetails_Result> SpGetItemDetails(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetItemDetails_Result>("SpGetItemDetails", iDParameter);
        }
    
        public virtual ObjectResult<SpGetItemForChequeStatus_Result> SpGetItemForChequeStatus()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetItemForChequeStatus_Result>("SpGetItemForChequeStatus");
        }
    
        public virtual ObjectResult<SpGetItemListForReport_Result> SpGetItemListForReport(string type, Nullable<int> itemCategoryID, string codeHint, string nameHint, string itemCategoryHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var itemCategoryHintParameter = itemCategoryHint != null ?
                new ObjectParameter("ItemCategoryHint", itemCategoryHint) :
                new ObjectParameter("ItemCategoryHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetItemListForReport_Result>("SpGetItemListForReport", typeParameter, itemCategoryIDParameter, codeHintParameter, nameHintParameter, itemCategoryHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetItemsByPackingCodes_Result> SpGetItemsByPackingCodes(string packingCodes, Nullable<int> applicationID)
        {
            var packingCodesParameter = packingCodes != null ?
                new ObjectParameter("PackingCodes", packingCodes) :
                new ObjectParameter("PackingCodes", typeof(string));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetItemsByPackingCodes_Result>("SpGetItemsByPackingCodes", packingCodesParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetItemsForOfficialAdvance_Result> SpGetItemsForOfficialAdvance(string type, string codeHint, string itemNameHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var itemNameHintParameter = itemNameHint != null ?
                new ObjectParameter("ItemNameHint", itemNameHint) :
                new ObjectParameter("ItemNameHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetItemsForOfficialAdvance_Result>("SpGetItemsForOfficialAdvance", typeParameter, codeHintParameter, itemNameHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetItemsForSchemeItem_Result> SpGetItemsForSchemeItem(Nullable<int> categoryID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> application)
        {
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationParameter = application.HasValue ?
                new ObjectParameter("Application", application) :
                new ObjectParameter("Application", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetItemsForSchemeItem_Result>("SpGetItemsForSchemeItem", categoryIDParameter, finYearParameter, locationIDParameter, applicationParameter);
        }
    
        public virtual ObjectResult<SpGetItemsListForSaleableServiceAndStockItem_Result> SpGetItemsListForSaleableServiceAndStockItem(Nullable<int> salesCategoryID, Nullable<int> salesIncentiveCategoryID, Nullable<int> businessCategoryID, string codeHint, string nameHint, string salesCategoryHint, string salesIncentiveCategoryHint, string businessCategoryHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var salesCategoryIDParameter = salesCategoryID.HasValue ?
                new ObjectParameter("SalesCategoryID", salesCategoryID) :
                new ObjectParameter("SalesCategoryID", typeof(int));
    
            var salesIncentiveCategoryIDParameter = salesIncentiveCategoryID.HasValue ?
                new ObjectParameter("SalesIncentiveCategoryID", salesIncentiveCategoryID) :
                new ObjectParameter("SalesIncentiveCategoryID", typeof(int));
    
            var businessCategoryIDParameter = businessCategoryID.HasValue ?
                new ObjectParameter("BusinessCategoryID", businessCategoryID) :
                new ObjectParameter("BusinessCategoryID", typeof(int));
    
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var salesCategoryHintParameter = salesCategoryHint != null ?
                new ObjectParameter("SalesCategoryHint", salesCategoryHint) :
                new ObjectParameter("SalesCategoryHint", typeof(string));
    
            var salesIncentiveCategoryHintParameter = salesIncentiveCategoryHint != null ?
                new ObjectParameter("SalesIncentiveCategoryHint", salesIncentiveCategoryHint) :
                new ObjectParameter("SalesIncentiveCategoryHint", typeof(string));
    
            var businessCategoryHintParameter = businessCategoryHint != null ?
                new ObjectParameter("BusinessCategoryHint", businessCategoryHint) :
                new ObjectParameter("BusinessCategoryHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetItemsListForSaleableServiceAndStockItem_Result>("SpGetItemsListForSaleableServiceAndStockItem", salesCategoryIDParameter, salesIncentiveCategoryIDParameter, businessCategoryIDParameter, codeHintParameter, nameHintParameter, salesCategoryHintParameter, salesIncentiveCategoryHintParameter, businessCategoryHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetItemsListForSaleableServiceItem_Result> SpGetItemsListForSaleableServiceItem(Nullable<int> itemCategoryID, string codeHint, string nameHint, string unitHint, string itemCategoryHint, string salesCategoryHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var unitHintParameter = unitHint != null ?
                new ObjectParameter("UnitHint", unitHint) :
                new ObjectParameter("UnitHint", typeof(string));
    
            var itemCategoryHintParameter = itemCategoryHint != null ?
                new ObjectParameter("ItemCategoryHint", itemCategoryHint) :
                new ObjectParameter("ItemCategoryHint", typeof(string));
    
            var salesCategoryHintParameter = salesCategoryHint != null ?
                new ObjectParameter("SalesCategoryHint", salesCategoryHint) :
                new ObjectParameter("SalesCategoryHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetItemsListForSaleableServiceItem_Result>("SpGetItemsListForSaleableServiceItem", itemCategoryIDParameter, codeHintParameter, nameHintParameter, unitHintParameter, itemCategoryHintParameter, salesCategoryHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetItemType_Result> SpGetItemType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetItemType_Result>("SpGetItemType");
        }
    
        public virtual ObjectResult<SpGetLeaveTypeList_Result> SpGetLeaveTypeList(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetLeaveTypeList_Result>("SpGetLeaveTypeList", finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetListForLocation_Result> SpGetListForLocation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetListForLocation_Result>("SpGetListForLocation");
        }
    
        public virtual ObjectResult<SpGetLocation_Result> SpGetLocation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetLocation_Result>("SpGetLocation");
        }
    
        public virtual ObjectResult<SpGetLocationGrouplist_Result> SpGetLocationGrouplist()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetLocationGrouplist_Result>("SpGetLocationGrouplist");
        }
    
        public virtual ObjectResult<SpGetLocationHeadList_Result> SpGetLocationHeadList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetLocationHeadList_Result>("SpGetLocationHeadList");
        }
    
        public virtual ObjectResult<SpGetLocationsByUser_Result> SpGetLocationsByUser(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetLocationsByUser_Result>("SpGetLocationsByUser", userIDParameter);
        }
    
        public virtual ObjectResult<SpGetLocationWiseSales_Result> SpGetLocationWiseSales(string type, string batchType, Nullable<int> finYear, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var batchTypeParameter = batchType != null ?
                new ObjectParameter("BatchType", batchType) :
                new ObjectParameter("BatchType", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetLocationWiseSales_Result>("SpGetLocationWiseSales", typeParameter, batchTypeParameter, finYearParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetLogicCodeByID_Result> SpGetLogicCodeByID(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetLogicCodeByID_Result>("SpGetLogicCodeByID", iDParameter);
        }
    
        public virtual ObjectResult<SpGetLogicCodeList_Result> SpGetLogicCodeList(string codeHint, string nameHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetLogicCodeList_Result>("SpGetLogicCodeList", codeHintParameter, nameHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetMachineDetails_Result> SpGetMachineDetails(Nullable<int> iD, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetMachineDetails_Result>("SpGetMachineDetails", iDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetMachineForMouldSettingsByID_Result> SpGetMachineForMouldSettingsByID(Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> machineID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var machineIDParameter = machineID.HasValue ?
                new ObjectParameter("MachineID", machineID) :
                new ObjectParameter("MachineID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetMachineForMouldSettingsByID_Result>("SpGetMachineForMouldSettingsByID", locationIDParameter, applicationIDParameter, machineIDParameter);
        }
    
        public virtual ObjectResult<SpGetMachineList_Result> SpGetMachineList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetMachineList_Result>("SpGetMachineList");
        }
    
        public virtual ObjectResult<SpGetMachinesForMould_Result> SpGetMachinesForMould(Nullable<int> mouldID, Nullable<int> applicationID)
        {
            var mouldIDParameter = mouldID.HasValue ?
                new ObjectParameter("MouldID", mouldID) :
                new ObjectParameter("MouldID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetMachinesForMould_Result>("SpGetMachinesForMould", mouldIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetMachinesForMouldSettings_Result> SpGetMachinesForMouldSettings(Nullable<int> locationID, Nullable<int> applicationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetMachinesForMouldSettings_Result>("SpGetMachinesForMouldSettings", locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetMasterFormulaList_Result> SpGetMasterFormulaList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetMasterFormulaList_Result>("SpGetMasterFormulaList");
        }
    
        public virtual ObjectResult<SpGetMaterialPurificationDetail_Result> SpGetMaterialPurificationDetail(Nullable<int> iD, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetMaterialPurificationDetail_Result>("SpGetMaterialPurificationDetail", iDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetMaterialPurificationList_Result> SpGetMaterialPurificationList(Nullable<int> locationID, Nullable<int> applicationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetMaterialPurificationList_Result>("SpGetMaterialPurificationList", locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetMaterialPurificationProcess_Result> SpGetMaterialPurificationProcess()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetMaterialPurificationProcess_Result>("SpGetMaterialPurificationProcess");
        }
    
        public virtual ObjectResult<SpGetModeOfTransport_Result> SpGetModeOfTransport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetModeOfTransport_Result>("SpGetModeOfTransport");
        }
    
        public virtual ObjectResult<SpGetMould_Result> SpGetMould(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetMould_Result>("SpGetMould", finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetMouldDetails_Result> SpGetMouldDetails(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetMouldDetails_Result>("SpGetMouldDetails", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetMouldItems_Result> SpGetMouldItems(Nullable<int> mouldID, Nullable<int> finYear, Nullable<int> locationID)
        {
            var mouldIDParameter = mouldID.HasValue ?
                new ObjectParameter("MouldID", mouldID) :
                new ObjectParameter("MouldID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetMouldItems_Result>("SpGetMouldItems", mouldIDParameter, finYearParameter, locationIDParameter);
        }
    
        public virtual ObjectResult<SpGetMouldList_Result> SpGetMouldList(string codeHint, string mouldNameHint, string itemNameHint, string machineNameHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var mouldNameHintParameter = mouldNameHint != null ?
                new ObjectParameter("MouldNameHint", mouldNameHint) :
                new ObjectParameter("MouldNameHint", typeof(string));
    
            var itemNameHintParameter = itemNameHint != null ?
                new ObjectParameter("ItemNameHint", itemNameHint) :
                new ObjectParameter("ItemNameHint", typeof(string));
    
            var machineNameHintParameter = machineNameHint != null ?
                new ObjectParameter("MachineNameHint", machineNameHint) :
                new ObjectParameter("MachineNameHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetMouldList_Result>("SpGetMouldList", codeHintParameter, mouldNameHintParameter, itemNameHintParameter, machineNameHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetMouldSettings_Result> SpGetMouldSettings(Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> machineID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var machineIDParameter = machineID.HasValue ?
                new ObjectParameter("MachineID", machineID) :
                new ObjectParameter("MachineID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetMouldSettings_Result>("SpGetMouldSettings", locationIDParameter, applicationIDParameter, machineIDParameter);
        }
    
        public virtual ObjectResult<SpGetOutPatient_Result> SpGetOutPatient(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetOutPatient_Result>("SpGetOutPatient", locationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPackingMaterialList_Result> SpGetPackingMaterialList(string codeHint, string nameHint, string categoryHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var categoryHintParameter = categoryHint != null ?
                new ObjectParameter("CategoryHint", categoryHint) :
                new ObjectParameter("CategoryHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPackingMaterialList_Result>("SpGetPackingMaterialList", codeHintParameter, nameHintParameter, categoryHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPartyList_Result> SpGetPartyList(string partyNameHint, string doctorNameHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var partyNameHintParameter = partyNameHint != null ?
                new ObjectParameter("PartyNameHint", partyNameHint) :
                new ObjectParameter("PartyNameHint", typeof(string));
    
            var doctorNameHintParameter = doctorNameHint != null ?
                new ObjectParameter("DoctorNameHint", doctorNameHint) :
                new ObjectParameter("DoctorNameHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPartyList_Result>("SpGetPartyList", partyNameHintParameter, doctorNameHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPatientByID_Result> SpGetPatientByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPatientByID_Result>("SpGetPatientByID", idParameter);
        }
    
        public virtual ObjectResult<SpGetPaymentDays_Result> SpGetPaymentDays()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPaymentDays_Result>("SpGetPaymentDays");
        }
    
        public virtual ObjectResult<SpGetPaymentDaysDetails_Result> SpGetPaymentDaysDetails(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPaymentDaysDetails_Result>("SpGetPaymentDaysDetails", iDParameter);
        }
    
        public virtual ObjectResult<SpGetPaymentGroup_Result> SpGetPaymentGroup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPaymentGroup_Result>("SpGetPaymentGroup");
        }
    
        public virtual ObjectResult<SpGetPaymentGroupDetails_Result> SpGetPaymentGroupDetails(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPaymentGroupDetails_Result>("SpGetPaymentGroupDetails", iDParameter);
        }
    
        public virtual ObjectResult<SpGetPaymentMode_Result> SpGetPaymentMode()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPaymentMode_Result>("SpGetPaymentMode");
        }
    
        public virtual ObjectResult<SpGetPaymentModeDetails_Result> SpGetPaymentModeDetails(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPaymentModeDetails_Result>("SpGetPaymentModeDetails", iDParameter);
        }
    
        public virtual ObjectResult<SpGetPaymentType_Result> SpGetPaymentType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPaymentType_Result>("SpGetPaymentType");
        }
    
        public virtual ObjectResult<SpGetPaymentTypeDetails_Result> SpGetPaymentTypeDetails(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPaymentTypeDetails_Result>("SpGetPaymentTypeDetails", iDParameter);
        }
    
        public virtual ObjectResult<SpGetPayrollCategoryList_Result> SpGetPayrollCategoryList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPayrollCategoryList_Result>("SpGetPayrollCategoryList");
        }
    
        public virtual ObjectResult<SpGetPeriodClosing_Result> SpGetPeriodClosing()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPeriodClosing_Result>("SpGetPeriodClosing");
        }
    
        public virtual ObjectResult<spGetPlaces_Result> spGetPlaces(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetPlaces_Result>("spGetPlaces", iDParameter);
        }
    
        public virtual ObjectResult<SpGetPowerConsumptionByID_Result> SpGetPowerConsumptionByID(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPowerConsumptionByID_Result>("SpGetPowerConsumptionByID", iDParameter);
        }
    
        public virtual ObjectResult<SpGetPowerConsumptionTransDetails_Result> SpGetPowerConsumptionTransDetails(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPowerConsumptionTransDetails_Result>("SpGetPowerConsumptionTransDetails", iDParameter);
        }
    
        public virtual ObjectResult<SpGetPremises_Result> SpGetPremises(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPremises_Result>("SpGetPremises", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPremisesWithItemID_Result> SpGetPremisesWithItemID(Nullable<int> itemID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPremisesWithItemID_Result>("SpGetPremisesWithItemID", itemIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPreProcessIssueItemsList_Result> SpGetPreProcessIssueItemsList(string codeHint, string nameHint, string itemCategoryHint, string activityHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var itemCategoryHintParameter = itemCategoryHint != null ?
                new ObjectParameter("ItemCategoryHint", itemCategoryHint) :
                new ObjectParameter("ItemCategoryHint", typeof(string));
    
            var activityHintParameter = activityHint != null ?
                new ObjectParameter("ActivityHint", activityHint) :
                new ObjectParameter("ActivityHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPreProcessIssueItemsList_Result>("SpGetPreProcessIssueItemsList", codeHintParameter, nameHintParameter, itemCategoryHintParameter, activityHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPriceList_Result> SpGetPriceList(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPriceList_Result>("SpGetPriceList", iDParameter);
        }
    
        public virtual ObjectResult<SpGetPriceListByID_Result> SpGetPriceListByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPriceListByID_Result>("SpGetPriceListByID", idParameter);
        }
    
        public virtual ObjectResult<SpGetPriceListDetails_Result> SpGetPriceListDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPriceListDetails_Result>("SpGetPriceListDetails");
        }
    
        public virtual ObjectResult<SpGetProcess_Result> SpGetProcess()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetProcess_Result>("SpGetProcess");
        }
    
        public virtual ObjectResult<SpGetProcessByID_Result> SpGetProcessByID(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetProcessByID_Result>("SpGetProcessByID", iDParameter);
        }
    
        public virtual ObjectResult<SpGetProcessCycleList_Result> SpGetProcessCycleList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetProcessCycleList_Result>("SpGetProcessCycleList");
        }
    
        public virtual ObjectResult<SpGetProcessDefinitionTrans_Result> SpGetProcessDefinitionTrans(Nullable<int> productionGroupID, Nullable<int> applicationID)
        {
            var productionGroupIDParameter = productionGroupID.HasValue ?
                new ObjectParameter("ProductionGroupID", productionGroupID) :
                new ObjectParameter("ProductionGroupID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetProcessDefinitionTrans_Result>("SpGetProcessDefinitionTrans", productionGroupIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetProductionDefinition_Result> SpGetProductionDefinition(Nullable<int> productionGroupID, Nullable<int> applicationID)
        {
            var productionGroupIDParameter = productionGroupID.HasValue ?
                new ObjectParameter("ProductionGroupID", productionGroupID) :
                new ObjectParameter("ProductionGroupID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetProductionDefinition_Result>("SpGetProductionDefinition", productionGroupIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetProductionDefinitionList_Result> SpGetProductionDefinitionList(Nullable<int> applicationID)
        {
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetProductionDefinitionList_Result>("SpGetProductionDefinitionList", applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetProductionDefinitionMaterialList_Result> SpGetProductionDefinitionMaterialList(string type, string codeHint, string nameHint, string itemCategoryHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var itemCategoryHintParameter = itemCategoryHint != null ?
                new ObjectParameter("ItemCategoryHint", itemCategoryHint) :
                new ObjectParameter("ItemCategoryHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetProductionDefinitionMaterialList_Result>("SpGetProductionDefinitionMaterialList", typeParameter, codeHintParameter, nameHintParameter, itemCategoryHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetProductionDefinitionProcesses_Result> SpGetProductionDefinitionProcesses(Nullable<int> productionGroupID, Nullable<int> applicationID)
        {
            var productionGroupIDParameter = productionGroupID.HasValue ?
                new ObjectParameter("ProductionGroupID", productionGroupID) :
                new ObjectParameter("ProductionGroupID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetProductionDefinitionProcesses_Result>("SpGetProductionDefinitionProcesses", productionGroupIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetProductionGroupList_Result> SpGetProductionGroupList(string codeHint, string nameHint, string categoryHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var categoryHintParameter = categoryHint != null ?
                new ObjectParameter("CategoryHint", categoryHint) :
                new ObjectParameter("CategoryHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetProductionGroupList_Result>("SpGetProductionGroupList", codeHintParameter, nameHintParameter, categoryHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetProductionIssueMaterialList_Result> SpGetProductionIssueMaterialList(Nullable<int> productionID, Nullable<int> productionSequenceID, string codeHint, string nameHint, string categoryHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var productionIDParameter = productionID.HasValue ?
                new ObjectParameter("ProductionID", productionID) :
                new ObjectParameter("ProductionID", typeof(int));
    
            var productionSequenceIDParameter = productionSequenceID.HasValue ?
                new ObjectParameter("ProductionSequenceID", productionSequenceID) :
                new ObjectParameter("ProductionSequenceID", typeof(int));
    
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var categoryHintParameter = categoryHint != null ?
                new ObjectParameter("CategoryHint", categoryHint) :
                new ObjectParameter("CategoryHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetProductionIssueMaterialList_Result>("SpGetProductionIssueMaterialList", productionIDParameter, productionSequenceIDParameter, codeHintParameter, nameHintParameter, categoryHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetProductionLocationList_Result> SpGetProductionLocationList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetProductionLocationList_Result>("SpGetProductionLocationList");
        }
    
        public virtual ObjectResult<SpGetProductionLocationMapping_Result> SpGetProductionLocationMapping(Nullable<int> productionGroupID)
        {
            var productionGroupIDParameter = productionGroupID.HasValue ?
                new ObjectParameter("ProductionGroupID", productionGroupID) :
                new ObjectParameter("ProductionGroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetProductionLocationMapping_Result>("SpGetProductionLocationMapping", productionGroupIDParameter);
        }
    
        public virtual ObjectResult<SpGetProductionOutputInMonth_Result> SpGetProductionOutputInMonth(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetProductionOutputInMonth_Result>("SpGetProductionOutputInMonth", finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetProductionOutputInYear_Result> SpGetProductionOutputInYear(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetProductionOutputInYear_Result>("SpGetProductionOutputInYear", finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetProductionProgressDetails_Result> SpGetProductionProgressDetails(string type, Nullable<int> salesCategoryID, Nullable<int> finYear, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var salesCategoryIDParameter = salesCategoryID.HasValue ?
                new ObjectParameter("SalesCategoryID", salesCategoryID) :
                new ObjectParameter("SalesCategoryID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetProductionProgressDetails_Result>("SpGetProductionProgressDetails", typeParameter, salesCategoryIDParameter, finYearParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetProject_Result> SpGetProject()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetProject_Result>("SpGetProject");
        }
    
        public virtual ObjectResult<SpGetProjectByID_Result> SpGetProjectByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetProjectByID_Result>("SpGetProjectByID", idParameter);
        }
    
        public virtual ObjectResult<SpGetQCDefinitionTransDetails_Result> SpGetQCDefinitionTransDetails(Nullable<int> itemId)
        {
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetQCDefinitionTransDetails_Result>("SpGetQCDefinitionTransDetails", itemIdParameter);
        }
    
        public virtual ObjectResult<SpGetQCTest_Result> SpGetQCTest()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetQCTest_Result>("SpGetQCTest");
        }
    
        public virtual ObjectResult<SpGetQCTestByID_Result> SpGetQCTestByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetQCTestByID_Result>("SpGetQCTestByID", idParameter);
        }
    
        public virtual ObjectResult<SpGetQCTestDefinition_Result> SpGetQCTestDefinition()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetQCTestDefinition_Result>("SpGetQCTestDefinition");
        }
    
        public virtual ObjectResult<SpGetQCTestDefinitionByID_Result> SpGetQCTestDefinitionByID(Nullable<int> itemId)
        {
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetQCTestDefinitionByID_Result>("SpGetQCTestDefinitionByID", itemIdParameter);
        }
    
        public virtual ObjectResult<SpGetQcTestDefinitionList_Result> SpGetQcTestDefinitionList(string code, string itemName, string testName, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var testNameParameter = testName != null ?
                new ObjectParameter("TestName", testName) :
                new ObjectParameter("TestName", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetQcTestDefinitionList_Result>("SpGetQcTestDefinitionList", codeParameter, itemNameParameter, testNameParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetQCTestList_Result> SpGetQCTestList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetQCTestList_Result>("SpGetQCTestList");
        }
    
        public virtual ObjectResult<SpGetRateOfItems_Result> SpGetRateOfItems(string itemIDs, Nullable<int> priceListID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemIDsParameter = itemIDs != null ?
                new ObjectParameter("ItemIDs", itemIDs) :
                new ObjectParameter("ItemIDs", typeof(string));
    
            var priceListIDParameter = priceListID.HasValue ?
                new ObjectParameter("PriceListID", priceListID) :
                new ObjectParameter("PriceListID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetRateOfItems_Result>("SpGetRateOfItems", itemIDsParameter, priceListIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetReceiptItemAutoComplete_Result> SpGetReceiptItemAutoComplete(Nullable<int> iD, string hint)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var hintParameter = hint != null ?
                new ObjectParameter("Hint", hint) :
                new ObjectParameter("Hint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetReceiptItemAutoComplete_Result>("SpGetReceiptItemAutoComplete", iDParameter, hintParameter);
        }
    
        public virtual ObjectResult<SpGetReceiptItemList_Result> SpGetReceiptItemList(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetReceiptItemList_Result>("SpGetReceiptItemList", iDParameter);
        }
    
        public virtual ObjectResult<SpGetRegionalSalesManagerCateogry_Result> SpGetRegionalSalesManagerCateogry()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetRegionalSalesManagerCateogry_Result>("SpGetRegionalSalesManagerCateogry");
        }
    
        public virtual ObjectResult<SpGetRepackingReturnItems_Result> SpGetRepackingReturnItems(Nullable<int> productionGroupID, Nullable<int> issueItemID, Nullable<int> receiptItemID, string codeHint, string nameHint, string itemCategoryHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var productionGroupIDParameter = productionGroupID.HasValue ?
                new ObjectParameter("ProductionGroupID", productionGroupID) :
                new ObjectParameter("ProductionGroupID", typeof(int));
    
            var issueItemIDParameter = issueItemID.HasValue ?
                new ObjectParameter("IssueItemID", issueItemID) :
                new ObjectParameter("IssueItemID", typeof(int));
    
            var receiptItemIDParameter = receiptItemID.HasValue ?
                new ObjectParameter("ReceiptItemID", receiptItemID) :
                new ObjectParameter("ReceiptItemID", typeof(int));
    
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var itemCategoryHintParameter = itemCategoryHint != null ?
                new ObjectParameter("ItemCategoryHint", itemCategoryHint) :
                new ObjectParameter("ItemCategoryHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetRepackingReturnItems_Result>("SpGetRepackingReturnItems", productionGroupIDParameter, issueItemIDParameter, receiptItemIDParameter, codeHintParameter, nameHintParameter, itemCategoryHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetRepackingReturnItemsAutoComplete_Result> SpGetRepackingReturnItemsAutoComplete(Nullable<int> productionGroupID, Nullable<int> issueItemID, Nullable<int> receiptItemID, string hint, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var productionGroupIDParameter = productionGroupID.HasValue ?
                new ObjectParameter("ProductionGroupID", productionGroupID) :
                new ObjectParameter("ProductionGroupID", typeof(int));
    
            var issueItemIDParameter = issueItemID.HasValue ?
                new ObjectParameter("IssueItemID", issueItemID) :
                new ObjectParameter("IssueItemID", typeof(int));
    
            var receiptItemIDParameter = receiptItemID.HasValue ?
                new ObjectParameter("ReceiptItemID", receiptItemID) :
                new ObjectParameter("ReceiptItemID", typeof(int));
    
            var hintParameter = hint != null ?
                new ObjectParameter("Hint", hint) :
                new ObjectParameter("Hint", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetRepackingReturnItemsAutoComplete_Result>("SpGetRepackingReturnItemsAutoComplete", productionGroupIDParameter, issueItemIDParameter, receiptItemIDParameter, hintParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetRole_Result> SpGetRole(Nullable<int> applicationID, Nullable<int> roleID)
        {
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetRole_Result>("SpGetRole", applicationIDParameter, roleIDParameter);
        }
    
        public virtual ObjectResult<SpGetRoleList_Result> SpGetRoleList(Nullable<int> applicationID)
        {
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetRoleList_Result>("SpGetRoleList", applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetRoleListForUser_Result> SpGetRoleListForUser(Nullable<int> userID, Nullable<int> applicationID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetRoleListForUser_Result>("SpGetRoleListForUser", userIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetRolesForDetails_Result> SpGetRolesForDetails(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetRolesForDetails_Result>("SpGetRolesForDetails", userIDParameter);
        }
    
        public virtual ObjectResult<SpGetRolesList_Result> SpGetRolesList(string codeHint, string nameHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetRolesList_Result>("SpGetRolesList", codeHintParameter, nameHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetSalaryComponents_Result> SpGetSalaryComponents()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSalaryComponents_Result>("SpGetSalaryComponents");
        }
    
        public virtual ObjectResult<SpGetSalaryDetails_Result> SpGetSalaryDetails(Nullable<int> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSalaryDetails_Result>("SpGetSalaryDetails", employeeIDParameter);
        }
    
        public virtual ObjectResult<SpGetSalesAmtByDayWise_Result> SpGetSalesAmtByDayWise(Nullable<int> finYear, Nullable<int> applicationID)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSalesAmtByDayWise_Result>("SpGetSalesAmtByDayWise", finYearParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetSalesAreas_Result> SpGetSalesAreas(Nullable<int> areaID)
        {
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("AreaID", areaID) :
                new ObjectParameter("AreaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSalesAreas_Result>("SpGetSalesAreas", areaIDParameter);
        }
    
        public virtual ObjectResult<SpGetSalesAreasByParentArea_Result> SpGetSalesAreasByParentArea(Nullable<int> parentAreaID)
        {
            var parentAreaIDParameter = parentAreaID.HasValue ?
                new ObjectParameter("ParentAreaID", parentAreaID) :
                new ObjectParameter("ParentAreaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSalesAreasByParentArea_Result>("SpGetSalesAreasByParentArea", parentAreaIDParameter);
        }
    
        public virtual ObjectResult<SpGetSalesCategory_Result> SpGetSalesCategory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSalesCategory_Result>("SpGetSalesCategory");
        }
    
        public virtual ObjectResult<SpGetSalesCategoryList_Result> SpGetSalesCategoryList(Nullable<int> categoryID)
        {
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSalesCategoryList_Result>("SpGetSalesCategoryList", categoryIDParameter);
        }
    
        public virtual ObjectResult<SpGetSalesIncentiveCategoryList_Result> SpGetSalesIncentiveCategoryList(Nullable<int> categoryID)
        {
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSalesIncentiveCategoryList_Result>("SpGetSalesIncentiveCategoryList", categoryIDParameter);
        }
    
        public virtual ObjectResult<SpGetSalesManagerCategory_Result> SpGetSalesManagerCategory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSalesManagerCategory_Result>("SpGetSalesManagerCategory");
        }
    
        public virtual ObjectResult<SpGetSchemeAllocationDetail_Result> SpGetSchemeAllocationDetail(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSchemeAllocationDetail_Result>("SpGetSchemeAllocationDetail", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetSchemeAllocationList_Result> SpGetSchemeAllocationList(string codeHint, string nameHint, string customerNameHint, string customerCategoryHint, string customerStateHint, string customerDistrictHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var customerNameHintParameter = customerNameHint != null ?
                new ObjectParameter("CustomerNameHint", customerNameHint) :
                new ObjectParameter("CustomerNameHint", typeof(string));
    
            var customerCategoryHintParameter = customerCategoryHint != null ?
                new ObjectParameter("CustomerCategoryHint", customerCategoryHint) :
                new ObjectParameter("CustomerCategoryHint", typeof(string));
    
            var customerStateHintParameter = customerStateHint != null ?
                new ObjectParameter("CustomerStateHint", customerStateHint) :
                new ObjectParameter("CustomerStateHint", typeof(string));
    
            var customerDistrictHintParameter = customerDistrictHint != null ?
                new ObjectParameter("CustomerDistrictHint", customerDistrictHint) :
                new ObjectParameter("CustomerDistrictHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSchemeAllocationList_Result>("SpGetSchemeAllocationList", codeHintParameter, nameHintParameter, customerNameHintParameter, customerCategoryHintParameter, customerStateHintParameter, customerDistrictHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetSchemeCategoryList_Result> SpGetSchemeCategoryList(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSchemeCategoryList_Result>("SpGetSchemeCategoryList", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetSchemeCustomerList_Result> SpGetSchemeCustomerList(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSchemeCustomerList_Result>("SpGetSchemeCustomerList", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetSchemeDistrictList_Result> SpGetSchemeDistrictList(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSchemeDistrictList_Result>("SpGetSchemeDistrictList", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetSchemeItems_Result> SpGetSchemeItems(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSchemeItems_Result>("SpGetSchemeItems", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetSchemeStateList_Result> SpGetSchemeStateList(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSchemeStateList_Result>("SpGetSchemeStateList", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpGetSelectedDefaultStore(Nullable<int> locationID, Nullable<int> userID, ObjectParameter storeID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetSelectedDefaultStore", locationIDParameter, userIDParameter, storeID);
        }
    
        public virtual ObjectResult<SpGetSerialNoByFinYear_Result> SpGetSerialNoByFinYear(Nullable<int> finyear, string formHint, string locationHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit)
        {
            var finyearParameter = finyear.HasValue ?
                new ObjectParameter("Finyear", finyear) :
                new ObjectParameter("Finyear", typeof(int));
    
            var formHintParameter = formHint != null ?
                new ObjectParameter("FormHint", formHint) :
                new ObjectParameter("FormHint", typeof(string));
    
            var locationHintParameter = locationHint != null ?
                new ObjectParameter("LocationHint", locationHint) :
                new ObjectParameter("LocationHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSerialNoByFinYear_Result>("SpGetSerialNoByFinYear", finyearParameter, formHintParameter, locationHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter);
        }
    
        public virtual ObjectResult<SpGetSerialNumberList_Result> SpGetSerialNumberList(string formHint, string prefixHint, string locationPrefixHint, string finYearPrefixHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var formHintParameter = formHint != null ?
                new ObjectParameter("FormHint", formHint) :
                new ObjectParameter("FormHint", typeof(string));
    
            var prefixHintParameter = prefixHint != null ?
                new ObjectParameter("PrefixHint", prefixHint) :
                new ObjectParameter("PrefixHint", typeof(string));
    
            var locationPrefixHintParameter = locationPrefixHint != null ?
                new ObjectParameter("LocationPrefixHint", locationPrefixHint) :
                new ObjectParameter("LocationPrefixHint", typeof(string));
    
            var finYearPrefixHintParameter = finYearPrefixHint != null ?
                new ObjectParameter("FinYearPrefixHint", finYearPrefixHint) :
                new ObjectParameter("FinYearPrefixHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSerialNumberList_Result>("SpGetSerialNumberList", formHintParameter, prefixHintParameter, locationPrefixHintParameter, finYearPrefixHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetServiceCustomerList_Result> SpGetServiceCustomerList(string type, Nullable<int> customerCategoryID, Nullable<int> stateID, string customerCodeHint, string customerNameHint, string customerLocationHint, string customerCategoryHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var customerCategoryIDParameter = customerCategoryID.HasValue ?
                new ObjectParameter("CustomerCategoryID", customerCategoryID) :
                new ObjectParameter("CustomerCategoryID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var customerCodeHintParameter = customerCodeHint != null ?
                new ObjectParameter("CustomerCodeHint", customerCodeHint) :
                new ObjectParameter("CustomerCodeHint", typeof(string));
    
            var customerNameHintParameter = customerNameHint != null ?
                new ObjectParameter("CustomerNameHint", customerNameHint) :
                new ObjectParameter("CustomerNameHint", typeof(string));
    
            var customerLocationHintParameter = customerLocationHint != null ?
                new ObjectParameter("CustomerLocationHint", customerLocationHint) :
                new ObjectParameter("CustomerLocationHint", typeof(string));
    
            var customerCategoryHintParameter = customerCategoryHint != null ?
                new ObjectParameter("CustomerCategoryHint", customerCategoryHint) :
                new ObjectParameter("CustomerCategoryHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetServiceCustomerList_Result>("SpGetServiceCustomerList", typeParameter, customerCategoryIDParameter, stateIDParameter, customerCodeHintParameter, customerNameHintParameter, customerLocationHintParameter, customerCategoryHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetServiceSupplier_Result> SpGetServiceSupplier(Nullable<int> locationID, Nullable<int> applicationID, string hint, Nullable<int> offset, Nullable<int> limit)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var hintParameter = hint != null ?
                new ObjectParameter("Hint", hint) :
                new ObjectParameter("Hint", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetServiceSupplier_Result>("SpGetServiceSupplier", locationIDParameter, applicationIDParameter, hintParameter, offsetParameter, limitParameter);
        }
    
        public virtual ObjectResult<SpGetShippingAddressLocation_Result> SpGetShippingAddressLocation(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetShippingAddressLocation_Result>("SpGetShippingAddressLocation", locationIDParameter);
        }
    
        public virtual ObjectResult<SpGetSLADetails_Result> SpGetSLADetails(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSLADetails_Result>("SpGetSLADetails", iDParameter);
        }
    
        public virtual ObjectResult<SpGetSLAFilterByType_Result> SpGetSLAFilterByType(string type)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSLAFilterByType_Result>("SpGetSLAFilterByType", typeParameter);
        }
    
        public virtual ObjectResult<SpGetSLAKeyValueByTransactionType_Result> SpGetSLAKeyValueByTransactionType(string transactionType)
        {
            var transactionTypeParameter = transactionType != null ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSLAKeyValueByTransactionType_Result>("SpGetSLAKeyValueByTransactionType", transactionTypeParameter);
        }
    
        public virtual ObjectResult<SpGetState_Result> SpGetState(Nullable<int> stateID)
        {
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetState_Result>("SpGetState", stateIDParameter);
        }
    
        public virtual ObjectResult<SPGetStateByCountry_Result> SPGetStateByCountry(Nullable<int> countryID)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetStateByCountry_Result>("SPGetStateByCountry", countryIDParameter);
        }
    
        public virtual int SpGetStateByLocation(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter iD)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetStateByLocation", finYearParameter, locationIDParameter, applicationIDParameter, iD);
        }
    
        public virtual ObjectResult<SPGetStateList_Result> SPGetStateList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetStateList_Result>("SPGetStateList");
        }
    
        public virtual ObjectResult<SpGetStockableItemAutoComplete_Result> SpGetStockableItemAutoComplete(Nullable<int> itemCategoryID, string hint, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var hintParameter = hint != null ?
                new ObjectParameter("Hint", hint) :
                new ObjectParameter("Hint", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetStockableItemAutoComplete_Result>("SpGetStockableItemAutoComplete", itemCategoryIDParameter, hintParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetStockAdjustmentReasonsByID_Result> SpGetStockAdjustmentReasonsByID(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetStockAdjustmentReasonsByID_Result>("SpGetStockAdjustmentReasonsByID", iDParameter);
        }
    
        public virtual ObjectResult<SpGetStockAdjustmentReasonsList_Result> SpGetStockAdjustmentReasonsList(string codeHint, string nameHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetStockAdjustmentReasonsList_Result>("SpGetStockAdjustmentReasonsList", codeHintParameter, nameHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetStockByBusinessCategoryWise_Result> SpGetStockByBusinessCategoryWise(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetStockByBusinessCategoryWise_Result>("SpGetStockByBusinessCategoryWise", finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetSupplier_Result> SpGetSupplier(Nullable<int> locationID, Nullable<int> applicationID, string hint, Nullable<int> offset, Nullable<int> limit)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var hintParameter = hint != null ?
                new ObjectParameter("Hint", hint) :
                new ObjectParameter("Hint", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSupplier_Result>("SpGetSupplier", locationIDParameter, applicationIDParameter, hintParameter, offsetParameter, limitParameter);
        }
    
        public virtual ObjectResult<SpGetSupplierAccountCategory_Result> SpGetSupplierAccountCategory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSupplierAccountCategory_Result>("SpGetSupplierAccountCategory");
        }
    
        public virtual ObjectResult<SpGetSupplierAccountsCategory_Result> SpGetSupplierAccountsCategory(Nullable<int> createdUserID, Nullable<int> applicationID)
        {
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSupplierAccountsCategory_Result>("SpGetSupplierAccountsCategory", createdUserIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetSupplierAccountsCategoryByID_Result> SpGetSupplierAccountsCategoryByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSupplierAccountsCategoryByID_Result>("SpGetSupplierAccountsCategoryByID", idParameter);
        }
    
        public virtual ObjectResult<SpGetSupplierCategory_Result> SpGetSupplierCategory(Nullable<int> createdUserID, Nullable<int> applicationID)
        {
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSupplierCategory_Result>("SpGetSupplierCategory", createdUserIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetSupplierCategoryByID_Result> SpGetSupplierCategoryByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSupplierCategoryByID_Result>("SpGetSupplierCategoryByID", idParameter);
        }
    
        public virtual ObjectResult<SpGetSupplierItemCategory_Result> SpGetSupplierItemCategory(Nullable<int> supplierID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSupplierItemCategory_Result>("SpGetSupplierItemCategory", supplierIDParameter);
        }
    
        public virtual ObjectResult<SpGetSupplierLocation_Result> SpGetSupplierLocation(Nullable<int> supplierID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSupplierLocation_Result>("SpGetSupplierLocation", supplierIDParameter);
        }
    
        public virtual int SpGetSupplierLocationID(Nullable<int> supplierID, Nullable<int> applicationID, ObjectParameter locationID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetSupplierLocationID", supplierIDParameter, applicationIDParameter, locationID);
        }
    
        public virtual ObjectResult<SpGetSuppliersAutoComplete_Result> SpGetSuppliersAutoComplete(string type, string hint, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var hintParameter = hint != null ?
                new ObjectParameter("Hint", hint) :
                new ObjectParameter("Hint", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSuppliersAutoComplete_Result>("SpGetSuppliersAutoComplete", typeParameter, hintParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetSuppliersCategory_Result> SpGetSuppliersCategory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSuppliersCategory_Result>("SpGetSuppliersCategory");
        }
    
        public virtual ObjectResult<SpGetSupplierTaxCategory_Result> SpGetSupplierTaxCategory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSupplierTaxCategory_Result>("SpGetSupplierTaxCategory");
        }
    
        public virtual ObjectResult<SpGetSupplierTaxSubCategory_Result> SpGetSupplierTaxSubCategory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSupplierTaxSubCategory_Result>("SpGetSupplierTaxSubCategory");
        }
    
        public virtual ObjectResult<SpGetTDS_Result> SpGetTDS()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetTDS_Result>("SpGetTDS");
        }
    
        public virtual ObjectResult<SpGetTDSDetails_Result> SpGetTDSDetails(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetTDSDetails_Result>("SpGetTDSDetails", iDParameter);
        }
    
        public virtual ObjectResult<SpGetTransactionTypeByProcessCycle_Result> SpGetTransactionTypeByProcessCycle(string processCycle)
        {
            var processCycleParameter = processCycle != null ?
                new ObjectParameter("processCycle", processCycle) :
                new ObjectParameter("processCycle", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetTransactionTypeByProcessCycle_Result>("SpGetTransactionTypeByProcessCycle", processCycleParameter);
        }
    
        public virtual ObjectResult<SpGetTransferableLocationList_Result> SpGetTransferableLocationList(Nullable<int> locationID, Nullable<int> applicationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetTransferableLocationList_Result>("SpGetTransferableLocationList", locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetTreasuryDetailsForAutocomplete_Result> SpGetTreasuryDetailsForAutocomplete(string hint)
        {
            var hintParameter = hint != null ?
                new ObjectParameter("Hint", hint) :
                new ObjectParameter("Hint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetTreasuryDetailsForAutocomplete_Result>("SpGetTreasuryDetailsForAutocomplete", hintParameter);
        }
    
        public virtual ObjectResult<SpGetTurnOverDiscount_Result> SpGetTurnOverDiscount()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetTurnOverDiscount_Result>("SpGetTurnOverDiscount");
        }
    
        public virtual ObjectResult<SpGetTurnOverDiscountsByID_Result> SpGetTurnOverDiscountsByID(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetTurnOverDiscountsByID_Result>("SpGetTurnOverDiscountsByID", iDParameter);
        }
    
        public virtual ObjectResult<SpGetTurnOverDiscountTransDetails_Result> SpGetTurnOverDiscountTransDetails(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetTurnOverDiscountTransDetails_Result>("SpGetTurnOverDiscountTransDetails", iDParameter);
        }
    
        public virtual ObjectResult<SpGetUnitByItemID_Result> SpGetUnitByItemID(Nullable<int> itemID, string type, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetUnitByItemID_Result>("SpGetUnitByItemID", itemIDParameter, typeParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetUser_Result> SpGetUser(Nullable<int> finYear, Nullable<int> locatioID, Nullable<int> applicationID)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locatioIDParameter = locatioID.HasValue ?
                new ObjectParameter("LocatioID", locatioID) :
                new ObjectParameter("LocatioID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetUser_Result>("SpGetUser", finYearParameter, locatioIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetUserList_Result> SpGetUserList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetUserList_Result>("SpGetUserList");
        }
    
        public virtual ObjectResult<SpGetUserLocationList_Result> SpGetUserLocationList(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetUserLocationList_Result>("SpGetUserLocationList", iDParameter);
        }
    
        public virtual ObjectResult<SpGetUserLocationsList_Result> SpGetUserLocationsList(string code, string name, string userName, string defaultLocation, string currentLocation, string otherLocation, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var defaultLocationParameter = defaultLocation != null ?
                new ObjectParameter("DefaultLocation", defaultLocation) :
                new ObjectParameter("DefaultLocation", typeof(string));
    
            var currentLocationParameter = currentLocation != null ?
                new ObjectParameter("CurrentLocation", currentLocation) :
                new ObjectParameter("CurrentLocation", typeof(string));
    
            var otherLocationParameter = otherLocation != null ?
                new ObjectParameter("OtherLocation", otherLocation) :
                new ObjectParameter("OtherLocation", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetUserLocationsList_Result>("SpGetUserLocationsList", codeParameter, nameParameter, userNameParameter, defaultLocationParameter, currentLocationParameter, otherLocationParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetUserRolesByID_Result> SpGetUserRolesByID(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetUserRolesByID_Result>("SpGetUserRolesByID", iDParameter);
        }
    
        public virtual ObjectResult<SpGetWareHouse_Result> SpGetWareHouse(Nullable<int> locationID, Nullable<int> applicationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetWareHouse_Result>("SpGetWareHouse", locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetWareHouseByID_Result> SpGetWareHouseByID(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetWareHouseByID_Result>("SpGetWareHouseByID", iDParameter);
        }
    
        public virtual ObjectResult<SpGetWareHouseList_Result> SpGetWareHouseList(Nullable<int> locationID, Nullable<int> applicationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetWareHouseList_Result>("SpGetWareHouseList", locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetZonalManagerCategory_Result> SpGetZonalManagerCategory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetZonalManagerCategory_Result>("SpGetZonalManagerCategory");
        }
    
        public virtual ObjectResult<Nullable<bool>> SpIsBranchLocation(Nullable<int> locationID, Nullable<int> applicationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("SpIsBranchLocation", locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpIsDefaultStoreExistForUser(Nullable<int> userID, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter returnValue)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpIsDefaultStoreExistForUser", userIDParameter, locationIDParameter, applicationIDParameter, returnValue);
        }
    
        public virtual int SpIsDeletableQCTestDefinition(Nullable<int> iD, Nullable<int> itemID, Nullable<int> qCTestID, ObjectParameter isDeletable)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var qCTestIDParameter = qCTestID.HasValue ?
                new ObjectParameter("QCTestID", qCTestID) :
                new ObjectParameter("QCTestID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpIsDeletableQCTestDefinition", iDParameter, itemIDParameter, qCTestIDParameter, isDeletable);
        }
    
        public virtual int SpIsFSOExist(Nullable<int> employeeID, Nullable<int> applicationID, ObjectParameter isExist)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpIsFSOExist", employeeIDParameter, applicationIDParameter, isExist);
        }
    
        public virtual int SpIsInterCompanyCustomer(Nullable<int> customerID, Nullable<int> applicationID, ObjectParameter isInterCompanyCustomer)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpIsInterCompanyCustomer", customerIDParameter, applicationIDParameter, isInterCompanyCustomer);
        }
    
        public virtual int SpIsInterCompanySupplier(Nullable<int> supplierID, Nullable<int> applicationID, ObjectParameter isInterCompanySupplier)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpIsInterCompanySupplier", supplierIDParameter, applicationIDParameter, isInterCompanySupplier);
        }
    
        public virtual int SpIsItemExist(string name, string hsnCode, Nullable<int> iD, ObjectParameter returnValue)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var hsnCodeParameter = hsnCode != null ?
                new ObjectParameter("HsnCode", hsnCode) :
                new ObjectParameter("HsnCode", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpIsItemExist", nameParameter, hsnCodeParameter, iDParameter, returnValue);
        }
    
        public virtual int SpIsProductionDefinitionEditable(Nullable<int> productionGroupID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter isEditable)
        {
            var productionGroupIDParameter = productionGroupID.HasValue ?
                new ObjectParameter("ProductionGroupID", productionGroupID) :
                new ObjectParameter("ProductionGroupID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpIsProductionDefinitionEditable", productionGroupIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, isEditable);
        }
    
        public virtual int SpIsRemovedChartOfAccounts(Nullable<int> iD, ObjectParameter returnValue)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpIsRemovedChartOfAccounts", iDParameter, returnValue);
        }
    
        public virtual int SpIsSchemeExist(Nullable<int> categoryID, Nullable<int> customerID, Nullable<int> countryID, Nullable<int> stateID, Nullable<int> districtID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, ObjectParameter count)
        {
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpIsSchemeExist", categoryIDParameter, customerIDParameter, countryIDParameter, stateIDParameter, districtIDParameter, startDateParameter, endDateParameter, count);
        }
    
        public virtual int SpIsSchemeItemExist(Nullable<int> iD, Nullable<int> itemID, Nullable<int> businessCategoryID, Nullable<int> salesCategoryID, Nullable<int> offerItemID, Nullable<decimal> invoiceQty, Nullable<decimal> offerQty, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, ObjectParameter itemCount)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var businessCategoryIDParameter = businessCategoryID.HasValue ?
                new ObjectParameter("BusinessCategoryID", businessCategoryID) :
                new ObjectParameter("BusinessCategoryID", typeof(int));
    
            var salesCategoryIDParameter = salesCategoryID.HasValue ?
                new ObjectParameter("SalesCategoryID", salesCategoryID) :
                new ObjectParameter("SalesCategoryID", typeof(int));
    
            var offerItemIDParameter = offerItemID.HasValue ?
                new ObjectParameter("OfferItemID", offerItemID) :
                new ObjectParameter("OfferItemID", typeof(int));
    
            var invoiceQtyParameter = invoiceQty.HasValue ?
                new ObjectParameter("InvoiceQty", invoiceQty) :
                new ObjectParameter("InvoiceQty", typeof(decimal));
    
            var offerQtyParameter = offerQty.HasValue ?
                new ObjectParameter("OfferQty", offerQty) :
                new ObjectParameter("OfferQty", typeof(decimal));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpIsSchemeItemExist", iDParameter, itemIDParameter, businessCategoryIDParameter, salesCategoryIDParameter, offerItemIDParameter, invoiceQtyParameter, offerQtyParameter, startDateParameter, endDateParameter, itemCount);
        }
    
        public virtual int SpIsUserhaveRoles(Nullable<int> userID, Nullable<int> applicationID, ObjectParameter isExist)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpIsUserhaveRoles", userIDParameter, applicationIDParameter, isExist);
        }
    
        public virtual ObjectResult<SpItemByItemANDSalesCategories_Result> SpItemByItemANDSalesCategories(Nullable<int> itemCategoryID, Nullable<int> salesCategoryID, Nullable<int> priceListID, string itemHint, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var salesCategoryIDParameter = salesCategoryID.HasValue ?
                new ObjectParameter("SalesCategoryID", salesCategoryID) :
                new ObjectParameter("SalesCategoryID", typeof(int));
    
            var priceListIDParameter = priceListID.HasValue ?
                new ObjectParameter("PriceListID", priceListID) :
                new ObjectParameter("PriceListID", typeof(int));
    
            var itemHintParameter = itemHint != null ?
                new ObjectParameter("ItemHint", itemHint) :
                new ObjectParameter("ItemHint", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpItemByItemANDSalesCategories_Result>("SpItemByItemANDSalesCategories", itemCategoryIDParameter, salesCategoryIDParameter, priceListIDParameter, itemHintParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpItemByServiceCategory_Result> SpItemByServiceCategory(Nullable<int> itemCategoryID, Nullable<int> purchaseCategoryID, string itemHint)
        {
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var purchaseCategoryIDParameter = purchaseCategoryID.HasValue ?
                new ObjectParameter("PurchaseCategoryID", purchaseCategoryID) :
                new ObjectParameter("PurchaseCategoryID", typeof(int));
    
            var itemHintParameter = itemHint != null ?
                new ObjectParameter("ItemHint", itemHint) :
                new ObjectParameter("ItemHint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpItemByServiceCategory_Result>("SpItemByServiceCategory", itemCategoryIDParameter, purchaseCategoryIDParameter, itemHintParameter);
        }
    
        public virtual ObjectResult<SpPGetPackingItemAutoComplete_Result> SpPGetPackingItemAutoComplete(Nullable<int> packingSequence, string itemHint)
        {
            var packingSequenceParameter = packingSequence.HasValue ?
                new ObjectParameter("PackingSequence", packingSequence) :
                new ObjectParameter("PackingSequence", typeof(int));
    
            var itemHintParameter = itemHint != null ?
                new ObjectParameter("ItemHint", itemHint) :
                new ObjectParameter("ItemHint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpPGetPackingItemAutoComplete_Result>("SpPGetPackingItemAutoComplete", packingSequenceParameter, itemHintParameter);
        }
    
        public virtual ObjectResult<SpPGetPackingItemList_Result> SpPGetPackingItemList(Nullable<int> packingSequence, string codeHint, string nameHint, string itemCategoryHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit)
        {
            var packingSequenceParameter = packingSequence.HasValue ?
                new ObjectParameter("PackingSequence", packingSequence) :
                new ObjectParameter("PackingSequence", typeof(int));
    
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var itemCategoryHintParameter = itemCategoryHint != null ?
                new ObjectParameter("ItemCategoryHint", itemCategoryHint) :
                new ObjectParameter("ItemCategoryHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpPGetPackingItemList_Result>("SpPGetPackingItemList", packingSequenceParameter, codeHintParameter, nameHintParameter, itemCategoryHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter);
        }
    
        public virtual int SpProcessUploadedSalesBudget(string items, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemsParameter = items != null ?
                new ObjectParameter("Items", items) :
                new ObjectParameter("Items", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpProcessUploadedSalesBudget", itemsParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpQuotationUpload(string fileName, string path, Nullable<int> userID, ObjectParameter uploadID)
        {
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpQuotationUpload", fileNameParameter, pathParameter, userIDParameter, uploadID);
        }
    
        public virtual int SpSetCurrentLocation(Nullable<int> userID, Nullable<int> locationID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpSetCurrentLocation", userIDParameter, locationIDParameter);
        }
    
        public virtual ObjectResult<SpSGetItemCategory_Result> SpSGetItemCategory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpSGetItemCategory_Result>("SpSGetItemCategory");
        }
    
        public virtual ObjectResult<SpSGetSalesCategory_Result> SpSGetSalesCategory(Nullable<int> itemCategoryID)
        {
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpSGetSalesCategory_Result>("SpSGetSalesCategory", itemCategoryIDParameter);
        }
    
        public virtual int SpUpdateAddress(Nullable<int> iD, string partyType, Nullable<int> partyID, string addressLine1, string addressLine2, string addressLine3, string contactPerson, string place, Nullable<int> districtID, Nullable<int> stateID, string pIN, string landLine1, string landLine2, string mobileNo, string fax, string email, Nullable<bool> isBilling, Nullable<bool> isShipping, Nullable<bool> isDefault, Nullable<bool> isDefaultShipping)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var partyTypeParameter = partyType != null ?
                new ObjectParameter("PartyType", partyType) :
                new ObjectParameter("PartyType", typeof(string));
    
            var partyIDParameter = partyID.HasValue ?
                new ObjectParameter("PartyID", partyID) :
                new ObjectParameter("PartyID", typeof(int));
    
            var addressLine1Parameter = addressLine1 != null ?
                new ObjectParameter("AddressLine1", addressLine1) :
                new ObjectParameter("AddressLine1", typeof(string));
    
            var addressLine2Parameter = addressLine2 != null ?
                new ObjectParameter("AddressLine2", addressLine2) :
                new ObjectParameter("AddressLine2", typeof(string));
    
            var addressLine3Parameter = addressLine3 != null ?
                new ObjectParameter("AddressLine3", addressLine3) :
                new ObjectParameter("AddressLine3", typeof(string));
    
            var contactPersonParameter = contactPerson != null ?
                new ObjectParameter("ContactPerson", contactPerson) :
                new ObjectParameter("ContactPerson", typeof(string));
    
            var placeParameter = place != null ?
                new ObjectParameter("Place", place) :
                new ObjectParameter("Place", typeof(string));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var pINParameter = pIN != null ?
                new ObjectParameter("PIN", pIN) :
                new ObjectParameter("PIN", typeof(string));
    
            var landLine1Parameter = landLine1 != null ?
                new ObjectParameter("LandLine1", landLine1) :
                new ObjectParameter("LandLine1", typeof(string));
    
            var landLine2Parameter = landLine2 != null ?
                new ObjectParameter("LandLine2", landLine2) :
                new ObjectParameter("LandLine2", typeof(string));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var isBillingParameter = isBilling.HasValue ?
                new ObjectParameter("IsBilling", isBilling) :
                new ObjectParameter("IsBilling", typeof(bool));
    
            var isShippingParameter = isShipping.HasValue ?
                new ObjectParameter("IsShipping", isShipping) :
                new ObjectParameter("IsShipping", typeof(bool));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            var isDefaultShippingParameter = isDefaultShipping.HasValue ?
                new ObjectParameter("IsDefaultShipping", isDefaultShipping) :
                new ObjectParameter("IsDefaultShipping", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateAddress", iDParameter, partyTypeParameter, partyIDParameter, addressLine1Parameter, addressLine2Parameter, addressLine3Parameter, contactPersonParameter, placeParameter, districtIDParameter, stateIDParameter, pINParameter, landLine1Parameter, landLine2Parameter, mobileNoParameter, faxParameter, emailParameter, isBillingParameter, isShippingParameter, isDefaultParameter, isDefaultShippingParameter);
        }
    
        public virtual int SpUpdateAgeingBucketTrans(Nullable<int> iD, string name, Nullable<int> start, Nullable<int> end)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(int));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("End", end) :
                new ObjectParameter("End", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateAgeingBucketTrans", iDParameter, nameParameter, startParameter, endParameter);
        }
    
        public virtual int SpUpdateBatch(Nullable<int> iD, Nullable<int> itemID, Nullable<System.DateTime> expiryDate, Nullable<decimal> iSKPrice, Nullable<decimal> oSKPrice, Nullable<decimal> exportPrice, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var iSKPriceParameter = iSKPrice.HasValue ?
                new ObjectParameter("ISKPrice", iSKPrice) :
                new ObjectParameter("ISKPrice", typeof(decimal));
    
            var oSKPriceParameter = oSKPrice.HasValue ?
                new ObjectParameter("OSKPrice", oSKPrice) :
                new ObjectParameter("OSKPrice", typeof(decimal));
    
            var exportPriceParameter = exportPrice.HasValue ?
                new ObjectParameter("ExportPrice", exportPrice) :
                new ObjectParameter("ExportPrice", typeof(decimal));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateBatch", iDParameter, itemIDParameter, expiryDateParameter, iSKPriceParameter, oSKPriceParameter, exportPriceParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateCategory(Nullable<int> iD, string name, Nullable<int> categoryGroupID, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var categoryGroupIDParameter = categoryGroupID.HasValue ?
                new ObjectParameter("CategoryGroupID", categoryGroupID) :
                new ObjectParameter("CategoryGroupID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateCategory", iDParameter, nameParameter, categoryGroupIDParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateCustomerScheme(Nullable<int> iD, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateCustomerScheme", iDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int SpUpdateCustomerSchemeAllocation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateCustomerSchemeAllocation");
        }
    
        public virtual int SpUpdateDriver(Nullable<int> iD, string name, string code, string address, string licenseNo, string phoneNo, Nullable<bool> isActive, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> createdUserID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var licenseNoParameter = licenseNo != null ?
                new ObjectParameter("LicenseNo", licenseNo) :
                new ObjectParameter("LicenseNo", typeof(string));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateDriver", iDParameter, nameParameter, codeParameter, addressParameter, licenseNoParameter, phoneNoParameter, isActiveParameter, locationIDParameter, applicationIDParameter, createdUserIDParameter);
        }
    
        public virtual int SpUpdateFinacialYearAndFinacialYearPrefix(Nullable<int> newFinPrefix, Nullable<int> newFinYear, Nullable<int> applicationID)
        {
            var newFinPrefixParameter = newFinPrefix.HasValue ?
                new ObjectParameter("NewFinPrefix", newFinPrefix) :
                new ObjectParameter("NewFinPrefix", typeof(int));
    
            var newFinYearParameter = newFinYear.HasValue ?
                new ObjectParameter("NewFinYear", newFinYear) :
                new ObjectParameter("NewFinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateFinacialYearAndFinacialYearPrefix", newFinPrefixParameter, newFinYearParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateFleet(Nullable<int> iD, string vehicleNo, string vehicleName, string travellingAgency, Nullable<System.DateTime> testExpairyDate, Nullable<System.DateTime> taxExpairyDate, Nullable<System.DateTime> purchaseDate, string policyNo, Nullable<System.DateTime> permitExpairyDate, string ownerName, string otherDetails, string licenseNo, Nullable<System.DateTime> insuranceExpairyDate, string insuranceCompany, string driverName, Nullable<int> canCapacity, Nullable<int> boxCapacity, Nullable<int> bagCapacity, Nullable<int> createdUserID, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var vehicleNoParameter = vehicleNo != null ?
                new ObjectParameter("VehicleNo", vehicleNo) :
                new ObjectParameter("VehicleNo", typeof(string));
    
            var vehicleNameParameter = vehicleName != null ?
                new ObjectParameter("VehicleName", vehicleName) :
                new ObjectParameter("VehicleName", typeof(string));
    
            var travellingAgencyParameter = travellingAgency != null ?
                new ObjectParameter("TravellingAgency", travellingAgency) :
                new ObjectParameter("TravellingAgency", typeof(string));
    
            var testExpairyDateParameter = testExpairyDate.HasValue ?
                new ObjectParameter("TestExpairyDate", testExpairyDate) :
                new ObjectParameter("TestExpairyDate", typeof(System.DateTime));
    
            var taxExpairyDateParameter = taxExpairyDate.HasValue ?
                new ObjectParameter("TaxExpairyDate", taxExpairyDate) :
                new ObjectParameter("TaxExpairyDate", typeof(System.DateTime));
    
            var purchaseDateParameter = purchaseDate.HasValue ?
                new ObjectParameter("PurchaseDate", purchaseDate) :
                new ObjectParameter("PurchaseDate", typeof(System.DateTime));
    
            var policyNoParameter = policyNo != null ?
                new ObjectParameter("PolicyNo", policyNo) :
                new ObjectParameter("PolicyNo", typeof(string));
    
            var permitExpairyDateParameter = permitExpairyDate.HasValue ?
                new ObjectParameter("PermitExpairyDate", permitExpairyDate) :
                new ObjectParameter("PermitExpairyDate", typeof(System.DateTime));
    
            var ownerNameParameter = ownerName != null ?
                new ObjectParameter("OwnerName", ownerName) :
                new ObjectParameter("OwnerName", typeof(string));
    
            var otherDetailsParameter = otherDetails != null ?
                new ObjectParameter("OtherDetails", otherDetails) :
                new ObjectParameter("OtherDetails", typeof(string));
    
            var licenseNoParameter = licenseNo != null ?
                new ObjectParameter("LicenseNo", licenseNo) :
                new ObjectParameter("LicenseNo", typeof(string));
    
            var insuranceExpairyDateParameter = insuranceExpairyDate.HasValue ?
                new ObjectParameter("InsuranceExpairyDate", insuranceExpairyDate) :
                new ObjectParameter("InsuranceExpairyDate", typeof(System.DateTime));
    
            var insuranceCompanyParameter = insuranceCompany != null ?
                new ObjectParameter("InsuranceCompany", insuranceCompany) :
                new ObjectParameter("InsuranceCompany", typeof(string));
    
            var driverNameParameter = driverName != null ?
                new ObjectParameter("DriverName", driverName) :
                new ObjectParameter("DriverName", typeof(string));
    
            var canCapacityParameter = canCapacity.HasValue ?
                new ObjectParameter("CanCapacity", canCapacity) :
                new ObjectParameter("CanCapacity", typeof(int));
    
            var boxCapacityParameter = boxCapacity.HasValue ?
                new ObjectParameter("BoxCapacity", boxCapacity) :
                new ObjectParameter("BoxCapacity", typeof(int));
    
            var bagCapacityParameter = bagCapacity.HasValue ?
                new ObjectParameter("BagCapacity", bagCapacity) :
                new ObjectParameter("BagCapacity", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateFleet", iDParameter, vehicleNoParameter, vehicleNameParameter, travellingAgencyParameter, testExpairyDateParameter, taxExpairyDateParameter, purchaseDateParameter, policyNoParameter, permitExpairyDateParameter, ownerNameParameter, otherDetailsParameter, licenseNoParameter, insuranceExpairyDateParameter, insuranceCompanyParameter, driverNameParameter, canCapacityParameter, boxCapacityParameter, bagCapacityParameter, createdUserIDParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual int SpUpdateInterCompany(Nullable<int> iD, string code, string name, string description, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateInterCompany", iDParameter, codeParameter, nameParameter, descriptionParameter, startDateParameter, endDateParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateItemCategoryInSupplier(Nullable<int> supplierID, Nullable<int> createdUserID, Nullable<System.DateTime> createdDate)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateItemCategoryInSupplier", supplierIDParameter, createdUserIDParameter, createdDateParameter);
        }
    
        public virtual int SpUpdateLoactionInSupplier(Nullable<int> supplierID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateLoactionInSupplier", supplierIDParameter);
        }
    
        public virtual int SpUpdateLocationInSupplier(Nullable<int> supplierID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateLocationInSupplier", supplierIDParameter);
        }
    
        public virtual int SpUpdateLocationMappingInCustomer(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateLocationMappingInCustomer", customerIDParameter);
        }
    
        public virtual int SpUpdateMachineDetails(Nullable<int> iD, string machineCode, Nullable<System.DateTime> insulationDate, string model, Nullable<int> currentLocationID, string machineName, Nullable<int> processID, string motor, Nullable<decimal> powerConsumptionPerHour, string softwareVersion, string machineNumber, string manufacturer, Nullable<int> operatorCount, Nullable<int> helperCount, Nullable<int> maintenancePeriod, Nullable<decimal> averageCostPerHour, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var machineCodeParameter = machineCode != null ?
                new ObjectParameter("MachineCode", machineCode) :
                new ObjectParameter("MachineCode", typeof(string));
    
            var insulationDateParameter = insulationDate.HasValue ?
                new ObjectParameter("InsulationDate", insulationDate) :
                new ObjectParameter("InsulationDate", typeof(System.DateTime));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var currentLocationIDParameter = currentLocationID.HasValue ?
                new ObjectParameter("CurrentLocationID", currentLocationID) :
                new ObjectParameter("CurrentLocationID", typeof(int));
    
            var machineNameParameter = machineName != null ?
                new ObjectParameter("MachineName", machineName) :
                new ObjectParameter("MachineName", typeof(string));
    
            var processIDParameter = processID.HasValue ?
                new ObjectParameter("ProcessID", processID) :
                new ObjectParameter("ProcessID", typeof(int));
    
            var motorParameter = motor != null ?
                new ObjectParameter("Motor", motor) :
                new ObjectParameter("Motor", typeof(string));
    
            var powerConsumptionPerHourParameter = powerConsumptionPerHour.HasValue ?
                new ObjectParameter("PowerConsumptionPerHour", powerConsumptionPerHour) :
                new ObjectParameter("PowerConsumptionPerHour", typeof(decimal));
    
            var softwareVersionParameter = softwareVersion != null ?
                new ObjectParameter("SoftwareVersion", softwareVersion) :
                new ObjectParameter("SoftwareVersion", typeof(string));
    
            var machineNumberParameter = machineNumber != null ?
                new ObjectParameter("MachineNumber", machineNumber) :
                new ObjectParameter("MachineNumber", typeof(string));
    
            var manufacturerParameter = manufacturer != null ?
                new ObjectParameter("Manufacturer", manufacturer) :
                new ObjectParameter("Manufacturer", typeof(string));
    
            var operatorCountParameter = operatorCount.HasValue ?
                new ObjectParameter("OperatorCount", operatorCount) :
                new ObjectParameter("OperatorCount", typeof(int));
    
            var helperCountParameter = helperCount.HasValue ?
                new ObjectParameter("HelperCount", helperCount) :
                new ObjectParameter("HelperCount", typeof(int));
    
            var maintenancePeriodParameter = maintenancePeriod.HasValue ?
                new ObjectParameter("MaintenancePeriod", maintenancePeriod) :
                new ObjectParameter("MaintenancePeriod", typeof(int));
    
            var averageCostPerHourParameter = averageCostPerHour.HasValue ?
                new ObjectParameter("AverageCostPerHour", averageCostPerHour) :
                new ObjectParameter("AverageCostPerHour", typeof(decimal));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateMachineDetails", iDParameter, machineCodeParameter, insulationDateParameter, modelParameter, currentLocationIDParameter, machineNameParameter, processIDParameter, motorParameter, powerConsumptionPerHourParameter, softwareVersionParameter, machineNumberParameter, manufacturerParameter, operatorCountParameter, helperCountParameter, maintenancePeriodParameter, averageCostPerHourParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateMould(Nullable<int> iD, string code, string mouldName, Nullable<System.DateTime> inceptionDate, Nullable<System.DateTime> expairyDate, Nullable<int> mandatoryMaintenanceTime, string manufacturedBy, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var mouldNameParameter = mouldName != null ?
                new ObjectParameter("MouldName", mouldName) :
                new ObjectParameter("MouldName", typeof(string));
    
            var inceptionDateParameter = inceptionDate.HasValue ?
                new ObjectParameter("InceptionDate", inceptionDate) :
                new ObjectParameter("InceptionDate", typeof(System.DateTime));
    
            var expairyDateParameter = expairyDate.HasValue ?
                new ObjectParameter("ExpairyDate", expairyDate) :
                new ObjectParameter("ExpairyDate", typeof(System.DateTime));
    
            var mandatoryMaintenanceTimeParameter = mandatoryMaintenanceTime.HasValue ?
                new ObjectParameter("MandatoryMaintenanceTime", mandatoryMaintenanceTime) :
                new ObjectParameter("MandatoryMaintenanceTime", typeof(int));
    
            var manufacturedByParameter = manufacturedBy != null ?
                new ObjectParameter("ManufacturedBy", manufacturedBy) :
                new ObjectParameter("ManufacturedBy", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateMould", iDParameter, codeParameter, mouldNameParameter, inceptionDateParameter, expairyDateParameter, mandatoryMaintenanceTimeParameter, manufacturedByParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdatePackingDefinitionMaterials(Nullable<int> iD, Nullable<int> productDefinitionMasterID, Nullable<int> materialID, Nullable<int> unitID, Nullable<decimal> qty, Nullable<decimal> primaryToPackingUnitConversionFactor, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var productDefinitionMasterIDParameter = productDefinitionMasterID.HasValue ?
                new ObjectParameter("ProductDefinitionMasterID", productDefinitionMasterID) :
                new ObjectParameter("ProductDefinitionMasterID", typeof(int));
    
            var materialIDParameter = materialID.HasValue ?
                new ObjectParameter("MaterialID", materialID) :
                new ObjectParameter("MaterialID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(decimal));
    
            var primaryToPackingUnitConversionFactorParameter = primaryToPackingUnitConversionFactor.HasValue ?
                new ObjectParameter("PrimaryToPackingUnitConversionFactor", primaryToPackingUnitConversionFactor) :
                new ObjectParameter("PrimaryToPackingUnitConversionFactor", typeof(decimal));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdatePackingDefinitionMaterials", iDParameter, productDefinitionMasterIDParameter, materialIDParameter, unitIDParameter, qtyParameter, primaryToPackingUnitConversionFactorParameter, startDateParameter, endDateParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdatePackingDefinitionProcesses(Nullable<int> processID, Nullable<int> productDefinitionMasterID, string processName, string steps, Nullable<decimal> skilledLabourMinutes, Nullable<decimal> skilledLabourCost, Nullable<decimal> unSkilledLabourMinutes, Nullable<decimal> unSkilledLabourCost, Nullable<decimal> machineMinutes, Nullable<decimal> machineCost, Nullable<int> applicationID)
        {
            var processIDParameter = processID.HasValue ?
                new ObjectParameter("ProcessID", processID) :
                new ObjectParameter("ProcessID", typeof(int));
    
            var productDefinitionMasterIDParameter = productDefinitionMasterID.HasValue ?
                new ObjectParameter("ProductDefinitionMasterID", productDefinitionMasterID) :
                new ObjectParameter("ProductDefinitionMasterID", typeof(int));
    
            var processNameParameter = processName != null ?
                new ObjectParameter("ProcessName", processName) :
                new ObjectParameter("ProcessName", typeof(string));
    
            var stepsParameter = steps != null ?
                new ObjectParameter("Steps", steps) :
                new ObjectParameter("Steps", typeof(string));
    
            var skilledLabourMinutesParameter = skilledLabourMinutes.HasValue ?
                new ObjectParameter("SkilledLabourMinutes", skilledLabourMinutes) :
                new ObjectParameter("SkilledLabourMinutes", typeof(decimal));
    
            var skilledLabourCostParameter = skilledLabourCost.HasValue ?
                new ObjectParameter("SkilledLabourCost", skilledLabourCost) :
                new ObjectParameter("SkilledLabourCost", typeof(decimal));
    
            var unSkilledLabourMinutesParameter = unSkilledLabourMinutes.HasValue ?
                new ObjectParameter("UnSkilledLabourMinutes", unSkilledLabourMinutes) :
                new ObjectParameter("UnSkilledLabourMinutes", typeof(decimal));
    
            var unSkilledLabourCostParameter = unSkilledLabourCost.HasValue ?
                new ObjectParameter("UnSkilledLabourCost", unSkilledLabourCost) :
                new ObjectParameter("UnSkilledLabourCost", typeof(decimal));
    
            var machineMinutesParameter = machineMinutes.HasValue ?
                new ObjectParameter("MachineMinutes", machineMinutes) :
                new ObjectParameter("MachineMinutes", typeof(decimal));
    
            var machineCostParameter = machineCost.HasValue ?
                new ObjectParameter("MachineCost", machineCost) :
                new ObjectParameter("MachineCost", typeof(decimal));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdatePackingDefinitionProcesses", processIDParameter, productDefinitionMasterIDParameter, processNameParameter, stepsParameter, skilledLabourMinutesParameter, skilledLabourCostParameter, unSkilledLabourMinutesParameter, unSkilledLabourCostParameter, machineMinutesParameter, machineCostParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdatePeriodClosing(Nullable<int> iD, string month, string journalStatus, string sDNStatus, string sCNStatus, string cDNStatus, string cCNStatus, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var monthParameter = month != null ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(string));
    
            var journalStatusParameter = journalStatus != null ?
                new ObjectParameter("JournalStatus", journalStatus) :
                new ObjectParameter("JournalStatus", typeof(string));
    
            var sDNStatusParameter = sDNStatus != null ?
                new ObjectParameter("SDNStatus", sDNStatus) :
                new ObjectParameter("SDNStatus", typeof(string));
    
            var sCNStatusParameter = sCNStatus != null ?
                new ObjectParameter("SCNStatus", sCNStatus) :
                new ObjectParameter("SCNStatus", typeof(string));
    
            var cDNStatusParameter = cDNStatus != null ?
                new ObjectParameter("CDNStatus", cDNStatus) :
                new ObjectParameter("CDNStatus", typeof(string));
    
            var cCNStatusParameter = cCNStatus != null ?
                new ObjectParameter("CCNStatus", cCNStatus) :
                new ObjectParameter("CCNStatus", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdatePeriodClosing", iDParameter, monthParameter, journalStatusParameter, sDNStatusParameter, sCNStatusParameter, cDNStatusParameter, cCNStatusParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateProcess(Nullable<int> iD, string process, string code)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var processParameter = process != null ?
                new ObjectParameter("Process", process) :
                new ObjectParameter("Process", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateProcess", iDParameter, processParameter, codeParameter);
        }
    
        public virtual int SpUpdateProductionDefinition(Nullable<int> productionDefinitionID, Nullable<int> productionGroupID, Nullable<int> productID, Nullable<int> itemID, Nullable<int> unitID, Nullable<decimal> batchSize, Nullable<decimal> standardOutputQty, string processStage, Nullable<int> productionSequence, Nullable<int> applicationID)
        {
            var productionDefinitionIDParameter = productionDefinitionID.HasValue ?
                new ObjectParameter("ProductionDefinitionID", productionDefinitionID) :
                new ObjectParameter("ProductionDefinitionID", typeof(int));
    
            var productionGroupIDParameter = productionGroupID.HasValue ?
                new ObjectParameter("ProductionGroupID", productionGroupID) :
                new ObjectParameter("ProductionGroupID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var batchSizeParameter = batchSize.HasValue ?
                new ObjectParameter("BatchSize", batchSize) :
                new ObjectParameter("BatchSize", typeof(decimal));
    
            var standardOutputQtyParameter = standardOutputQty.HasValue ?
                new ObjectParameter("StandardOutputQty", standardOutputQty) :
                new ObjectParameter("StandardOutputQty", typeof(decimal));
    
            var processStageParameter = processStage != null ?
                new ObjectParameter("ProcessStage", processStage) :
                new ObjectParameter("ProcessStage", typeof(string));
    
            var productionSequenceParameter = productionSequence.HasValue ?
                new ObjectParameter("ProductionSequence", productionSequence) :
                new ObjectParameter("ProductionSequence", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateProductionDefinition", productionDefinitionIDParameter, productionGroupIDParameter, productIDParameter, itemIDParameter, unitIDParameter, batchSizeParameter, standardOutputQtyParameter, processStageParameter, productionSequenceParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateProductionDefinitionMaterials(Nullable<int> iD, Nullable<int> productDefinitionMasterID, Nullable<int> materialID, Nullable<int> unitID, Nullable<decimal> qty, string usageMode, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var productDefinitionMasterIDParameter = productDefinitionMasterID.HasValue ?
                new ObjectParameter("ProductDefinitionMasterID", productDefinitionMasterID) :
                new ObjectParameter("ProductDefinitionMasterID", typeof(int));
    
            var materialIDParameter = materialID.HasValue ?
                new ObjectParameter("MaterialID", materialID) :
                new ObjectParameter("MaterialID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(decimal));
    
            var usageModeParameter = usageMode != null ?
                new ObjectParameter("UsageMode", usageMode) :
                new ObjectParameter("UsageMode", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateProductionDefinitionMaterials", iDParameter, productDefinitionMasterIDParameter, materialIDParameter, unitIDParameter, qtyParameter, usageModeParameter, startDateParameter, endDateParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateProductionDefinitionProcesses(Nullable<int> processID, Nullable<int> productDefinitionMasterID, string processName, string steps, Nullable<decimal> skilledLabourMinutes, Nullable<decimal> skilledLabourCost, Nullable<decimal> unSkilledLabourMinutes, Nullable<decimal> unSkilledLabourCost, Nullable<decimal> machineMinutes, Nullable<decimal> machineCost, string process, Nullable<int> applicationID)
        {
            var processIDParameter = processID.HasValue ?
                new ObjectParameter("ProcessID", processID) :
                new ObjectParameter("ProcessID", typeof(int));
    
            var productDefinitionMasterIDParameter = productDefinitionMasterID.HasValue ?
                new ObjectParameter("ProductDefinitionMasterID", productDefinitionMasterID) :
                new ObjectParameter("ProductDefinitionMasterID", typeof(int));
    
            var processNameParameter = processName != null ?
                new ObjectParameter("ProcessName", processName) :
                new ObjectParameter("ProcessName", typeof(string));
    
            var stepsParameter = steps != null ?
                new ObjectParameter("Steps", steps) :
                new ObjectParameter("Steps", typeof(string));
    
            var skilledLabourMinutesParameter = skilledLabourMinutes.HasValue ?
                new ObjectParameter("SkilledLabourMinutes", skilledLabourMinutes) :
                new ObjectParameter("SkilledLabourMinutes", typeof(decimal));
    
            var skilledLabourCostParameter = skilledLabourCost.HasValue ?
                new ObjectParameter("SkilledLabourCost", skilledLabourCost) :
                new ObjectParameter("SkilledLabourCost", typeof(decimal));
    
            var unSkilledLabourMinutesParameter = unSkilledLabourMinutes.HasValue ?
                new ObjectParameter("UnSkilledLabourMinutes", unSkilledLabourMinutes) :
                new ObjectParameter("UnSkilledLabourMinutes", typeof(decimal));
    
            var unSkilledLabourCostParameter = unSkilledLabourCost.HasValue ?
                new ObjectParameter("UnSkilledLabourCost", unSkilledLabourCost) :
                new ObjectParameter("UnSkilledLabourCost", typeof(decimal));
    
            var machineMinutesParameter = machineMinutes.HasValue ?
                new ObjectParameter("MachineMinutes", machineMinutes) :
                new ObjectParameter("MachineMinutes", typeof(decimal));
    
            var machineCostParameter = machineCost.HasValue ?
                new ObjectParameter("MachineCost", machineCost) :
                new ObjectParameter("MachineCost", typeof(decimal));
    
            var processParameter = process != null ?
                new ObjectParameter("Process", process) :
                new ObjectParameter("Process", typeof(string));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateProductionDefinitionProcesses", processIDParameter, productDefinitionMasterIDParameter, processNameParameter, stepsParameter, skilledLabourMinutesParameter, skilledLabourCostParameter, unSkilledLabourMinutesParameter, unSkilledLabourCostParameter, machineMinutesParameter, machineCostParameter, processParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateSchemeAllocation(Nullable<int> schemeAllocationID, string scheme, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var schemeAllocationIDParameter = schemeAllocationID.HasValue ?
                new ObjectParameter("SchemeAllocationID", schemeAllocationID) :
                new ObjectParameter("SchemeAllocationID", typeof(int));
    
            var schemeParameter = scheme != null ?
                new ObjectParameter("Scheme", scheme) :
                new ObjectParameter("Scheme", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateSchemeAllocation", schemeAllocationIDParameter, schemeParameter, startDateParameter, endDateParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateSchemeItem(Nullable<int> iD, Nullable<int> itemID, Nullable<int> businessCategoryID, Nullable<int> salesCategoryID, Nullable<int> offerItemID, Nullable<decimal> invoiceQty, Nullable<decimal> offerQty, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> schemeAllocationID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, Nullable<bool> isNewItem)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var businessCategoryIDParameter = businessCategoryID.HasValue ?
                new ObjectParameter("BusinessCategoryID", businessCategoryID) :
                new ObjectParameter("BusinessCategoryID", typeof(int));
    
            var salesCategoryIDParameter = salesCategoryID.HasValue ?
                new ObjectParameter("SalesCategoryID", salesCategoryID) :
                new ObjectParameter("SalesCategoryID", typeof(int));
    
            var offerItemIDParameter = offerItemID.HasValue ?
                new ObjectParameter("OfferItemID", offerItemID) :
                new ObjectParameter("OfferItemID", typeof(int));
    
            var invoiceQtyParameter = invoiceQty.HasValue ?
                new ObjectParameter("InvoiceQty", invoiceQty) :
                new ObjectParameter("InvoiceQty", typeof(decimal));
    
            var offerQtyParameter = offerQty.HasValue ?
                new ObjectParameter("OfferQty", offerQty) :
                new ObjectParameter("OfferQty", typeof(decimal));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var schemeAllocationIDParameter = schemeAllocationID.HasValue ?
                new ObjectParameter("SchemeAllocationID", schemeAllocationID) :
                new ObjectParameter("SchemeAllocationID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var isNewItemParameter = isNewItem.HasValue ?
                new ObjectParameter("IsNewItem", isNewItem) :
                new ObjectParameter("IsNewItem", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateSchemeItem", iDParameter, itemIDParameter, businessCategoryIDParameter, salesCategoryIDParameter, offerItemIDParameter, invoiceQtyParameter, offerQtyParameter, startDateParameter, endDateParameter, schemeAllocationIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, isNewItemParameter);
        }
    
        public virtual int SpUpdateSupplierAccountsCategory(Nullable<int> iD, string name)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateSupplierAccountsCategory", iDParameter, nameParameter);
        }
    
        public virtual int SpUpdateSupplierCategory(Nullable<int> iD, string name, string remarks)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateSupplierCategory", iDParameter, nameParameter, remarksParameter);
        }
    
        public virtual int SpUpdateSupplierItemCategory(Nullable<int> supplierID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateSupplierItemCategory", supplierIDParameter);
        }
    
        public virtual ObjectResult<GetbatchesBatchtypewise_Result> GetbatchesBatchtypewise(Nullable<int> itemID, Nullable<int> batchTypeID, Nullable<int> finyear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var finyearParameter = finyear.HasValue ?
                new ObjectParameter("Finyear", finyear) :
                new ObjectParameter("Finyear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetbatchesBatchtypewise_Result>("GetbatchesBatchtypewise", itemIDParameter, batchTypeIDParameter, finyearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpFSOInactiveConfirm(Nullable<int> iD, ObjectParameter returnValue)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpFSOInactiveConfirm", iDParameter, returnValue);
        }
    
        public virtual ObjectResult<SpGetSalesRepresentativeList_Result> SpGetSalesRepresentativeList(string codeHint, string nameHint, string parentNameHint, string areaHint, string salesIncentiveCategoryHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> applicationID)
        {
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var parentNameHintParameter = parentNameHint != null ?
                new ObjectParameter("ParentNameHint", parentNameHint) :
                new ObjectParameter("ParentNameHint", typeof(string));
    
            var areaHintParameter = areaHint != null ?
                new ObjectParameter("AreaHint", areaHint) :
                new ObjectParameter("AreaHint", typeof(string));
    
            var salesIncentiveCategoryHintParameter = salesIncentiveCategoryHint != null ?
                new ObjectParameter("SalesIncentiveCategoryHint", salesIncentiveCategoryHint) :
                new ObjectParameter("SalesIncentiveCategoryHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSalesRepresentativeList_Result>("SpGetSalesRepresentativeList", codeHintParameter, nameHintParameter, parentNameHintParameter, areaHintParameter, salesIncentiveCategoryHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, applicationIDParameter);
        }
    
        public virtual int SpRemoveFSO(Nullable<int> iD, ObjectParameter returnValue)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpRemoveFSO", iDParameter, returnValue);
        }
    
        public virtual ObjectResult<SpGetSalesRepresentatives_Result> SpGetSalesRepresentatives(Nullable<int> applicationID)
        {
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSalesRepresentatives_Result>("SpGetSalesRepresentatives", applicationIDParameter);
        }
    
        public virtual int SpGetCustomerID(Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter customerID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetCustomerID", locationIDParameter, applicationIDParameter, customerID);
        }
    
        public virtual int SpGetGstCategoryForChequestatus(Nullable<int> applicationID, ObjectParameter iD)
        {
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetGstCategoryForChequestatus", applicationIDParameter, iD);
        }
    
        public virtual ObjectResult<SpGetStatusList_Result> SpGetStatusList(string type)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetStatusList_Result>("SpGetStatusList", typeParameter);
        }
    
        public virtual ObjectResult<SpGetProductionDefinitionMaterials_Result> SpGetProductionDefinitionMaterials(Nullable<int> productionGroupID, Nullable<int> applicationID)
        {
            var productionGroupIDParameter = productionGroupID.HasValue ?
                new ObjectParameter("ProductionGroupID", productionGroupID) :
                new ObjectParameter("ProductionGroupID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetProductionDefinitionMaterials_Result>("SpGetProductionDefinitionMaterials", productionGroupIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateRelatedSuppliers(Nullable<int> supplierID, Nullable<int> relatedSupplierID, string relatedSupplierLocation, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var relatedSupplierIDParameter = relatedSupplierID.HasValue ?
                new ObjectParameter("RelatedSupplierID", relatedSupplierID) :
                new ObjectParameter("RelatedSupplierID", typeof(int));
    
            var relatedSupplierLocationParameter = relatedSupplierLocation != null ?
                new ObjectParameter("RelatedSupplierLocation", relatedSupplierLocation) :
                new ObjectParameter("RelatedSupplierLocation", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateRelatedSuppliers", supplierIDParameter, relatedSupplierIDParameter, relatedSupplierLocationParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetRelatedSuppliers_Result> SpGetRelatedSuppliers(Nullable<int> iD, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetRelatedSuppliers_Result>("SpGetRelatedSuppliers", iDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetInterCompanySuppliers_Result> SpGetInterCompanySuppliers(string hint, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var hintParameter = hint != null ?
                new ObjectParameter("Hint", hint) :
                new ObjectParameter("Hint", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetInterCompanySuppliers_Result>("SpGetInterCompanySuppliers", hintParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetUserRoles_Result> SpGetUserRoles(Nullable<int> applicationID)
        {
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetUserRoles_Result>("SpGetUserRoles", applicationIDParameter);
        }
    
        public virtual ObjectResult<SPGetItemTransactionStatus_Result> SPGetItemTransactionStatus(Nullable<int> itemID, Nullable<int> batchTypeID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetItemTransactionStatus_Result>("SPGetItemTransactionStatus", itemIDParameter, batchTypeIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPreProcessReceiptItemAutoComplete_Result> SpGetPreProcessReceiptItemAutoComplete(string hint, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var hintParameter = hint != null ?
                new ObjectParameter("Hint", hint) :
                new ObjectParameter("Hint", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPreProcessReceiptItemAutoComplete_Result>("SpGetPreProcessReceiptItemAutoComplete", hintParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetRoleListForDatatable_Result> SpGetRoleListForDatatable(string code, string roleName, string remarks, string actions, string tabs, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> applicationID)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var actionsParameter = actions != null ?
                new ObjectParameter("Actions", actions) :
                new ObjectParameter("Actions", typeof(string));
    
            var tabsParameter = tabs != null ?
                new ObjectParameter("Tabs", tabs) :
                new ObjectParameter("Tabs", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetRoleListForDatatable_Result>("SpGetRoleListForDatatable", codeParameter, roleNameParameter, remarksParameter, actionsParameter, tabsParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetAreas_Result> SpGetAreas(Nullable<int> applicationID)
        {
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAreas_Result>("SpGetAreas", applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetAccountHeadForSLA_Result> SpGetAccountHeadForSLA(string accountIDHint, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var accountIDHintParameter = accountIDHint != null ?
                new ObjectParameter("AccountIDHint", accountIDHint) :
                new ObjectParameter("AccountIDHint", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAccountHeadForSLA_Result>("SpGetAccountHeadForSLA", accountIDHintParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateSchemeAllocation(Nullable<int> customerID, Nullable<int> customerCategoryID, Nullable<int> districtID, Nullable<int> stateID, Nullable<int> countryID, string scheme, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string customerCategoryExpect, string stateExpect, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter schemeAllocationID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customerCategoryIDParameter = customerCategoryID.HasValue ?
                new ObjectParameter("CustomerCategoryID", customerCategoryID) :
                new ObjectParameter("CustomerCategoryID", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var schemeParameter = scheme != null ?
                new ObjectParameter("Scheme", scheme) :
                new ObjectParameter("Scheme", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var customerCategoryExpectParameter = customerCategoryExpect != null ?
                new ObjectParameter("customerCategoryExpect", customerCategoryExpect) :
                new ObjectParameter("customerCategoryExpect", typeof(string));
    
            var stateExpectParameter = stateExpect != null ?
                new ObjectParameter("StateExpect", stateExpect) :
                new ObjectParameter("StateExpect", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateSchemeAllocation", customerIDParameter, customerCategoryIDParameter, districtIDParameter, stateIDParameter, countryIDParameter, schemeParameter, startDateParameter, endDateParameter, customerCategoryExpectParameter, stateExpectParameter, finYearParameter, locationIDParameter, applicationIDParameter, schemeAllocationID);
        }
    
        public virtual int SpCreateSchemeItem(Nullable<int> schemeAllocationID, Nullable<int> itemID, Nullable<int> businessCategoryID, Nullable<int> salesCategoryID, Nullable<int> offerItemID, Nullable<decimal> invoiceQty, Nullable<decimal> offerQty, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var schemeAllocationIDParameter = schemeAllocationID.HasValue ?
                new ObjectParameter("SchemeAllocationID", schemeAllocationID) :
                new ObjectParameter("SchemeAllocationID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var businessCategoryIDParameter = businessCategoryID.HasValue ?
                new ObjectParameter("BusinessCategoryID", businessCategoryID) :
                new ObjectParameter("BusinessCategoryID", typeof(int));
    
            var salesCategoryIDParameter = salesCategoryID.HasValue ?
                new ObjectParameter("SalesCategoryID", salesCategoryID) :
                new ObjectParameter("SalesCategoryID", typeof(int));
    
            var offerItemIDParameter = offerItemID.HasValue ?
                new ObjectParameter("OfferItemID", offerItemID) :
                new ObjectParameter("OfferItemID", typeof(int));
    
            var invoiceQtyParameter = invoiceQty.HasValue ?
                new ObjectParameter("InvoiceQty", invoiceQty) :
                new ObjectParameter("InvoiceQty", typeof(decimal));
    
            var offerQtyParameter = offerQty.HasValue ?
                new ObjectParameter("OfferQty", offerQty) :
                new ObjectParameter("OfferQty", typeof(decimal));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateSchemeItem", schemeAllocationIDParameter, itemIDParameter, businessCategoryIDParameter, salesCategoryIDParameter, offerItemIDParameter, invoiceQtyParameter, offerQtyParameter, startDateParameter, endDateParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCategoryListByGroup_Result> SpGetCategoryListByGroup(string categoryGroup)
        {
            var categoryGroupParameter = categoryGroup != null ?
                new ObjectParameter("CategoryGroup", categoryGroup) :
                new ObjectParameter("CategoryGroup", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCategoryListByGroup_Result>("SpGetCategoryListByGroup", categoryGroupParameter);
        }
    
        public virtual ObjectResult<SpGetItemsForOfficialAdvanceAutoComplete_Result> SpGetItemsForOfficialAdvanceAutoComplete(string itemHint)
        {
            var itemHintParameter = itemHint != null ?
                new ObjectParameter("ItemHint", itemHint) :
                new ObjectParameter("ItemHint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetItemsForOfficialAdvanceAutoComplete_Result>("SpGetItemsForOfficialAdvanceAutoComplete", itemHintParameter);
        }
    
        public virtual ObjectResult<SpGetItemsForPersonalAdvanceAutoComplete_Result> SpGetItemsForPersonalAdvanceAutoComplete(string itemHint)
        {
            var itemHintParameter = itemHint != null ?
                new ObjectParameter("ItemHint", itemHint) :
                new ObjectParameter("ItemHint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetItemsForPersonalAdvanceAutoComplete_Result>("SpGetItemsForPersonalAdvanceAutoComplete", itemHintParameter);
        }
    
        public virtual ObjectResult<TempSpGetDiscountDetails_Result> TempSpGetDiscountDetails(Nullable<int> itemID, Nullable<int> customerID, Nullable<int> customerCategoryID, Nullable<int> customerStateID, Nullable<int> businessCategoryID, Nullable<int> salesIncentiveCategoryID, Nullable<int> salesCategoryID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customerCategoryIDParameter = customerCategoryID.HasValue ?
                new ObjectParameter("CustomerCategoryID", customerCategoryID) :
                new ObjectParameter("CustomerCategoryID", typeof(int));
    
            var customerStateIDParameter = customerStateID.HasValue ?
                new ObjectParameter("CustomerStateID", customerStateID) :
                new ObjectParameter("CustomerStateID", typeof(int));
    
            var businessCategoryIDParameter = businessCategoryID.HasValue ?
                new ObjectParameter("BusinessCategoryID", businessCategoryID) :
                new ObjectParameter("BusinessCategoryID", typeof(int));
    
            var salesIncentiveCategoryIDParameter = salesIncentiveCategoryID.HasValue ?
                new ObjectParameter("SalesIncentiveCategoryID", salesIncentiveCategoryID) :
                new ObjectParameter("SalesIncentiveCategoryID", typeof(int));
    
            var salesCategoryIDParameter = salesCategoryID.HasValue ?
                new ObjectParameter("SalesCategoryID", salesCategoryID) :
                new ObjectParameter("SalesCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TempSpGetDiscountDetails_Result>("TempSpGetDiscountDetails", itemIDParameter, customerIDParameter, customerCategoryIDParameter, customerStateIDParameter, businessCategoryIDParameter, salesIncentiveCategoryIDParameter, salesCategoryIDParameter);
        }
    
        public virtual ObjectResult<SpGetSalesBudgetList_Result> SpGetSalesBudgetList(string itemCodeHint, string itemNameHint, string monthHint, string salesCategoryHint, string batchTypeHint, string branchHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemCodeHintParameter = itemCodeHint != null ?
                new ObjectParameter("ItemCodeHint", itemCodeHint) :
                new ObjectParameter("ItemCodeHint", typeof(string));
    
            var itemNameHintParameter = itemNameHint != null ?
                new ObjectParameter("ItemNameHint", itemNameHint) :
                new ObjectParameter("ItemNameHint", typeof(string));
    
            var monthHintParameter = monthHint != null ?
                new ObjectParameter("MonthHint", monthHint) :
                new ObjectParameter("MonthHint", typeof(string));
    
            var salesCategoryHintParameter = salesCategoryHint != null ?
                new ObjectParameter("SalesCategoryHint", salesCategoryHint) :
                new ObjectParameter("SalesCategoryHint", typeof(string));
    
            var batchTypeHintParameter = batchTypeHint != null ?
                new ObjectParameter("BatchTypeHint", batchTypeHint) :
                new ObjectParameter("BatchTypeHint", typeof(string));
    
            var branchHintParameter = branchHint != null ?
                new ObjectParameter("BranchHint", branchHint) :
                new ObjectParameter("BranchHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSalesBudgetList_Result>("SpGetSalesBudgetList", itemCodeHintParameter, itemNameHintParameter, monthHintParameter, salesCategoryHintParameter, batchTypeHintParameter, branchHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetActionsList_Result> SpGetActionsList(string area, Nullable<int> roleID, Nullable<int> applicationID)
        {
            var areaParameter = area != null ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(string));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetActionsList_Result>("SpGetActionsList", areaParameter, roleIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetRoleActions_Result> SpGetRoleActions(Nullable<int> roleID, Nullable<int> applicationID)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetRoleActions_Result>("SpGetRoleActions", roleIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetProductionDefinitionListForDatatable_Result> SpGetProductionDefinitionListForDatatable(string productionGroup, string name, string batchSize, string outputQty, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var productionGroupParameter = productionGroup != null ?
                new ObjectParameter("ProductionGroup", productionGroup) :
                new ObjectParameter("ProductionGroup", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var batchSizeParameter = batchSize != null ?
                new ObjectParameter("BatchSize", batchSize) :
                new ObjectParameter("BatchSize", typeof(string));
    
            var outputQtyParameter = outputQty != null ?
                new ObjectParameter("OutputQty", outputQty) :
                new ObjectParameter("OutputQty", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetProductionDefinitionListForDatatable_Result>("SpGetProductionDefinitionListForDatatable", productionGroupParameter, nameParameter, batchSizeParameter, outputQtyParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateStockOrServiceType(Nullable<int> categoryID, Nullable<bool> isStockValue)
        {
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var isStockValueParameter = isStockValue.HasValue ?
                new ObjectParameter("IsStockValue", isStockValue) :
                new ObjectParameter("IsStockValue", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateStockOrServiceType", categoryIDParameter, isStockValueParameter);
        }
    
        public virtual int SpUpdateAgeingBucket(Nullable<int> bucketID, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var bucketIDParameter = bucketID.HasValue ?
                new ObjectParameter("BucketID", bucketID) :
                new ObjectParameter("BucketID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateAgeingBucket", bucketIDParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateCategories(Nullable<int> iD, string categoryName, string categoryType, Nullable<int> applocationID, Nullable<int> createdUserID, Nullable<int> locationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var categoryTypeParameter = categoryType != null ?
                new ObjectParameter("CategoryType", categoryType) :
                new ObjectParameter("CategoryType", typeof(string));
    
            var applocationIDParameter = applocationID.HasValue ?
                new ObjectParameter("ApplocationID", applocationID) :
                new ObjectParameter("ApplocationID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateCategories", iDParameter, categoryNameParameter, categoryTypeParameter, applocationIDParameter, createdUserIDParameter, locationIDParameter);
        }
    
        public virtual int SpUpdateChartOfAccounts(Nullable<int> iD, string accountName, Nullable<decimal> openingAmount, Nullable<bool> isManual, Nullable<int> applicationID, Nullable<int> createdUserID, Nullable<int> locationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var openingAmountParameter = openingAmount.HasValue ?
                new ObjectParameter("OpeningAmount", openingAmount) :
                new ObjectParameter("OpeningAmount", typeof(decimal));
    
            var isManualParameter = isManual.HasValue ?
                new ObjectParameter("IsManual", isManual) :
                new ObjectParameter("IsManual", typeof(bool));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateChartOfAccounts", iDParameter, accountNameParameter, openingAmountParameter, isManualParameter, applicationIDParameter, createdUserIDParameter, locationIDParameter);
        }
    
        public virtual int SpUpdateCreditDays(Nullable<int> iD, string name, Nullable<int> days, Nullable<int> applicationID, Nullable<int> createdUserID, Nullable<int> locationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var daysParameter = days.HasValue ?
                new ObjectParameter("Days", days) :
                new ObjectParameter("Days", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateCreditDays", iDParameter, nameParameter, daysParameter, applicationIDParameter, createdUserIDParameter, locationIDParameter);
        }
    
        public virtual int SpUpdateDepartment(Nullable<int> iD, string code, string name, Nullable<int> departmentGroupID, Nullable<bool> isActive, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var departmentGroupIDParameter = departmentGroupID.HasValue ?
                new ObjectParameter("DepartmentGroupID", departmentGroupID) :
                new ObjectParameter("DepartmentGroupID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateDepartment", iDParameter, codeParameter, nameParameter, departmentGroupIDParameter, isActiveParameter, startDateParameter, endDateParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateDesignation(Nullable<int> iD, string code, string name, Nullable<int> departmentID, Nullable<bool> isActive, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateDesignation", iDParameter, codeParameter, nameParameter, departmentIDParameter, isActiveParameter, startDateParameter, endDateParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateDiscount(Nullable<int> iD, Nullable<int> discountCategoryID, Nullable<decimal> discountPercentage, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var discountCategoryIDParameter = discountCategoryID.HasValue ?
                new ObjectParameter("DiscountCategoryID", discountCategoryID) :
                new ObjectParameter("DiscountCategoryID", typeof(int));
    
            var discountPercentageParameter = discountPercentage.HasValue ?
                new ObjectParameter("DiscountPercentage", discountPercentage) :
                new ObjectParameter("DiscountPercentage", typeof(decimal));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateDiscount", iDParameter, discountCategoryIDParameter, discountPercentageParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateDiscountCategory(Nullable<int> iD, Nullable<decimal> discountPercentage, string discountType, Nullable<int> days, Nullable<int> applicationID, Nullable<int> createdUserID, Nullable<int> locationID, ObjectParameter returnValue)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var discountPercentageParameter = discountPercentage.HasValue ?
                new ObjectParameter("DiscountPercentage", discountPercentage) :
                new ObjectParameter("DiscountPercentage", typeof(decimal));
    
            var discountTypeParameter = discountType != null ?
                new ObjectParameter("DiscountType", discountType) :
                new ObjectParameter("DiscountType", typeof(string));
    
            var daysParameter = days.HasValue ?
                new ObjectParameter("Days", days) :
                new ObjectParameter("Days", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateDiscountCategory", iDParameter, discountPercentageParameter, discountTypeParameter, daysParameter, applicationIDParameter, createdUserIDParameter, locationIDParameter, returnValue);
        }
    
        public virtual int SpUpdateDistrict(Nullable<int> iD, string name, Nullable<int> stateID, string officeName, Nullable<int> pIN, string taluk, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var officeNameParameter = officeName != null ?
                new ObjectParameter("OfficeName", officeName) :
                new ObjectParameter("OfficeName", typeof(string));
    
            var pINParameter = pIN.HasValue ?
                new ObjectParameter("PIN", pIN) :
                new ObjectParameter("PIN", typeof(int));
    
            var talukParameter = taluk != null ?
                new ObjectParameter("Taluk", taluk) :
                new ObjectParameter("Taluk", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateDistrict", iDParameter, nameParameter, stateIDParameter, officeNameParameter, pINParameter, talukParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateDoctor(Nullable<int> iD, string name, string mobileNo, string address1, string address2, string code, string qualification, string place, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> createdUserID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var qualificationParameter = qualification != null ?
                new ObjectParameter("Qualification", qualification) :
                new ObjectParameter("Qualification", typeof(string));
    
            var placeParameter = place != null ?
                new ObjectParameter("Place", place) :
                new ObjectParameter("Place", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateDoctor", iDParameter, nameParameter, mobileNoParameter, address1Parameter, address2Parameter, codeParameter, qualificationParameter, placeParameter, locationIDParameter, applicationIDParameter, createdUserIDParameter);
        }
    
        public virtual int SpUpdateEmployee(string code, string title, string name, Nullable<int> departmentID, string mobileNo, string place, Nullable<int> userID, Nullable<int> employeeCategoryID, Nullable<int> designationID, Nullable<System.DateTime> joiningDate, Nullable<int> applicationID, Nullable<int> locationID, string gender, string martialStatus, Nullable<System.DateTime> dOB, string qualification1, string qualification2, string qualification3, string bloodGroup, Nullable<int> noOfDependent, string nameOfSpouse, string nameOfGuardian, Nullable<bool> excludeFromPayroll, Nullable<System.DateTime> confirmationDate, Nullable<int> payrollCategoryID, string payGrade, string companyEmail, string reportingToCode, string reportingToName, string transcationRole, string d2DReportRole, string mISReportRole, Nullable<int> interCompany, Nullable<System.DateTime> dateOfSeverance, Nullable<System.DateTime> dateOfRejoin, string probationDuration, Nullable<int> employmentJobTypeID, string printPayroll, Nullable<bool> pFStatus, Nullable<bool> eSIStatus, Nullable<bool> nPSStatus, Nullable<bool> medicalInsuranceStatus, Nullable<bool> attandancePunchingStatus, Nullable<bool> multiLocationPunchingStatus, Nullable<bool> specialLeaveStatus, Nullable<bool> probationStatus, Nullable<bool> productionIncentiveStatus, Nullable<bool> salesIncentiveStatus, Nullable<bool> fixedIncentiveStatus, Nullable<bool> minimumWagesStatus, Nullable<bool> isERPUser, Nullable<bool> medicalAidStatus, Nullable<bool> bonusStatus, Nullable<bool> professionalTaxStatus, Nullable<bool> welfareDeductionStatus, string panNo, string aadhaarNo, string accountNumber, string bankName, string bankBranchName, string iFSC, Nullable<bool> isEnglish, Nullable<bool> isHindi, Nullable<bool> isMalayalam, Nullable<bool> isTamil, Nullable<bool> isTelugu, Nullable<bool> isKannada, string pFVoluntaryContribution, string pFAccountNo, string pFUAN, string eSINo, Nullable<int> employeeID, Nullable<int> createdUserID)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var placeParameter = place != null ?
                new ObjectParameter("Place", place) :
                new ObjectParameter("Place", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var employeeCategoryIDParameter = employeeCategoryID.HasValue ?
                new ObjectParameter("EmployeeCategoryID", employeeCategoryID) :
                new ObjectParameter("EmployeeCategoryID", typeof(int));
    
            var designationIDParameter = designationID.HasValue ?
                new ObjectParameter("DesignationID", designationID) :
                new ObjectParameter("DesignationID", typeof(int));
    
            var joiningDateParameter = joiningDate.HasValue ?
                new ObjectParameter("JoiningDate", joiningDate) :
                new ObjectParameter("JoiningDate", typeof(System.DateTime));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var martialStatusParameter = martialStatus != null ?
                new ObjectParameter("MartialStatus", martialStatus) :
                new ObjectParameter("MartialStatus", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var qualification1Parameter = qualification1 != null ?
                new ObjectParameter("Qualification1", qualification1) :
                new ObjectParameter("Qualification1", typeof(string));
    
            var qualification2Parameter = qualification2 != null ?
                new ObjectParameter("Qualification2", qualification2) :
                new ObjectParameter("Qualification2", typeof(string));
    
            var qualification3Parameter = qualification3 != null ?
                new ObjectParameter("Qualification3", qualification3) :
                new ObjectParameter("Qualification3", typeof(string));
    
            var bloodGroupParameter = bloodGroup != null ?
                new ObjectParameter("BloodGroup", bloodGroup) :
                new ObjectParameter("BloodGroup", typeof(string));
    
            var noOfDependentParameter = noOfDependent.HasValue ?
                new ObjectParameter("NoOfDependent", noOfDependent) :
                new ObjectParameter("NoOfDependent", typeof(int));
    
            var nameOfSpouseParameter = nameOfSpouse != null ?
                new ObjectParameter("NameOfSpouse", nameOfSpouse) :
                new ObjectParameter("NameOfSpouse", typeof(string));
    
            var nameOfGuardianParameter = nameOfGuardian != null ?
                new ObjectParameter("NameOfGuardian", nameOfGuardian) :
                new ObjectParameter("NameOfGuardian", typeof(string));
    
            var excludeFromPayrollParameter = excludeFromPayroll.HasValue ?
                new ObjectParameter("ExcludeFromPayroll", excludeFromPayroll) :
                new ObjectParameter("ExcludeFromPayroll", typeof(bool));
    
            var confirmationDateParameter = confirmationDate.HasValue ?
                new ObjectParameter("ConfirmationDate", confirmationDate) :
                new ObjectParameter("ConfirmationDate", typeof(System.DateTime));
    
            var payrollCategoryIDParameter = payrollCategoryID.HasValue ?
                new ObjectParameter("PayrollCategoryID", payrollCategoryID) :
                new ObjectParameter("PayrollCategoryID", typeof(int));
    
            var payGradeParameter = payGrade != null ?
                new ObjectParameter("PayGrade", payGrade) :
                new ObjectParameter("PayGrade", typeof(string));
    
            var companyEmailParameter = companyEmail != null ?
                new ObjectParameter("CompanyEmail", companyEmail) :
                new ObjectParameter("CompanyEmail", typeof(string));
    
            var reportingToCodeParameter = reportingToCode != null ?
                new ObjectParameter("ReportingToCode", reportingToCode) :
                new ObjectParameter("ReportingToCode", typeof(string));
    
            var reportingToNameParameter = reportingToName != null ?
                new ObjectParameter("ReportingToName", reportingToName) :
                new ObjectParameter("ReportingToName", typeof(string));
    
            var transcationRoleParameter = transcationRole != null ?
                new ObjectParameter("TranscationRole", transcationRole) :
                new ObjectParameter("TranscationRole", typeof(string));
    
            var d2DReportRoleParameter = d2DReportRole != null ?
                new ObjectParameter("D2DReportRole", d2DReportRole) :
                new ObjectParameter("D2DReportRole", typeof(string));
    
            var mISReportRoleParameter = mISReportRole != null ?
                new ObjectParameter("MISReportRole", mISReportRole) :
                new ObjectParameter("MISReportRole", typeof(string));
    
            var interCompanyParameter = interCompany.HasValue ?
                new ObjectParameter("InterCompany", interCompany) :
                new ObjectParameter("InterCompany", typeof(int));
    
            var dateOfSeveranceParameter = dateOfSeverance.HasValue ?
                new ObjectParameter("DateOfSeverance", dateOfSeverance) :
                new ObjectParameter("DateOfSeverance", typeof(System.DateTime));
    
            var dateOfRejoinParameter = dateOfRejoin.HasValue ?
                new ObjectParameter("DateOfRejoin", dateOfRejoin) :
                new ObjectParameter("DateOfRejoin", typeof(System.DateTime));
    
            var probationDurationParameter = probationDuration != null ?
                new ObjectParameter("ProbationDuration", probationDuration) :
                new ObjectParameter("ProbationDuration", typeof(string));
    
            var employmentJobTypeIDParameter = employmentJobTypeID.HasValue ?
                new ObjectParameter("EmploymentJobTypeID", employmentJobTypeID) :
                new ObjectParameter("EmploymentJobTypeID", typeof(int));
    
            var printPayrollParameter = printPayroll != null ?
                new ObjectParameter("PrintPayroll", printPayroll) :
                new ObjectParameter("PrintPayroll", typeof(string));
    
            var pFStatusParameter = pFStatus.HasValue ?
                new ObjectParameter("PFStatus", pFStatus) :
                new ObjectParameter("PFStatus", typeof(bool));
    
            var eSIStatusParameter = eSIStatus.HasValue ?
                new ObjectParameter("ESIStatus", eSIStatus) :
                new ObjectParameter("ESIStatus", typeof(bool));
    
            var nPSStatusParameter = nPSStatus.HasValue ?
                new ObjectParameter("NPSStatus", nPSStatus) :
                new ObjectParameter("NPSStatus", typeof(bool));
    
            var medicalInsuranceStatusParameter = medicalInsuranceStatus.HasValue ?
                new ObjectParameter("MedicalInsuranceStatus", medicalInsuranceStatus) :
                new ObjectParameter("MedicalInsuranceStatus", typeof(bool));
    
            var attandancePunchingStatusParameter = attandancePunchingStatus.HasValue ?
                new ObjectParameter("AttandancePunchingStatus", attandancePunchingStatus) :
                new ObjectParameter("AttandancePunchingStatus", typeof(bool));
    
            var multiLocationPunchingStatusParameter = multiLocationPunchingStatus.HasValue ?
                new ObjectParameter("MultiLocationPunchingStatus", multiLocationPunchingStatus) :
                new ObjectParameter("MultiLocationPunchingStatus", typeof(bool));
    
            var specialLeaveStatusParameter = specialLeaveStatus.HasValue ?
                new ObjectParameter("SpecialLeaveStatus", specialLeaveStatus) :
                new ObjectParameter("SpecialLeaveStatus", typeof(bool));
    
            var probationStatusParameter = probationStatus.HasValue ?
                new ObjectParameter("ProbationStatus", probationStatus) :
                new ObjectParameter("ProbationStatus", typeof(bool));
    
            var productionIncentiveStatusParameter = productionIncentiveStatus.HasValue ?
                new ObjectParameter("ProductionIncentiveStatus", productionIncentiveStatus) :
                new ObjectParameter("ProductionIncentiveStatus", typeof(bool));
    
            var salesIncentiveStatusParameter = salesIncentiveStatus.HasValue ?
                new ObjectParameter("SalesIncentiveStatus", salesIncentiveStatus) :
                new ObjectParameter("SalesIncentiveStatus", typeof(bool));
    
            var fixedIncentiveStatusParameter = fixedIncentiveStatus.HasValue ?
                new ObjectParameter("FixedIncentiveStatus", fixedIncentiveStatus) :
                new ObjectParameter("FixedIncentiveStatus", typeof(bool));
    
            var minimumWagesStatusParameter = minimumWagesStatus.HasValue ?
                new ObjectParameter("MinimumWagesStatus", minimumWagesStatus) :
                new ObjectParameter("MinimumWagesStatus", typeof(bool));
    
            var isERPUserParameter = isERPUser.HasValue ?
                new ObjectParameter("IsERPUser", isERPUser) :
                new ObjectParameter("IsERPUser", typeof(bool));
    
            var medicalAidStatusParameter = medicalAidStatus.HasValue ?
                new ObjectParameter("MedicalAidStatus", medicalAidStatus) :
                new ObjectParameter("MedicalAidStatus", typeof(bool));
    
            var bonusStatusParameter = bonusStatus.HasValue ?
                new ObjectParameter("BonusStatus", bonusStatus) :
                new ObjectParameter("BonusStatus", typeof(bool));
    
            var professionalTaxStatusParameter = professionalTaxStatus.HasValue ?
                new ObjectParameter("ProfessionalTaxStatus", professionalTaxStatus) :
                new ObjectParameter("ProfessionalTaxStatus", typeof(bool));
    
            var welfareDeductionStatusParameter = welfareDeductionStatus.HasValue ?
                new ObjectParameter("WelfareDeductionStatus", welfareDeductionStatus) :
                new ObjectParameter("WelfareDeductionStatus", typeof(bool));
    
            var panNoParameter = panNo != null ?
                new ObjectParameter("PanNo", panNo) :
                new ObjectParameter("PanNo", typeof(string));
    
            var aadhaarNoParameter = aadhaarNo != null ?
                new ObjectParameter("AadhaarNo", aadhaarNo) :
                new ObjectParameter("AadhaarNo", typeof(string));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var bankBranchNameParameter = bankBranchName != null ?
                new ObjectParameter("BankBranchName", bankBranchName) :
                new ObjectParameter("BankBranchName", typeof(string));
    
            var iFSCParameter = iFSC != null ?
                new ObjectParameter("IFSC", iFSC) :
                new ObjectParameter("IFSC", typeof(string));
    
            var isEnglishParameter = isEnglish.HasValue ?
                new ObjectParameter("IsEnglish", isEnglish) :
                new ObjectParameter("IsEnglish", typeof(bool));
    
            var isHindiParameter = isHindi.HasValue ?
                new ObjectParameter("IsHindi", isHindi) :
                new ObjectParameter("IsHindi", typeof(bool));
    
            var isMalayalamParameter = isMalayalam.HasValue ?
                new ObjectParameter("IsMalayalam", isMalayalam) :
                new ObjectParameter("IsMalayalam", typeof(bool));
    
            var isTamilParameter = isTamil.HasValue ?
                new ObjectParameter("IsTamil", isTamil) :
                new ObjectParameter("IsTamil", typeof(bool));
    
            var isTeluguParameter = isTelugu.HasValue ?
                new ObjectParameter("IsTelugu", isTelugu) :
                new ObjectParameter("IsTelugu", typeof(bool));
    
            var isKannadaParameter = isKannada.HasValue ?
                new ObjectParameter("IsKannada", isKannada) :
                new ObjectParameter("IsKannada", typeof(bool));
    
            var pFVoluntaryContributionParameter = pFVoluntaryContribution != null ?
                new ObjectParameter("PFVoluntaryContribution", pFVoluntaryContribution) :
                new ObjectParameter("PFVoluntaryContribution", typeof(string));
    
            var pFAccountNoParameter = pFAccountNo != null ?
                new ObjectParameter("PFAccountNo", pFAccountNo) :
                new ObjectParameter("PFAccountNo", typeof(string));
    
            var pFUANParameter = pFUAN != null ?
                new ObjectParameter("PFUAN", pFUAN) :
                new ObjectParameter("PFUAN", typeof(string));
    
            var eSINoParameter = eSINo != null ?
                new ObjectParameter("ESINo", eSINo) :
                new ObjectParameter("ESINo", typeof(string));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateEmployee", codeParameter, titleParameter, nameParameter, departmentIDParameter, mobileNoParameter, placeParameter, userIDParameter, employeeCategoryIDParameter, designationIDParameter, joiningDateParameter, applicationIDParameter, locationIDParameter, genderParameter, martialStatusParameter, dOBParameter, qualification1Parameter, qualification2Parameter, qualification3Parameter, bloodGroupParameter, noOfDependentParameter, nameOfSpouseParameter, nameOfGuardianParameter, excludeFromPayrollParameter, confirmationDateParameter, payrollCategoryIDParameter, payGradeParameter, companyEmailParameter, reportingToCodeParameter, reportingToNameParameter, transcationRoleParameter, d2DReportRoleParameter, mISReportRoleParameter, interCompanyParameter, dateOfSeveranceParameter, dateOfRejoinParameter, probationDurationParameter, employmentJobTypeIDParameter, printPayrollParameter, pFStatusParameter, eSIStatusParameter, nPSStatusParameter, medicalInsuranceStatusParameter, attandancePunchingStatusParameter, multiLocationPunchingStatusParameter, specialLeaveStatusParameter, probationStatusParameter, productionIncentiveStatusParameter, salesIncentiveStatusParameter, fixedIncentiveStatusParameter, minimumWagesStatusParameter, isERPUserParameter, medicalAidStatusParameter, bonusStatusParameter, professionalTaxStatusParameter, welfareDeductionStatusParameter, panNoParameter, aadhaarNoParameter, accountNumberParameter, bankNameParameter, bankBranchNameParameter, iFSCParameter, isEnglishParameter, isHindiParameter, isMalayalamParameter, isTamilParameter, isTeluguParameter, isKannadaParameter, pFVoluntaryContributionParameter, pFAccountNoParameter, pFUANParameter, eSINoParameter, employeeIDParameter, createdUserIDParameter);
        }
    
        public virtual int SpUpdateQCTest(Nullable<int> iD, string name, string type, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateQCTest", iDParameter, nameParameter, typeParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateQcTestDefinition(Nullable<int> iD, Nullable<int> itemID, Nullable<int> qCTestID, Nullable<decimal> rangefrom, Nullable<decimal> rangeto, string result, Nullable<bool> ismandatory, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var qCTestIDParameter = qCTestID.HasValue ?
                new ObjectParameter("QCTestID", qCTestID) :
                new ObjectParameter("QCTestID", typeof(int));
    
            var rangefromParameter = rangefrom.HasValue ?
                new ObjectParameter("Rangefrom", rangefrom) :
                new ObjectParameter("Rangefrom", typeof(decimal));
    
            var rangetoParameter = rangeto.HasValue ?
                new ObjectParameter("Rangeto", rangeto) :
                new ObjectParameter("Rangeto", typeof(decimal));
    
            var resultParameter = result != null ?
                new ObjectParameter("Result", result) :
                new ObjectParameter("Result", typeof(string));
    
            var ismandatoryParameter = ismandatory.HasValue ?
                new ObjectParameter("Ismandatory", ismandatory) :
                new ObjectParameter("Ismandatory", typeof(bool));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateQcTestDefinition", iDParameter, itemIDParameter, qCTestIDParameter, rangefromParameter, rangetoParameter, resultParameter, ismandatoryParameter, startDateParameter, endDateParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateMaterialPurification(Nullable<int> iD, Nullable<int> itemID, Nullable<int> unitID, Nullable<int> processID, Nullable<int> purificationItemID, Nullable<int> purificationUnitID, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> createdUserID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var processIDParameter = processID.HasValue ?
                new ObjectParameter("ProcessID", processID) :
                new ObjectParameter("ProcessID", typeof(int));
    
            var purificationItemIDParameter = purificationItemID.HasValue ?
                new ObjectParameter("PurificationItemID", purificationItemID) :
                new ObjectParameter("PurificationItemID", typeof(int));
    
            var purificationUnitIDParameter = purificationUnitID.HasValue ?
                new ObjectParameter("PurificationUnitID", purificationUnitID) :
                new ObjectParameter("PurificationUnitID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateMaterialPurification", iDParameter, itemIDParameter, unitIDParameter, processIDParameter, purificationItemIDParameter, purificationUnitIDParameter, locationIDParameter, applicationIDParameter, createdUserIDParameter);
        }
    
        public virtual int SpUpdateProductionGroup(Nullable<int> productionGroupID, Nullable<int> productionGroupItemID, string productionGroupName, Nullable<bool> isKalkan, Nullable<int> productionLocationID, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> createdUserID)
        {
            var productionGroupIDParameter = productionGroupID.HasValue ?
                new ObjectParameter("ProductionGroupID", productionGroupID) :
                new ObjectParameter("ProductionGroupID", typeof(int));
    
            var productionGroupItemIDParameter = productionGroupItemID.HasValue ?
                new ObjectParameter("ProductionGroupItemID", productionGroupItemID) :
                new ObjectParameter("ProductionGroupItemID", typeof(int));
    
            var productionGroupNameParameter = productionGroupName != null ?
                new ObjectParameter("ProductionGroupName", productionGroupName) :
                new ObjectParameter("ProductionGroupName", typeof(string));
    
            var isKalkanParameter = isKalkan.HasValue ?
                new ObjectParameter("IsKalkan", isKalkan) :
                new ObjectParameter("IsKalkan", typeof(bool));
    
            var productionLocationIDParameter = productionLocationID.HasValue ?
                new ObjectParameter("ProductionLocationID", productionLocationID) :
                new ObjectParameter("ProductionLocationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateProductionGroup", productionGroupIDParameter, productionGroupItemIDParameter, productionGroupNameParameter, isKalkanParameter, productionLocationIDParameter, locationIDParameter, applicationIDParameter, createdUserIDParameter);
        }
    
        public virtual int SpUpdatePriceList(Nullable<int> iD, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> createdUserID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdatePriceList", iDParameter, locationIDParameter, applicationIDParameter, createdUserIDParameter);
        }
    
        public virtual int SpUpdateTurnOverDiscount(Nullable<int> iD, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> createdUserID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateTurnOverDiscount", iDParameter, locationIDParameter, applicationIDParameter, createdUserIDParameter);
        }
    
        public virtual int SpUpdateFSO(Nullable<int> iD, string fSOCode, Nullable<bool> isAreaManager, Nullable<bool> isZonalManager, Nullable<bool> isRegionalSalesManager, Nullable<bool> isSalesManager, Nullable<int> businessCategoryID, Nullable<int> salesIncentiveCategoryID, Nullable<int> salesCategoryID, string routeCode, string routeName, string zoneCode, string zoneName, string fSOName, Nullable<int> reportingToID, Nullable<int> areaManagerID, Nullable<int> zonalManagerID, Nullable<int> salesManagerID, Nullable<int> regionalSalesManagerID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> employeeID, Nullable<bool> isactive, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> createdUserID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var fSOCodeParameter = fSOCode != null ?
                new ObjectParameter("FSOCode", fSOCode) :
                new ObjectParameter("FSOCode", typeof(string));
    
            var isAreaManagerParameter = isAreaManager.HasValue ?
                new ObjectParameter("IsAreaManager", isAreaManager) :
                new ObjectParameter("IsAreaManager", typeof(bool));
    
            var isZonalManagerParameter = isZonalManager.HasValue ?
                new ObjectParameter("IsZonalManager", isZonalManager) :
                new ObjectParameter("IsZonalManager", typeof(bool));
    
            var isRegionalSalesManagerParameter = isRegionalSalesManager.HasValue ?
                new ObjectParameter("IsRegionalSalesManager", isRegionalSalesManager) :
                new ObjectParameter("IsRegionalSalesManager", typeof(bool));
    
            var isSalesManagerParameter = isSalesManager.HasValue ?
                new ObjectParameter("IsSalesManager", isSalesManager) :
                new ObjectParameter("IsSalesManager", typeof(bool));
    
            var businessCategoryIDParameter = businessCategoryID.HasValue ?
                new ObjectParameter("BusinessCategoryID", businessCategoryID) :
                new ObjectParameter("BusinessCategoryID", typeof(int));
    
            var salesIncentiveCategoryIDParameter = salesIncentiveCategoryID.HasValue ?
                new ObjectParameter("SalesIncentiveCategoryID", salesIncentiveCategoryID) :
                new ObjectParameter("SalesIncentiveCategoryID", typeof(int));
    
            var salesCategoryIDParameter = salesCategoryID.HasValue ?
                new ObjectParameter("SalesCategoryID", salesCategoryID) :
                new ObjectParameter("SalesCategoryID", typeof(int));
    
            var routeCodeParameter = routeCode != null ?
                new ObjectParameter("RouteCode", routeCode) :
                new ObjectParameter("RouteCode", typeof(string));
    
            var routeNameParameter = routeName != null ?
                new ObjectParameter("RouteName", routeName) :
                new ObjectParameter("RouteName", typeof(string));
    
            var zoneCodeParameter = zoneCode != null ?
                new ObjectParameter("ZoneCode", zoneCode) :
                new ObjectParameter("ZoneCode", typeof(string));
    
            var zoneNameParameter = zoneName != null ?
                new ObjectParameter("ZoneName", zoneName) :
                new ObjectParameter("ZoneName", typeof(string));
    
            var fSONameParameter = fSOName != null ?
                new ObjectParameter("FSOName", fSOName) :
                new ObjectParameter("FSOName", typeof(string));
    
            var reportingToIDParameter = reportingToID.HasValue ?
                new ObjectParameter("ReportingToID", reportingToID) :
                new ObjectParameter("ReportingToID", typeof(int));
    
            var areaManagerIDParameter = areaManagerID.HasValue ?
                new ObjectParameter("AreaManagerID", areaManagerID) :
                new ObjectParameter("AreaManagerID", typeof(int));
    
            var zonalManagerIDParameter = zonalManagerID.HasValue ?
                new ObjectParameter("ZonalManagerID", zonalManagerID) :
                new ObjectParameter("ZonalManagerID", typeof(int));
    
            var salesManagerIDParameter = salesManagerID.HasValue ?
                new ObjectParameter("SalesManagerID", salesManagerID) :
                new ObjectParameter("SalesManagerID", typeof(int));
    
            var regionalSalesManagerIDParameter = regionalSalesManagerID.HasValue ?
                new ObjectParameter("RegionalSalesManagerID", regionalSalesManagerID) :
                new ObjectParameter("RegionalSalesManagerID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var isactiveParameter = isactive.HasValue ?
                new ObjectParameter("Isactive", isactive) :
                new ObjectParameter("Isactive", typeof(bool));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateFSO", iDParameter, fSOCodeParameter, isAreaManagerParameter, isZonalManagerParameter, isRegionalSalesManagerParameter, isSalesManagerParameter, businessCategoryIDParameter, salesIncentiveCategoryIDParameter, salesCategoryIDParameter, routeCodeParameter, routeNameParameter, zoneCodeParameter, zoneNameParameter, fSONameParameter, reportingToIDParameter, areaManagerIDParameter, zonalManagerIDParameter, salesManagerIDParameter, regionalSalesManagerIDParameter, fromDateParameter, toDateParameter, employeeIDParameter, isactiveParameter, locationIDParameter, applicationIDParameter, createdUserIDParameter);
        }
    
        public virtual int SpUpdateLogicCode(Nullable<int> iD, string code, string name, string remarks, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateLogicCode", iDParameter, codeParameter, nameParameter, remarksParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdatePatient(Nullable<int> iD, string code, string patientName, Nullable<int> age, string sex, Nullable<System.DateTime> dOB, string address1, string address2, string place, string email, string mobile, string pinCode, Nullable<int> doctorId, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var patientNameParameter = patientName != null ?
                new ObjectParameter("PatientName", patientName) :
                new ObjectParameter("PatientName", typeof(string));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(int));
    
            var sexParameter = sex != null ?
                new ObjectParameter("Sex", sex) :
                new ObjectParameter("Sex", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var placeParameter = place != null ?
                new ObjectParameter("Place", place) :
                new ObjectParameter("Place", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var pinCodeParameter = pinCode != null ?
                new ObjectParameter("PinCode", pinCode) :
                new ObjectParameter("PinCode", typeof(string));
    
            var doctorIdParameter = doctorId.HasValue ?
                new ObjectParameter("DoctorId", doctorId) :
                new ObjectParameter("DoctorId", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdatePatient", iDParameter, codeParameter, patientNameParameter, ageParameter, sexParameter, dOBParameter, address1Parameter, address2Parameter, placeParameter, emailParameter, mobileParameter, pinCodeParameter, doctorIdParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateStockAdjustmentReasons(Nullable<int> iD, string code, string name, string remarks, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateStockAdjustmentReasons", iDParameter, codeParameter, nameParameter, remarksParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpDeleteUserRoles(Nullable<int> usedID, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var usedIDParameter = usedID.HasValue ?
                new ObjectParameter("UsedID", usedID) :
                new ObjectParameter("UsedID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpDeleteUserRoles", usedIDParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateRole(Nullable<int> iD, string code, string roleName, string remarks, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateRole", iDParameter, codeParameter, roleNameParameter, remarksParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateSerialNoByID(Nullable<int> iD, string form, string field, string locationPrefix, string prefix, string specialPrefix, string finYearPrefix, Nullable<int> value, Nullable<bool> isLeadingZero, Nullable<int> noOfDigits, string suffix, Nullable<bool> isMaster, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> createdUserID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var formParameter = form != null ?
                new ObjectParameter("Form", form) :
                new ObjectParameter("Form", typeof(string));
    
            var fieldParameter = field != null ?
                new ObjectParameter("Field", field) :
                new ObjectParameter("Field", typeof(string));
    
            var locationPrefixParameter = locationPrefix != null ?
                new ObjectParameter("LocationPrefix", locationPrefix) :
                new ObjectParameter("LocationPrefix", typeof(string));
    
            var prefixParameter = prefix != null ?
                new ObjectParameter("Prefix", prefix) :
                new ObjectParameter("Prefix", typeof(string));
    
            var specialPrefixParameter = specialPrefix != null ?
                new ObjectParameter("SpecialPrefix", specialPrefix) :
                new ObjectParameter("SpecialPrefix", typeof(string));
    
            var finYearPrefixParameter = finYearPrefix != null ?
                new ObjectParameter("FinYearPrefix", finYearPrefix) :
                new ObjectParameter("FinYearPrefix", typeof(string));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(int));
    
            var isLeadingZeroParameter = isLeadingZero.HasValue ?
                new ObjectParameter("IsLeadingZero", isLeadingZero) :
                new ObjectParameter("IsLeadingZero", typeof(bool));
    
            var noOfDigitsParameter = noOfDigits.HasValue ?
                new ObjectParameter("NoOfDigits", noOfDigits) :
                new ObjectParameter("NoOfDigits", typeof(int));
    
            var suffixParameter = suffix != null ?
                new ObjectParameter("suffix", suffix) :
                new ObjectParameter("suffix", typeof(string));
    
            var isMasterParameter = isMaster.HasValue ?
                new ObjectParameter("IsMaster", isMaster) :
                new ObjectParameter("IsMaster", typeof(bool));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateSerialNoByID", iDParameter, formParameter, fieldParameter, locationPrefixParameter, prefixParameter, specialPrefixParameter, finYearPrefixParameter, valueParameter, isLeadingZeroParameter, noOfDigitsParameter, suffixParameter, isMasterParameter, finYearParameter, locationIDParameter, applicationIDParameter, createdUserIDParameter);
        }
    
        public virtual int SpUpdateProject(Nullable<int> iD, string name, string description, string code, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateProject", iDParameter, nameParameter, descriptionParameter, codeParameter, startDateParameter, endDateParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdatePlaces(Nullable<int> iD, string code, string name, string address, Nullable<int> districtID, Nullable<int> stateID, Nullable<int> countryID, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdatePlaces", iDParameter, codeParameter, nameParameter, addressParameter, districtIDParameter, stateIDParameter, countryIDParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateState(Nullable<int> stateID, string stateName, string gSTState, Nullable<int> countryID, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var stateNameParameter = stateName != null ?
                new ObjectParameter("StateName", stateName) :
                new ObjectParameter("StateName", typeof(string));
    
            var gSTStateParameter = gSTState != null ?
                new ObjectParameter("GSTState", gSTState) :
                new ObjectParameter("GSTState", typeof(string));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateState", stateIDParameter, stateNameParameter, gSTStateParameter, countryIDParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateTDS(Nullable<int> iD, string code, string name, string itemAccountCategory, Nullable<decimal> tDSRate, string companyType, string expenseType, string iTSection, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string remarks, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var itemAccountCategoryParameter = itemAccountCategory != null ?
                new ObjectParameter("ItemAccountCategory", itemAccountCategory) :
                new ObjectParameter("ItemAccountCategory", typeof(string));
    
            var tDSRateParameter = tDSRate.HasValue ?
                new ObjectParameter("TDSRate", tDSRate) :
                new ObjectParameter("TDSRate", typeof(decimal));
    
            var companyTypeParameter = companyType != null ?
                new ObjectParameter("CompanyType", companyType) :
                new ObjectParameter("CompanyType", typeof(string));
    
            var expenseTypeParameter = expenseType != null ?
                new ObjectParameter("ExpenseType", expenseType) :
                new ObjectParameter("ExpenseType", typeof(string));
    
            var iTSectionParameter = iTSection != null ?
                new ObjectParameter("ITSection", iTSection) :
                new ObjectParameter("ITSection", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateTDS", iDParameter, codeParameter, nameParameter, itemAccountCategoryParameter, tDSRateParameter, companyTypeParameter, expenseTypeParameter, iTSectionParameter, startDateParameter, endDateParameter, remarksParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateWareHouse(Nullable<int> wareHouseID, string code, string name, string place, string remarks, Nullable<int> itemTypeID, Nullable<int> locationID, Nullable<int> createdUserID, Nullable<int> location, Nullable<int> applicationID)
        {
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var placeParameter = place != null ?
                new ObjectParameter("Place", place) :
                new ObjectParameter("Place", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var itemTypeIDParameter = itemTypeID.HasValue ?
                new ObjectParameter("ItemTypeID", itemTypeID) :
                new ObjectParameter("ItemTypeID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationParameter = location.HasValue ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateWareHouse", wareHouseIDParameter, codeParameter, nameParameter, placeParameter, remarksParameter, itemTypeIDParameter, locationIDParameter, createdUserIDParameter, locationParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdatePaymentMode(Nullable<int> iD, string name, Nullable<int> createdUserID, Nullable<int> location, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationParameter = location.HasValue ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdatePaymentMode", iDParameter, nameParameter, createdUserIDParameter, locationParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdatePaymentType(Nullable<int> iD, string name, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdatePaymentType", iDParameter, nameParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdatePaymentGroup(Nullable<int> iD, string name, Nullable<int> paymentWeek, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var paymentWeekParameter = paymentWeek.HasValue ?
                new ObjectParameter("PaymentWeek", paymentWeek) :
                new ObjectParameter("PaymentWeek", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdatePaymentGroup", iDParameter, nameParameter, paymentWeekParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateGSTCategory(Nullable<int> iD, string name, Nullable<decimal> sGSTPercent, Nullable<decimal> cGSTPercent, Nullable<decimal> iGSTPercent, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var sGSTPercentParameter = sGSTPercent.HasValue ?
                new ObjectParameter("SGSTPercent", sGSTPercent) :
                new ObjectParameter("SGSTPercent", typeof(decimal));
    
            var cGSTPercentParameter = cGSTPercent.HasValue ?
                new ObjectParameter("CGSTPercent", cGSTPercent) :
                new ObjectParameter("CGSTPercent", typeof(decimal));
    
            var iGSTPercentParameter = iGSTPercent.HasValue ?
                new ObjectParameter("IGSTPercent", iGSTPercent) :
                new ObjectParameter("IGSTPercent", typeof(decimal));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateGSTCategory", iDParameter, nameParameter, sGSTPercentParameter, cGSTPercentParameter, iGSTPercentParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdatePaymentDays(Nullable<int> iD, string name, Nullable<int> days, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var daysParameter = days.HasValue ?
                new ObjectParameter("Days", days) :
                new ObjectParameter("Days", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdatePaymentDays", iDParameter, nameParameter, daysParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateGSTSubCategory(Nullable<int> iD, string name, string description, Nullable<decimal> percentage, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var percentageParameter = percentage.HasValue ?
                new ObjectParameter("Percentage", percentage) :
                new ObjectParameter("Percentage", typeof(decimal));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateGSTSubCategory", iDParameter, nameParameter, descriptionParameter, percentageParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateOrUpdateSchemeXMLMethod(Nullable<int> schemeID, string name, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string items, string customers, string categories, string states, string districts, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter retValue)
        {
            var schemeIDParameter = schemeID.HasValue ?
                new ObjectParameter("SchemeID", schemeID) :
                new ObjectParameter("SchemeID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var itemsParameter = items != null ?
                new ObjectParameter("Items", items) :
                new ObjectParameter("Items", typeof(string));
    
            var customersParameter = customers != null ?
                new ObjectParameter("Customers", customers) :
                new ObjectParameter("Customers", typeof(string));
    
            var categoriesParameter = categories != null ?
                new ObjectParameter("Categories", categories) :
                new ObjectParameter("Categories", typeof(string));
    
            var statesParameter = states != null ?
                new ObjectParameter("States", states) :
                new ObjectParameter("States", typeof(string));
    
            var districtsParameter = districts != null ?
                new ObjectParameter("Districts", districts) :
                new ObjectParameter("Districts", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateOrUpdateSchemeXMLMethod", schemeIDParameter, nameParameter, startDateParameter, endDateParameter, itemsParameter, customersParameter, categoriesParameter, statesParameter, districtsParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, retValue);
        }
    
        public virtual int SpUpdateEmployeeUserID(string code, Nullable<int> userID)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateEmployeeUserID", codeParameter, userIDParameter);
        }
    
        public virtual int SpLogChange(string tableName, string referenceField, Nullable<int> referenceID, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var referenceFieldParameter = referenceField != null ?
                new ObjectParameter("ReferenceField", referenceField) :
                new ObjectParameter("ReferenceField", typeof(string));
    
            var referenceIDParameter = referenceID.HasValue ?
                new ObjectParameter("ReferenceID", referenceID) :
                new ObjectParameter("ReferenceID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpLogChange", tableNameParameter, referenceFieldParameter, referenceIDParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateMilkRate(Nullable<decimal> fatContentFrom, Nullable<decimal> fatContentTo, Nullable<decimal> price, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, ObjectParameter returnValue)
        {
            var fatContentFromParameter = fatContentFrom.HasValue ?
                new ObjectParameter("FatContentFrom", fatContentFrom) :
                new ObjectParameter("FatContentFrom", typeof(decimal));
    
            var fatContentToParameter = fatContentTo.HasValue ?
                new ObjectParameter("FatContentTo", fatContentTo) :
                new ObjectParameter("FatContentTo", typeof(decimal));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateMilkRate", fatContentFromParameter, fatContentToParameter, priceParameter, startDateParameter, endDateParameter, returnValue);
        }
    
        public virtual ObjectResult<SpPProductionGroupItemAutoComplete_Result> SpPProductionGroupItemAutoComplete(string nameHint, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpPProductionGroupItemAutoComplete_Result>("SpPProductionGroupItemAutoComplete", nameHintParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPatientList_Result> SpGetPatientList(string codeHint, string nameHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPatientList_Result>("SpGetPatientList", codeHintParameter, nameHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SPGetMilkRate_Result> SPGetMilkRate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetMilkRate_Result>("SPGetMilkRate");
        }
    
        public virtual ObjectResult<SpGetMilkRateByID_Result> SpGetMilkRateByID(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetMilkRateByID_Result>("SpGetMilkRateByID", iDParameter);
        }
    
        public virtual ObjectResult<SpGetProductionOutputMonthWise_Result> SpGetProductionOutputMonthWise(Nullable<int> finYear, Nullable<int> applicationID)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetProductionOutputMonthWise_Result>("SpGetProductionOutputMonthWise", finYearParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateMilkRate(Nullable<int> iD, Nullable<decimal> fatContentFrom, Nullable<decimal> fatContentTo, Nullable<decimal> price, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var fatContentFromParameter = fatContentFrom.HasValue ?
                new ObjectParameter("FatContentFrom", fatContentFrom) :
                new ObjectParameter("FatContentFrom", typeof(decimal));
    
            var fatContentToParameter = fatContentTo.HasValue ?
                new ObjectParameter("FatContentTo", fatContentTo) :
                new ObjectParameter("FatContentTo", typeof(decimal));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateMilkRate", iDParameter, fatContentFromParameter, fatContentToParameter, priceParameter, startDateParameter, endDateParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetMonthWiseSalesDetailsByLocationHead_Result> SpGetMonthWiseSalesDetailsByLocationHead(string locationHead, string batchType, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var locationHeadParameter = locationHead != null ?
                new ObjectParameter("LocationHead", locationHead) :
                new ObjectParameter("LocationHead", typeof(string));
    
            var batchTypeParameter = batchType != null ?
                new ObjectParameter("BatchType", batchType) :
                new ObjectParameter("BatchType", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetMonthWiseSalesDetailsByLocationHead_Result>("SpGetMonthWiseSalesDetailsByLocationHead", locationHeadParameter, batchTypeParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateOutPatient(string code, string name, string addressLine1, string addressLine2, Nullable<int> stateID, Nullable<int> countryID, Nullable<int> districtID, Nullable<System.DateTime> dOB, string emailID, string mobileNumber, string gSTNo, string category, string pinCode, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter customerID)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var addressLine1Parameter = addressLine1 != null ?
                new ObjectParameter("AddressLine1", addressLine1) :
                new ObjectParameter("AddressLine1", typeof(string));
    
            var addressLine2Parameter = addressLine2 != null ?
                new ObjectParameter("AddressLine2", addressLine2) :
                new ObjectParameter("AddressLine2", typeof(string));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var gSTNoParameter = gSTNo != null ?
                new ObjectParameter("GSTNo", gSTNo) :
                new ObjectParameter("GSTNo", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var pinCodeParameter = pinCode != null ?
                new ObjectParameter("PinCode", pinCode) :
                new ObjectParameter("PinCode", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateOutPatient", codeParameter, nameParameter, addressLine1Parameter, addressLine2Parameter, stateIDParameter, countryIDParameter, districtIDParameter, dOBParameter, emailIDParameter, mobileNumberParameter, gSTNoParameter, categoryParameter, pinCodeParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter, customerID);
        }
    
        public virtual ObjectResult<SpGetAddress_Result> SpGetAddress(Nullable<int> addressID)
        {
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAddress_Result>("SpGetAddress", addressIDParameter);
        }
    
        public virtual ObjectResult<SpGetOutPatientByID_Result> SpGetOutPatientByID(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetOutPatientByID_Result>("SpGetOutPatientByID", iDParameter);
        }
    
        public virtual int SpUpdateOutPatient(Nullable<int> iD, string name, string addressLine1, string addressLine2, Nullable<int> stateID, Nullable<int> countryID, Nullable<int> districtID, Nullable<System.DateTime> dOB, string emailID, string mobileNumber, string gSTNo, string category, string pinCode, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var addressLine1Parameter = addressLine1 != null ?
                new ObjectParameter("AddressLine1", addressLine1) :
                new ObjectParameter("AddressLine1", typeof(string));
    
            var addressLine2Parameter = addressLine2 != null ?
                new ObjectParameter("AddressLine2", addressLine2) :
                new ObjectParameter("AddressLine2", typeof(string));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var gSTNoParameter = gSTNo != null ?
                new ObjectParameter("GSTNo", gSTNo) :
                new ObjectParameter("GSTNo", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var pinCodeParameter = pinCode != null ?
                new ObjectParameter("PinCode", pinCode) :
                new ObjectParameter("PinCode", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateOutPatient", iDParameter, nameParameter, addressLine1Parameter, addressLine2Parameter, stateIDParameter, countryIDParameter, districtIDParameter, dOBParameter, emailIDParameter, mobileNumberParameter, gSTNoParameter, categoryParameter, pinCodeParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetAgeingBucketDetail_Result> SpGetAgeingBucketDetail(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAgeingBucketDetail_Result>("SpGetAgeingBucketDetail", iDParameter);
        }
    
        public virtual ObjectResult<SpGetAgeingBucketList_Result> SpGetAgeingBucketList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAgeingBucketList_Result>("SpGetAgeingBucketList");
        }
    
        public virtual int SpUpdateSchemeForCustomer(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateSchemeForCustomer", customerIDParameter);
        }
    
        public virtual ObjectResult<SpGetStockValuationItemCategory_Result> SpGetStockValuationItemCategory(string categoryName)
        {
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetStockValuationItemCategory_Result>("SpGetStockValuationItemCategory", categoryNameParameter);
        }
    
        public virtual ObjectResult<SpGetInterCompanyList_Result> SpGetInterCompanyList(string hint, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var hintParameter = hint != null ?
                new ObjectParameter("Hint", hint) :
                new ObjectParameter("Hint", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetInterCompanyList_Result>("SpGetInterCompanyList", hintParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetBatchesForOpeningStock_Result> SpGetBatchesForOpeningStock(Nullable<int> itemID, string hint, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var hintParameter = hint != null ?
                new ObjectParameter("Hint", hint) :
                new ObjectParameter("Hint", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetBatchesForOpeningStock_Result>("SpGetBatchesForOpeningStock", itemIDParameter, hintParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetItemsByItemCodes_Result> SpGetItemsByItemCodes(string itemCodes, Nullable<int> applicationID)
        {
            var itemCodesParameter = itemCodes != null ?
                new ObjectParameter("ItemCodes", itemCodes) :
                new ObjectParameter("ItemCodes", typeof(string));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetItemsByItemCodes_Result>("SpGetItemsByItemCodes", itemCodesParameter, applicationIDParameter);
        }
    
        public virtual int SpDeleteSupplier(Nullable<int> iD, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpDeleteSupplier", iDParameter, applicationIDParameter);
        }
    
        public virtual int SpDeleteCustomer(Nullable<int> iD, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpDeleteCustomer", iDParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetAllItemList_Result> SpGetAllItemList(Nullable<int> itemCategoryID, string codeHint, string nameHint, string itemCategoryHint, string salesCategoryHint, string accountsCategoryHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var itemCategoryHintParameter = itemCategoryHint != null ?
                new ObjectParameter("ItemCategoryHint", itemCategoryHint) :
                new ObjectParameter("ItemCategoryHint", typeof(string));
    
            var salesCategoryHintParameter = salesCategoryHint != null ?
                new ObjectParameter("SalesCategoryHint", salesCategoryHint) :
                new ObjectParameter("SalesCategoryHint", typeof(string));
    
            var accountsCategoryHintParameter = accountsCategoryHint != null ?
                new ObjectParameter("AccountsCategoryHint", accountsCategoryHint) :
                new ObjectParameter("AccountsCategoryHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAllItemList_Result>("SpGetAllItemList", itemCategoryIDParameter, codeHintParameter, nameHintParameter, itemCategoryHintParameter, salesCategoryHintParameter, accountsCategoryHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetAllCustomerList_Result> SpGetAllCustomerList(string type, Nullable<int> customerCategoryID, string customerCodeHint, string customerNameHint, string customerLocationHint, string customerCategoryHint, string propratorNameHint, string oldCodeHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var customerCategoryIDParameter = customerCategoryID.HasValue ?
                new ObjectParameter("CustomerCategoryID", customerCategoryID) :
                new ObjectParameter("CustomerCategoryID", typeof(int));
    
            var customerCodeHintParameter = customerCodeHint != null ?
                new ObjectParameter("CustomerCodeHint", customerCodeHint) :
                new ObjectParameter("CustomerCodeHint", typeof(string));
    
            var customerNameHintParameter = customerNameHint != null ?
                new ObjectParameter("CustomerNameHint", customerNameHint) :
                new ObjectParameter("CustomerNameHint", typeof(string));
    
            var customerLocationHintParameter = customerLocationHint != null ?
                new ObjectParameter("CustomerLocationHint", customerLocationHint) :
                new ObjectParameter("CustomerLocationHint", typeof(string));
    
            var customerCategoryHintParameter = customerCategoryHint != null ?
                new ObjectParameter("CustomerCategoryHint", customerCategoryHint) :
                new ObjectParameter("CustomerCategoryHint", typeof(string));
    
            var propratorNameHintParameter = propratorNameHint != null ?
                new ObjectParameter("PropratorNameHint", propratorNameHint) :
                new ObjectParameter("PropratorNameHint", typeof(string));
    
            var oldCodeHintParameter = oldCodeHint != null ?
                new ObjectParameter("OldCodeHint", oldCodeHint) :
                new ObjectParameter("OldCodeHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAllCustomerList_Result>("SpGetAllCustomerList", typeParameter, customerCategoryIDParameter, customerCodeHintParameter, customerNameHintParameter, customerLocationHintParameter, customerCategoryHintParameter, propratorNameHintParameter, oldCodeHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreatePriceList(string name, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter basePriceListID, ObjectParameter returnValue)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePriceList", nameParameter, fromDateParameter, toDateParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter, basePriceListID, returnValue);
        }
    
        public virtual ObjectResult<SpGetAllItemAutoComplete_Result> SpGetAllItemAutoComplete(Nullable<int> itemCategoryID, Nullable<int> salesCategoryID, string hint, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var salesCategoryIDParameter = salesCategoryID.HasValue ?
                new ObjectParameter("SalesCategoryID", salesCategoryID) :
                new ObjectParameter("SalesCategoryID", typeof(int));
    
            var hintParameter = hint != null ?
                new ObjectParameter("Hint", hint) :
                new ObjectParameter("Hint", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAllItemAutoComplete_Result>("SpGetAllItemAutoComplete", itemCategoryIDParameter, salesCategoryIDParameter, hintParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetBillingAddress_Result> SpGetBillingAddress(string partyType, Nullable<int> partyID, string locationHint)
        {
            var partyTypeParameter = partyType != null ?
                new ObjectParameter("PartyType", partyType) :
                new ObjectParameter("PartyType", typeof(string));
    
            var partyIDParameter = partyID.HasValue ?
                new ObjectParameter("PartyID", partyID) :
                new ObjectParameter("PartyID", typeof(int));
    
            var locationHintParameter = locationHint != null ?
                new ObjectParameter("LocationHint", locationHint) :
                new ObjectParameter("LocationHint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetBillingAddress_Result>("SpGetBillingAddress", partyTypeParameter, partyIDParameter, locationHintParameter);
        }
    
        public virtual ObjectResult<SpGetShippingAddress_Result> SpGetShippingAddress(string partyType, Nullable<int> partyID, string locationHint)
        {
            var partyTypeParameter = partyType != null ?
                new ObjectParameter("PartyType", partyType) :
                new ObjectParameter("PartyType", typeof(string));
    
            var partyIDParameter = partyID.HasValue ?
                new ObjectParameter("PartyID", partyID) :
                new ObjectParameter("PartyID", typeof(int));
    
            var locationHintParameter = locationHint != null ?
                new ObjectParameter("LocationHint", locationHint) :
                new ObjectParameter("LocationHint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetShippingAddress_Result>("SpGetShippingAddress", partyTypeParameter, partyIDParameter, locationHintParameter);
        }
    
        public virtual ObjectResult<SpGetCalculatedIncentives_Result> SpGetCalculatedIncentives(Nullable<int> durationID, Nullable<int> timePeriodID, string partyType, Nullable<int> finYear, Nullable<int> applicationID)
        {
            var durationIDParameter = durationID.HasValue ?
                new ObjectParameter("DurationID", durationID) :
                new ObjectParameter("DurationID", typeof(int));
    
            var timePeriodIDParameter = timePeriodID.HasValue ?
                new ObjectParameter("TimePeriodID", timePeriodID) :
                new ObjectParameter("TimePeriodID", typeof(int));
    
            var partyTypeParameter = partyType != null ?
                new ObjectParameter("PartyType", partyType) :
                new ObjectParameter("PartyType", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCalculatedIncentives_Result>("SpGetCalculatedIncentives", durationIDParameter, timePeriodIDParameter, partyTypeParameter, finYearParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetDurationList_Result> SpGetDurationList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDurationList_Result>("SpGetDurationList");
        }
    
        public virtual ObjectResult<SpGetItemsWithPackSizeByProductionGroupID_Result> SpGetItemsWithPackSizeByProductionGroupID(Nullable<int> productionGroupID, Nullable<int> applicationID)
        {
            var productionGroupIDParameter = productionGroupID.HasValue ?
                new ObjectParameter("ProductionGroupID", productionGroupID) :
                new ObjectParameter("ProductionGroupID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetItemsWithPackSizeByProductionGroupID_Result>("SpGetItemsWithPackSizeByProductionGroupID", productionGroupIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetProductionGroupListForReport_Result> SpGetProductionGroupListForReport(string codeHint, string nameHint, string categoryHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var categoryHintParameter = categoryHint != null ?
                new ObjectParameter("CategoryHint", categoryHint) :
                new ObjectParameter("CategoryHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetProductionGroupListForReport_Result>("SpGetProductionGroupListForReport", codeHintParameter, nameHintParameter, categoryHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetTimePeriodList_Result> SpGetTimePeriodList(Nullable<int> durationID)
        {
            var durationIDParameter = durationID.HasValue ?
                new ObjectParameter("DurationID", durationID) :
                new ObjectParameter("DurationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetTimePeriodList_Result>("SpGetTimePeriodList", durationIDParameter);
        }
    
        public virtual ObjectResult<SpGetAccountHeadName_Result> SpGetAccountHeadName(string accountNameHint, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var accountNameHintParameter = accountNameHint != null ?
                new ObjectParameter("AccountNameHint", accountNameHint) :
                new ObjectParameter("AccountNameHint", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAccountHeadName_Result>("SpGetAccountHeadName", accountNameHintParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetFSODetails_Result> SpGetFSODetails(Nullable<int> iD, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetFSODetails_Result>("SpGetFSODetails", iDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetFSOManagersList_Result> SpGetFSOManagersList(string codeHint, string nameHint, string designationHint, string routeNameHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var designationHintParameter = designationHint != null ?
                new ObjectParameter("DesignationHint", designationHint) :
                new ObjectParameter("DesignationHint", typeof(string));
    
            var routeNameHintParameter = routeNameHint != null ?
                new ObjectParameter("RouteNameHint", routeNameHint) :
                new ObjectParameter("RouteNameHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetFSOManagersList_Result>("SpGetFSOManagersList", codeHintParameter, nameHintParameter, designationHintParameter, routeNameHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SPGetTreatmentGroupList_Result> SPGetTreatmentGroupList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetTreatmentGroupList_Result>("SPGetTreatmentGroupList");
        }
    
        public virtual int SpCreateDiagnosis(string name, string description, Nullable<int> createdUserID, Nullable<int> applicationID)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateDiagnosis", nameParameter, descriptionParameter, createdUserIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetDiagnosisList_Result> SpGetDiagnosisList(string nameHint, string descriptionHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var descriptionHintParameter = descriptionHint != null ?
                new ObjectParameter("DescriptionHint", descriptionHint) :
                new ObjectParameter("DescriptionHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDiagnosisList_Result>("SpGetDiagnosisList", nameHintParameter, descriptionHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetDiagnosisByID_Result> SpGetDiagnosisByID(Nullable<int> iD, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDiagnosisByID_Result>("SpGetDiagnosisByID", iDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateDiagnosis(Nullable<int> iD, string name, string description, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateDiagnosis", iDParameter, nameParameter, descriptionParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateTreatment(string treatmentCode, string treatmentName, Nullable<int> treatmentGroupID, Nullable<System.DateTime> addedDate, string description, Nullable<int> createdUserID, Nullable<int> applicationID)
        {
            var treatmentCodeParameter = treatmentCode != null ?
                new ObjectParameter("TreatmentCode", treatmentCode) :
                new ObjectParameter("TreatmentCode", typeof(string));
    
            var treatmentNameParameter = treatmentName != null ?
                new ObjectParameter("TreatmentName", treatmentName) :
                new ObjectParameter("TreatmentName", typeof(string));
    
            var treatmentGroupIDParameter = treatmentGroupID.HasValue ?
                new ObjectParameter("TreatmentGroupID", treatmentGroupID) :
                new ObjectParameter("TreatmentGroupID", typeof(int));
    
            var addedDateParameter = addedDate.HasValue ?
                new ObjectParameter("AddedDate", addedDate) :
                new ObjectParameter("AddedDate", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateTreatment", treatmentCodeParameter, treatmentNameParameter, treatmentGroupIDParameter, addedDateParameter, descriptionParameter, createdUserIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateTreatmentRoom(string name, string remark, Nullable<int> createdUserID, Nullable<int> applicationID)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateTreatmentRoom", nameParameter, remarkParameter, createdUserIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateTreatmentRoom(Nullable<int> iD, string name, string remarks, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateTreatmentRoom", iDParameter, nameParameter, remarksParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetTreatmentRoomList_Result> SpGetTreatmentRoomList(string nameHint, string remarkHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var remarkHintParameter = remarkHint != null ?
                new ObjectParameter("RemarkHint", remarkHint) :
                new ObjectParameter("RemarkHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetTreatmentRoomList_Result>("SpGetTreatmentRoomList", nameHintParameter, remarkHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetTreatmentRoomByID_Result> SpGetTreatmentRoomByID(Nullable<int> iD, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetTreatmentRoomByID_Result>("SpGetTreatmentRoomByID", iDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreatePrescriptionFormat(Nullable<int> medicineCategoryID, Nullable<int> createdUserID, Nullable<int> applicationID, ObjectParameter transID)
        {
            var medicineCategoryIDParameter = medicineCategoryID.HasValue ?
                new ObjectParameter("MedicineCategoryID", medicineCategoryID) :
                new ObjectParameter("MedicineCategoryID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePrescriptionFormat", medicineCategoryIDParameter, createdUserIDParameter, applicationIDParameter, transID);
        }
    
        public virtual int SpCreatePrescriptionFormatTrans(Nullable<int> transID, string name, Nullable<int> createdUserID, Nullable<int> applicationID)
        {
            var transIDParameter = transID.HasValue ?
                new ObjectParameter("TransID", transID) :
                new ObjectParameter("TransID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePrescriptionFormatTrans", transIDParameter, nameParameter, createdUserIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetItemCategories_Result> SpGetItemCategories(string type)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetItemCategories_Result>("SpGetItemCategories", typeParameter);
        }
    
        public virtual ObjectResult<SPGetMedicineCategoryGroupList_Result> SPGetMedicineCategoryGroupList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetMedicineCategoryGroupList_Result>("SPGetMedicineCategoryGroupList");
        }
    
        public virtual ObjectResult<SpGetRawMaterialList_Result> SpGetRawMaterialList(Nullable<int> warehouseID, string codeHint, string nameHint, string categoryHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var categoryHintParameter = categoryHint != null ?
                new ObjectParameter("CategoryHint", categoryHint) :
                new ObjectParameter("CategoryHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetRawMaterialList_Result>("SpGetRawMaterialList", warehouseIDParameter, codeHintParameter, nameHintParameter, categoryHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetTreatmentDetails_Result> SpGetTreatmentDetails(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetTreatmentDetails_Result>("SpGetTreatmentDetails", iDParameter);
        }
    
        public virtual int SpUpdateTreatment(Nullable<int> iD, string code, string name, Nullable<int> treatmentGroupID, Nullable<System.DateTime> addedDate, string description, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var treatmentGroupIDParameter = treatmentGroupID.HasValue ?
                new ObjectParameter("TreatmentGroupID", treatmentGroupID) :
                new ObjectParameter("TreatmentGroupID", typeof(int));
    
            var addedDateParameter = addedDate.HasValue ?
                new ObjectParameter("AddedDate", addedDate) :
                new ObjectParameter("AddedDate", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateTreatment", iDParameter, codeParameter, nameParameter, treatmentGroupIDParameter, addedDateParameter, descriptionParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPrescriptionFormatList_Result> SpGetPrescriptionFormatList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPrescriptionFormatList_Result>("SpGetPrescriptionFormatList");
        }
    
        public virtual int SpSaveBatch(Nullable<int> itemID, string batchNo, string customBatchNo, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> expiryDate, Nullable<decimal> iSKPrice, Nullable<decimal> oSKPrice, Nullable<decimal> exportPrice, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter isExist)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchNoParameter = batchNo != null ?
                new ObjectParameter("BatchNo", batchNo) :
                new ObjectParameter("BatchNo", typeof(string));
    
            var customBatchNoParameter = customBatchNo != null ?
                new ObjectParameter("CustomBatchNo", customBatchNo) :
                new ObjectParameter("CustomBatchNo", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var iSKPriceParameter = iSKPrice.HasValue ?
                new ObjectParameter("ISKPrice", iSKPrice) :
                new ObjectParameter("ISKPrice", typeof(decimal));
    
            var oSKPriceParameter = oSKPrice.HasValue ?
                new ObjectParameter("OSKPrice", oSKPrice) :
                new ObjectParameter("OSKPrice", typeof(decimal));
    
            var exportPriceParameter = exportPrice.HasValue ?
                new ObjectParameter("ExportPrice", exportPrice) :
                new ObjectParameter("ExportPrice", typeof(decimal));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpSaveBatch", itemIDParameter, batchNoParameter, customBatchNoParameter, createdDateParameter, expiryDateParameter, iSKPriceParameter, oSKPriceParameter, exportPriceParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter, isExist);
        }
    
        public virtual ObjectResult<SpGetItemListForTreatment_Result> SpGetItemListForTreatment(string codeHint, string nameHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetItemListForTreatment_Result>("SpGetItemListForTreatment", codeHintParameter, nameHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCostCategory_Result> SpGetCostCategory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCostCategory_Result>("SpGetCostCategory");
        }
    
        public virtual ObjectResult<SPGetOccupationList_Result> SPGetOccupationList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetOccupationList_Result>("SPGetOccupationList");
        }
    
        public virtual ObjectResult<SpGetTestForItemList_Result> SpGetTestForItemList(Nullable<int> itemID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetTestForItemList_Result>("SpGetTestForItemList", itemIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPrescriptionFormatDetails_Result> SpGetPrescriptionFormatDetails(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPrescriptionFormatDetails_Result>("SpGetPrescriptionFormatDetails", iDParameter);
        }
    
        public virtual ObjectResult<SpGetPrescriptionFormatItemList_Result> SpGetPrescriptionFormatItemList(Nullable<int> iD, Nullable<int> finYear, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPrescriptionFormatItemList_Result>("SpGetPrescriptionFormatItemList", iDParameter, finYearParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPrescriptionFormat_Result> SpGetPrescriptionFormat(Nullable<int> categoryID)
        {
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPrescriptionFormat_Result>("SpGetPrescriptionFormat", categoryIDParameter);
        }
    
        public virtual int SPGetEmployeeCategoryID(string name, ObjectParameter categoryID)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPGetEmployeeCategoryID", nameParameter, categoryID);
        }
    
        public virtual int SpCreateRoom(string code, Nullable<int> roomTypeID, string roomName, Nullable<decimal> rate, string description, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> storeID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var roomTypeIDParameter = roomTypeID.HasValue ?
                new ObjectParameter("RoomTypeID", roomTypeID) :
                new ObjectParameter("RoomTypeID", typeof(int));
    
            var roomNameParameter = roomName != null ?
                new ObjectParameter("RoomName", roomName) :
                new ObjectParameter("RoomName", typeof(string));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateRoom", codeParameter, roomTypeIDParameter, roomNameParameter, rateParameter, descriptionParameter, startDateParameter, endDateParameter, storeIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetRoomList_Result> SpGetRoomList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetRoomList_Result>("SpGetRoomList");
        }
    
        public virtual ObjectResult<SPGetRoomTypeList_Result> SPGetRoomTypeList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetRoomTypeList_Result>("SPGetRoomTypeList");
        }
    
        public virtual int SpUpdateRoom(Nullable<int> iD, string code, Nullable<int> roomTypeID, string roomName, Nullable<decimal> rate, string description, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> storeID, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var roomTypeIDParameter = roomTypeID.HasValue ?
                new ObjectParameter("RoomTypeID", roomTypeID) :
                new ObjectParameter("RoomTypeID", typeof(int));
    
            var roomNameParameter = roomName != null ?
                new ObjectParameter("RoomName", roomName) :
                new ObjectParameter("RoomName", typeof(string));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateRoom", iDParameter, codeParameter, roomTypeIDParameter, roomNameParameter, rateParameter, descriptionParameter, startDateParameter, endDateParameter, storeIDParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetEmployeeDoctorList_Result> SpGetEmployeeDoctorList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetEmployeeDoctorList_Result>("SpGetEmployeeDoctorList");
        }
    
        public virtual ObjectResult<SpGetPatientAutoComplete_Result> SpGetPatientAutoComplete(string codeHint, string nameHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPatientAutoComplete_Result>("SpGetPatientAutoComplete", codeHintParameter, nameHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SPGetModeOfAdministrationList_Result> SPGetModeOfAdministrationList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetModeOfAdministrationList_Result>("SPGetModeOfAdministrationList");
        }
    
        public virtual int SpDeleteItemLocation(Nullable<int> itemID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpDeleteItemLocation", itemIDParameter);
        }
    
        public virtual ObjectResult<SpGetAllTreatmentRoomList_Result> SpGetAllTreatmentRoomList(string hint, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var hintParameter = hint != null ?
                new ObjectParameter("Hint", hint) :
                new ObjectParameter("Hint", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAllTreatmentRoomList_Result>("SpGetAllTreatmentRoomList", hintParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetDepartmentID_Result> SpGetDepartmentID()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDepartmentID_Result>("SpGetDepartmentID");
        }
    
        public virtual ObjectResult<SpGetItemLocation_Result> SpGetItemLocation(Nullable<int> itemID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetItemLocation_Result>("SpGetItemLocation", itemIDParameter);
        }
    
        public virtual ObjectResult<SpGetRoomDetails_Result> SpGetRoomDetails(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetRoomDetails_Result>("SpGetRoomDetails", iDParameter);
        }
    
        public virtual ObjectResult<SpGetAllTherapistList_Result> SpGetAllTherapistList(string hint, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var hintParameter = hint != null ?
                new ObjectParameter("Hint", hint) :
                new ObjectParameter("Hint", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAllTherapistList_Result>("SpGetAllTherapistList", hintParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetNursingStationList_Result> SpGetNursingStationList(string hint, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var hintParameter = hint != null ?
                new ObjectParameter("Hint", hint) :
                new ObjectParameter("Hint", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetNursingStationList_Result>("SpGetNursingStationList", hintParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPriceListTransDetails_Result> SpGetPriceListTransDetails(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPriceListTransDetails_Result>("SpGetPriceListTransDetails", idParameter);
        }
    
        public virtual ObjectResult<SpGetTreatmentList_Result> SpGetTreatmentList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetTreatmentList_Result>("SpGetTreatmentList");
        }
    
        public virtual int SpCreateXray(string code, string name, Nullable<System.DateTime> date, string description, Nullable<int> categoryID, Nullable<int> purchaseCategoryID, Nullable<int> qCCategoryID, Nullable<int> gSTSubCategoryID, Nullable<int> salesCategoryID, Nullable<int> salesIncentiveCategoryID, Nullable<int> storageCategoryID, Nullable<int> itemTypeID, Nullable<int> accountsCategoryID, Nullable<int> businessCategoryID, Nullable<int> itemUnitID, Nullable<int> createdUserID, Nullable<int> applicationID)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var purchaseCategoryIDParameter = purchaseCategoryID.HasValue ?
                new ObjectParameter("PurchaseCategoryID", purchaseCategoryID) :
                new ObjectParameter("PurchaseCategoryID", typeof(int));
    
            var qCCategoryIDParameter = qCCategoryID.HasValue ?
                new ObjectParameter("QCCategoryID", qCCategoryID) :
                new ObjectParameter("QCCategoryID", typeof(int));
    
            var gSTSubCategoryIDParameter = gSTSubCategoryID.HasValue ?
                new ObjectParameter("GSTSubCategoryID", gSTSubCategoryID) :
                new ObjectParameter("GSTSubCategoryID", typeof(int));
    
            var salesCategoryIDParameter = salesCategoryID.HasValue ?
                new ObjectParameter("SalesCategoryID", salesCategoryID) :
                new ObjectParameter("SalesCategoryID", typeof(int));
    
            var salesIncentiveCategoryIDParameter = salesIncentiveCategoryID.HasValue ?
                new ObjectParameter("SalesIncentiveCategoryID", salesIncentiveCategoryID) :
                new ObjectParameter("SalesIncentiveCategoryID", typeof(int));
    
            var storageCategoryIDParameter = storageCategoryID.HasValue ?
                new ObjectParameter("StorageCategoryID", storageCategoryID) :
                new ObjectParameter("StorageCategoryID", typeof(int));
    
            var itemTypeIDParameter = itemTypeID.HasValue ?
                new ObjectParameter("ItemTypeID", itemTypeID) :
                new ObjectParameter("ItemTypeID", typeof(int));
    
            var accountsCategoryIDParameter = accountsCategoryID.HasValue ?
                new ObjectParameter("AccountsCategoryID", accountsCategoryID) :
                new ObjectParameter("AccountsCategoryID", typeof(int));
    
            var businessCategoryIDParameter = businessCategoryID.HasValue ?
                new ObjectParameter("BusinessCategoryID", businessCategoryID) :
                new ObjectParameter("BusinessCategoryID", typeof(int));
    
            var itemUnitIDParameter = itemUnitID.HasValue ?
                new ObjectParameter("ItemUnitID", itemUnitID) :
                new ObjectParameter("ItemUnitID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateXray", codeParameter, nameParameter, dateParameter, descriptionParameter, categoryIDParameter, purchaseCategoryIDParameter, qCCategoryIDParameter, gSTSubCategoryIDParameter, salesCategoryIDParameter, salesIncentiveCategoryIDParameter, storageCategoryIDParameter, itemTypeIDParameter, accountsCategoryIDParameter, businessCategoryIDParameter, itemUnitIDParameter, createdUserIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetAllServiceItems_Result> SpGetAllServiceItems(Nullable<int> itemCategoryID, string codeHint, string nameHint, string itemCategoryHint, string salesCategoryHint, string accountsCategoryHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var itemCategoryHintParameter = itemCategoryHint != null ?
                new ObjectParameter("ItemCategoryHint", itemCategoryHint) :
                new ObjectParameter("ItemCategoryHint", typeof(string));
    
            var salesCategoryHintParameter = salesCategoryHint != null ?
                new ObjectParameter("SalesCategoryHint", salesCategoryHint) :
                new ObjectParameter("SalesCategoryHint", typeof(string));
    
            var accountsCategoryHintParameter = accountsCategoryHint != null ?
                new ObjectParameter("AccountsCategoryHint", accountsCategoryHint) :
                new ObjectParameter("AccountsCategoryHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAllServiceItems_Result>("SpGetAllServiceItems", itemCategoryIDParameter, codeHintParameter, nameHintParameter, itemCategoryHintParameter, salesCategoryHintParameter, accountsCategoryHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetLaboratoryTestDetails_Result> SpGetLaboratoryTestDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetLaboratoryTestDetails_Result>("SpGetLaboratoryTestDetails");
        }
    
        public virtual ObjectResult<SpGetLaboratoryTestList_Result> SpGetLaboratoryTestList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetLaboratoryTestList_Result>("SpGetLaboratoryTestList");
        }
    
        public virtual ObjectResult<SpGetXrayCategory_Result> SpGetXrayCategory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetXrayCategory_Result>("SpGetXrayCategory");
        }
    
        public virtual ObjectResult<SpGetXrayDetailsByID_Result> SpGetXrayDetailsByID(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetXrayDetailsByID_Result>("SpGetXrayDetailsByID", iDParameter);
        }
    
        public virtual ObjectResult<SpGetXrayTestList_Result> SpGetXrayTestList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetXrayTestList_Result>("SpGetXrayTestList");
        }
    
        public virtual int SpUpdateXray(Nullable<int> iD, string code, string name, Nullable<System.DateTime> date, string description, Nullable<int> createdUserID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateXray", iDParameter, codeParameter, nameParameter, dateParameter, descriptionParameter, createdUserIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreatePhysiotherapy(string code, string name, Nullable<System.DateTime> date, string description, Nullable<int> categoryID, Nullable<int> purchaseCategoryID, Nullable<int> qCCategoryID, Nullable<int> gSTSubCategoryID, Nullable<int> salesCategoryID, Nullable<int> salesIncentiveCategoryID, Nullable<int> storageCategoryID, Nullable<int> itemTypeID, Nullable<int> accountsCategoryID, Nullable<int> businessCategoryID, Nullable<int> itemUnitID, Nullable<int> createdUserID, Nullable<int> applicationID)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var purchaseCategoryIDParameter = purchaseCategoryID.HasValue ?
                new ObjectParameter("PurchaseCategoryID", purchaseCategoryID) :
                new ObjectParameter("PurchaseCategoryID", typeof(int));
    
            var qCCategoryIDParameter = qCCategoryID.HasValue ?
                new ObjectParameter("QCCategoryID", qCCategoryID) :
                new ObjectParameter("QCCategoryID", typeof(int));
    
            var gSTSubCategoryIDParameter = gSTSubCategoryID.HasValue ?
                new ObjectParameter("GSTSubCategoryID", gSTSubCategoryID) :
                new ObjectParameter("GSTSubCategoryID", typeof(int));
    
            var salesCategoryIDParameter = salesCategoryID.HasValue ?
                new ObjectParameter("SalesCategoryID", salesCategoryID) :
                new ObjectParameter("SalesCategoryID", typeof(int));
    
            var salesIncentiveCategoryIDParameter = salesIncentiveCategoryID.HasValue ?
                new ObjectParameter("SalesIncentiveCategoryID", salesIncentiveCategoryID) :
                new ObjectParameter("SalesIncentiveCategoryID", typeof(int));
    
            var storageCategoryIDParameter = storageCategoryID.HasValue ?
                new ObjectParameter("StorageCategoryID", storageCategoryID) :
                new ObjectParameter("StorageCategoryID", typeof(int));
    
            var itemTypeIDParameter = itemTypeID.HasValue ?
                new ObjectParameter("ItemTypeID", itemTypeID) :
                new ObjectParameter("ItemTypeID", typeof(int));
    
            var accountsCategoryIDParameter = accountsCategoryID.HasValue ?
                new ObjectParameter("AccountsCategoryID", accountsCategoryID) :
                new ObjectParameter("AccountsCategoryID", typeof(int));
    
            var businessCategoryIDParameter = businessCategoryID.HasValue ?
                new ObjectParameter("BusinessCategoryID", businessCategoryID) :
                new ObjectParameter("BusinessCategoryID", typeof(int));
    
            var itemUnitIDParameter = itemUnitID.HasValue ?
                new ObjectParameter("ItemUnitID", itemUnitID) :
                new ObjectParameter("ItemUnitID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePhysiotherapy", codeParameter, nameParameter, dateParameter, descriptionParameter, categoryIDParameter, purchaseCategoryIDParameter, qCCategoryIDParameter, gSTSubCategoryIDParameter, salesCategoryIDParameter, salesIncentiveCategoryIDParameter, storageCategoryIDParameter, itemTypeIDParameter, accountsCategoryIDParameter, businessCategoryIDParameter, itemUnitIDParameter, createdUserIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetAllCategory_Result> SpGetAllCategory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAllCategory_Result>("SpGetAllCategory");
        }
    
        public virtual ObjectResult<SpGetPhysiotherapyCategory_Result> SpGetPhysiotherapyCategory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPhysiotherapyCategory_Result>("SpGetPhysiotherapyCategory");
        }
    
        public virtual ObjectResult<SpGetPhysiotherapyDetailsByID_Result> SpGetPhysiotherapyDetailsByID(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPhysiotherapyDetailsByID_Result>("SpGetPhysiotherapyDetailsByID", iDParameter);
        }
    
        public virtual ObjectResult<SpGetPhysiotherapyList_Result> SpGetPhysiotherapyList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPhysiotherapyList_Result>("SpGetPhysiotherapyList");
        }
    
        public virtual ObjectResult<SpGetServiceItemCategory_Result> SpGetServiceItemCategory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetServiceItemCategory_Result>("SpGetServiceItemCategory");
        }
    
        public virtual int SpUpdatePhysiotherapy(Nullable<int> iD, string code, string name, Nullable<System.DateTime> date, string description, Nullable<int> createdUserID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdatePhysiotherapy", iDParameter, codeParameter, nameParameter, dateParameter, descriptionParameter, createdUserIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateGenericName(string name, string code, string description, Nullable<int> applicationID)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateGenericName", nameParameter, codeParameter, descriptionParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateManufacturer(string code, string name, string addressLine1, string addressLine2, Nullable<int> stateID, string place, string phone, string description, Nullable<int> applicationID)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var addressLine1Parameter = addressLine1 != null ?
                new ObjectParameter("AddressLine1", addressLine1) :
                new ObjectParameter("AddressLine1", typeof(string));
    
            var addressLine2Parameter = addressLine2 != null ?
                new ObjectParameter("AddressLine2", addressLine2) :
                new ObjectParameter("AddressLine2", typeof(string));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var placeParameter = place != null ?
                new ObjectParameter("Place", place) :
                new ObjectParameter("Place", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateManufacturer", codeParameter, nameParameter, addressLine1Parameter, addressLine2Parameter, stateIDParameter, placeParameter, phoneParameter, descriptionParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetDescription_Result> SpGetDescription(string type, Nullable<int> itemID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDescription_Result>("SpGetDescription", typeParameter, itemIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetGenericNameDetails_Result> SpGetGenericNameDetails(Nullable<int> iD, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetGenericNameDetails_Result>("SpGetGenericNameDetails", iDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetGenericNameList_Result> SpGetGenericNameList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetGenericNameList_Result>("SpGetGenericNameList");
        }
    
        public virtual ObjectResult<SpGetManufacturerDetails_Result> SpGetManufacturerDetails(Nullable<int> iD, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetManufacturerDetails_Result>("SpGetManufacturerDetails", iDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetManufacturerList_Result> SpGetManufacturerList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetManufacturerList_Result>("SpGetManufacturerList");
        }
    
        public virtual ObjectResult<SpGetMonthList_Result> SpGetMonthList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetMonthList_Result>("SpGetMonthList");
        }
    
        public virtual ObjectResult<SpGetSupplierDescription_Result> SpGetSupplierDescription(string type, Nullable<int> supplierID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSupplierDescription_Result>("SpGetSupplierDescription", typeParameter, supplierIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SPGetUnitsList_Result> SPGetUnitsList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetUnitsList_Result>("SPGetUnitsList");
        }
    
        public virtual int SpUpdateGenericName(Nullable<int> iD, string name, string code, string description)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateGenericName", iDParameter, nameParameter, codeParameter, descriptionParameter);
        }
    
        public virtual int SpUpdateManufacturer(Nullable<int> iD, string code, string name, string addressLine1, string addressLine2, Nullable<int> stateID, string place, string phone, string description, Nullable<int> createdUserID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var addressLine1Parameter = addressLine1 != null ?
                new ObjectParameter("AddressLine1", addressLine1) :
                new ObjectParameter("AddressLine1", typeof(string));
    
            var addressLine2Parameter = addressLine2 != null ?
                new ObjectParameter("AddressLine2", addressLine2) :
                new ObjectParameter("AddressLine2", typeof(string));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var placeParameter = place != null ?
                new ObjectParameter("Place", place) :
                new ObjectParameter("Place", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateManufacturer", iDParameter, codeParameter, nameParameter, addressLine1Parameter, addressLine2Parameter, stateIDParameter, placeParameter, phoneParameter, descriptionParameter, createdUserIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetDiscountCategoryLists_Result> SpGetDiscountCategoryLists()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDiscountCategoryLists_Result>("SpGetDiscountCategoryLists");
        }
    
        public virtual ObjectResult<SpGetSupplierForLabTest_Result> SpGetSupplierForLabTest()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSupplierForLabTest_Result>("SpGetSupplierForLabTest");
        }
    
        public virtual int SpCreateNewBatch(Nullable<int> itemID, string batchNo, string customBatchNo, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> expiryDate, Nullable<decimal> iSKPrice, Nullable<decimal> oSKPrice, Nullable<decimal> exportPrice, Nullable<decimal> retailMRP, Nullable<decimal> retailLooseRate, Nullable<decimal> purchaseMRP, Nullable<decimal> purchaseLooseRate, Nullable<decimal> profitPrice, Nullable<int> unitID, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter isExist, ObjectParameter batchID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchNoParameter = batchNo != null ?
                new ObjectParameter("BatchNo", batchNo) :
                new ObjectParameter("BatchNo", typeof(string));
    
            var customBatchNoParameter = customBatchNo != null ?
                new ObjectParameter("CustomBatchNo", customBatchNo) :
                new ObjectParameter("CustomBatchNo", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var iSKPriceParameter = iSKPrice.HasValue ?
                new ObjectParameter("ISKPrice", iSKPrice) :
                new ObjectParameter("ISKPrice", typeof(decimal));
    
            var oSKPriceParameter = oSKPrice.HasValue ?
                new ObjectParameter("OSKPrice", oSKPrice) :
                new ObjectParameter("OSKPrice", typeof(decimal));
    
            var exportPriceParameter = exportPrice.HasValue ?
                new ObjectParameter("ExportPrice", exportPrice) :
                new ObjectParameter("ExportPrice", typeof(decimal));
    
            var retailMRPParameter = retailMRP.HasValue ?
                new ObjectParameter("RetailMRP", retailMRP) :
                new ObjectParameter("RetailMRP", typeof(decimal));
    
            var retailLooseRateParameter = retailLooseRate.HasValue ?
                new ObjectParameter("RetailLooseRate", retailLooseRate) :
                new ObjectParameter("RetailLooseRate", typeof(decimal));
    
            var purchaseMRPParameter = purchaseMRP.HasValue ?
                new ObjectParameter("PurchaseMRP", purchaseMRP) :
                new ObjectParameter("PurchaseMRP", typeof(decimal));
    
            var purchaseLooseRateParameter = purchaseLooseRate.HasValue ?
                new ObjectParameter("PurchaseLooseRate", purchaseLooseRate) :
                new ObjectParameter("PurchaseLooseRate", typeof(decimal));
    
            var profitPriceParameter = profitPrice.HasValue ?
                new ObjectParameter("ProfitPrice", profitPrice) :
                new ObjectParameter("ProfitPrice", typeof(decimal));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateNewBatch", itemIDParameter, batchNoParameter, customBatchNoParameter, createdDateParameter, expiryDateParameter, iSKPriceParameter, oSKPriceParameter, exportPriceParameter, retailMRPParameter, retailLooseRateParameter, purchaseMRPParameter, purchaseLooseRateParameter, profitPriceParameter, unitIDParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter, isExist, batchID);
        }
    
        public virtual int SPCreateUnit(string name, Nullable<int> qOM, string uOM, Nullable<int> cF, Nullable<decimal> packSize, Nullable<int> createdUserID, Nullable<System.DateTime> createdDate, ObjectParameter returnValue)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var qOMParameter = qOM.HasValue ?
                new ObjectParameter("QOM", qOM) :
                new ObjectParameter("QOM", typeof(int));
    
            var uOMParameter = uOM != null ?
                new ObjectParameter("UOM", uOM) :
                new ObjectParameter("UOM", typeof(string));
    
            var cFParameter = cF.HasValue ?
                new ObjectParameter("CF", cF) :
                new ObjectParameter("CF", typeof(int));
    
            var packSizeParameter = packSize.HasValue ?
                new ObjectParameter("PackSize", packSize) :
                new ObjectParameter("PackSize", typeof(decimal));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPCreateUnit", nameParameter, qOMParameter, uOMParameter, cFParameter, packSizeParameter, createdUserIDParameter, createdDateParameter, returnValue);
        }
    
        public virtual ObjectResult<SpGetUnit_Result> SpGetUnit(Nullable<int> unitID)
        {
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetUnit_Result>("SpGetUnit", unitIDParameter);
        }
    
        public virtual int SpUpdateUnit(Nullable<int> unitID, string unitName, Nullable<int> qOM, string uOM, Nullable<int> cF, Nullable<decimal> packSize, Nullable<int> createdUserId, Nullable<System.DateTime> createdDate, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var unitNameParameter = unitName != null ?
                new ObjectParameter("UnitName", unitName) :
                new ObjectParameter("UnitName", typeof(string));
    
            var qOMParameter = qOM.HasValue ?
                new ObjectParameter("QOM", qOM) :
                new ObjectParameter("QOM", typeof(int));
    
            var uOMParameter = uOM != null ?
                new ObjectParameter("UOM", uOM) :
                new ObjectParameter("UOM", typeof(string));
    
            var cFParameter = cF.HasValue ?
                new ObjectParameter("CF", cF) :
                new ObjectParameter("CF", typeof(int));
    
            var packSizeParameter = packSize.HasValue ?
                new ObjectParameter("PackSize", packSize) :
                new ObjectParameter("PackSize", typeof(decimal));
    
            var createdUserIdParameter = createdUserId.HasValue ?
                new ObjectParameter("CreatedUserId", createdUserId) :
                new ObjectParameter("CreatedUserId", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateUnit", unitIDParameter, unitNameParameter, qOMParameter, uOMParameter, cFParameter, packSizeParameter, createdUserIdParameter, createdDateParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetLatestBatchDetails_Result> SpGetLatestBatchDetails(Nullable<int> itemID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetLatestBatchDetails_Result>("SpGetLatestBatchDetails", itemIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateBatchDetails(Nullable<int> iD, Nullable<int> itemID, Nullable<System.DateTime> expiryDate, Nullable<decimal> iSKPrice, Nullable<decimal> oSKPrice, Nullable<decimal> exportPrice, Nullable<decimal> retailMrp, Nullable<decimal> retailLooseRate, Nullable<decimal> purchaseMRP, Nullable<decimal> purchaseLooseRate, Nullable<System.DateTime> manufacturingDate, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var iSKPriceParameter = iSKPrice.HasValue ?
                new ObjectParameter("ISKPrice", iSKPrice) :
                new ObjectParameter("ISKPrice", typeof(decimal));
    
            var oSKPriceParameter = oSKPrice.HasValue ?
                new ObjectParameter("OSKPrice", oSKPrice) :
                new ObjectParameter("OSKPrice", typeof(decimal));
    
            var exportPriceParameter = exportPrice.HasValue ?
                new ObjectParameter("ExportPrice", exportPrice) :
                new ObjectParameter("ExportPrice", typeof(decimal));
    
            var retailMrpParameter = retailMrp.HasValue ?
                new ObjectParameter("RetailMrp", retailMrp) :
                new ObjectParameter("RetailMrp", typeof(decimal));
    
            var retailLooseRateParameter = retailLooseRate.HasValue ?
                new ObjectParameter("RetailLooseRate", retailLooseRate) :
                new ObjectParameter("RetailLooseRate", typeof(decimal));
    
            var purchaseMRPParameter = purchaseMRP.HasValue ?
                new ObjectParameter("PurchaseMRP", purchaseMRP) :
                new ObjectParameter("PurchaseMRP", typeof(decimal));
    
            var purchaseLooseRateParameter = purchaseLooseRate.HasValue ?
                new ObjectParameter("PurchaseLooseRate", purchaseLooseRate) :
                new ObjectParameter("PurchaseLooseRate", typeof(decimal));
    
            var manufacturingDateParameter = manufacturingDate.HasValue ?
                new ObjectParameter("ManufacturingDate", manufacturingDate) :
                new ObjectParameter("ManufacturingDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateBatchDetails", iDParameter, itemIDParameter, expiryDateParameter, iSKPriceParameter, oSKPriceParameter, exportPriceParameter, retailMrpParameter, retailLooseRateParameter, purchaseMRPParameter, purchaseLooseRateParameter, manufacturingDateParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int CreateStockAdjustmentSchedle(Nullable<int> itemCount, Nullable<int> noOfDaysToComplete, Nullable<int> frequencyOfItem, Nullable<System.DateTime> morningFrom, Nullable<System.DateTime> morningingTo, Nullable<System.DateTime> eveningFrom, Nullable<System.DateTime> eveningTo, ObjectParameter iD)
        {
            var itemCountParameter = itemCount.HasValue ?
                new ObjectParameter("ItemCount", itemCount) :
                new ObjectParameter("ItemCount", typeof(int));
    
            var noOfDaysToCompleteParameter = noOfDaysToComplete.HasValue ?
                new ObjectParameter("NoOfDaysToComplete", noOfDaysToComplete) :
                new ObjectParameter("NoOfDaysToComplete", typeof(int));
    
            var frequencyOfItemParameter = frequencyOfItem.HasValue ?
                new ObjectParameter("FrequencyOfItem", frequencyOfItem) :
                new ObjectParameter("FrequencyOfItem", typeof(int));
    
            var morningFromParameter = morningFrom.HasValue ?
                new ObjectParameter("MorningFrom", morningFrom) :
                new ObjectParameter("MorningFrom", typeof(System.DateTime));
    
            var morningingToParameter = morningingTo.HasValue ?
                new ObjectParameter("MorningingTo", morningingTo) :
                new ObjectParameter("MorningingTo", typeof(System.DateTime));
    
            var eveningFromParameter = eveningFrom.HasValue ?
                new ObjectParameter("EveningFrom", eveningFrom) :
                new ObjectParameter("EveningFrom", typeof(System.DateTime));
    
            var eveningToParameter = eveningTo.HasValue ?
                new ObjectParameter("EveningTo", eveningTo) :
                new ObjectParameter("EveningTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateStockAdjustmentSchedle", itemCountParameter, noOfDaysToCompleteParameter, frequencyOfItemParameter, morningFromParameter, morningingToParameter, eveningFromParameter, eveningToParameter, iD);
        }
    
        public virtual int GetItemCount(ObjectParameter count)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetItemCount", count);
        }
    
        public virtual ObjectResult<GetStockAdjustmentSchedle_Result> GetStockAdjustmentSchedle(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStockAdjustmentSchedle_Result>("GetStockAdjustmentSchedle", iDParameter);
        }
    
        public virtual ObjectResult<GetStockAdjustmentSchedleList_Result> GetStockAdjustmentSchedleList(string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit)
        {
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStockAdjustmentSchedleList_Result>("GetStockAdjustmentSchedleList", sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter);
        }
    
        public virtual int SpCreateStockAdjustmentScheduleExcludedDates(Nullable<int> scheduleID, Nullable<System.DateTime> date)
        {
            var scheduleIDParameter = scheduleID.HasValue ?
                new ObjectParameter("ScheduleID", scheduleID) :
                new ObjectParameter("ScheduleID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateStockAdjustmentScheduleExcludedDates", scheduleIDParameter, dateParameter);
        }
    
        public virtual ObjectResult<SpGetStockAdjustmentScheduleExcludedDates_Result> SpGetStockAdjustmentScheduleExcludedDates(Nullable<int> scheduleID)
        {
            var scheduleIDParameter = scheduleID.HasValue ?
                new ObjectParameter("ScheduleID", scheduleID) :
                new ObjectParameter("ScheduleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetStockAdjustmentScheduleExcludedDates_Result>("SpGetStockAdjustmentScheduleExcludedDates", scheduleIDParameter);
        }
    
        public virtual ObjectResult<SpGettockAdjustmentScheduleExcludedDates_Result> SpGettockAdjustmentScheduleExcludedDates(Nullable<int> scheduleID)
        {
            var scheduleIDParameter = scheduleID.HasValue ?
                new ObjectParameter("ScheduleID", scheduleID) :
                new ObjectParameter("ScheduleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGettockAdjustmentScheduleExcludedDates_Result>("SpGettockAdjustmentScheduleExcludedDates", scheduleIDParameter);
        }
    
        public virtual ObjectResult<SpGetAccountGroupParentList_Result> SpGetAccountGroupParentList(string nameHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAccountGroupParentList_Result>("SpGetAccountGroupParentList", nameHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateAccountGroup(Nullable<int> iD, string code, string accountGroupName, string accountHeadCodePrefix, Nullable<int> parentGroupID, Nullable<bool> isAllowAccountsUnder, Nullable<int> createdUserID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var accountGroupNameParameter = accountGroupName != null ?
                new ObjectParameter("AccountGroupName", accountGroupName) :
                new ObjectParameter("AccountGroupName", typeof(string));
    
            var accountHeadCodePrefixParameter = accountHeadCodePrefix != null ?
                new ObjectParameter("AccountHeadCodePrefix", accountHeadCodePrefix) :
                new ObjectParameter("AccountHeadCodePrefix", typeof(string));
    
            var parentGroupIDParameter = parentGroupID.HasValue ?
                new ObjectParameter("ParentGroupID", parentGroupID) :
                new ObjectParameter("ParentGroupID", typeof(int));
    
            var isAllowAccountsUnderParameter = isAllowAccountsUnder.HasValue ?
                new ObjectParameter("IsAllowAccountsUnder", isAllowAccountsUnder) :
                new ObjectParameter("IsAllowAccountsUnder", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateAccountGroup", iDParameter, codeParameter, accountGroupNameParameter, accountHeadCodePrefixParameter, parentGroupIDParameter, isAllowAccountsUnderParameter, createdUserIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateAccountGroup(string code, string accountGroupName, string accountHeadCodePrefix, Nullable<int> parentGroupID, Nullable<bool> isAllowAccountsUnder, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> applicationID, ObjectParameter accountGroupID)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var accountGroupNameParameter = accountGroupName != null ?
                new ObjectParameter("AccountGroupName", accountGroupName) :
                new ObjectParameter("AccountGroupName", typeof(string));
    
            var accountHeadCodePrefixParameter = accountHeadCodePrefix != null ?
                new ObjectParameter("AccountHeadCodePrefix", accountHeadCodePrefix) :
                new ObjectParameter("AccountHeadCodePrefix", typeof(string));
    
            var parentGroupIDParameter = parentGroupID.HasValue ?
                new ObjectParameter("ParentGroupID", parentGroupID) :
                new ObjectParameter("ParentGroupID", typeof(int));
    
            var isAllowAccountsUnderParameter = isAllowAccountsUnder.HasValue ?
                new ObjectParameter("IsAllowAccountsUnder", isAllowAccountsUnder) :
                new ObjectParameter("IsAllowAccountsUnder", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateAccountGroup", codeParameter, accountGroupNameParameter, accountHeadCodePrefixParameter, parentGroupIDParameter, isAllowAccountsUnderParameter, createdUserIDParameter, finYearParameter, applicationIDParameter, accountGroupID);
        }
    
        public virtual ObjectResult<SpGetAccountGroup_Result> SpGetAccountGroup(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAccountGroup_Result>("SpGetAccountGroup", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetAccountGroupList_Result> SpGetAccountGroupList(string accountName, string parentAccountName, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var parentAccountNameParameter = parentAccountName != null ?
                new ObjectParameter("ParentAccountName", parentAccountName) :
                new ObjectParameter("ParentAccountName", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAccountGroupList_Result>("SpGetAccountGroupList", accountNameParameter, parentAccountNameParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateAccountHeadByType(string type, Nullable<int> iD, Nullable<int> createdUserID, Nullable<int> applicationID, Nullable<int> locationID, Nullable<int> finYear)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateAccountHeadByType", typeParameter, iDParameter, createdUserIDParameter, applicationIDParameter, locationIDParameter, finYearParameter);
        }
    
        public virtual ObjectResult<SpGetAccountID_Result> SpGetAccountID(Nullable<int> iD, Nullable<int> applicationID, Nullable<int> locationID, Nullable<int> finYear)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAccountID_Result>("SpGetAccountID", iDParameter, applicationIDParameter, locationIDParameter, finYearParameter);
        }
    
        public virtual ObjectResult<SpGetAccountLists_Result> SpGetAccountLists(string accountIDHint, string accountName, string groupName, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var accountIDHintParameter = accountIDHint != null ?
                new ObjectParameter("AccountIDHint", accountIDHint) :
                new ObjectParameter("AccountIDHint", typeof(string));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var groupNameParameter = groupName != null ?
                new ObjectParameter("GroupName", groupName) :
                new ObjectParameter("GroupName", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAccountLists_Result>("SpGetAccountLists", accountIDHintParameter, accountNameParameter, groupNameParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetGST_Result> SpGetGST()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetGST_Result>("SpGetGST");
        }
    
        public virtual ObjectResult<SpGetGSTListForPurchaseReturnOrder_Result> SpGetGSTListForPurchaseReturnOrder()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetGSTListForPurchaseReturnOrder_Result>("SpGetGSTListForPurchaseReturnOrder");
        }
    
        public virtual int SpUpdateAccountHead(Nullable<int> iD, string accountName, string accountID, Nullable<int> accountGroupID, Nullable<decimal> openingAmount, string openingType, Nullable<int> createdUserID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var accountIDParameter = accountID != null ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(string));
    
            var accountGroupIDParameter = accountGroupID.HasValue ?
                new ObjectParameter("AccountGroupID", accountGroupID) :
                new ObjectParameter("AccountGroupID", typeof(int));
    
            var openingAmountParameter = openingAmount.HasValue ?
                new ObjectParameter("OpeningAmount", openingAmount) :
                new ObjectParameter("OpeningAmount", typeof(decimal));
    
            var openingTypeParameter = openingType != null ?
                new ObjectParameter("OpeningType", openingType) :
                new ObjectParameter("OpeningType", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateAccountHead", iDParameter, accountNameParameter, accountIDParameter, accountGroupIDParameter, openingAmountParameter, openingTypeParameter, createdUserIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetAccountHeadListForTransaction__Result> SpGetAccountHeadListForTransaction_(string codeHint, string nameHint, string accountGroupHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var accountGroupHintParameter = accountGroupHint != null ?
                new ObjectParameter("AccountGroupHint", accountGroupHint) :
                new ObjectParameter("AccountGroupHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAccountHeadListForTransaction__Result>("SpGetAccountHeadListForTransaction_", codeHintParameter, nameHintParameter, accountGroupHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateAccountHeadByType(string type, Nullable<int> iD, string accountName, Nullable<int> createdUserID, Nullable<int> applicationID, Nullable<int> locationID, Nullable<int> finYear)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateAccountHeadByType", typeParameter, iDParameter, accountNameParameter, createdUserIDParameter, applicationIDParameter, locationIDParameter, finYearParameter);
        }
    
        public virtual int SpInsertScheduleItem(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpInsertScheduleItem", finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetItemListForStockAdjustment_Result> SpGetItemListForStockAdjustment(Nullable<int> itemCategoryID, Nullable<int> salesCategoryID, string codeHint, string nameHint, string unitHint, string itemCategoryHint, string salesCategoryHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var salesCategoryIDParameter = salesCategoryID.HasValue ?
                new ObjectParameter("SalesCategoryID", salesCategoryID) :
                new ObjectParameter("SalesCategoryID", typeof(int));
    
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var unitHintParameter = unitHint != null ?
                new ObjectParameter("UnitHint", unitHint) :
                new ObjectParameter("UnitHint", typeof(string));
    
            var itemCategoryHintParameter = itemCategoryHint != null ?
                new ObjectParameter("ItemCategoryHint", itemCategoryHint) :
                new ObjectParameter("ItemCategoryHint", typeof(string));
    
            var salesCategoryHintParameter = salesCategoryHint != null ?
                new ObjectParameter("SalesCategoryHint", salesCategoryHint) :
                new ObjectParameter("SalesCategoryHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetItemListForStockAdjustment_Result>("SpGetItemListForStockAdjustment", itemCategoryIDParameter, salesCategoryIDParameter, codeHintParameter, nameHintParameter, unitHintParameter, itemCategoryHintParameter, salesCategoryHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int UpdateStockAdjustmentSchedle(Nullable<int> iD, Nullable<int> itemCount, Nullable<int> noOfDaysToComplete, Nullable<int> frequencyOfItem, Nullable<System.DateTime> morningFrom, Nullable<System.DateTime> morningingTo, Nullable<System.DateTime> eveningFrom, Nullable<System.DateTime> eveningTo, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var itemCountParameter = itemCount.HasValue ?
                new ObjectParameter("ItemCount", itemCount) :
                new ObjectParameter("ItemCount", typeof(int));
    
            var noOfDaysToCompleteParameter = noOfDaysToComplete.HasValue ?
                new ObjectParameter("NoOfDaysToComplete", noOfDaysToComplete) :
                new ObjectParameter("NoOfDaysToComplete", typeof(int));
    
            var frequencyOfItemParameter = frequencyOfItem.HasValue ?
                new ObjectParameter("FrequencyOfItem", frequencyOfItem) :
                new ObjectParameter("FrequencyOfItem", typeof(int));
    
            var morningFromParameter = morningFrom.HasValue ?
                new ObjectParameter("MorningFrom", morningFrom) :
                new ObjectParameter("MorningFrom", typeof(System.DateTime));
    
            var morningingToParameter = morningingTo.HasValue ?
                new ObjectParameter("MorningingTo", morningingTo) :
                new ObjectParameter("MorningingTo", typeof(System.DateTime));
    
            var eveningFromParameter = eveningFrom.HasValue ?
                new ObjectParameter("EveningFrom", eveningFrom) :
                new ObjectParameter("EveningFrom", typeof(System.DateTime));
    
            var eveningToParameter = eveningTo.HasValue ?
                new ObjectParameter("EveningTo", eveningTo) :
                new ObjectParameter("EveningTo", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateStockAdjustmentSchedle", iDParameter, itemCountParameter, noOfDaysToCompleteParameter, frequencyOfItemParameter, morningFromParameter, morningingToParameter, eveningFromParameter, eveningToParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetLocationByLocationHead_Result> SpGetLocationByLocationHead(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetLocationByLocationHead_Result>("SpGetLocationByLocationHead", locationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPriviledgeCards_Result> SpGetPriviledgeCards()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPriviledgeCards_Result>("SpGetPriviledgeCards");
        }
    
        public virtual ObjectResult<SpGetPriviledgeCardsByID_Result> SpGetPriviledgeCardsByID(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPriviledgeCardsByID_Result>("SpGetPriviledgeCardsByID", iDParameter);
        }
    
        public virtual ObjectResult<GetPatientDiscountPercentage_Result> GetPatientDiscountPercentage(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPatientDiscountPercentage_Result>("GetPatientDiscountPercentage", iDParameter);
        }
    
        public virtual int SpCreateAccountHead(string accountID, string accountName, Nullable<int> parentID, Nullable<decimal> openingAmount, string openingType, Nullable<int> createdUserID, Nullable<int> applicationID, ObjectParameter iD)
        {
            var accountIDParameter = accountID != null ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(string));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var openingAmountParameter = openingAmount.HasValue ?
                new ObjectParameter("OpeningAmount", openingAmount) :
                new ObjectParameter("OpeningAmount", typeof(decimal));
    
            var openingTypeParameter = openingType != null ?
                new ObjectParameter("OpeningType", openingType) :
                new ObjectParameter("OpeningType", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateAccountHead", accountIDParameter, accountNameParameter, parentIDParameter, openingAmountParameter, openingTypeParameter, createdUserIDParameter, applicationIDParameter, iD);
        }
    
        public virtual ObjectResult<SpGetAccountHeadDetails_Result> SpGetAccountHeadDetails(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAccountHeadDetails_Result>("SpGetAccountHeadDetails", iDParameter);
        }
    
        public virtual ObjectResult<SpGetDoctorsList_Result> SpGetDoctorsList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDoctorsList_Result>("SpGetDoctorsList");
        }
    
        public virtual ObjectResult<SpGetBatchDetailsByBatchNo_Result> SpGetBatchDetailsByBatchNo(string batchNo)
        {
            var batchNoParameter = batchNo != null ?
                new ObjectParameter("BatchNo", batchNo) :
                new ObjectParameter("BatchNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetBatchDetailsByBatchNo_Result>("SpGetBatchDetailsByBatchNo", batchNoParameter);
        }
    
        public virtual ObjectResult<SpGetBatchForGrn_Result> SpGetBatchForGrn(string batchHint, Nullable<int> itemID, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var batchHintParameter = batchHint != null ?
                new ObjectParameter("BatchHint", batchHint) :
                new ObjectParameter("BatchHint", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetBatchForGrn_Result>("SpGetBatchForGrn", batchHintParameter, itemIDParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPreviousBatchDetails_Result> SpGetPreviousBatchDetails(Nullable<int> batchID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPreviousBatchDetails_Result>("SpGetPreviousBatchDetails", batchIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetBatchList_Result> SpGetBatchList(string batchNoHint, string customBatchNoHint, string itemNameHint, string itemCategoryHint, string retailMRPHint, string basePriceHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var batchNoHintParameter = batchNoHint != null ?
                new ObjectParameter("BatchNoHint", batchNoHint) :
                new ObjectParameter("BatchNoHint", typeof(string));
    
            var customBatchNoHintParameter = customBatchNoHint != null ?
                new ObjectParameter("CustomBatchNoHint", customBatchNoHint) :
                new ObjectParameter("CustomBatchNoHint", typeof(string));
    
            var itemNameHintParameter = itemNameHint != null ?
                new ObjectParameter("ItemNameHint", itemNameHint) :
                new ObjectParameter("ItemNameHint", typeof(string));
    
            var itemCategoryHintParameter = itemCategoryHint != null ?
                new ObjectParameter("ItemCategoryHint", itemCategoryHint) :
                new ObjectParameter("ItemCategoryHint", typeof(string));
    
            var retailMRPHintParameter = retailMRPHint != null ?
                new ObjectParameter("RetailMRPHint", retailMRPHint) :
                new ObjectParameter("RetailMRPHint", typeof(string));
    
            var basePriceHintParameter = basePriceHint != null ?
                new ObjectParameter("BasePriceHint", basePriceHint) :
                new ObjectParameter("BasePriceHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetBatchList_Result>("SpGetBatchList", batchNoHintParameter, customBatchNoHintParameter, itemNameHintParameter, itemCategoryHintParameter, retailMRPHintParameter, basePriceHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateBatchInvoices(Nullable<int> iD, Nullable<int> batchID, Nullable<int> unitID, Nullable<decimal> mRP, Nullable<decimal> looseRate, Nullable<decimal> quantity, Nullable<decimal> offerQty, Nullable<decimal> invoiceRate, Nullable<decimal> purchasePrice, Nullable<decimal> purchaseLooseRate, Nullable<decimal> salesRate, Nullable<decimal> looseQty, Nullable<decimal> sGSTAmt, Nullable<decimal> cGSTAmt, Nullable<int> discountID, Nullable<decimal> discountPercent, Nullable<decimal> discountAmount, Nullable<decimal> profitRatio, Nullable<decimal> grossAmount, Nullable<decimal> netAmount, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var mRPParameter = mRP.HasValue ?
                new ObjectParameter("MRP", mRP) :
                new ObjectParameter("MRP", typeof(decimal));
    
            var looseRateParameter = looseRate.HasValue ?
                new ObjectParameter("LooseRate", looseRate) :
                new ObjectParameter("LooseRate", typeof(decimal));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var offerQtyParameter = offerQty.HasValue ?
                new ObjectParameter("OfferQty", offerQty) :
                new ObjectParameter("OfferQty", typeof(decimal));
    
            var invoiceRateParameter = invoiceRate.HasValue ?
                new ObjectParameter("InvoiceRate", invoiceRate) :
                new ObjectParameter("InvoiceRate", typeof(decimal));
    
            var purchasePriceParameter = purchasePrice.HasValue ?
                new ObjectParameter("PurchasePrice", purchasePrice) :
                new ObjectParameter("PurchasePrice", typeof(decimal));
    
            var purchaseLooseRateParameter = purchaseLooseRate.HasValue ?
                new ObjectParameter("PurchaseLooseRate", purchaseLooseRate) :
                new ObjectParameter("PurchaseLooseRate", typeof(decimal));
    
            var salesRateParameter = salesRate.HasValue ?
                new ObjectParameter("SalesRate", salesRate) :
                new ObjectParameter("SalesRate", typeof(decimal));
    
            var looseQtyParameter = looseQty.HasValue ?
                new ObjectParameter("LooseQty", looseQty) :
                new ObjectParameter("LooseQty", typeof(decimal));
    
            var sGSTAmtParameter = sGSTAmt.HasValue ?
                new ObjectParameter("SGSTAmt", sGSTAmt) :
                new ObjectParameter("SGSTAmt", typeof(decimal));
    
            var cGSTAmtParameter = cGSTAmt.HasValue ?
                new ObjectParameter("CGSTAmt", cGSTAmt) :
                new ObjectParameter("CGSTAmt", typeof(decimal));
    
            var discountIDParameter = discountID.HasValue ?
                new ObjectParameter("DiscountID", discountID) :
                new ObjectParameter("DiscountID", typeof(int));
    
            var discountPercentParameter = discountPercent.HasValue ?
                new ObjectParameter("DiscountPercent", discountPercent) :
                new ObjectParameter("DiscountPercent", typeof(decimal));
    
            var discountAmountParameter = discountAmount.HasValue ?
                new ObjectParameter("DiscountAmount", discountAmount) :
                new ObjectParameter("DiscountAmount", typeof(decimal));
    
            var profitRatioParameter = profitRatio.HasValue ?
                new ObjectParameter("ProfitRatio", profitRatio) :
                new ObjectParameter("ProfitRatio", typeof(decimal));
    
            var grossAmountParameter = grossAmount.HasValue ?
                new ObjectParameter("GrossAmount", grossAmount) :
                new ObjectParameter("GrossAmount", typeof(decimal));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateBatchInvoices", iDParameter, batchIDParameter, unitIDParameter, mRPParameter, looseRateParameter, quantityParameter, offerQtyParameter, invoiceRateParameter, purchasePriceParameter, purchaseLooseRateParameter, salesRateParameter, looseQtyParameter, sGSTAmtParameter, cGSTAmtParameter, discountIDParameter, discountPercentParameter, discountAmountParameter, profitRatioParameter, grossAmountParameter, netAmountParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetBatchDetail_Result> SpGetBatchDetail(Nullable<int> iD, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetBatchDetail_Result>("SpGetBatchDetail", iDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetBatchInvoices_Result> SpGetBatchInvoices(string type, Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetBatchInvoices_Result>("SpGetBatchInvoices", typeParameter, iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCustomBatchForGrn_Result> SpGetCustomBatchForGrn(string batchHint, Nullable<int> itemID, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var batchHintParameter = batchHint != null ?
                new ObjectParameter("BatchHint", batchHint) :
                new ObjectParameter("BatchHint", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCustomBatchForGrn_Result>("SpGetCustomBatchForGrn", batchHintParameter, itemIDParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetStockIssueItemDetailsByQRCodeBatchNo_Result> SpGetStockIssueItemDetailsByQRCodeBatchNo(string batchNo, Nullable<int> warehouseID, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> finYear)
        {
            var batchNoParameter = batchNo != null ?
                new ObjectParameter("BatchNo", batchNo) :
                new ObjectParameter("BatchNo", typeof(string));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetStockIssueItemDetailsByQRCodeBatchNo_Result>("SpGetStockIssueItemDetailsByQRCodeBatchNo", batchNoParameter, warehouseIDParameter, locationIDParameter, applicationIDParameter, finYearParameter);
        }
    
        public virtual ObjectResult<SpGetLatestBatchDetailsByCustomBatchNo_Result> SpGetLatestBatchDetailsByCustomBatchNo(Nullable<int> itemID, string customBatchNo, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var customBatchNoParameter = customBatchNo != null ?
                new ObjectParameter("CustomBatchNo", customBatchNo) :
                new ObjectParameter("CustomBatchNo", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetLatestBatchDetailsByCustomBatchNo_Result>("SpGetLatestBatchDetailsByCustomBatchNo", itemIDParameter, customBatchNoParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetAllItemListV3_Result> SpGetAllItemListV3(Nullable<int> itemCategoryID, string codeHint, string nameHint, string itemCategoryHint, string salesCategoryHint, string accountsCategoryHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var itemCategoryHintParameter = itemCategoryHint != null ?
                new ObjectParameter("ItemCategoryHint", itemCategoryHint) :
                new ObjectParameter("ItemCategoryHint", typeof(string));
    
            var salesCategoryHintParameter = salesCategoryHint != null ?
                new ObjectParameter("SalesCategoryHint", salesCategoryHint) :
                new ObjectParameter("SalesCategoryHint", typeof(string));
    
            var accountsCategoryHintParameter = accountsCategoryHint != null ?
                new ObjectParameter("AccountsCategoryHint", accountsCategoryHint) :
                new ObjectParameter("AccountsCategoryHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAllItemListV3_Result>("SpGetAllItemListV3", itemCategoryIDParameter, codeHintParameter, nameHintParameter, itemCategoryHintParameter, salesCategoryHintParameter, accountsCategoryHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateConsultationfees(Nullable<int> employeeID, Nullable<decimal> doctorFee, Nullable<decimal> clinicFee, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var doctorFeeParameter = doctorFee.HasValue ?
                new ObjectParameter("DoctorFee", doctorFee) :
                new ObjectParameter("DoctorFee", typeof(decimal));
    
            var clinicFeeParameter = clinicFee.HasValue ?
                new ObjectParameter("ClinicFee", clinicFee) :
                new ObjectParameter("ClinicFee", typeof(decimal));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateConsultationfees", employeeIDParameter, doctorFeeParameter, clinicFeeParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateDoctor(string name, string mobileNo, string address1, string address2, string code, string qualification, string place, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter returnValue)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var qualificationParameter = qualification != null ?
                new ObjectParameter("Qualification", qualification) :
                new ObjectParameter("Qualification", typeof(string));
    
            var placeParameter = place != null ?
                new ObjectParameter("Place", place) :
                new ObjectParameter("Place", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateDoctor", nameParameter, mobileNoParameter, address1Parameter, address2Parameter, codeParameter, qualificationParameter, placeParameter, locationIDParameter, applicationIDParameter, returnValue);
        }
    
        public virtual ObjectResult<SpGetEmployeeByIDV3_Result> SpGetEmployeeByIDV3(Nullable<int> employeeID, Nullable<int> applicationID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetEmployeeByIDV3_Result>("SpGetEmployeeByIDV3", employeeIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetBatchDetailsByBatchID_Result> SpGetBatchDetailsByBatchID(Nullable<int> batchID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetBatchDetailsByBatchID_Result>("SpGetBatchDetailsByBatchID", batchIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SPGetUnitList_Result> SPGetUnitList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetUnitList_Result>("SPGetUnitList");
        }
    
        public virtual ObjectResult<SpGetAllTreatmentList_Result> SpGetAllTreatmentList(string hint, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var hintParameter = hint != null ?
                new ObjectParameter("Hint", hint) :
                new ObjectParameter("Hint", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAllTreatmentList_Result>("SpGetAllTreatmentList", hintParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpAppoimentScheduledPatientList_Result> SpAppoimentScheduledPatientList(string oPNOHint, string oPDateHint, string nameHint, string phoneHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var oPNOHintParameter = oPNOHint != null ?
                new ObjectParameter("OPNOHint", oPNOHint) :
                new ObjectParameter("OPNOHint", typeof(string));
    
            var oPDateHintParameter = oPDateHint != null ?
                new ObjectParameter("OPDateHint", oPDateHint) :
                new ObjectParameter("OPDateHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var phoneHintParameter = phoneHint != null ?
                new ObjectParameter("PhoneHint", phoneHint) :
                new ObjectParameter("PhoneHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpAppoimentScheduledPatientList_Result>("SpAppoimentScheduledPatientList", oPNOHintParameter, oPDateHintParameter, nameHintParameter, phoneHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetManufacturer_Result> SpGetManufacturer()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetManufacturer_Result>("SpGetManufacturer");
        }
    
        public virtual ObjectResult<SpGetItemDetailsV3_Result> SpGetItemDetailsV3(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetItemDetailsV3_Result>("SpGetItemDetailsV3", iDParameter);
        }
    
        public virtual ObjectResult<SpGetCurrentFinYear_Result> SpGetCurrentFinYear(Nullable<int> applicationID)
        {
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCurrentFinYear_Result>("SpGetCurrentFinYear", applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetAccountHeadListForSuppliers_Result> SpGetAccountHeadListForSuppliers(string codeHint, string nameHint, string accountGroupHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var accountGroupHintParameter = accountGroupHint != null ?
                new ObjectParameter("AccountGroupHint", accountGroupHint) :
                new ObjectParameter("AccountGroupHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAccountHeadListForSuppliers_Result>("SpGetAccountHeadListForSuppliers", codeHintParameter, nameHintParameter, accountGroupHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetEmployeeByID_Result> SpGetEmployeeByID(Nullable<int> employeeID, Nullable<int> applicationID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetEmployeeByID_Result>("SpGetEmployeeByID", employeeIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetBatchListForAPI_Result> SpGetBatchListForAPI(Nullable<int> itemID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetBatchListForAPI_Result>("SpGetBatchListForAPI", itemIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetUnitListForAPI_Result> SpGetUnitListForAPI(Nullable<int> itemID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetUnitListForAPI_Result>("SpGetUnitListForAPI", itemIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetStockListForAPI_Result> SpGetStockListForAPI(Nullable<int> itemID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetStockListForAPI_Result>("SpGetStockListForAPI", itemIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetItemListForAPI_Result> SpGetItemListForAPI(Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetItemListForAPI_Result>("SpGetItemListForAPI", offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpGetItemCode(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, string qRCode, ObjectParameter itemCode)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var qRCodeParameter = qRCode != null ?
                new ObjectParameter("QRCode", qRCode) :
                new ObjectParameter("QRCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetItemCode", finYearParameter, locationIDParameter, applicationIDParameter, qRCodeParameter, itemCode);
        }
    
        public virtual int SpGetBatchNo(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, string qRCode, ObjectParameter batch)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var qRCodeParameter = qRCode != null ?
                new ObjectParameter("QRCode", qRCode) :
                new ObjectParameter("QRCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetBatchNo", finYearParameter, locationIDParameter, applicationIDParameter, qRCodeParameter, batch);
        }
    
        public virtual ObjectResult<SpGetBatchesByItemIDForCounterSales_Result> SpGetBatchesByItemIDForCounterSales(Nullable<int> itemID, Nullable<int> warehouseID, Nullable<int> batchTypeID, Nullable<int> unitID, Nullable<decimal> qty, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(decimal));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetBatchesByItemIDForCounterSales_Result>("SpGetBatchesByItemIDForCounterSales", itemIDParameter, warehouseIDParameter, batchTypeIDParameter, unitIDParameter, qtyParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetAccountHeads_Result> SpGetAccountHeads()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAccountHeads_Result>("SpGetAccountHeads");
        }
    
        public virtual ObjectResult<SpGetPatientDepartments_Result> SpGetPatientDepartments()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPatientDepartments_Result>("SpGetPatientDepartments");
        }
    
        public virtual ObjectResult<SpGetGeneralDiscountType_Result> SpGetGeneralDiscountType(Nullable<int> locationID, Nullable<int> applicationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetGeneralDiscountType_Result>("SpGetGeneralDiscountType", locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPatientDepartmentsforAutoComplete_Result> SpGetPatientDepartmentsforAutoComplete(string nameHint)
        {
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPatientDepartmentsforAutoComplete_Result>("SpGetPatientDepartmentsforAutoComplete", nameHintParameter);
        }
    
        public virtual ObjectResult<SpGetDiscountType_Result> SpGetDiscountType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDiscountType_Result>("SpGetDiscountType");
        }
    
        public virtual ObjectResult<SpGetFormType_Result> SpGetFormType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetFormType_Result>("SpGetFormType");
        }
    
        public virtual int SpCreateConsultationSchedule(Nullable<int> doctorID, Nullable<int> timeSlot, Nullable<bool> isDraft, Nullable<int> consultationFeeValidity, Nullable<decimal> consultationFee, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter returnValue, ObjectParameter retValue)
        {
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var timeSlotParameter = timeSlot.HasValue ?
                new ObjectParameter("TimeSlot", timeSlot) :
                new ObjectParameter("TimeSlot", typeof(int));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var consultationFeeValidityParameter = consultationFeeValidity.HasValue ?
                new ObjectParameter("ConsultationFeeValidity", consultationFeeValidity) :
                new ObjectParameter("ConsultationFeeValidity", typeof(int));
    
            var consultationFeeParameter = consultationFee.HasValue ?
                new ObjectParameter("ConsultationFee", consultationFee) :
                new ObjectParameter("ConsultationFee", typeof(decimal));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateConsultationSchedule", doctorIDParameter, timeSlotParameter, isDraftParameter, consultationFeeValidityParameter, consultationFeeParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, returnValue, retValue);
        }
    
        public virtual int SpCreateConsultationScheduleItem(Nullable<int> scheduleID, string weekDays, string startTime, string endTime, ObjectParameter errorValue)
        {
            var scheduleIDParameter = scheduleID.HasValue ?
                new ObjectParameter("ScheduleID", scheduleID) :
                new ObjectParameter("ScheduleID", typeof(int));
    
            var weekDaysParameter = weekDays != null ?
                new ObjectParameter("WeekDays", weekDays) :
                new ObjectParameter("WeekDays", typeof(string));
    
            var startTimeParameter = startTime != null ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(string));
    
            var endTimeParameter = endTime != null ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateConsultationScheduleItem", scheduleIDParameter, weekDaysParameter, startTimeParameter, endTimeParameter, errorValue);
        }
    
        public virtual ObjectResult<SpGetConsultationScheduleDetails_Result> SpGetConsultationScheduleDetails(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetConsultationScheduleDetails_Result>("SpGetConsultationScheduleDetails", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetConsultationScheduleList_Result> SpGetConsultationScheduleList(string name, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetConsultationScheduleList_Result>("SpGetConsultationScheduleList", nameParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetDoctorConsultationSchedule_Result> SpGetDoctorConsultationSchedule(Nullable<int> doctorID, Nullable<System.DateTime> scheduleDate, string startTime, string endTime, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var scheduleDateParameter = scheduleDate.HasValue ?
                new ObjectParameter("ScheduleDate", scheduleDate) :
                new ObjectParameter("ScheduleDate", typeof(System.DateTime));
    
            var startTimeParameter = startTime != null ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(string));
    
            var endTimeParameter = endTime != null ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDoctorConsultationSchedule_Result>("SpGetDoctorConsultationSchedule", doctorIDParameter, scheduleDateParameter, startTimeParameter, endTimeParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetConsultationScheduleItemDetails_Result> SpGetConsultationScheduleItemDetails(Nullable<int> consultationScheduleID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var consultationScheduleIDParameter = consultationScheduleID.HasValue ?
                new ObjectParameter("ConsultationScheduleID", consultationScheduleID) :
                new ObjectParameter("ConsultationScheduleID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetConsultationScheduleItemDetails_Result>("SpGetConsultationScheduleItemDetails", consultationScheduleIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetDoctorConsultationTime_Result> SpGetDoctorConsultationTime(Nullable<int> doctorID, Nullable<System.DateTime> scheduleDate, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var scheduleDateParameter = scheduleDate.HasValue ?
                new ObjectParameter("ScheduleDate", scheduleDate) :
                new ObjectParameter("ScheduleDate", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDoctorConsultationTime_Result>("SpGetDoctorConsultationTime", doctorIDParameter, scheduleDateParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateConsultationSchedule(Nullable<int> iD, Nullable<int> doctorID, Nullable<int> timeSlot, Nullable<bool> isDraft, Nullable<int> consultationFeeValidity, Nullable<decimal> consultationFee, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var timeSlotParameter = timeSlot.HasValue ?
                new ObjectParameter("TimeSlot", timeSlot) :
                new ObjectParameter("TimeSlot", typeof(int));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var consultationFeeValidityParameter = consultationFeeValidity.HasValue ?
                new ObjectParameter("ConsultationFeeValidity", consultationFeeValidity) :
                new ObjectParameter("ConsultationFeeValidity", typeof(int));
    
            var consultationFeeParameter = consultationFee.HasValue ?
                new ObjectParameter("ConsultationFee", consultationFee) :
                new ObjectParameter("ConsultationFee", typeof(decimal));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateConsultationSchedule", iDParameter, doctorIDParameter, timeSlotParameter, isDraftParameter, consultationFeeValidityParameter, consultationFeeParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<GetPatientDiscountbyID_Result> GetPatientDiscountbyID(Nullable<int> patientID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPatientDiscountbyID_Result>("GetPatientDiscountbyID", patientIDParameter);
        }
    
        public virtual int SpCreatePatientDiscountLimit(Nullable<int> customerID, Nullable<decimal> amount, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePatientDiscountLimit", customerIDParameter, amountParameter, startDateParameter, endDateParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetInPatientListForInAndOutRagister_Result> SpGetInPatientListForInAndOutRagister(string patientName, string patientCode, string inPatientNo, string roomName, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var patientNameParameter = patientName != null ?
                new ObjectParameter("PatientName", patientName) :
                new ObjectParameter("PatientName", typeof(string));
    
            var patientCodeParameter = patientCode != null ?
                new ObjectParameter("PatientCode", patientCode) :
                new ObjectParameter("PatientCode", typeof(string));
    
            var inPatientNoParameter = inPatientNo != null ?
                new ObjectParameter("InPatientNo", inPatientNo) :
                new ObjectParameter("InPatientNo", typeof(string));
    
            var roomNameParameter = roomName != null ?
                new ObjectParameter("RoomName", roomName) :
                new ObjectParameter("RoomName", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetInPatientListForInAndOutRagister_Result>("SpGetInPatientListForInAndOutRagister", patientNameParameter, patientCodeParameter, inPatientNoParameter, roomNameParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetInternationalPatientByID_Result> SpGetInternationalPatientByID(Nullable<int> iD, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetInternationalPatientByID_Result>("SpGetInternationalPatientByID", iDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateDiscountForPatient(Nullable<int> customerID, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateDiscountForPatient", customerIDParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<spGetDistrict_Result> spGetDistrict()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetDistrict_Result>("spGetDistrict");
        }
    
        public virtual ObjectResult<SpGetLaboratoryTestItemDetailsByID_Result> SpGetLaboratoryTestItemDetailsByID(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetLaboratoryTestItemDetailsByID_Result>("SpGetLaboratoryTestItemDetailsByID", iDParameter);
        }
    
        public virtual ObjectResult<SpGetLabTestForModal_Result> SpGetLabTestForModal(string codeHint, string typeHint, string groupHint, string nameHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var typeHintParameter = typeHint != null ?
                new ObjectParameter("TypeHint", typeHint) :
                new ObjectParameter("TypeHint", typeof(string));
    
            var groupHintParameter = groupHint != null ?
                new ObjectParameter("GroupHint", groupHint) :
                new ObjectParameter("GroupHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetLabTestForModal_Result>("SpGetLabTestForModal", codeHintParameter, typeHintParameter, groupHintParameter, nameHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetLaboratoryTestDetailsByID_Result> SpGetLaboratoryTestDetailsByID(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetLaboratoryTestDetailsByID_Result>("SpGetLaboratoryTestDetailsByID", iDParameter);
        }
    
        public virtual ObjectResult<spGetPatientPlaces_Result> spGetPatientPlaces(string nameHint)
        {
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetPatientPlaces_Result>("spGetPatientPlaces", nameHintParameter);
        }
    
        public virtual ObjectResult<SpGetPatientTypeList_Result> SpGetPatientTypeList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPatientTypeList_Result>("SpGetPatientTypeList");
        }
    
        public virtual ObjectResult<SpGetSalesTypeList_Result> SpGetSalesTypeList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSalesTypeList_Result>("SpGetSalesTypeList");
        }
    
        public virtual ObjectResult<SpGetSpecimenList_Result> SpGetSpecimenList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSpecimenList_Result>("SpGetSpecimenList");
        }
    
        public virtual ObjectResult<SpGetWareHouseByStockRequsetIssueID_Result> SpGetWareHouseByStockRequsetIssueID(Nullable<int> iD, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetWareHouseByStockRequsetIssueID_Result>("SpGetWareHouseByStockRequsetIssueID", iDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetWareHouseByStockRequsetReceiptID_Result> SpGetWareHouseByStockRequsetReceiptID(Nullable<int> iD, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetWareHouseByStockRequsetReceiptID_Result>("SpGetWareHouseByStockRequsetReceiptID", iDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetItemListForStockAdjustmentAllopathy_Result> SpGetItemListForStockAdjustmentAllopathy(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string codeHint, string nameHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetItemListForStockAdjustmentAllopathy_Result>("SpGetItemListForStockAdjustmentAllopathy", fromDateParameter, toDateParameter, codeHintParameter, nameHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetBatchListForQRCodePrint_Result> SpGetBatchListForQRCodePrint(Nullable<int> itemID, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetBatchListForQRCodePrint_Result>("SpGetBatchListForQRCodePrint", itemIDParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetLatestBatchDetailsV3_Result> SpGetLatestBatchDetailsV3(Nullable<int> itemID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetLatestBatchDetailsV3_Result>("SpGetLatestBatchDetailsV3", itemIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateInternationalPatient(string code, string name, string addressLine1, string addressLine2, Nullable<int> stateID, Nullable<int> countryID, Nullable<int> districtID, Nullable<System.DateTime> dOB, string emailID, string mobileNumber, string pinCode, string guardianName, string gender, string martialStatus, string bloodGroup, Nullable<int> occupationID, Nullable<int> patientReferedByID, string referalContactNo, Nullable<System.DateTime> dateOfArrival, string purposeOfVisit, string passportNo, string placeOfIssue, Nullable<System.DateTime> dateOfIssuePassport, Nullable<System.DateTime> dateOfExpiry, string visaNo, Nullable<System.DateTime> dateOfIssueVisa, Nullable<System.DateTime> dateOfExpiryVisa, string arrivedFrom, string proceedingTo, Nullable<int> durationOfStay, string employedIn, Nullable<int> doctorID, Nullable<int> age, Nullable<int> photoID, Nullable<int> passportCopyID, Nullable<int> visaCopyID, string landLine, string place, Nullable<int> month, Nullable<int> discountTypeID, string referalName, string middleName, string lastName, string countryCode, string otherQuotationIDS, string emergencyContactNo, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter returnValue, ObjectParameter patientID)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var addressLine1Parameter = addressLine1 != null ?
                new ObjectParameter("AddressLine1", addressLine1) :
                new ObjectParameter("AddressLine1", typeof(string));
    
            var addressLine2Parameter = addressLine2 != null ?
                new ObjectParameter("AddressLine2", addressLine2) :
                new ObjectParameter("AddressLine2", typeof(string));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var pinCodeParameter = pinCode != null ?
                new ObjectParameter("PinCode", pinCode) :
                new ObjectParameter("PinCode", typeof(string));
    
            var guardianNameParameter = guardianName != null ?
                new ObjectParameter("GuardianName", guardianName) :
                new ObjectParameter("GuardianName", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var martialStatusParameter = martialStatus != null ?
                new ObjectParameter("MartialStatus", martialStatus) :
                new ObjectParameter("MartialStatus", typeof(string));
    
            var bloodGroupParameter = bloodGroup != null ?
                new ObjectParameter("BloodGroup", bloodGroup) :
                new ObjectParameter("BloodGroup", typeof(string));
    
            var occupationIDParameter = occupationID.HasValue ?
                new ObjectParameter("OccupationID", occupationID) :
                new ObjectParameter("OccupationID", typeof(int));
    
            var patientReferedByIDParameter = patientReferedByID.HasValue ?
                new ObjectParameter("PatientReferedByID", patientReferedByID) :
                new ObjectParameter("PatientReferedByID", typeof(int));
    
            var referalContactNoParameter = referalContactNo != null ?
                new ObjectParameter("ReferalContactNo", referalContactNo) :
                new ObjectParameter("ReferalContactNo", typeof(string));
    
            var dateOfArrivalParameter = dateOfArrival.HasValue ?
                new ObjectParameter("DateOfArrival", dateOfArrival) :
                new ObjectParameter("DateOfArrival", typeof(System.DateTime));
    
            var purposeOfVisitParameter = purposeOfVisit != null ?
                new ObjectParameter("PurposeOfVisit", purposeOfVisit) :
                new ObjectParameter("PurposeOfVisit", typeof(string));
    
            var passportNoParameter = passportNo != null ?
                new ObjectParameter("PassportNo", passportNo) :
                new ObjectParameter("PassportNo", typeof(string));
    
            var placeOfIssueParameter = placeOfIssue != null ?
                new ObjectParameter("PlaceOfIssue", placeOfIssue) :
                new ObjectParameter("PlaceOfIssue", typeof(string));
    
            var dateOfIssuePassportParameter = dateOfIssuePassport.HasValue ?
                new ObjectParameter("DateOfIssuePassport", dateOfIssuePassport) :
                new ObjectParameter("DateOfIssuePassport", typeof(System.DateTime));
    
            var dateOfExpiryParameter = dateOfExpiry.HasValue ?
                new ObjectParameter("DateOfExpiry", dateOfExpiry) :
                new ObjectParameter("DateOfExpiry", typeof(System.DateTime));
    
            var visaNoParameter = visaNo != null ?
                new ObjectParameter("VisaNo", visaNo) :
                new ObjectParameter("VisaNo", typeof(string));
    
            var dateOfIssueVisaParameter = dateOfIssueVisa.HasValue ?
                new ObjectParameter("DateOfIssueVisa", dateOfIssueVisa) :
                new ObjectParameter("DateOfIssueVisa", typeof(System.DateTime));
    
            var dateOfExpiryVisaParameter = dateOfExpiryVisa.HasValue ?
                new ObjectParameter("DateOfExpiryVisa", dateOfExpiryVisa) :
                new ObjectParameter("DateOfExpiryVisa", typeof(System.DateTime));
    
            var arrivedFromParameter = arrivedFrom != null ?
                new ObjectParameter("ArrivedFrom", arrivedFrom) :
                new ObjectParameter("ArrivedFrom", typeof(string));
    
            var proceedingToParameter = proceedingTo != null ?
                new ObjectParameter("ProceedingTo", proceedingTo) :
                new ObjectParameter("ProceedingTo", typeof(string));
    
            var durationOfStayParameter = durationOfStay.HasValue ?
                new ObjectParameter("DurationOfStay", durationOfStay) :
                new ObjectParameter("DurationOfStay", typeof(int));
    
            var employedInParameter = employedIn != null ?
                new ObjectParameter("EmployedIn", employedIn) :
                new ObjectParameter("EmployedIn", typeof(string));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(int));
    
            var photoIDParameter = photoID.HasValue ?
                new ObjectParameter("PhotoID", photoID) :
                new ObjectParameter("PhotoID", typeof(int));
    
            var passportCopyIDParameter = passportCopyID.HasValue ?
                new ObjectParameter("PassportCopyID", passportCopyID) :
                new ObjectParameter("PassportCopyID", typeof(int));
    
            var visaCopyIDParameter = visaCopyID.HasValue ?
                new ObjectParameter("VisaCopyID", visaCopyID) :
                new ObjectParameter("VisaCopyID", typeof(int));
    
            var landLineParameter = landLine != null ?
                new ObjectParameter("LandLine", landLine) :
                new ObjectParameter("LandLine", typeof(string));
    
            var placeParameter = place != null ?
                new ObjectParameter("Place", place) :
                new ObjectParameter("Place", typeof(string));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var discountTypeIDParameter = discountTypeID.HasValue ?
                new ObjectParameter("DiscountTypeID", discountTypeID) :
                new ObjectParameter("DiscountTypeID", typeof(int));
    
            var referalNameParameter = referalName != null ?
                new ObjectParameter("ReferalName", referalName) :
                new ObjectParameter("ReferalName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var countryCodeParameter = countryCode != null ?
                new ObjectParameter("CountryCode", countryCode) :
                new ObjectParameter("CountryCode", typeof(string));
    
            var otherQuotationIDSParameter = otherQuotationIDS != null ?
                new ObjectParameter("OtherQuotationIDS", otherQuotationIDS) :
                new ObjectParameter("OtherQuotationIDS", typeof(string));
    
            var emergencyContactNoParameter = emergencyContactNo != null ?
                new ObjectParameter("EmergencyContactNo", emergencyContactNo) :
                new ObjectParameter("EmergencyContactNo", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateInternationalPatient", codeParameter, nameParameter, addressLine1Parameter, addressLine2Parameter, stateIDParameter, countryIDParameter, districtIDParameter, dOBParameter, emailIDParameter, mobileNumberParameter, pinCodeParameter, guardianNameParameter, genderParameter, martialStatusParameter, bloodGroupParameter, occupationIDParameter, patientReferedByIDParameter, referalContactNoParameter, dateOfArrivalParameter, purposeOfVisitParameter, passportNoParameter, placeOfIssueParameter, dateOfIssuePassportParameter, dateOfExpiryParameter, visaNoParameter, dateOfIssueVisaParameter, dateOfExpiryVisaParameter, arrivedFromParameter, proceedingToParameter, durationOfStayParameter, employedInParameter, doctorIDParameter, ageParameter, photoIDParameter, passportCopyIDParameter, visaCopyIDParameter, landLineParameter, placeParameter, monthParameter, discountTypeIDParameter, referalNameParameter, middleNameParameter, lastNameParameter, countryCodeParameter, otherQuotationIDSParameter, emergencyContactNoParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, returnValue, patientID);
        }
    
        public virtual int SpCreateLaboratoryTest(string code, string name, string biologicalReference, string unit, Nullable<System.DateTime> date, string description, Nullable<int> categoryID, Nullable<int> purchaseCategoryID, Nullable<int> qCCategoryID, Nullable<int> gSTCategoryID, Nullable<int> salesCategoryID, Nullable<int> salesIncentiveCategoryID, Nullable<int> storageCategoryID, Nullable<int> itemTypeID, Nullable<int> accountsCategoryID, Nullable<int> businessCategoryID, Nullable<int> itemUnitID, string method, Nullable<int> specimen, Nullable<decimal> rate, Nullable<bool> isAlsoGroup, string xMLItems, Nullable<int> createdUserID, Nullable<int> applicationID)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var biologicalReferenceParameter = biologicalReference != null ?
                new ObjectParameter("BiologicalReference", biologicalReference) :
                new ObjectParameter("BiologicalReference", typeof(string));
    
            var unitParameter = unit != null ?
                new ObjectParameter("Unit", unit) :
                new ObjectParameter("Unit", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var purchaseCategoryIDParameter = purchaseCategoryID.HasValue ?
                new ObjectParameter("PurchaseCategoryID", purchaseCategoryID) :
                new ObjectParameter("PurchaseCategoryID", typeof(int));
    
            var qCCategoryIDParameter = qCCategoryID.HasValue ?
                new ObjectParameter("QCCategoryID", qCCategoryID) :
                new ObjectParameter("QCCategoryID", typeof(int));
    
            var gSTCategoryIDParameter = gSTCategoryID.HasValue ?
                new ObjectParameter("GSTCategoryID", gSTCategoryID) :
                new ObjectParameter("GSTCategoryID", typeof(int));
    
            var salesCategoryIDParameter = salesCategoryID.HasValue ?
                new ObjectParameter("SalesCategoryID", salesCategoryID) :
                new ObjectParameter("SalesCategoryID", typeof(int));
    
            var salesIncentiveCategoryIDParameter = salesIncentiveCategoryID.HasValue ?
                new ObjectParameter("SalesIncentiveCategoryID", salesIncentiveCategoryID) :
                new ObjectParameter("SalesIncentiveCategoryID", typeof(int));
    
            var storageCategoryIDParameter = storageCategoryID.HasValue ?
                new ObjectParameter("StorageCategoryID", storageCategoryID) :
                new ObjectParameter("StorageCategoryID", typeof(int));
    
            var itemTypeIDParameter = itemTypeID.HasValue ?
                new ObjectParameter("ItemTypeID", itemTypeID) :
                new ObjectParameter("ItemTypeID", typeof(int));
    
            var accountsCategoryIDParameter = accountsCategoryID.HasValue ?
                new ObjectParameter("AccountsCategoryID", accountsCategoryID) :
                new ObjectParameter("AccountsCategoryID", typeof(int));
    
            var businessCategoryIDParameter = businessCategoryID.HasValue ?
                new ObjectParameter("BusinessCategoryID", businessCategoryID) :
                new ObjectParameter("BusinessCategoryID", typeof(int));
    
            var itemUnitIDParameter = itemUnitID.HasValue ?
                new ObjectParameter("ItemUnitID", itemUnitID) :
                new ObjectParameter("ItemUnitID", typeof(int));
    
            var methodParameter = method != null ?
                new ObjectParameter("Method", method) :
                new ObjectParameter("Method", typeof(string));
    
            var specimenParameter = specimen.HasValue ?
                new ObjectParameter("Specimen", specimen) :
                new ObjectParameter("Specimen", typeof(int));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var isAlsoGroupParameter = isAlsoGroup.HasValue ?
                new ObjectParameter("IsAlsoGroup", isAlsoGroup) :
                new ObjectParameter("IsAlsoGroup", typeof(bool));
    
            var xMLItemsParameter = xMLItems != null ?
                new ObjectParameter("XMLItems", xMLItems) :
                new ObjectParameter("XMLItems", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateLaboratoryTest", codeParameter, nameParameter, biologicalReferenceParameter, unitParameter, dateParameter, descriptionParameter, categoryIDParameter, purchaseCategoryIDParameter, qCCategoryIDParameter, gSTCategoryIDParameter, salesCategoryIDParameter, salesIncentiveCategoryIDParameter, storageCategoryIDParameter, itemTypeIDParameter, accountsCategoryIDParameter, businessCategoryIDParameter, itemUnitIDParameter, methodParameter, specimenParameter, rateParameter, isAlsoGroupParameter, xMLItemsParameter, createdUserIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetInternationalPatientList_Result> SpGetInternationalPatientList(string type, string codeHint, string nameHint, string placeHint, string districtHint, string doctorHint, string phoneHint, string lastVisitDateHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var placeHintParameter = placeHint != null ?
                new ObjectParameter("PlaceHint", placeHint) :
                new ObjectParameter("PlaceHint", typeof(string));
    
            var districtHintParameter = districtHint != null ?
                new ObjectParameter("DistrictHint", districtHint) :
                new ObjectParameter("DistrictHint", typeof(string));
    
            var doctorHintParameter = doctorHint != null ?
                new ObjectParameter("DoctorHint", doctorHint) :
                new ObjectParameter("DoctorHint", typeof(string));
    
            var phoneHintParameter = phoneHint != null ?
                new ObjectParameter("PhoneHint", phoneHint) :
                new ObjectParameter("PhoneHint", typeof(string));
    
            var lastVisitDateHintParameter = lastVisitDateHint != null ?
                new ObjectParameter("LastVisitDateHint", lastVisitDateHint) :
                new ObjectParameter("LastVisitDateHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetInternationalPatientList_Result>("SpGetInternationalPatientList", typeParameter, codeHintParameter, nameHintParameter, placeHintParameter, districtHintParameter, doctorHintParameter, phoneHintParameter, lastVisitDateHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateInternationalPatient(Nullable<int> iD, string name, string addressLine1, string addressLine2, Nullable<int> stateID, Nullable<int> countryID, Nullable<int> districtID, Nullable<System.DateTime> dOB, string emailID, string mobileNumber, string pinCode, string guardianName, string gender, string martialStatus, string bloodGroup, Nullable<int> occupationID, Nullable<int> patientReferedByID, string referalContactNo, Nullable<System.DateTime> dateOfArrival, string purposeOfVisit, string passportNo, string placeOfIssue, Nullable<System.DateTime> dateOfIssuePassport, Nullable<System.DateTime> dateOfExpiry, string visaNo, Nullable<System.DateTime> dateOfIssueVisa, Nullable<System.DateTime> dateOfExpiryVisa, string arrivedFrom, string proceedingTo, Nullable<int> durationOfStay, string employedIn, Nullable<int> doctorID, Nullable<int> age, Nullable<int> photoID, Nullable<int> passportCopyID, Nullable<int> visaCopyID, string landLine, string place, Nullable<int> month, Nullable<int> discountTypeID, string referalName, string middleName, string lastName, string countryCode, string otherQuotationIDS, string emergencyContactNo, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var addressLine1Parameter = addressLine1 != null ?
                new ObjectParameter("AddressLine1", addressLine1) :
                new ObjectParameter("AddressLine1", typeof(string));
    
            var addressLine2Parameter = addressLine2 != null ?
                new ObjectParameter("AddressLine2", addressLine2) :
                new ObjectParameter("AddressLine2", typeof(string));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var pinCodeParameter = pinCode != null ?
                new ObjectParameter("PinCode", pinCode) :
                new ObjectParameter("PinCode", typeof(string));
    
            var guardianNameParameter = guardianName != null ?
                new ObjectParameter("GuardianName", guardianName) :
                new ObjectParameter("GuardianName", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var martialStatusParameter = martialStatus != null ?
                new ObjectParameter("MartialStatus", martialStatus) :
                new ObjectParameter("MartialStatus", typeof(string));
    
            var bloodGroupParameter = bloodGroup != null ?
                new ObjectParameter("BloodGroup", bloodGroup) :
                new ObjectParameter("BloodGroup", typeof(string));
    
            var occupationIDParameter = occupationID.HasValue ?
                new ObjectParameter("OccupationID", occupationID) :
                new ObjectParameter("OccupationID", typeof(int));
    
            var patientReferedByIDParameter = patientReferedByID.HasValue ?
                new ObjectParameter("PatientReferedByID", patientReferedByID) :
                new ObjectParameter("PatientReferedByID", typeof(int));
    
            var referalContactNoParameter = referalContactNo != null ?
                new ObjectParameter("ReferalContactNo", referalContactNo) :
                new ObjectParameter("ReferalContactNo", typeof(string));
    
            var dateOfArrivalParameter = dateOfArrival.HasValue ?
                new ObjectParameter("DateOfArrival", dateOfArrival) :
                new ObjectParameter("DateOfArrival", typeof(System.DateTime));
    
            var purposeOfVisitParameter = purposeOfVisit != null ?
                new ObjectParameter("PurposeOfVisit", purposeOfVisit) :
                new ObjectParameter("PurposeOfVisit", typeof(string));
    
            var passportNoParameter = passportNo != null ?
                new ObjectParameter("PassportNo", passportNo) :
                new ObjectParameter("PassportNo", typeof(string));
    
            var placeOfIssueParameter = placeOfIssue != null ?
                new ObjectParameter("PlaceOfIssue", placeOfIssue) :
                new ObjectParameter("PlaceOfIssue", typeof(string));
    
            var dateOfIssuePassportParameter = dateOfIssuePassport.HasValue ?
                new ObjectParameter("DateOfIssuePassport", dateOfIssuePassport) :
                new ObjectParameter("DateOfIssuePassport", typeof(System.DateTime));
    
            var dateOfExpiryParameter = dateOfExpiry.HasValue ?
                new ObjectParameter("DateOfExpiry", dateOfExpiry) :
                new ObjectParameter("DateOfExpiry", typeof(System.DateTime));
    
            var visaNoParameter = visaNo != null ?
                new ObjectParameter("VisaNo", visaNo) :
                new ObjectParameter("VisaNo", typeof(string));
    
            var dateOfIssueVisaParameter = dateOfIssueVisa.HasValue ?
                new ObjectParameter("DateOfIssueVisa", dateOfIssueVisa) :
                new ObjectParameter("DateOfIssueVisa", typeof(System.DateTime));
    
            var dateOfExpiryVisaParameter = dateOfExpiryVisa.HasValue ?
                new ObjectParameter("DateOfExpiryVisa", dateOfExpiryVisa) :
                new ObjectParameter("DateOfExpiryVisa", typeof(System.DateTime));
    
            var arrivedFromParameter = arrivedFrom != null ?
                new ObjectParameter("ArrivedFrom", arrivedFrom) :
                new ObjectParameter("ArrivedFrom", typeof(string));
    
            var proceedingToParameter = proceedingTo != null ?
                new ObjectParameter("ProceedingTo", proceedingTo) :
                new ObjectParameter("ProceedingTo", typeof(string));
    
            var durationOfStayParameter = durationOfStay.HasValue ?
                new ObjectParameter("DurationOfStay", durationOfStay) :
                new ObjectParameter("DurationOfStay", typeof(int));
    
            var employedInParameter = employedIn != null ?
                new ObjectParameter("EmployedIn", employedIn) :
                new ObjectParameter("EmployedIn", typeof(string));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(int));
    
            var photoIDParameter = photoID.HasValue ?
                new ObjectParameter("PhotoID", photoID) :
                new ObjectParameter("PhotoID", typeof(int));
    
            var passportCopyIDParameter = passportCopyID.HasValue ?
                new ObjectParameter("PassportCopyID", passportCopyID) :
                new ObjectParameter("PassportCopyID", typeof(int));
    
            var visaCopyIDParameter = visaCopyID.HasValue ?
                new ObjectParameter("VisaCopyID", visaCopyID) :
                new ObjectParameter("VisaCopyID", typeof(int));
    
            var landLineParameter = landLine != null ?
                new ObjectParameter("LandLine", landLine) :
                new ObjectParameter("LandLine", typeof(string));
    
            var placeParameter = place != null ?
                new ObjectParameter("Place", place) :
                new ObjectParameter("Place", typeof(string));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var discountTypeIDParameter = discountTypeID.HasValue ?
                new ObjectParameter("DiscountTypeID", discountTypeID) :
                new ObjectParameter("DiscountTypeID", typeof(int));
    
            var referalNameParameter = referalName != null ?
                new ObjectParameter("ReferalName", referalName) :
                new ObjectParameter("ReferalName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var countryCodeParameter = countryCode != null ?
                new ObjectParameter("CountryCode", countryCode) :
                new ObjectParameter("CountryCode", typeof(string));
    
            var otherQuotationIDSParameter = otherQuotationIDS != null ?
                new ObjectParameter("OtherQuotationIDS", otherQuotationIDS) :
                new ObjectParameter("OtherQuotationIDS", typeof(string));
    
            var emergencyContactNoParameter = emergencyContactNo != null ?
                new ObjectParameter("EmergencyContactNo", emergencyContactNo) :
                new ObjectParameter("EmergencyContactNo", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateInternationalPatient", iDParameter, nameParameter, addressLine1Parameter, addressLine2Parameter, stateIDParameter, countryIDParameter, districtIDParameter, dOBParameter, emailIDParameter, mobileNumberParameter, pinCodeParameter, guardianNameParameter, genderParameter, martialStatusParameter, bloodGroupParameter, occupationIDParameter, patientReferedByIDParameter, referalContactNoParameter, dateOfArrivalParameter, purposeOfVisitParameter, passportNoParameter, placeOfIssueParameter, dateOfIssuePassportParameter, dateOfExpiryParameter, visaNoParameter, dateOfIssueVisaParameter, dateOfExpiryVisaParameter, arrivedFromParameter, proceedingToParameter, durationOfStayParameter, employedInParameter, doctorIDParameter, ageParameter, photoIDParameter, passportCopyIDParameter, visaCopyIDParameter, landLineParameter, placeParameter, monthParameter, discountTypeIDParameter, referalNameParameter, middleNameParameter, lastNameParameter, countryCodeParameter, otherQuotationIDSParameter, emergencyContactNoParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateLaboratoryTest(Nullable<int> iD, string code, string name, string biologicalReference, string unit, Nullable<System.DateTime> date, string description, string method, Nullable<int> specimenID, Nullable<decimal> rate, Nullable<int> gstCategoryID, Nullable<bool> isAlsoGroup, string xMLItems, Nullable<int> createdUserID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var biologicalReferenceParameter = biologicalReference != null ?
                new ObjectParameter("BiologicalReference", biologicalReference) :
                new ObjectParameter("BiologicalReference", typeof(string));
    
            var unitParameter = unit != null ?
                new ObjectParameter("Unit", unit) :
                new ObjectParameter("Unit", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var methodParameter = method != null ?
                new ObjectParameter("Method", method) :
                new ObjectParameter("Method", typeof(string));
    
            var specimenIDParameter = specimenID.HasValue ?
                new ObjectParameter("SpecimenID", specimenID) :
                new ObjectParameter("SpecimenID", typeof(int));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var gstCategoryIDParameter = gstCategoryID.HasValue ?
                new ObjectParameter("GstCategoryID", gstCategoryID) :
                new ObjectParameter("GstCategoryID", typeof(int));
    
            var isAlsoGroupParameter = isAlsoGroup.HasValue ?
                new ObjectParameter("IsAlsoGroup", isAlsoGroup) :
                new ObjectParameter("IsAlsoGroup", typeof(bool));
    
            var xMLItemsParameter = xMLItems != null ?
                new ObjectParameter("XMLItems", xMLItems) :
                new ObjectParameter("XMLItems", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateLaboratoryTest", iDParameter, codeParameter, nameParameter, biologicalReferenceParameter, unitParameter, dateParameter, descriptionParameter, methodParameter, specimenIDParameter, rateParameter, gstCategoryIDParameter, isAlsoGroupParameter, xMLItemsParameter, createdUserIDParameter, applicationIDParameter);
        }
    
        public virtual int SPGetIsGSTRegisteredLocation(Nullable<int> locationID, ObjectParameter isGSTRegisteredLocation)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPGetIsGSTRegisteredLocation", locationIDParameter, isGSTRegisteredLocation);
        }
    
        public virtual ObjectResult<SPGetCountryList_Result> SPGetCountryList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetCountryList_Result>("SPGetCountryList");
        }
    
        public virtual int SpUpdateCountry(Nullable<int> countryID, string code, string name, Nullable<bool> isActive, Nullable<bool> isIntraCountry, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isIntraCountryParameter = isIntraCountry.HasValue ?
                new ObjectParameter("IsIntraCountry", isIntraCountry) :
                new ObjectParameter("IsIntraCountry", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateCountry", countryIDParameter, codeParameter, nameParameter, isActiveParameter, isIntraCountryParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCountryByID_Result> SpGetCountryByID(Nullable<int> countryID)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCountryByID_Result>("SpGetCountryByID", countryIDParameter);
        }
    
        public virtual int spCreateCountry(string code, string name, Nullable<bool> isActive, Nullable<bool> isIntraCountry)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isIntraCountryParameter = isIntraCountry.HasValue ?
                new ObjectParameter("IsIntraCountry", isIntraCountry) :
                new ObjectParameter("IsIntraCountry", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCreateCountry", codeParameter, nameParameter, isActiveParameter, isIntraCountryParameter);
        }
    
        public virtual ObjectResult<SpGetCountrySearchList_Result> SpGetCountrySearchList(string code, string name, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCountrySearchList_Result>("SpGetCountrySearchList", codeParameter, nameParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter);
        }
    
        public virtual ObjectResult<SPGetCurrencyConversionByID_Result> SPGetCurrencyConversionByID(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetCurrencyConversionByID_Result>("SPGetCurrencyConversionByID", iDParameter);
        }
    
        public virtual int spUpdateCurrencyConversion(Nullable<int> iD, Nullable<int> baseCurrencyID, Nullable<int> conversionCurrencyID, Nullable<decimal> exchangeRate, Nullable<decimal> reverseExchangeRate, Nullable<System.DateTime> fromDate, string description, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> modifiedUserID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var baseCurrencyIDParameter = baseCurrencyID.HasValue ?
                new ObjectParameter("BaseCurrencyID", baseCurrencyID) :
                new ObjectParameter("BaseCurrencyID", typeof(int));
    
            var conversionCurrencyIDParameter = conversionCurrencyID.HasValue ?
                new ObjectParameter("ConversionCurrencyID", conversionCurrencyID) :
                new ObjectParameter("ConversionCurrencyID", typeof(int));
    
            var exchangeRateParameter = exchangeRate.HasValue ?
                new ObjectParameter("ExchangeRate", exchangeRate) :
                new ObjectParameter("ExchangeRate", typeof(decimal));
    
            var reverseExchangeRateParameter = reverseExchangeRate.HasValue ?
                new ObjectParameter("ReverseExchangeRate", reverseExchangeRate) :
                new ObjectParameter("ReverseExchangeRate", typeof(decimal));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateCurrencyConversion", iDParameter, baseCurrencyIDParameter, conversionCurrencyIDParameter, exchangeRateParameter, reverseExchangeRateParameter, fromDateParameter, descriptionParameter, locationIDParameter, applicationIDParameter, modifiedUserIDParameter);
        }
    
        public virtual ObjectResult<SPGetCurrencyConversionList_Result> SPGetCurrencyConversionList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetCurrencyConversionList_Result>("SPGetCurrencyConversionList");
        }
    
        public virtual int spCreateCurrencyConversion(Nullable<int> baseCurrencyID, Nullable<int> conversionCurrencyID, Nullable<decimal> exchangeRate, Nullable<decimal> reverseExchangeRate, Nullable<System.DateTime> fromDate, string description, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> createdUserID, ObjectParameter outMessage)
        {
            var baseCurrencyIDParameter = baseCurrencyID.HasValue ?
                new ObjectParameter("BaseCurrencyID", baseCurrencyID) :
                new ObjectParameter("BaseCurrencyID", typeof(int));
    
            var conversionCurrencyIDParameter = conversionCurrencyID.HasValue ?
                new ObjectParameter("ConversionCurrencyID", conversionCurrencyID) :
                new ObjectParameter("ConversionCurrencyID", typeof(int));
    
            var exchangeRateParameter = exchangeRate.HasValue ?
                new ObjectParameter("ExchangeRate", exchangeRate) :
                new ObjectParameter("ExchangeRate", typeof(decimal));
    
            var reverseExchangeRateParameter = reverseExchangeRate.HasValue ?
                new ObjectParameter("ReverseExchangeRate", reverseExchangeRate) :
                new ObjectParameter("ReverseExchangeRate", typeof(decimal));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCreateCurrencyConversion", baseCurrencyIDParameter, conversionCurrencyIDParameter, exchangeRateParameter, reverseExchangeRateParameter, fromDateParameter, descriptionParameter, locationIDParameter, applicationIDParameter, createdUserIDParameter, outMessage);
        }
    
        public virtual ObjectResult<SpGetLocationList_Result> SpGetLocationList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetLocationList_Result>("SpGetLocationList");
        }
    
        public virtual ObjectResult<SpGetCurrencySearchList_Result> SpGetCurrencySearchList(string code, string name, string countryName, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var countryNameParameter = countryName != null ?
                new ObjectParameter("CountryName", countryName) :
                new ObjectParameter("CountryName", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCurrencySearchList_Result>("SpGetCurrencySearchList", codeParameter, nameParameter, countryNameParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter);
        }
    
        public virtual int SpCreateItemLocation(Nullable<int> itemID, string itemName, Nullable<int> locationID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateItemLocation", itemIDParameter, itemNameParameter, locationIDParameter);
        }
    
        public virtual ObjectResult<SPGetUnitGroupList_Result> SPGetUnitGroupList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetUnitGroupList_Result>("SPGetUnitGroupList");
        }
    
        public virtual ObjectResult<SPGetABCCodeList_Result> SPGetABCCodeList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetABCCodeList_Result>("SPGetABCCodeList");
        }
    
        public virtual ObjectResult<SPGetBinList_Result> SPGetBinList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetBinList_Result>("SPGetBinList");
        }
    
        public virtual ObjectResult<SPGetBuyerList_Result> SPGetBuyerList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetBuyerList_Result>("SPGetBuyerList");
        }
    
        public virtual ObjectResult<SPGetLotList_Result> SPGetLotList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetLotList_Result>("SPGetLotList");
        }
    
        public virtual ObjectResult<SpGetALLSupplier_Result> SpGetALLSupplier()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetALLSupplier_Result>("SpGetALLSupplier");
        }
    
        public virtual ObjectResult<SpGetAlternativeItemList_Result> SpGetAlternativeItemList(string code, string name, string itemCategory, string itemUnit, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var itemCategoryParameter = itemCategory != null ?
                new ObjectParameter("ItemCategory", itemCategory) :
                new ObjectParameter("ItemCategory", typeof(string));
    
            var itemUnitParameter = itemUnit != null ?
                new ObjectParameter("ItemUnit", itemUnit) :
                new ObjectParameter("ItemUnit", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAlternativeItemList_Result>("SpGetAlternativeItemList", codeParameter, nameParameter, itemCategoryParameter, itemUnitParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SPGetTaxType_Result> SPGetTaxType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetTaxType_Result>("SPGetTaxType");
        }
    
        public virtual ObjectResult<SPGetTaxCategory_Result> SPGetTaxCategory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetTaxCategory_Result>("SPGetTaxCategory");
        }
    
        public virtual ObjectResult<SPGetCostingMethod_Result> SPGetCostingMethod()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetCostingMethod_Result>("SPGetCostingMethod");
        }
    
        public virtual ObjectResult<SpGetBusinessCategoryList_Result> SpGetBusinessCategoryList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetBusinessCategoryList_Result>("SpGetBusinessCategoryList");
        }
    
        public virtual ObjectResult<SpGetItemsList_Result> SpGetItemsList(string type, Nullable<int> itemCategoryID, string codeHint, string nameHint, string unitHint, string itemCategoryHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var unitHintParameter = unitHint != null ?
                new ObjectParameter("UnitHint", unitHint) :
                new ObjectParameter("UnitHint", typeof(string));
    
            var itemCategoryHintParameter = itemCategoryHint != null ?
                new ObjectParameter("ItemCategoryHint", itemCategoryHint) :
                new ObjectParameter("ItemCategoryHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetItemsList_Result>("SpGetItemsList", typeParameter, itemCategoryIDParameter, codeHintParameter, nameHintParameter, unitHintParameter, itemCategoryHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SPGetTaxCategoryByTaxTypeID_Result> SPGetTaxCategoryByTaxTypeID(Nullable<int> taxTypeID)
        {
            var taxTypeIDParameter = taxTypeID.HasValue ?
                new ObjectParameter("TaxTypeID", taxTypeID) :
                new ObjectParameter("TaxTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetTaxCategoryByTaxTypeID_Result>("SPGetTaxCategoryByTaxTypeID", taxTypeIDParameter);
        }
    
        public virtual ObjectResult<SPGetTaxTypeByLocationID_Result> SPGetTaxTypeByLocationID(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetTaxTypeByLocationID_Result>("SPGetTaxTypeByLocationID", locationIDParameter);
        }
    
        public virtual ObjectResult<SPGetBinListByWareHouseID_Result> SPGetBinListByWareHouseID(Nullable<int> wareHouseID)
        {
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetBinListByWareHouseID_Result>("SPGetBinListByWareHouseID", wareHouseIDParameter);
        }
    
        public virtual ObjectResult<SPGetLotListByBinID_Result> SPGetLotListByBinID(Nullable<int> binID)
        {
            var binIDParameter = binID.HasValue ?
                new ObjectParameter("BinID", binID) :
                new ObjectParameter("BinID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetLotListByBinID_Result>("SPGetLotListByBinID", binIDParameter);
        }
    
        public virtual int SpCreateAlternativeItem(Nullable<int> itemID, Nullable<int> alternativeItemID, Nullable<int> createdUserID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var alternativeItemIDParameter = alternativeItemID.HasValue ?
                new ObjectParameter("AlternativeItemID", alternativeItemID) :
                new ObjectParameter("AlternativeItemID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateAlternativeItem", itemIDParameter, alternativeItemIDParameter, createdUserIDParameter);
        }
    
        public virtual int SpCreateItemTax(Nullable<int> itemID, Nullable<int> locationID, Nullable<int> taxTypeID, Nullable<int> gSTCategoryID, Nullable<int> createdUserID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var taxTypeIDParameter = taxTypeID.HasValue ?
                new ObjectParameter("TaxTypeID", taxTypeID) :
                new ObjectParameter("TaxTypeID", typeof(int));
    
            var gSTCategoryIDParameter = gSTCategoryID.HasValue ?
                new ObjectParameter("GSTCategoryID", gSTCategoryID) :
                new ObjectParameter("GSTCategoryID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateItemTax", itemIDParameter, locationIDParameter, taxTypeIDParameter, gSTCategoryIDParameter, createdUserIDParameter);
        }
    
        public virtual int SpCreateItemWareHouse(Nullable<int> itemID, Nullable<int> wareHouseID, Nullable<int> binID, Nullable<int> lotID, Nullable<int> isDefault, Nullable<int> createdUserID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            var binIDParameter = binID.HasValue ?
                new ObjectParameter("BinID", binID) :
                new ObjectParameter("BinID", typeof(int));
    
            var lotIDParameter = lotID.HasValue ?
                new ObjectParameter("LotID", lotID) :
                new ObjectParameter("LotID", typeof(int));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateItemWareHouse", itemIDParameter, wareHouseIDParameter, binIDParameter, lotIDParameter, isDefaultParameter, createdUserIDParameter);
        }
    
        public virtual int SPDeleteAlternativeItems(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPDeleteAlternativeItems", iDParameter);
        }
    
        public virtual int SPDeleteItemTax(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPDeleteItemTax", iDParameter);
        }
    
        public virtual int SPDeleteItemWareHouse(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPDeleteItemWareHouse", iDParameter);
        }
    
        public virtual ObjectResult<SpGetCurrencyLocationSearchList_Result> SpGetCurrencyLocationSearchList(Nullable<int> locationID, string name, string country, string currency, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var currencyParameter = currency != null ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCurrencyLocationSearchList_Result>("SpGetCurrencyLocationSearchList", locationIDParameter, nameParameter, countryParameter, currencyParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter);
        }
    
        public virtual int SpCreateUpdateItemBatch(Nullable<int> itemID, string batchNo, Nullable<decimal> costPrice, Nullable<decimal> purchasePrice, Nullable<decimal> purchaseLoosePrice, Nullable<decimal> salesPrice, Nullable<decimal> loosePrice, Nullable<decimal> landedCost, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> userCreatedID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchNoParameter = batchNo != null ?
                new ObjectParameter("BatchNo", batchNo) :
                new ObjectParameter("BatchNo", typeof(string));
    
            var costPriceParameter = costPrice.HasValue ?
                new ObjectParameter("CostPrice", costPrice) :
                new ObjectParameter("CostPrice", typeof(decimal));
    
            var purchasePriceParameter = purchasePrice.HasValue ?
                new ObjectParameter("PurchasePrice", purchasePrice) :
                new ObjectParameter("PurchasePrice", typeof(decimal));
    
            var purchaseLoosePriceParameter = purchaseLoosePrice.HasValue ?
                new ObjectParameter("PurchaseLoosePrice", purchaseLoosePrice) :
                new ObjectParameter("PurchaseLoosePrice", typeof(decimal));
    
            var salesPriceParameter = salesPrice.HasValue ?
                new ObjectParameter("SalesPrice", salesPrice) :
                new ObjectParameter("SalesPrice", typeof(decimal));
    
            var loosePriceParameter = loosePrice.HasValue ?
                new ObjectParameter("LoosePrice", loosePrice) :
                new ObjectParameter("LoosePrice", typeof(decimal));
    
            var landedCostParameter = landedCost.HasValue ?
                new ObjectParameter("LandedCost", landedCost) :
                new ObjectParameter("LandedCost", typeof(decimal));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var userCreatedIDParameter = userCreatedID.HasValue ?
                new ObjectParameter("UserCreatedID", userCreatedID) :
                new ObjectParameter("UserCreatedID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateUpdateItemBatch", itemIDParameter, batchNoParameter, costPriceParameter, purchasePriceParameter, purchaseLoosePriceParameter, salesPriceParameter, loosePriceParameter, landedCostParameter, locationIDParameter, applicationIDParameter, userCreatedIDParameter);
        }
    
        public virtual ObjectResult<SpGetTaxtypeByID_Result> SpGetTaxtypeByID(Nullable<int> taxtypeID)
        {
            var taxtypeIDParameter = taxtypeID.HasValue ?
                new ObjectParameter("TaxtypeID", taxtypeID) :
                new ObjectParameter("TaxtypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetTaxtypeByID_Result>("SpGetTaxtypeByID", taxtypeIDParameter);
        }
    
        public virtual ObjectResult<spGetTaxtypeList_Result> spGetTaxtypeList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetTaxtypeList_Result>("spGetTaxtypeList");
        }
    
        public virtual ObjectResult<SpGetTaxTypeSearchList_Result> SpGetTaxTypeSearchList(string code, string name, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetTaxTypeSearchList_Result>("SpGetTaxTypeSearchList", codeParameter, nameParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter);
        }
    
        public virtual int SpCreateCustomer1(string code, string name, string name2, Nullable<int> locationID, string oldCode, string oldName, Nullable<int> categoryID, string currency, string contactPersonName, Nullable<int> priceListID, Nullable<int> discountID, Nullable<int> cashDiscountID, Nullable<int> customerTaxCategoryID, Nullable<int> customerAccountsCategoryID, Nullable<bool> isGSTRegistered, string aadhaarNo, string pANNo, string gSTNo, string faxNo, string emailID, Nullable<int> creditdays, Nullable<decimal> minimumCreditLimit, Nullable<decimal> maxCreditLimit, Nullable<int> paymentTypeID, Nullable<int> relatedCustomerID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> expiryDate, Nullable<bool> isInterCompany, Nullable<bool> isMappedtoExpsEntries, Nullable<bool> isBlockedForSalesOrders, Nullable<bool> isBlockedForSalesInvoices, Nullable<bool> isAlsoASupplier, Nullable<bool> isMappedtoServiceSales, Nullable<int> supplierID, Nullable<int> customerRouteID, Nullable<int> cashDiscountCategoryID, Nullable<int> fSOID, Nullable<int> applicationID, Nullable<decimal> customerMonthlyTarget, string tradeLegalName, Nullable<bool> isDraft, ObjectParameter customerID, Nullable<int> currencyID)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var name2Parameter = name2 != null ?
                new ObjectParameter("Name2", name2) :
                new ObjectParameter("Name2", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var oldCodeParameter = oldCode != null ?
                new ObjectParameter("OldCode", oldCode) :
                new ObjectParameter("OldCode", typeof(string));
    
            var oldNameParameter = oldName != null ?
                new ObjectParameter("OldName", oldName) :
                new ObjectParameter("OldName", typeof(string));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var currencyParameter = currency != null ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(string));
    
            var contactPersonNameParameter = contactPersonName != null ?
                new ObjectParameter("ContactPersonName", contactPersonName) :
                new ObjectParameter("ContactPersonName", typeof(string));
    
            var priceListIDParameter = priceListID.HasValue ?
                new ObjectParameter("PriceListID", priceListID) :
                new ObjectParameter("PriceListID", typeof(int));
    
            var discountIDParameter = discountID.HasValue ?
                new ObjectParameter("DiscountID", discountID) :
                new ObjectParameter("DiscountID", typeof(int));
    
            var cashDiscountIDParameter = cashDiscountID.HasValue ?
                new ObjectParameter("CashDiscountID", cashDiscountID) :
                new ObjectParameter("CashDiscountID", typeof(int));
    
            var customerTaxCategoryIDParameter = customerTaxCategoryID.HasValue ?
                new ObjectParameter("CustomerTaxCategoryID", customerTaxCategoryID) :
                new ObjectParameter("CustomerTaxCategoryID", typeof(int));
    
            var customerAccountsCategoryIDParameter = customerAccountsCategoryID.HasValue ?
                new ObjectParameter("CustomerAccountsCategoryID", customerAccountsCategoryID) :
                new ObjectParameter("CustomerAccountsCategoryID", typeof(int));
    
            var isGSTRegisteredParameter = isGSTRegistered.HasValue ?
                new ObjectParameter("IsGSTRegistered", isGSTRegistered) :
                new ObjectParameter("IsGSTRegistered", typeof(bool));
    
            var aadhaarNoParameter = aadhaarNo != null ?
                new ObjectParameter("AadhaarNo", aadhaarNo) :
                new ObjectParameter("AadhaarNo", typeof(string));
    
            var pANNoParameter = pANNo != null ?
                new ObjectParameter("PANNo", pANNo) :
                new ObjectParameter("PANNo", typeof(string));
    
            var gSTNoParameter = gSTNo != null ?
                new ObjectParameter("GSTNo", gSTNo) :
                new ObjectParameter("GSTNo", typeof(string));
    
            var faxNoParameter = faxNo != null ?
                new ObjectParameter("FaxNo", faxNo) :
                new ObjectParameter("FaxNo", typeof(string));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var creditdaysParameter = creditdays.HasValue ?
                new ObjectParameter("Creditdays", creditdays) :
                new ObjectParameter("Creditdays", typeof(int));
    
            var minimumCreditLimitParameter = minimumCreditLimit.HasValue ?
                new ObjectParameter("MinimumCreditLimit", minimumCreditLimit) :
                new ObjectParameter("MinimumCreditLimit", typeof(decimal));
    
            var maxCreditLimitParameter = maxCreditLimit.HasValue ?
                new ObjectParameter("MaxCreditLimit", maxCreditLimit) :
                new ObjectParameter("MaxCreditLimit", typeof(decimal));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(int));
    
            var relatedCustomerIDParameter = relatedCustomerID.HasValue ?
                new ObjectParameter("RelatedCustomerID", relatedCustomerID) :
                new ObjectParameter("RelatedCustomerID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var isInterCompanyParameter = isInterCompany.HasValue ?
                new ObjectParameter("IsInterCompany", isInterCompany) :
                new ObjectParameter("IsInterCompany", typeof(bool));
    
            var isMappedtoExpsEntriesParameter = isMappedtoExpsEntries.HasValue ?
                new ObjectParameter("IsMappedtoExpsEntries", isMappedtoExpsEntries) :
                new ObjectParameter("IsMappedtoExpsEntries", typeof(bool));
    
            var isBlockedForSalesOrdersParameter = isBlockedForSalesOrders.HasValue ?
                new ObjectParameter("IsBlockedForSalesOrders", isBlockedForSalesOrders) :
                new ObjectParameter("IsBlockedForSalesOrders", typeof(bool));
    
            var isBlockedForSalesInvoicesParameter = isBlockedForSalesInvoices.HasValue ?
                new ObjectParameter("IsBlockedForSalesInvoices", isBlockedForSalesInvoices) :
                new ObjectParameter("IsBlockedForSalesInvoices", typeof(bool));
    
            var isAlsoASupplierParameter = isAlsoASupplier.HasValue ?
                new ObjectParameter("IsAlsoASupplier", isAlsoASupplier) :
                new ObjectParameter("IsAlsoASupplier", typeof(bool));
    
            var isMappedtoServiceSalesParameter = isMappedtoServiceSales.HasValue ?
                new ObjectParameter("IsMappedtoServiceSales", isMappedtoServiceSales) :
                new ObjectParameter("IsMappedtoServiceSales", typeof(bool));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var customerRouteIDParameter = customerRouteID.HasValue ?
                new ObjectParameter("CustomerRouteID", customerRouteID) :
                new ObjectParameter("CustomerRouteID", typeof(int));
    
            var cashDiscountCategoryIDParameter = cashDiscountCategoryID.HasValue ?
                new ObjectParameter("CashDiscountCategoryID", cashDiscountCategoryID) :
                new ObjectParameter("CashDiscountCategoryID", typeof(int));
    
            var fSOIDParameter = fSOID.HasValue ?
                new ObjectParameter("FSOID", fSOID) :
                new ObjectParameter("FSOID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var customerMonthlyTargetParameter = customerMonthlyTarget.HasValue ?
                new ObjectParameter("CustomerMonthlyTarget", customerMonthlyTarget) :
                new ObjectParameter("CustomerMonthlyTarget", typeof(decimal));
    
            var tradeLegalNameParameter = tradeLegalName != null ?
                new ObjectParameter("TradeLegalName", tradeLegalName) :
                new ObjectParameter("TradeLegalName", typeof(string));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateCustomer1", codeParameter, nameParameter, name2Parameter, locationIDParameter, oldCodeParameter, oldNameParameter, categoryIDParameter, currencyParameter, contactPersonNameParameter, priceListIDParameter, discountIDParameter, cashDiscountIDParameter, customerTaxCategoryIDParameter, customerAccountsCategoryIDParameter, isGSTRegisteredParameter, aadhaarNoParameter, pANNoParameter, gSTNoParameter, faxNoParameter, emailIDParameter, creditdaysParameter, minimumCreditLimitParameter, maxCreditLimitParameter, paymentTypeIDParameter, relatedCustomerIDParameter, startDateParameter, expiryDateParameter, isInterCompanyParameter, isMappedtoExpsEntriesParameter, isBlockedForSalesOrdersParameter, isBlockedForSalesInvoicesParameter, isAlsoASupplierParameter, isMappedtoServiceSalesParameter, supplierIDParameter, customerRouteIDParameter, cashDiscountCategoryIDParameter, fSOIDParameter, applicationIDParameter, customerMonthlyTargetParameter, tradeLegalNameParameter, isDraftParameter, customerID, currencyIDParameter);
        }
    
        public virtual int SpCreateSupplier1(string code, string name, Nullable<int> supplierCategoryID, string currency, string gstNo, string adharNo, string panCardNo, Nullable<int> creditDays, Nullable<int> supplierAccountsCategoryID, Nullable<int> supplierTaxCategoryID, Nullable<int> supplierTaxSubCategoryID, Nullable<int> paymentMethodID, Nullable<int> paymentGroupID, Nullable<int> relatedSupplierID, Nullable<System.DateTime> startDate, Nullable<bool> isDeactivated, Nullable<System.DateTime> deactivateedDate, Nullable<bool> isBlockForPurchase, Nullable<bool> isBlockForReceipts, Nullable<bool> isBlockForPayment, Nullable<bool> isGSTRegistered, Nullable<bool> isCustomer, Nullable<int> customerID, string oldSupplierCode, string uanNo, string bankName, string branchName, string acNo, string ifscNo, Nullable<bool> isEmployee, Nullable<int> employeeID, Nullable<bool> isActiveSupplier, Nullable<int> createdUserId, Nullable<System.DateTime> createdDate, string tradeLegalName, Nullable<int> applicationID, ObjectParameter supplierID, Nullable<int> currencyID)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var supplierCategoryIDParameter = supplierCategoryID.HasValue ?
                new ObjectParameter("SupplierCategoryID", supplierCategoryID) :
                new ObjectParameter("SupplierCategoryID", typeof(int));
    
            var currencyParameter = currency != null ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(string));
    
            var gstNoParameter = gstNo != null ?
                new ObjectParameter("GstNo", gstNo) :
                new ObjectParameter("GstNo", typeof(string));
    
            var adharNoParameter = adharNo != null ?
                new ObjectParameter("AdharNo", adharNo) :
                new ObjectParameter("AdharNo", typeof(string));
    
            var panCardNoParameter = panCardNo != null ?
                new ObjectParameter("PanCardNo", panCardNo) :
                new ObjectParameter("PanCardNo", typeof(string));
    
            var creditDaysParameter = creditDays.HasValue ?
                new ObjectParameter("CreditDays", creditDays) :
                new ObjectParameter("CreditDays", typeof(int));
    
            var supplierAccountsCategoryIDParameter = supplierAccountsCategoryID.HasValue ?
                new ObjectParameter("SupplierAccountsCategoryID", supplierAccountsCategoryID) :
                new ObjectParameter("SupplierAccountsCategoryID", typeof(int));
    
            var supplierTaxCategoryIDParameter = supplierTaxCategoryID.HasValue ?
                new ObjectParameter("SupplierTaxCategoryID", supplierTaxCategoryID) :
                new ObjectParameter("SupplierTaxCategoryID", typeof(int));
    
            var supplierTaxSubCategoryIDParameter = supplierTaxSubCategoryID.HasValue ?
                new ObjectParameter("SupplierTaxSubCategoryID", supplierTaxSubCategoryID) :
                new ObjectParameter("SupplierTaxSubCategoryID", typeof(int));
    
            var paymentMethodIDParameter = paymentMethodID.HasValue ?
                new ObjectParameter("PaymentMethodID", paymentMethodID) :
                new ObjectParameter("PaymentMethodID", typeof(int));
    
            var paymentGroupIDParameter = paymentGroupID.HasValue ?
                new ObjectParameter("PaymentGroupID", paymentGroupID) :
                new ObjectParameter("PaymentGroupID", typeof(int));
    
            var relatedSupplierIDParameter = relatedSupplierID.HasValue ?
                new ObjectParameter("RelatedSupplierID", relatedSupplierID) :
                new ObjectParameter("RelatedSupplierID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var isDeactivatedParameter = isDeactivated.HasValue ?
                new ObjectParameter("IsDeactivated", isDeactivated) :
                new ObjectParameter("IsDeactivated", typeof(bool));
    
            var deactivateedDateParameter = deactivateedDate.HasValue ?
                new ObjectParameter("DeactivateedDate", deactivateedDate) :
                new ObjectParameter("DeactivateedDate", typeof(System.DateTime));
    
            var isBlockForPurchaseParameter = isBlockForPurchase.HasValue ?
                new ObjectParameter("IsBlockForPurchase", isBlockForPurchase) :
                new ObjectParameter("IsBlockForPurchase", typeof(bool));
    
            var isBlockForReceiptsParameter = isBlockForReceipts.HasValue ?
                new ObjectParameter("IsBlockForReceipts", isBlockForReceipts) :
                new ObjectParameter("IsBlockForReceipts", typeof(bool));
    
            var isBlockForPaymentParameter = isBlockForPayment.HasValue ?
                new ObjectParameter("IsBlockForPayment", isBlockForPayment) :
                new ObjectParameter("IsBlockForPayment", typeof(bool));
    
            var isGSTRegisteredParameter = isGSTRegistered.HasValue ?
                new ObjectParameter("IsGSTRegistered", isGSTRegistered) :
                new ObjectParameter("IsGSTRegistered", typeof(bool));
    
            var isCustomerParameter = isCustomer.HasValue ?
                new ObjectParameter("IsCustomer", isCustomer) :
                new ObjectParameter("IsCustomer", typeof(bool));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var oldSupplierCodeParameter = oldSupplierCode != null ?
                new ObjectParameter("OldSupplierCode", oldSupplierCode) :
                new ObjectParameter("OldSupplierCode", typeof(string));
    
            var uanNoParameter = uanNo != null ?
                new ObjectParameter("UanNo", uanNo) :
                new ObjectParameter("UanNo", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var branchNameParameter = branchName != null ?
                new ObjectParameter("BranchName", branchName) :
                new ObjectParameter("BranchName", typeof(string));
    
            var acNoParameter = acNo != null ?
                new ObjectParameter("AcNo", acNo) :
                new ObjectParameter("AcNo", typeof(string));
    
            var ifscNoParameter = ifscNo != null ?
                new ObjectParameter("IfscNo", ifscNo) :
                new ObjectParameter("IfscNo", typeof(string));
    
            var isEmployeeParameter = isEmployee.HasValue ?
                new ObjectParameter("IsEmployee", isEmployee) :
                new ObjectParameter("IsEmployee", typeof(bool));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var isActiveSupplierParameter = isActiveSupplier.HasValue ?
                new ObjectParameter("IsActiveSupplier", isActiveSupplier) :
                new ObjectParameter("IsActiveSupplier", typeof(bool));
    
            var createdUserIdParameter = createdUserId.HasValue ?
                new ObjectParameter("CreatedUserId", createdUserId) :
                new ObjectParameter("CreatedUserId", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var tradeLegalNameParameter = tradeLegalName != null ?
                new ObjectParameter("TradeLegalName", tradeLegalName) :
                new ObjectParameter("TradeLegalName", typeof(string));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateSupplier1", codeParameter, nameParameter, supplierCategoryIDParameter, currencyParameter, gstNoParameter, adharNoParameter, panCardNoParameter, creditDaysParameter, supplierAccountsCategoryIDParameter, supplierTaxCategoryIDParameter, supplierTaxSubCategoryIDParameter, paymentMethodIDParameter, paymentGroupIDParameter, relatedSupplierIDParameter, startDateParameter, isDeactivatedParameter, deactivateedDateParameter, isBlockForPurchaseParameter, isBlockForReceiptsParameter, isBlockForPaymentParameter, isGSTRegisteredParameter, isCustomerParameter, customerIDParameter, oldSupplierCodeParameter, uanNoParameter, bankNameParameter, branchNameParameter, acNoParameter, ifscNoParameter, isEmployeeParameter, employeeIDParameter, isActiveSupplierParameter, createdUserIdParameter, createdDateParameter, tradeLegalNameParameter, applicationIDParameter, supplierID, currencyIDParameter);
        }
    
        public virtual ObjectResult<SpGetSupplierByID_Result> SpGetSupplierByID(Nullable<int> iD, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSupplierByID_Result>("SpGetSupplierByID", iDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateCustomer1(Nullable<int> iD, string code, string name, string name2, Nullable<int> categoryID, string contactPersonName, Nullable<int> priceListID, Nullable<int> discountID, Nullable<int> cashDiscountID, Nullable<int> customerTaxCategoryID, Nullable<int> customerAccountsCategoryID, Nullable<bool> isGSTRegistered, string aadhaarNo, string pANNo, string gSTNo, string faxNo, string emailID, Nullable<int> creditdays, Nullable<decimal> minimumCreditLimit, Nullable<decimal> maxCreditLimit, Nullable<int> paymentTypeID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> expiryDate, Nullable<bool> isInterCompany, Nullable<bool> isMappedtoExpsEntries, Nullable<bool> isBlockedForSalesOrders, Nullable<bool> isBlockedForSalesInvoices, Nullable<bool> isAlsoASupplier, Nullable<int> supplierID, Nullable<int> customerRouteID, Nullable<int> cashDiscountCategoryID, Nullable<int> fSOID, string oldCode, Nullable<decimal> customerMonthlyTarget, string tradeLegalName, Nullable<bool> isMappedtoServiceSales, Nullable<bool> isDraft, Nullable<int> currencyID, string currency, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> finYear, Nullable<int> createdUserID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var name2Parameter = name2 != null ?
                new ObjectParameter("Name2", name2) :
                new ObjectParameter("Name2", typeof(string));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var contactPersonNameParameter = contactPersonName != null ?
                new ObjectParameter("ContactPersonName", contactPersonName) :
                new ObjectParameter("ContactPersonName", typeof(string));
    
            var priceListIDParameter = priceListID.HasValue ?
                new ObjectParameter("PriceListID", priceListID) :
                new ObjectParameter("PriceListID", typeof(int));
    
            var discountIDParameter = discountID.HasValue ?
                new ObjectParameter("DiscountID", discountID) :
                new ObjectParameter("DiscountID", typeof(int));
    
            var cashDiscountIDParameter = cashDiscountID.HasValue ?
                new ObjectParameter("CashDiscountID", cashDiscountID) :
                new ObjectParameter("CashDiscountID", typeof(int));
    
            var customerTaxCategoryIDParameter = customerTaxCategoryID.HasValue ?
                new ObjectParameter("CustomerTaxCategoryID", customerTaxCategoryID) :
                new ObjectParameter("CustomerTaxCategoryID", typeof(int));
    
            var customerAccountsCategoryIDParameter = customerAccountsCategoryID.HasValue ?
                new ObjectParameter("CustomerAccountsCategoryID", customerAccountsCategoryID) :
                new ObjectParameter("CustomerAccountsCategoryID", typeof(int));
    
            var isGSTRegisteredParameter = isGSTRegistered.HasValue ?
                new ObjectParameter("IsGSTRegistered", isGSTRegistered) :
                new ObjectParameter("IsGSTRegistered", typeof(bool));
    
            var aadhaarNoParameter = aadhaarNo != null ?
                new ObjectParameter("AadhaarNo", aadhaarNo) :
                new ObjectParameter("AadhaarNo", typeof(string));
    
            var pANNoParameter = pANNo != null ?
                new ObjectParameter("PANNo", pANNo) :
                new ObjectParameter("PANNo", typeof(string));
    
            var gSTNoParameter = gSTNo != null ?
                new ObjectParameter("GSTNo", gSTNo) :
                new ObjectParameter("GSTNo", typeof(string));
    
            var faxNoParameter = faxNo != null ?
                new ObjectParameter("FaxNo", faxNo) :
                new ObjectParameter("FaxNo", typeof(string));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var creditdaysParameter = creditdays.HasValue ?
                new ObjectParameter("Creditdays", creditdays) :
                new ObjectParameter("Creditdays", typeof(int));
    
            var minimumCreditLimitParameter = minimumCreditLimit.HasValue ?
                new ObjectParameter("MinimumCreditLimit", minimumCreditLimit) :
                new ObjectParameter("MinimumCreditLimit", typeof(decimal));
    
            var maxCreditLimitParameter = maxCreditLimit.HasValue ?
                new ObjectParameter("MaxCreditLimit", maxCreditLimit) :
                new ObjectParameter("MaxCreditLimit", typeof(decimal));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var isInterCompanyParameter = isInterCompany.HasValue ?
                new ObjectParameter("IsInterCompany", isInterCompany) :
                new ObjectParameter("IsInterCompany", typeof(bool));
    
            var isMappedtoExpsEntriesParameter = isMappedtoExpsEntries.HasValue ?
                new ObjectParameter("IsMappedtoExpsEntries", isMappedtoExpsEntries) :
                new ObjectParameter("IsMappedtoExpsEntries", typeof(bool));
    
            var isBlockedForSalesOrdersParameter = isBlockedForSalesOrders.HasValue ?
                new ObjectParameter("IsBlockedForSalesOrders", isBlockedForSalesOrders) :
                new ObjectParameter("IsBlockedForSalesOrders", typeof(bool));
    
            var isBlockedForSalesInvoicesParameter = isBlockedForSalesInvoices.HasValue ?
                new ObjectParameter("IsBlockedForSalesInvoices", isBlockedForSalesInvoices) :
                new ObjectParameter("IsBlockedForSalesInvoices", typeof(bool));
    
            var isAlsoASupplierParameter = isAlsoASupplier.HasValue ?
                new ObjectParameter("IsAlsoASupplier", isAlsoASupplier) :
                new ObjectParameter("IsAlsoASupplier", typeof(bool));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var customerRouteIDParameter = customerRouteID.HasValue ?
                new ObjectParameter("CustomerRouteID", customerRouteID) :
                new ObjectParameter("CustomerRouteID", typeof(int));
    
            var cashDiscountCategoryIDParameter = cashDiscountCategoryID.HasValue ?
                new ObjectParameter("CashDiscountCategoryID", cashDiscountCategoryID) :
                new ObjectParameter("CashDiscountCategoryID", typeof(int));
    
            var fSOIDParameter = fSOID.HasValue ?
                new ObjectParameter("FSOID", fSOID) :
                new ObjectParameter("FSOID", typeof(int));
    
            var oldCodeParameter = oldCode != null ?
                new ObjectParameter("OldCode", oldCode) :
                new ObjectParameter("OldCode", typeof(string));
    
            var customerMonthlyTargetParameter = customerMonthlyTarget.HasValue ?
                new ObjectParameter("CustomerMonthlyTarget", customerMonthlyTarget) :
                new ObjectParameter("CustomerMonthlyTarget", typeof(decimal));
    
            var tradeLegalNameParameter = tradeLegalName != null ?
                new ObjectParameter("TradeLegalName", tradeLegalName) :
                new ObjectParameter("TradeLegalName", typeof(string));
    
            var isMappedtoServiceSalesParameter = isMappedtoServiceSales.HasValue ?
                new ObjectParameter("IsMappedtoServiceSales", isMappedtoServiceSales) :
                new ObjectParameter("IsMappedtoServiceSales", typeof(bool));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var currencyParameter = currency != null ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateCustomer1", iDParameter, codeParameter, nameParameter, name2Parameter, categoryIDParameter, contactPersonNameParameter, priceListIDParameter, discountIDParameter, cashDiscountIDParameter, customerTaxCategoryIDParameter, customerAccountsCategoryIDParameter, isGSTRegisteredParameter, aadhaarNoParameter, pANNoParameter, gSTNoParameter, faxNoParameter, emailIDParameter, creditdaysParameter, minimumCreditLimitParameter, maxCreditLimitParameter, paymentTypeIDParameter, startDateParameter, expiryDateParameter, isInterCompanyParameter, isMappedtoExpsEntriesParameter, isBlockedForSalesOrdersParameter, isBlockedForSalesInvoicesParameter, isAlsoASupplierParameter, supplierIDParameter, customerRouteIDParameter, cashDiscountCategoryIDParameter, fSOIDParameter, oldCodeParameter, customerMonthlyTargetParameter, tradeLegalNameParameter, isMappedtoServiceSalesParameter, isDraftParameter, currencyIDParameter, currencyParameter, locationIDParameter, applicationIDParameter, finYearParameter, createdUserIDParameter);
        }
    
        public virtual int SpUpdateSupplier1(Nullable<int> iD, string name, Nullable<int> supplierCategoryID, string gstNo, string adharNo, string panCardNo, Nullable<int> creditDays, Nullable<int> supplierAccountsCategoryID, Nullable<int> supplierTaxCategoryID, Nullable<int> supplierTaxSubCategoryID, Nullable<int> paymentMethodID, Nullable<int> paymentGroupID, Nullable<int> relatedSupplierID, Nullable<System.DateTime> startDate, Nullable<bool> isDeactivated, Nullable<System.DateTime> deactivateedDate, Nullable<bool> isBlockForPurchase, Nullable<bool> isBlockForReceipts, Nullable<bool> isBlockForPayment, Nullable<bool> isGSTRegistered, Nullable<bool> isCustomer, Nullable<int> customerID, string oldSupplierCode, string uanNo, string bankName, string branchName, string acNo, string ifscNo, Nullable<bool> isEmployee, string tradeLegalName, Nullable<int> employeeID, Nullable<bool> isActiveSupplier, Nullable<int> currencyID, string currency, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> finYear)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var supplierCategoryIDParameter = supplierCategoryID.HasValue ?
                new ObjectParameter("SupplierCategoryID", supplierCategoryID) :
                new ObjectParameter("SupplierCategoryID", typeof(int));
    
            var gstNoParameter = gstNo != null ?
                new ObjectParameter("GstNo", gstNo) :
                new ObjectParameter("GstNo", typeof(string));
    
            var adharNoParameter = adharNo != null ?
                new ObjectParameter("AdharNo", adharNo) :
                new ObjectParameter("AdharNo", typeof(string));
    
            var panCardNoParameter = panCardNo != null ?
                new ObjectParameter("PanCardNo", panCardNo) :
                new ObjectParameter("PanCardNo", typeof(string));
    
            var creditDaysParameter = creditDays.HasValue ?
                new ObjectParameter("CreditDays", creditDays) :
                new ObjectParameter("CreditDays", typeof(int));
    
            var supplierAccountsCategoryIDParameter = supplierAccountsCategoryID.HasValue ?
                new ObjectParameter("SupplierAccountsCategoryID", supplierAccountsCategoryID) :
                new ObjectParameter("SupplierAccountsCategoryID", typeof(int));
    
            var supplierTaxCategoryIDParameter = supplierTaxCategoryID.HasValue ?
                new ObjectParameter("SupplierTaxCategoryID", supplierTaxCategoryID) :
                new ObjectParameter("SupplierTaxCategoryID", typeof(int));
    
            var supplierTaxSubCategoryIDParameter = supplierTaxSubCategoryID.HasValue ?
                new ObjectParameter("SupplierTaxSubCategoryID", supplierTaxSubCategoryID) :
                new ObjectParameter("SupplierTaxSubCategoryID", typeof(int));
    
            var paymentMethodIDParameter = paymentMethodID.HasValue ?
                new ObjectParameter("PaymentMethodID", paymentMethodID) :
                new ObjectParameter("PaymentMethodID", typeof(int));
    
            var paymentGroupIDParameter = paymentGroupID.HasValue ?
                new ObjectParameter("PaymentGroupID", paymentGroupID) :
                new ObjectParameter("PaymentGroupID", typeof(int));
    
            var relatedSupplierIDParameter = relatedSupplierID.HasValue ?
                new ObjectParameter("RelatedSupplierID", relatedSupplierID) :
                new ObjectParameter("RelatedSupplierID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var isDeactivatedParameter = isDeactivated.HasValue ?
                new ObjectParameter("IsDeactivated", isDeactivated) :
                new ObjectParameter("IsDeactivated", typeof(bool));
    
            var deactivateedDateParameter = deactivateedDate.HasValue ?
                new ObjectParameter("DeactivateedDate", deactivateedDate) :
                new ObjectParameter("DeactivateedDate", typeof(System.DateTime));
    
            var isBlockForPurchaseParameter = isBlockForPurchase.HasValue ?
                new ObjectParameter("IsBlockForPurchase", isBlockForPurchase) :
                new ObjectParameter("IsBlockForPurchase", typeof(bool));
    
            var isBlockForReceiptsParameter = isBlockForReceipts.HasValue ?
                new ObjectParameter("IsBlockForReceipts", isBlockForReceipts) :
                new ObjectParameter("IsBlockForReceipts", typeof(bool));
    
            var isBlockForPaymentParameter = isBlockForPayment.HasValue ?
                new ObjectParameter("IsBlockForPayment", isBlockForPayment) :
                new ObjectParameter("IsBlockForPayment", typeof(bool));
    
            var isGSTRegisteredParameter = isGSTRegistered.HasValue ?
                new ObjectParameter("IsGSTRegistered", isGSTRegistered) :
                new ObjectParameter("IsGSTRegistered", typeof(bool));
    
            var isCustomerParameter = isCustomer.HasValue ?
                new ObjectParameter("IsCustomer", isCustomer) :
                new ObjectParameter("IsCustomer", typeof(bool));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var oldSupplierCodeParameter = oldSupplierCode != null ?
                new ObjectParameter("OldSupplierCode", oldSupplierCode) :
                new ObjectParameter("OldSupplierCode", typeof(string));
    
            var uanNoParameter = uanNo != null ?
                new ObjectParameter("UanNo", uanNo) :
                new ObjectParameter("UanNo", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var branchNameParameter = branchName != null ?
                new ObjectParameter("BranchName", branchName) :
                new ObjectParameter("BranchName", typeof(string));
    
            var acNoParameter = acNo != null ?
                new ObjectParameter("AcNo", acNo) :
                new ObjectParameter("AcNo", typeof(string));
    
            var ifscNoParameter = ifscNo != null ?
                new ObjectParameter("IfscNo", ifscNo) :
                new ObjectParameter("IfscNo", typeof(string));
    
            var isEmployeeParameter = isEmployee.HasValue ?
                new ObjectParameter("IsEmployee", isEmployee) :
                new ObjectParameter("IsEmployee", typeof(bool));
    
            var tradeLegalNameParameter = tradeLegalName != null ?
                new ObjectParameter("TradeLegalName", tradeLegalName) :
                new ObjectParameter("TradeLegalName", typeof(string));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var isActiveSupplierParameter = isActiveSupplier.HasValue ?
                new ObjectParameter("IsActiveSupplier", isActiveSupplier) :
                new ObjectParameter("IsActiveSupplier", typeof(bool));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var currencyParameter = currency != null ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateSupplier1", iDParameter, nameParameter, supplierCategoryIDParameter, gstNoParameter, adharNoParameter, panCardNoParameter, creditDaysParameter, supplierAccountsCategoryIDParameter, supplierTaxCategoryIDParameter, supplierTaxSubCategoryIDParameter, paymentMethodIDParameter, paymentGroupIDParameter, relatedSupplierIDParameter, startDateParameter, isDeactivatedParameter, deactivateedDateParameter, isBlockForPurchaseParameter, isBlockForReceiptsParameter, isBlockForPaymentParameter, isGSTRegisteredParameter, isCustomerParameter, customerIDParameter, oldSupplierCodeParameter, uanNoParameter, bankNameParameter, branchNameParameter, acNoParameter, ifscNoParameter, isEmployeeParameter, tradeLegalNameParameter, employeeIDParameter, isActiveSupplierParameter, currencyIDParameter, currencyParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter, finYearParameter);
        }
    
        public virtual int spCreateTaxtype(string name, string description, Nullable<int> locationID, Nullable<int> createdUserID)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCreateTaxtype", nameParameter, descriptionParameter, locationIDParameter, createdUserIDParameter);
        }
    
        public virtual int SpUpdatetaxtype(Nullable<int> taxtypeID, string name, string description, Nullable<int> locationID, Nullable<int> modifiedUserID, Nullable<int> applicationID)
        {
            var taxtypeIDParameter = taxtypeID.HasValue ?
                new ObjectParameter("TaxtypeID", taxtypeID) :
                new ObjectParameter("TaxtypeID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdatetaxtype", taxtypeIDParameter, nameParameter, descriptionParameter, locationIDParameter, modifiedUserIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateCustomer(string code, string name, string name2, Nullable<int> locationID, string oldCode, string oldName, Nullable<int> categoryID, string currency, string contactPersonName, Nullable<int> priceListID, Nullable<int> discountID, Nullable<int> cashDiscountID, Nullable<int> customerTaxCategoryID, Nullable<int> customerAccountsCategoryID, Nullable<bool> isGSTRegistered, string aadhaarNo, string pANNo, string gSTNo, string faxNo, string emailID, Nullable<int> creditdays, Nullable<decimal> minimumCreditLimit, Nullable<decimal> maxCreditLimit, Nullable<int> paymentTypeID, Nullable<int> relatedCustomerID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> expiryDate, Nullable<bool> isInterCompany, Nullable<bool> isMappedtoExpsEntries, Nullable<bool> isBlockedForSalesOrders, Nullable<bool> isBlockedForSalesInvoices, Nullable<bool> isAlsoASupplier, Nullable<bool> isMappedtoServiceSales, Nullable<int> supplierID, Nullable<int> customerRouteID, Nullable<int> cashDiscountCategoryID, Nullable<int> fSOID, Nullable<int> applicationID, Nullable<decimal> customerMonthlyTarget, string tradeLegalName, Nullable<bool> isDraft, ObjectParameter customerID, Nullable<int> currencyID)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var name2Parameter = name2 != null ?
                new ObjectParameter("Name2", name2) :
                new ObjectParameter("Name2", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var oldCodeParameter = oldCode != null ?
                new ObjectParameter("OldCode", oldCode) :
                new ObjectParameter("OldCode", typeof(string));
    
            var oldNameParameter = oldName != null ?
                new ObjectParameter("OldName", oldName) :
                new ObjectParameter("OldName", typeof(string));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var currencyParameter = currency != null ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(string));
    
            var contactPersonNameParameter = contactPersonName != null ?
                new ObjectParameter("ContactPersonName", contactPersonName) :
                new ObjectParameter("ContactPersonName", typeof(string));
    
            var priceListIDParameter = priceListID.HasValue ?
                new ObjectParameter("PriceListID", priceListID) :
                new ObjectParameter("PriceListID", typeof(int));
    
            var discountIDParameter = discountID.HasValue ?
                new ObjectParameter("DiscountID", discountID) :
                new ObjectParameter("DiscountID", typeof(int));
    
            var cashDiscountIDParameter = cashDiscountID.HasValue ?
                new ObjectParameter("CashDiscountID", cashDiscountID) :
                new ObjectParameter("CashDiscountID", typeof(int));
    
            var customerTaxCategoryIDParameter = customerTaxCategoryID.HasValue ?
                new ObjectParameter("CustomerTaxCategoryID", customerTaxCategoryID) :
                new ObjectParameter("CustomerTaxCategoryID", typeof(int));
    
            var customerAccountsCategoryIDParameter = customerAccountsCategoryID.HasValue ?
                new ObjectParameter("CustomerAccountsCategoryID", customerAccountsCategoryID) :
                new ObjectParameter("CustomerAccountsCategoryID", typeof(int));
    
            var isGSTRegisteredParameter = isGSTRegistered.HasValue ?
                new ObjectParameter("IsGSTRegistered", isGSTRegistered) :
                new ObjectParameter("IsGSTRegistered", typeof(bool));
    
            var aadhaarNoParameter = aadhaarNo != null ?
                new ObjectParameter("AadhaarNo", aadhaarNo) :
                new ObjectParameter("AadhaarNo", typeof(string));
    
            var pANNoParameter = pANNo != null ?
                new ObjectParameter("PANNo", pANNo) :
                new ObjectParameter("PANNo", typeof(string));
    
            var gSTNoParameter = gSTNo != null ?
                new ObjectParameter("GSTNo", gSTNo) :
                new ObjectParameter("GSTNo", typeof(string));
    
            var faxNoParameter = faxNo != null ?
                new ObjectParameter("FaxNo", faxNo) :
                new ObjectParameter("FaxNo", typeof(string));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var creditdaysParameter = creditdays.HasValue ?
                new ObjectParameter("Creditdays", creditdays) :
                new ObjectParameter("Creditdays", typeof(int));
    
            var minimumCreditLimitParameter = minimumCreditLimit.HasValue ?
                new ObjectParameter("MinimumCreditLimit", minimumCreditLimit) :
                new ObjectParameter("MinimumCreditLimit", typeof(decimal));
    
            var maxCreditLimitParameter = maxCreditLimit.HasValue ?
                new ObjectParameter("MaxCreditLimit", maxCreditLimit) :
                new ObjectParameter("MaxCreditLimit", typeof(decimal));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(int));
    
            var relatedCustomerIDParameter = relatedCustomerID.HasValue ?
                new ObjectParameter("RelatedCustomerID", relatedCustomerID) :
                new ObjectParameter("RelatedCustomerID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var isInterCompanyParameter = isInterCompany.HasValue ?
                new ObjectParameter("IsInterCompany", isInterCompany) :
                new ObjectParameter("IsInterCompany", typeof(bool));
    
            var isMappedtoExpsEntriesParameter = isMappedtoExpsEntries.HasValue ?
                new ObjectParameter("IsMappedtoExpsEntries", isMappedtoExpsEntries) :
                new ObjectParameter("IsMappedtoExpsEntries", typeof(bool));
    
            var isBlockedForSalesOrdersParameter = isBlockedForSalesOrders.HasValue ?
                new ObjectParameter("IsBlockedForSalesOrders", isBlockedForSalesOrders) :
                new ObjectParameter("IsBlockedForSalesOrders", typeof(bool));
    
            var isBlockedForSalesInvoicesParameter = isBlockedForSalesInvoices.HasValue ?
                new ObjectParameter("IsBlockedForSalesInvoices", isBlockedForSalesInvoices) :
                new ObjectParameter("IsBlockedForSalesInvoices", typeof(bool));
    
            var isAlsoASupplierParameter = isAlsoASupplier.HasValue ?
                new ObjectParameter("IsAlsoASupplier", isAlsoASupplier) :
                new ObjectParameter("IsAlsoASupplier", typeof(bool));
    
            var isMappedtoServiceSalesParameter = isMappedtoServiceSales.HasValue ?
                new ObjectParameter("IsMappedtoServiceSales", isMappedtoServiceSales) :
                new ObjectParameter("IsMappedtoServiceSales", typeof(bool));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var customerRouteIDParameter = customerRouteID.HasValue ?
                new ObjectParameter("CustomerRouteID", customerRouteID) :
                new ObjectParameter("CustomerRouteID", typeof(int));
    
            var cashDiscountCategoryIDParameter = cashDiscountCategoryID.HasValue ?
                new ObjectParameter("CashDiscountCategoryID", cashDiscountCategoryID) :
                new ObjectParameter("CashDiscountCategoryID", typeof(int));
    
            var fSOIDParameter = fSOID.HasValue ?
                new ObjectParameter("FSOID", fSOID) :
                new ObjectParameter("FSOID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var customerMonthlyTargetParameter = customerMonthlyTarget.HasValue ?
                new ObjectParameter("CustomerMonthlyTarget", customerMonthlyTarget) :
                new ObjectParameter("CustomerMonthlyTarget", typeof(decimal));
    
            var tradeLegalNameParameter = tradeLegalName != null ?
                new ObjectParameter("TradeLegalName", tradeLegalName) :
                new ObjectParameter("TradeLegalName", typeof(string));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateCustomer", codeParameter, nameParameter, name2Parameter, locationIDParameter, oldCodeParameter, oldNameParameter, categoryIDParameter, currencyParameter, contactPersonNameParameter, priceListIDParameter, discountIDParameter, cashDiscountIDParameter, customerTaxCategoryIDParameter, customerAccountsCategoryIDParameter, isGSTRegisteredParameter, aadhaarNoParameter, pANNoParameter, gSTNoParameter, faxNoParameter, emailIDParameter, creditdaysParameter, minimumCreditLimitParameter, maxCreditLimitParameter, paymentTypeIDParameter, relatedCustomerIDParameter, startDateParameter, expiryDateParameter, isInterCompanyParameter, isMappedtoExpsEntriesParameter, isBlockedForSalesOrdersParameter, isBlockedForSalesInvoicesParameter, isAlsoASupplierParameter, isMappedtoServiceSalesParameter, supplierIDParameter, customerRouteIDParameter, cashDiscountCategoryIDParameter, fSOIDParameter, applicationIDParameter, customerMonthlyTargetParameter, tradeLegalNameParameter, isDraftParameter, customerID, currencyIDParameter);
        }
    
        public virtual ObjectResult<SpGetItemListForMaterialPurification_Result> SpGetItemListForMaterialPurification(Nullable<int> itemCategoryID, string codeHint, string nameHint, string unitHint, string itemCategoryHint, string purchaseCategoryHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var unitHintParameter = unitHint != null ?
                new ObjectParameter("UnitHint", unitHint) :
                new ObjectParameter("UnitHint", typeof(string));
    
            var itemCategoryHintParameter = itemCategoryHint != null ?
                new ObjectParameter("ItemCategoryHint", itemCategoryHint) :
                new ObjectParameter("ItemCategoryHint", typeof(string));
    
            var purchaseCategoryHintParameter = purchaseCategoryHint != null ?
                new ObjectParameter("PurchaseCategoryHint", purchaseCategoryHint) :
                new ObjectParameter("PurchaseCategoryHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetItemListForMaterialPurification_Result>("SpGetItemListForMaterialPurification", itemCategoryIDParameter, codeHintParameter, nameHintParameter, unitHintParameter, itemCategoryHintParameter, purchaseCategoryHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateSupplier(string code, string name, Nullable<int> supplierCategoryID, string currency, string gstNo, string adharNo, string panCardNo, Nullable<int> creditDays, Nullable<int> supplierAccountsCategoryID, Nullable<int> supplierTaxCategoryID, Nullable<int> supplierTaxSubCategoryID, Nullable<int> paymentMethodID, Nullable<int> paymentGroupID, Nullable<int> relatedSupplierID, Nullable<System.DateTime> startDate, Nullable<bool> isDeactivated, Nullable<System.DateTime> deactivateedDate, Nullable<bool> isBlockForPurchase, Nullable<bool> isBlockForReceipts, Nullable<bool> isBlockForPayment, Nullable<bool> isGSTRegistered, Nullable<bool> isCustomer, Nullable<int> customerID, string oldSupplierCode, string uanNo, string bankName, string branchName, string acNo, string ifscNo, Nullable<bool> isEmployee, Nullable<int> employeeID, Nullable<bool> isActiveSupplier, Nullable<int> createdUserId, Nullable<System.DateTime> createdDate, string tradeLegalName, Nullable<int> applicationID, ObjectParameter supplierID, Nullable<int> currencyID)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var supplierCategoryIDParameter = supplierCategoryID.HasValue ?
                new ObjectParameter("SupplierCategoryID", supplierCategoryID) :
                new ObjectParameter("SupplierCategoryID", typeof(int));
    
            var currencyParameter = currency != null ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(string));
    
            var gstNoParameter = gstNo != null ?
                new ObjectParameter("GstNo", gstNo) :
                new ObjectParameter("GstNo", typeof(string));
    
            var adharNoParameter = adharNo != null ?
                new ObjectParameter("AdharNo", adharNo) :
                new ObjectParameter("AdharNo", typeof(string));
    
            var panCardNoParameter = panCardNo != null ?
                new ObjectParameter("PanCardNo", panCardNo) :
                new ObjectParameter("PanCardNo", typeof(string));
    
            var creditDaysParameter = creditDays.HasValue ?
                new ObjectParameter("CreditDays", creditDays) :
                new ObjectParameter("CreditDays", typeof(int));
    
            var supplierAccountsCategoryIDParameter = supplierAccountsCategoryID.HasValue ?
                new ObjectParameter("SupplierAccountsCategoryID", supplierAccountsCategoryID) :
                new ObjectParameter("SupplierAccountsCategoryID", typeof(int));
    
            var supplierTaxCategoryIDParameter = supplierTaxCategoryID.HasValue ?
                new ObjectParameter("SupplierTaxCategoryID", supplierTaxCategoryID) :
                new ObjectParameter("SupplierTaxCategoryID", typeof(int));
    
            var supplierTaxSubCategoryIDParameter = supplierTaxSubCategoryID.HasValue ?
                new ObjectParameter("SupplierTaxSubCategoryID", supplierTaxSubCategoryID) :
                new ObjectParameter("SupplierTaxSubCategoryID", typeof(int));
    
            var paymentMethodIDParameter = paymentMethodID.HasValue ?
                new ObjectParameter("PaymentMethodID", paymentMethodID) :
                new ObjectParameter("PaymentMethodID", typeof(int));
    
            var paymentGroupIDParameter = paymentGroupID.HasValue ?
                new ObjectParameter("PaymentGroupID", paymentGroupID) :
                new ObjectParameter("PaymentGroupID", typeof(int));
    
            var relatedSupplierIDParameter = relatedSupplierID.HasValue ?
                new ObjectParameter("RelatedSupplierID", relatedSupplierID) :
                new ObjectParameter("RelatedSupplierID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var isDeactivatedParameter = isDeactivated.HasValue ?
                new ObjectParameter("IsDeactivated", isDeactivated) :
                new ObjectParameter("IsDeactivated", typeof(bool));
    
            var deactivateedDateParameter = deactivateedDate.HasValue ?
                new ObjectParameter("DeactivateedDate", deactivateedDate) :
                new ObjectParameter("DeactivateedDate", typeof(System.DateTime));
    
            var isBlockForPurchaseParameter = isBlockForPurchase.HasValue ?
                new ObjectParameter("IsBlockForPurchase", isBlockForPurchase) :
                new ObjectParameter("IsBlockForPurchase", typeof(bool));
    
            var isBlockForReceiptsParameter = isBlockForReceipts.HasValue ?
                new ObjectParameter("IsBlockForReceipts", isBlockForReceipts) :
                new ObjectParameter("IsBlockForReceipts", typeof(bool));
    
            var isBlockForPaymentParameter = isBlockForPayment.HasValue ?
                new ObjectParameter("IsBlockForPayment", isBlockForPayment) :
                new ObjectParameter("IsBlockForPayment", typeof(bool));
    
            var isGSTRegisteredParameter = isGSTRegistered.HasValue ?
                new ObjectParameter("IsGSTRegistered", isGSTRegistered) :
                new ObjectParameter("IsGSTRegistered", typeof(bool));
    
            var isCustomerParameter = isCustomer.HasValue ?
                new ObjectParameter("IsCustomer", isCustomer) :
                new ObjectParameter("IsCustomer", typeof(bool));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var oldSupplierCodeParameter = oldSupplierCode != null ?
                new ObjectParameter("OldSupplierCode", oldSupplierCode) :
                new ObjectParameter("OldSupplierCode", typeof(string));
    
            var uanNoParameter = uanNo != null ?
                new ObjectParameter("UanNo", uanNo) :
                new ObjectParameter("UanNo", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var branchNameParameter = branchName != null ?
                new ObjectParameter("BranchName", branchName) :
                new ObjectParameter("BranchName", typeof(string));
    
            var acNoParameter = acNo != null ?
                new ObjectParameter("AcNo", acNo) :
                new ObjectParameter("AcNo", typeof(string));
    
            var ifscNoParameter = ifscNo != null ?
                new ObjectParameter("IfscNo", ifscNo) :
                new ObjectParameter("IfscNo", typeof(string));
    
            var isEmployeeParameter = isEmployee.HasValue ?
                new ObjectParameter("IsEmployee", isEmployee) :
                new ObjectParameter("IsEmployee", typeof(bool));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var isActiveSupplierParameter = isActiveSupplier.HasValue ?
                new ObjectParameter("IsActiveSupplier", isActiveSupplier) :
                new ObjectParameter("IsActiveSupplier", typeof(bool));
    
            var createdUserIdParameter = createdUserId.HasValue ?
                new ObjectParameter("CreatedUserId", createdUserId) :
                new ObjectParameter("CreatedUserId", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var tradeLegalNameParameter = tradeLegalName != null ?
                new ObjectParameter("TradeLegalName", tradeLegalName) :
                new ObjectParameter("TradeLegalName", typeof(string));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateSupplier", codeParameter, nameParameter, supplierCategoryIDParameter, currencyParameter, gstNoParameter, adharNoParameter, panCardNoParameter, creditDaysParameter, supplierAccountsCategoryIDParameter, supplierTaxCategoryIDParameter, supplierTaxSubCategoryIDParameter, paymentMethodIDParameter, paymentGroupIDParameter, relatedSupplierIDParameter, startDateParameter, isDeactivatedParameter, deactivateedDateParameter, isBlockForPurchaseParameter, isBlockForReceiptsParameter, isBlockForPaymentParameter, isGSTRegisteredParameter, isCustomerParameter, customerIDParameter, oldSupplierCodeParameter, uanNoParameter, bankNameParameter, branchNameParameter, acNoParameter, ifscNoParameter, isEmployeeParameter, employeeIDParameter, isActiveSupplierParameter, createdUserIdParameter, createdDateParameter, tradeLegalNameParameter, applicationIDParameter, supplierID, currencyIDParameter);
        }
    
        public virtual int SpUpdateCustomer(Nullable<int> iD, string code, string name, string name2, Nullable<int> categoryID, string contactPersonName, Nullable<int> priceListID, Nullable<int> discountID, Nullable<int> cashDiscountID, Nullable<int> customerTaxCategoryID, Nullable<int> customerAccountsCategoryID, Nullable<bool> isGSTRegistered, string aadhaarNo, string pANNo, string gSTNo, string faxNo, string emailID, Nullable<int> creditdays, Nullable<decimal> minimumCreditLimit, Nullable<decimal> maxCreditLimit, Nullable<int> paymentTypeID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> expiryDate, Nullable<bool> isInterCompany, Nullable<bool> isMappedtoExpsEntries, Nullable<bool> isBlockedForSalesOrders, Nullable<bool> isBlockedForSalesInvoices, Nullable<bool> isAlsoASupplier, Nullable<int> supplierID, Nullable<int> customerRouteID, Nullable<int> cashDiscountCategoryID, Nullable<int> fSOID, string oldCode, Nullable<decimal> customerMonthlyTarget, string tradeLegalName, Nullable<bool> isMappedtoServiceSales, Nullable<bool> isDraft, Nullable<int> currencyID, string currency, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> finYear, Nullable<int> createdUserID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var name2Parameter = name2 != null ?
                new ObjectParameter("Name2", name2) :
                new ObjectParameter("Name2", typeof(string));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var contactPersonNameParameter = contactPersonName != null ?
                new ObjectParameter("ContactPersonName", contactPersonName) :
                new ObjectParameter("ContactPersonName", typeof(string));
    
            var priceListIDParameter = priceListID.HasValue ?
                new ObjectParameter("PriceListID", priceListID) :
                new ObjectParameter("PriceListID", typeof(int));
    
            var discountIDParameter = discountID.HasValue ?
                new ObjectParameter("DiscountID", discountID) :
                new ObjectParameter("DiscountID", typeof(int));
    
            var cashDiscountIDParameter = cashDiscountID.HasValue ?
                new ObjectParameter("CashDiscountID", cashDiscountID) :
                new ObjectParameter("CashDiscountID", typeof(int));
    
            var customerTaxCategoryIDParameter = customerTaxCategoryID.HasValue ?
                new ObjectParameter("CustomerTaxCategoryID", customerTaxCategoryID) :
                new ObjectParameter("CustomerTaxCategoryID", typeof(int));
    
            var customerAccountsCategoryIDParameter = customerAccountsCategoryID.HasValue ?
                new ObjectParameter("CustomerAccountsCategoryID", customerAccountsCategoryID) :
                new ObjectParameter("CustomerAccountsCategoryID", typeof(int));
    
            var isGSTRegisteredParameter = isGSTRegistered.HasValue ?
                new ObjectParameter("IsGSTRegistered", isGSTRegistered) :
                new ObjectParameter("IsGSTRegistered", typeof(bool));
    
            var aadhaarNoParameter = aadhaarNo != null ?
                new ObjectParameter("AadhaarNo", aadhaarNo) :
                new ObjectParameter("AadhaarNo", typeof(string));
    
            var pANNoParameter = pANNo != null ?
                new ObjectParameter("PANNo", pANNo) :
                new ObjectParameter("PANNo", typeof(string));
    
            var gSTNoParameter = gSTNo != null ?
                new ObjectParameter("GSTNo", gSTNo) :
                new ObjectParameter("GSTNo", typeof(string));
    
            var faxNoParameter = faxNo != null ?
                new ObjectParameter("FaxNo", faxNo) :
                new ObjectParameter("FaxNo", typeof(string));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var creditdaysParameter = creditdays.HasValue ?
                new ObjectParameter("Creditdays", creditdays) :
                new ObjectParameter("Creditdays", typeof(int));
    
            var minimumCreditLimitParameter = minimumCreditLimit.HasValue ?
                new ObjectParameter("MinimumCreditLimit", minimumCreditLimit) :
                new ObjectParameter("MinimumCreditLimit", typeof(decimal));
    
            var maxCreditLimitParameter = maxCreditLimit.HasValue ?
                new ObjectParameter("MaxCreditLimit", maxCreditLimit) :
                new ObjectParameter("MaxCreditLimit", typeof(decimal));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var isInterCompanyParameter = isInterCompany.HasValue ?
                new ObjectParameter("IsInterCompany", isInterCompany) :
                new ObjectParameter("IsInterCompany", typeof(bool));
    
            var isMappedtoExpsEntriesParameter = isMappedtoExpsEntries.HasValue ?
                new ObjectParameter("IsMappedtoExpsEntries", isMappedtoExpsEntries) :
                new ObjectParameter("IsMappedtoExpsEntries", typeof(bool));
    
            var isBlockedForSalesOrdersParameter = isBlockedForSalesOrders.HasValue ?
                new ObjectParameter("IsBlockedForSalesOrders", isBlockedForSalesOrders) :
                new ObjectParameter("IsBlockedForSalesOrders", typeof(bool));
    
            var isBlockedForSalesInvoicesParameter = isBlockedForSalesInvoices.HasValue ?
                new ObjectParameter("IsBlockedForSalesInvoices", isBlockedForSalesInvoices) :
                new ObjectParameter("IsBlockedForSalesInvoices", typeof(bool));
    
            var isAlsoASupplierParameter = isAlsoASupplier.HasValue ?
                new ObjectParameter("IsAlsoASupplier", isAlsoASupplier) :
                new ObjectParameter("IsAlsoASupplier", typeof(bool));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var customerRouteIDParameter = customerRouteID.HasValue ?
                new ObjectParameter("CustomerRouteID", customerRouteID) :
                new ObjectParameter("CustomerRouteID", typeof(int));
    
            var cashDiscountCategoryIDParameter = cashDiscountCategoryID.HasValue ?
                new ObjectParameter("CashDiscountCategoryID", cashDiscountCategoryID) :
                new ObjectParameter("CashDiscountCategoryID", typeof(int));
    
            var fSOIDParameter = fSOID.HasValue ?
                new ObjectParameter("FSOID", fSOID) :
                new ObjectParameter("FSOID", typeof(int));
    
            var oldCodeParameter = oldCode != null ?
                new ObjectParameter("OldCode", oldCode) :
                new ObjectParameter("OldCode", typeof(string));
    
            var customerMonthlyTargetParameter = customerMonthlyTarget.HasValue ?
                new ObjectParameter("CustomerMonthlyTarget", customerMonthlyTarget) :
                new ObjectParameter("CustomerMonthlyTarget", typeof(decimal));
    
            var tradeLegalNameParameter = tradeLegalName != null ?
                new ObjectParameter("TradeLegalName", tradeLegalName) :
                new ObjectParameter("TradeLegalName", typeof(string));
    
            var isMappedtoServiceSalesParameter = isMappedtoServiceSales.HasValue ?
                new ObjectParameter("IsMappedtoServiceSales", isMappedtoServiceSales) :
                new ObjectParameter("IsMappedtoServiceSales", typeof(bool));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var currencyParameter = currency != null ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateCustomer", iDParameter, codeParameter, nameParameter, name2Parameter, categoryIDParameter, contactPersonNameParameter, priceListIDParameter, discountIDParameter, cashDiscountIDParameter, customerTaxCategoryIDParameter, customerAccountsCategoryIDParameter, isGSTRegisteredParameter, aadhaarNoParameter, pANNoParameter, gSTNoParameter, faxNoParameter, emailIDParameter, creditdaysParameter, minimumCreditLimitParameter, maxCreditLimitParameter, paymentTypeIDParameter, startDateParameter, expiryDateParameter, isInterCompanyParameter, isMappedtoExpsEntriesParameter, isBlockedForSalesOrdersParameter, isBlockedForSalesInvoicesParameter, isAlsoASupplierParameter, supplierIDParameter, customerRouteIDParameter, cashDiscountCategoryIDParameter, fSOIDParameter, oldCodeParameter, customerMonthlyTargetParameter, tradeLegalNameParameter, isMappedtoServiceSalesParameter, isDraftParameter, currencyIDParameter, currencyParameter, locationIDParameter, applicationIDParameter, finYearParameter, createdUserIDParameter);
        }
    
        public virtual ObjectResult<SpGetItemList_Result> SpGetItemList(string code, string description, string category, string partsNo, string partsClass, string partsGroup, string remark, string model, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var partsNoParameter = partsNo != null ?
                new ObjectParameter("PartsNo", partsNo) :
                new ObjectParameter("PartsNo", typeof(string));
    
            var partsClassParameter = partsClass != null ?
                new ObjectParameter("PartsClass", partsClass) :
                new ObjectParameter("PartsClass", typeof(string));
    
            var partsGroupParameter = partsGroup != null ?
                new ObjectParameter("PartsGroup", partsGroup) :
                new ObjectParameter("PartsGroup", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetItemList_Result>("SpGetItemList", codeParameter, descriptionParameter, categoryParameter, partsNoParameter, partsClassParameter, partsGroupParameter, remarkParameter, modelParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SPDeleteItemPartsNumber(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPDeleteItemPartsNumber", iDParameter);
        }
    
        public virtual ObjectResult<SPGetAlternativeItemByItemID_Result> SPGetAlternativeItemByItemID(Nullable<int> itemID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetAlternativeItemByItemID_Result>("SPGetAlternativeItemByItemID", itemIDParameter);
        }
    
        public virtual ObjectResult<SpGetItemPriceDetails_Result> SpGetItemPriceDetails(Nullable<int> itemID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetItemPriceDetails_Result>("SpGetItemPriceDetails", itemIDParameter);
        }
    
        public virtual ObjectResult<SPGetItemTaxByItemID_Result> SPGetItemTaxByItemID(Nullable<int> itemID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetItemTaxByItemID_Result>("SPGetItemTaxByItemID", itemIDParameter);
        }
    
        public virtual ObjectResult<SPGetItemWareHouseByItemID_Result> SPGetItemWareHouseByItemID(Nullable<int> itemID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetItemWareHouseByItemID_Result>("SPGetItemWareHouseByItemID", itemIDParameter);
        }
    
        public virtual int SpCreateUpdateItemPriceDetails(Nullable<int> itemID, Nullable<int> locationID, Nullable<int> applicationID, Nullable<decimal> salesPrice, Nullable<decimal> loosePrice)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var salesPriceParameter = salesPrice.HasValue ?
                new ObjectParameter("SalesPrice", salesPrice) :
                new ObjectParameter("SalesPrice", typeof(decimal));
    
            var loosePriceParameter = loosePrice.HasValue ?
                new ObjectParameter("LoosePrice", loosePrice) :
                new ObjectParameter("LoosePrice", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateUpdateItemPriceDetails", itemIDParameter, locationIDParameter, applicationIDParameter, salesPriceParameter, loosePriceParameter);
        }
    
        public virtual int SpUpdateSupplier(Nullable<int> iD, string name, Nullable<int> supplierCategoryID, string gstNo, string adharNo, string panCardNo, Nullable<int> creditDays, Nullable<int> supplierAccountsCategoryID, Nullable<int> supplierTaxCategoryID, Nullable<int> supplierTaxSubCategoryID, Nullable<int> paymentMethodID, Nullable<int> paymentGroupID, Nullable<int> relatedSupplierID, Nullable<System.DateTime> startDate, Nullable<bool> isDeactivated, Nullable<System.DateTime> deactivateedDate, Nullable<bool> isBlockForPurchase, Nullable<bool> isBlockForReceipts, Nullable<bool> isBlockForPayment, Nullable<bool> isGSTRegistered, Nullable<bool> isCustomer, Nullable<int> customerID, string oldSupplierCode, string uanNo, string bankName, string branchName, string acNo, string ifscNo, Nullable<bool> isEmployee, string tradeLegalName, Nullable<int> employeeID, Nullable<bool> isActiveSupplier, Nullable<int> currencyID, string currency, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> finYear)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var supplierCategoryIDParameter = supplierCategoryID.HasValue ?
                new ObjectParameter("SupplierCategoryID", supplierCategoryID) :
                new ObjectParameter("SupplierCategoryID", typeof(int));
    
            var gstNoParameter = gstNo != null ?
                new ObjectParameter("GstNo", gstNo) :
                new ObjectParameter("GstNo", typeof(string));
    
            var adharNoParameter = adharNo != null ?
                new ObjectParameter("AdharNo", adharNo) :
                new ObjectParameter("AdharNo", typeof(string));
    
            var panCardNoParameter = panCardNo != null ?
                new ObjectParameter("PanCardNo", panCardNo) :
                new ObjectParameter("PanCardNo", typeof(string));
    
            var creditDaysParameter = creditDays.HasValue ?
                new ObjectParameter("CreditDays", creditDays) :
                new ObjectParameter("CreditDays", typeof(int));
    
            var supplierAccountsCategoryIDParameter = supplierAccountsCategoryID.HasValue ?
                new ObjectParameter("SupplierAccountsCategoryID", supplierAccountsCategoryID) :
                new ObjectParameter("SupplierAccountsCategoryID", typeof(int));
    
            var supplierTaxCategoryIDParameter = supplierTaxCategoryID.HasValue ?
                new ObjectParameter("SupplierTaxCategoryID", supplierTaxCategoryID) :
                new ObjectParameter("SupplierTaxCategoryID", typeof(int));
    
            var supplierTaxSubCategoryIDParameter = supplierTaxSubCategoryID.HasValue ?
                new ObjectParameter("SupplierTaxSubCategoryID", supplierTaxSubCategoryID) :
                new ObjectParameter("SupplierTaxSubCategoryID", typeof(int));
    
            var paymentMethodIDParameter = paymentMethodID.HasValue ?
                new ObjectParameter("PaymentMethodID", paymentMethodID) :
                new ObjectParameter("PaymentMethodID", typeof(int));
    
            var paymentGroupIDParameter = paymentGroupID.HasValue ?
                new ObjectParameter("PaymentGroupID", paymentGroupID) :
                new ObjectParameter("PaymentGroupID", typeof(int));
    
            var relatedSupplierIDParameter = relatedSupplierID.HasValue ?
                new ObjectParameter("RelatedSupplierID", relatedSupplierID) :
                new ObjectParameter("RelatedSupplierID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var isDeactivatedParameter = isDeactivated.HasValue ?
                new ObjectParameter("IsDeactivated", isDeactivated) :
                new ObjectParameter("IsDeactivated", typeof(bool));
    
            var deactivateedDateParameter = deactivateedDate.HasValue ?
                new ObjectParameter("DeactivateedDate", deactivateedDate) :
                new ObjectParameter("DeactivateedDate", typeof(System.DateTime));
    
            var isBlockForPurchaseParameter = isBlockForPurchase.HasValue ?
                new ObjectParameter("IsBlockForPurchase", isBlockForPurchase) :
                new ObjectParameter("IsBlockForPurchase", typeof(bool));
    
            var isBlockForReceiptsParameter = isBlockForReceipts.HasValue ?
                new ObjectParameter("IsBlockForReceipts", isBlockForReceipts) :
                new ObjectParameter("IsBlockForReceipts", typeof(bool));
    
            var isBlockForPaymentParameter = isBlockForPayment.HasValue ?
                new ObjectParameter("IsBlockForPayment", isBlockForPayment) :
                new ObjectParameter("IsBlockForPayment", typeof(bool));
    
            var isGSTRegisteredParameter = isGSTRegistered.HasValue ?
                new ObjectParameter("IsGSTRegistered", isGSTRegistered) :
                new ObjectParameter("IsGSTRegistered", typeof(bool));
    
            var isCustomerParameter = isCustomer.HasValue ?
                new ObjectParameter("IsCustomer", isCustomer) :
                new ObjectParameter("IsCustomer", typeof(bool));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var oldSupplierCodeParameter = oldSupplierCode != null ?
                new ObjectParameter("OldSupplierCode", oldSupplierCode) :
                new ObjectParameter("OldSupplierCode", typeof(string));
    
            var uanNoParameter = uanNo != null ?
                new ObjectParameter("UanNo", uanNo) :
                new ObjectParameter("UanNo", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var branchNameParameter = branchName != null ?
                new ObjectParameter("BranchName", branchName) :
                new ObjectParameter("BranchName", typeof(string));
    
            var acNoParameter = acNo != null ?
                new ObjectParameter("AcNo", acNo) :
                new ObjectParameter("AcNo", typeof(string));
    
            var ifscNoParameter = ifscNo != null ?
                new ObjectParameter("IfscNo", ifscNo) :
                new ObjectParameter("IfscNo", typeof(string));
    
            var isEmployeeParameter = isEmployee.HasValue ?
                new ObjectParameter("IsEmployee", isEmployee) :
                new ObjectParameter("IsEmployee", typeof(bool));
    
            var tradeLegalNameParameter = tradeLegalName != null ?
                new ObjectParameter("TradeLegalName", tradeLegalName) :
                new ObjectParameter("TradeLegalName", typeof(string));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var isActiveSupplierParameter = isActiveSupplier.HasValue ?
                new ObjectParameter("IsActiveSupplier", isActiveSupplier) :
                new ObjectParameter("IsActiveSupplier", typeof(bool));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var currencyParameter = currency != null ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateSupplier", iDParameter, nameParameter, supplierCategoryIDParameter, gstNoParameter, adharNoParameter, panCardNoParameter, creditDaysParameter, supplierAccountsCategoryIDParameter, supplierTaxCategoryIDParameter, supplierTaxSubCategoryIDParameter, paymentMethodIDParameter, paymentGroupIDParameter, relatedSupplierIDParameter, startDateParameter, isDeactivatedParameter, deactivateedDateParameter, isBlockForPurchaseParameter, isBlockForReceiptsParameter, isBlockForPaymentParameter, isGSTRegisteredParameter, isCustomerParameter, customerIDParameter, oldSupplierCodeParameter, uanNoParameter, bankNameParameter, branchNameParameter, acNoParameter, ifscNoParameter, isEmployeeParameter, tradeLegalNameParameter, employeeIDParameter, isActiveSupplierParameter, currencyIDParameter, currencyParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter, finYearParameter);
        }
    
        public virtual ObjectResult<SPGetCurrencyList_Result> SPGetCurrencyList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetCurrencyList_Result>("SPGetCurrencyList");
        }
    
        public virtual int spCreateContact(string name1, string name2, string phoneNo, string alternateNo, string emailID, string address1, string address2, string address3, string designation, Nullable<int> customerID, Nullable<int> iSActive, Nullable<int> createdUserID, ObjectParameter iD)
        {
            var name1Parameter = name1 != null ?
                new ObjectParameter("Name1", name1) :
                new ObjectParameter("Name1", typeof(string));
    
            var name2Parameter = name2 != null ?
                new ObjectParameter("Name2", name2) :
                new ObjectParameter("Name2", typeof(string));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(string));
    
            var alternateNoParameter = alternateNo != null ?
                new ObjectParameter("AlternateNo", alternateNo) :
                new ObjectParameter("AlternateNo", typeof(string));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var address3Parameter = address3 != null ?
                new ObjectParameter("Address3", address3) :
                new ObjectParameter("Address3", typeof(string));
    
            var designationParameter = designation != null ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var iSActiveParameter = iSActive.HasValue ?
                new ObjectParameter("ISActive", iSActive) :
                new ObjectParameter("ISActive", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCreateContact", name1Parameter, name2Parameter, phoneNoParameter, alternateNoParameter, emailIDParameter, address1Parameter, address2Parameter, address3Parameter, designationParameter, customerIDParameter, iSActiveParameter, createdUserIDParameter, iD);
        }
    
        public virtual ObjectResult<SpGetContactByID_Result> SpGetContactByID(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetContactByID_Result>("SpGetContactByID", iDParameter);
        }
    
        public virtual ObjectResult<SPGetContactList_Result> SPGetContactList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetContactList_Result>("SPGetContactList");
        }
    
        public virtual int SpUpdateContact(Nullable<int> iD, string name1, string name2, string phoneNo, string alternateNo, string emailID, string address1, string address2, string address3, string designation, Nullable<int> customerID, Nullable<int> isActive, Nullable<int> createdUserID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var name1Parameter = name1 != null ?
                new ObjectParameter("Name1", name1) :
                new ObjectParameter("Name1", typeof(string));
    
            var name2Parameter = name2 != null ?
                new ObjectParameter("Name2", name2) :
                new ObjectParameter("Name2", typeof(string));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(string));
    
            var alternateNoParameter = alternateNo != null ?
                new ObjectParameter("AlternateNo", alternateNo) :
                new ObjectParameter("AlternateNo", typeof(string));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var address3Parameter = address3 != null ?
                new ObjectParameter("Address3", address3) :
                new ObjectParameter("Address3", typeof(string));
    
            var designationParameter = designation != null ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateContact", iDParameter, name1Parameter, name2Parameter, phoneNoParameter, alternateNoParameter, emailIDParameter, address1Parameter, address2Parameter, address3Parameter, designationParameter, customerIDParameter, isActiveParameter, createdUserIDParameter);
        }
    
        public virtual ObjectResult<SpGetContactSearchList_Result> SpGetContactSearchList(Nullable<int> customerID, string firstNameHint, string lastNameHint, string phoneHint, string alternateNoHint, string designationHint, string emailHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var firstNameHintParameter = firstNameHint != null ?
                new ObjectParameter("FirstNameHint", firstNameHint) :
                new ObjectParameter("FirstNameHint", typeof(string));
    
            var lastNameHintParameter = lastNameHint != null ?
                new ObjectParameter("LastNameHint", lastNameHint) :
                new ObjectParameter("LastNameHint", typeof(string));
    
            var phoneHintParameter = phoneHint != null ?
                new ObjectParameter("PhoneHint", phoneHint) :
                new ObjectParameter("PhoneHint", typeof(string));
    
            var alternateNoHintParameter = alternateNoHint != null ?
                new ObjectParameter("AlternateNoHint", alternateNoHint) :
                new ObjectParameter("AlternateNoHint", typeof(string));
    
            var designationHintParameter = designationHint != null ?
                new ObjectParameter("DesignationHint", designationHint) :
                new ObjectParameter("DesignationHint", typeof(string));
    
            var emailHintParameter = emailHint != null ?
                new ObjectParameter("EmailHint", emailHint) :
                new ObjectParameter("EmailHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetContactSearchList_Result>("SpGetContactSearchList", customerIDParameter, firstNameHintParameter, lastNameHintParameter, phoneHintParameter, alternateNoHintParameter, designationHintParameter, emailHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCurrentLocationTaxDetails_Result> SpGetCurrentLocationTaxDetails(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCurrentLocationTaxDetails_Result>("SpGetCurrentLocationTaxDetails", locationIDParameter);
        }
    
        public virtual int SPCreateSecondaryUnit(string name, Nullable<int> unitID, Nullable<decimal> packSize, Nullable<int> unitGroupID, Nullable<int> createdUserID, Nullable<System.DateTime> createdDate, ObjectParameter returnValue)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var packSizeParameter = packSize.HasValue ?
                new ObjectParameter("PackSize", packSize) :
                new ObjectParameter("PackSize", typeof(decimal));
    
            var unitGroupIDParameter = unitGroupID.HasValue ?
                new ObjectParameter("UnitGroupID", unitGroupID) :
                new ObjectParameter("UnitGroupID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPCreateSecondaryUnit", nameParameter, unitIDParameter, packSizeParameter, unitGroupIDParameter, createdUserIDParameter, createdDateParameter, returnValue);
        }
    
        public virtual ObjectResult<SpGetSecondaryUnit_Result> SpGetSecondaryUnit(Nullable<int> secondaryUnitID)
        {
            var secondaryUnitIDParameter = secondaryUnitID.HasValue ?
                new ObjectParameter("SecondaryUnitID", secondaryUnitID) :
                new ObjectParameter("SecondaryUnitID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSecondaryUnit_Result>("SpGetSecondaryUnit", secondaryUnitIDParameter);
        }
    
        public virtual int SpUpdateSecondaryUnit(Nullable<int> secondaryUnitID, string secondaryUnitName, Nullable<int> unitID, Nullable<int> unitGroupID, Nullable<decimal> packSize, Nullable<int> createdUserId, Nullable<System.DateTime> createdDate, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var secondaryUnitIDParameter = secondaryUnitID.HasValue ?
                new ObjectParameter("SecondaryUnitID", secondaryUnitID) :
                new ObjectParameter("SecondaryUnitID", typeof(int));
    
            var secondaryUnitNameParameter = secondaryUnitName != null ?
                new ObjectParameter("SecondaryUnitName", secondaryUnitName) :
                new ObjectParameter("SecondaryUnitName", typeof(string));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var unitGroupIDParameter = unitGroupID.HasValue ?
                new ObjectParameter("UnitGroupID", unitGroupID) :
                new ObjectParameter("UnitGroupID", typeof(int));
    
            var packSizeParameter = packSize.HasValue ?
                new ObjectParameter("PackSize", packSize) :
                new ObjectParameter("PackSize", typeof(decimal));
    
            var createdUserIdParameter = createdUserId.HasValue ?
                new ObjectParameter("CreatedUserId", createdUserId) :
                new ObjectParameter("CreatedUserId", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateSecondaryUnit", secondaryUnitIDParameter, secondaryUnitNameParameter, unitIDParameter, unitGroupIDParameter, packSizeParameter, createdUserIdParameter, createdDateParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCustomerList_Result> SpGetCustomerList(string type, Nullable<int> customerCategoryID, Nullable<int> stateID, string customerCodeHint, string customerNameHint, string customerLocationHint, string customerCategoryHint, string currencyNameHint, string landLineHint, string mobileNoHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var customerCategoryIDParameter = customerCategoryID.HasValue ?
                new ObjectParameter("CustomerCategoryID", customerCategoryID) :
                new ObjectParameter("CustomerCategoryID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var customerCodeHintParameter = customerCodeHint != null ?
                new ObjectParameter("CustomerCodeHint", customerCodeHint) :
                new ObjectParameter("CustomerCodeHint", typeof(string));
    
            var customerNameHintParameter = customerNameHint != null ?
                new ObjectParameter("CustomerNameHint", customerNameHint) :
                new ObjectParameter("CustomerNameHint", typeof(string));
    
            var customerLocationHintParameter = customerLocationHint != null ?
                new ObjectParameter("CustomerLocationHint", customerLocationHint) :
                new ObjectParameter("CustomerLocationHint", typeof(string));
    
            var customerCategoryHintParameter = customerCategoryHint != null ?
                new ObjectParameter("CustomerCategoryHint", customerCategoryHint) :
                new ObjectParameter("CustomerCategoryHint", typeof(string));
    
            var currencyNameHintParameter = currencyNameHint != null ?
                new ObjectParameter("CurrencyNameHint", currencyNameHint) :
                new ObjectParameter("CurrencyNameHint", typeof(string));
    
            var landLineHintParameter = landLineHint != null ?
                new ObjectParameter("LandLineHint", landLineHint) :
                new ObjectParameter("LandLineHint", typeof(string));
    
            var mobileNoHintParameter = mobileNoHint != null ?
                new ObjectParameter("MobileNoHint", mobileNoHint) :
                new ObjectParameter("MobileNoHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCustomerList_Result>("SpGetCustomerList", typeParameter, customerCategoryIDParameter, stateIDParameter, customerCodeHintParameter, customerNameHintParameter, customerLocationHintParameter, customerCategoryHintParameter, currencyNameHintParameter, landLineHintParameter, mobileNoHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetSuppliersList_Result> SpGetSuppliersList(string type, string codeHint, string nameHint, string locationHint, string itemCategoryHint, string supplierCategoryHint, string oldCodeHint, string gSTRegisteredHint, string landLine, string mobileNo, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var locationHintParameter = locationHint != null ?
                new ObjectParameter("LocationHint", locationHint) :
                new ObjectParameter("LocationHint", typeof(string));
    
            var itemCategoryHintParameter = itemCategoryHint != null ?
                new ObjectParameter("ItemCategoryHint", itemCategoryHint) :
                new ObjectParameter("ItemCategoryHint", typeof(string));
    
            var supplierCategoryHintParameter = supplierCategoryHint != null ?
                new ObjectParameter("SupplierCategoryHint", supplierCategoryHint) :
                new ObjectParameter("SupplierCategoryHint", typeof(string));
    
            var oldCodeHintParameter = oldCodeHint != null ?
                new ObjectParameter("OldCodeHint", oldCodeHint) :
                new ObjectParameter("OldCodeHint", typeof(string));
    
            var gSTRegisteredHintParameter = gSTRegisteredHint != null ?
                new ObjectParameter("GSTRegisteredHint", gSTRegisteredHint) :
                new ObjectParameter("GSTRegisteredHint", typeof(string));
    
            var landLineParameter = landLine != null ?
                new ObjectParameter("LandLine", landLine) :
                new ObjectParameter("LandLine", typeof(string));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSuppliersList_Result>("SpGetSuppliersList", typeParameter, codeHintParameter, nameHintParameter, locationHintParameter, itemCategoryHintParameter, supplierCategoryHintParameter, oldCodeHintParameter, gSTRegisteredHintParameter, landLineParameter, mobileNoParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetItemListForPurchaseRequisition_Result> SpGetItemListForPurchaseRequisition(Nullable<int> purchaseRequisitionID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var purchaseRequisitionIDParameter = purchaseRequisitionID.HasValue ?
                new ObjectParameter("PurchaseRequisitionID", purchaseRequisitionID) :
                new ObjectParameter("PurchaseRequisitionID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetItemListForPurchaseRequisition_Result>("SpGetItemListForPurchaseRequisition", purchaseRequisitionIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpSetItemIdUsingPopUP(Nullable<int> itemID, Nullable<int> salesInquiryItemsID, Nullable<int> purchaseRequisitionTrasID, Nullable<int> createdUserID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var salesInquiryItemsIDParameter = salesInquiryItemsID.HasValue ?
                new ObjectParameter("SalesInquiryItemsID", salesInquiryItemsID) :
                new ObjectParameter("SalesInquiryItemsID", typeof(int));
    
            var purchaseRequisitionTrasIDParameter = purchaseRequisitionTrasID.HasValue ?
                new ObjectParameter("PurchaseRequisitionTrasID", purchaseRequisitionTrasID) :
                new ObjectParameter("PurchaseRequisitionTrasID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpSetItemIdUsingPopUP", itemIDParameter, salesInquiryItemsIDParameter, purchaseRequisitionTrasIDParameter, createdUserIDParameter);
        }
    
        public virtual ObjectResult<SpGetAvailableStockItemList_Result> SpGetAvailableStockItemList(Nullable<int> itemCategoryID, Nullable<int> wareHouseID, Nullable<int> batchTypeID, string codeHint, string nameHint, string itemCategoryHint, string partsNoHint, string makeHint, string modelHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var itemCategoryHintParameter = itemCategoryHint != null ?
                new ObjectParameter("ItemCategoryHint", itemCategoryHint) :
                new ObjectParameter("ItemCategoryHint", typeof(string));
    
            var partsNoHintParameter = partsNoHint != null ?
                new ObjectParameter("PartsNoHint", partsNoHint) :
                new ObjectParameter("PartsNoHint", typeof(string));
    
            var makeHintParameter = makeHint != null ?
                new ObjectParameter("MakeHint", makeHint) :
                new ObjectParameter("MakeHint", typeof(string));
    
            var modelHintParameter = modelHint != null ?
                new ObjectParameter("ModelHint", modelHint) :
                new ObjectParameter("ModelHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAvailableStockItemList_Result>("SpGetAvailableStockItemList", itemCategoryIDParameter, wareHouseIDParameter, batchTypeIDParameter, codeHintParameter, nameHintParameter, itemCategoryHintParameter, partsNoHintParameter, makeHintParameter, modelHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetBatchDetailsByBatchID1_Result> SpGetBatchDetailsByBatchID1(Nullable<int> batchID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetBatchDetailsByBatchID1_Result>("SpGetBatchDetailsByBatchID1", batchIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetWareHouseByWareHouseID_Result> SpGetWareHouseByWareHouseID(Nullable<int> wareHouseID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetWareHouseByWareHouseID_Result>("SpGetWareHouseByWareHouseID", wareHouseIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetStockableItemList_Result> SpGetStockableItemList(Nullable<int> itemCategoryID, string codeHint, string nameHint, string itemCategoryHint, string partsNumberHHit, string modelHHit, string makeHHit, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var itemCategoryHintParameter = itemCategoryHint != null ?
                new ObjectParameter("ItemCategoryHint", itemCategoryHint) :
                new ObjectParameter("ItemCategoryHint", typeof(string));
    
            var partsNumberHHitParameter = partsNumberHHit != null ?
                new ObjectParameter("PartsNumberHHit", partsNumberHHit) :
                new ObjectParameter("PartsNumberHHit", typeof(string));
    
            var modelHHitParameter = modelHHit != null ?
                new ObjectParameter("ModelHHit", modelHHit) :
                new ObjectParameter("ModelHHit", typeof(string));
    
            var makeHHitParameter = makeHHit != null ?
                new ObjectParameter("MakeHHit", makeHHit) :
                new ObjectParameter("MakeHHit", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetStockableItemList_Result>("SpGetStockableItemList", itemCategoryIDParameter, codeHintParameter, nameHintParameter, itemCategoryHintParameter, partsNumberHHitParameter, modelHHitParameter, makeHHitParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetItemListForPurchase_Result> SpGetItemListForPurchase(string type, Nullable<int> itemCategoryID, Nullable<int> purchaseCategoryID, Nullable<int> businessCategoryID, Nullable<int> supplierID, string codeHint, string nameHint, string partsNumberHit, string modelHint, string remarksHint, string unitHint, string itemCategoryHint, string purchaseCategoryHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var purchaseCategoryIDParameter = purchaseCategoryID.HasValue ?
                new ObjectParameter("PurchaseCategoryID", purchaseCategoryID) :
                new ObjectParameter("PurchaseCategoryID", typeof(int));
    
            var businessCategoryIDParameter = businessCategoryID.HasValue ?
                new ObjectParameter("BusinessCategoryID", businessCategoryID) :
                new ObjectParameter("BusinessCategoryID", typeof(int));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var partsNumberHitParameter = partsNumberHit != null ?
                new ObjectParameter("PartsNumberHit", partsNumberHit) :
                new ObjectParameter("PartsNumberHit", typeof(string));
    
            var modelHintParameter = modelHint != null ?
                new ObjectParameter("ModelHint", modelHint) :
                new ObjectParameter("ModelHint", typeof(string));
    
            var remarksHintParameter = remarksHint != null ?
                new ObjectParameter("RemarksHint", remarksHint) :
                new ObjectParameter("RemarksHint", typeof(string));
    
            var unitHintParameter = unitHint != null ?
                new ObjectParameter("UnitHint", unitHint) :
                new ObjectParameter("UnitHint", typeof(string));
    
            var itemCategoryHintParameter = itemCategoryHint != null ?
                new ObjectParameter("ItemCategoryHint", itemCategoryHint) :
                new ObjectParameter("ItemCategoryHint", typeof(string));
    
            var purchaseCategoryHintParameter = purchaseCategoryHint != null ?
                new ObjectParameter("PurchaseCategoryHint", purchaseCategoryHint) :
                new ObjectParameter("PurchaseCategoryHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetItemListForPurchase_Result>("SpGetItemListForPurchase", typeParameter, itemCategoryIDParameter, purchaseCategoryIDParameter, businessCategoryIDParameter, supplierIDParameter, codeHintParameter, nameHintParameter, partsNumberHitParameter, modelHintParameter, remarksHintParameter, unitHintParameter, itemCategoryHintParameter, purchaseCategoryHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateAddress(string partyType, Nullable<int> partyID, string addressLine1, string addressLine2, string addressLine3, Nullable<int> countryId, string contactPerson, string place, Nullable<int> districtID, Nullable<int> stateID, string pIN, string landLine1, string landLine2, string mobileNo, string fax, string email, Nullable<bool> isBilling, Nullable<bool> isShipping, Nullable<bool> isDefault, Nullable<bool> isDefaultShipping, Nullable<int> createdUserID, Nullable<System.DateTime> createdDate, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var partyTypeParameter = partyType != null ?
                new ObjectParameter("PartyType", partyType) :
                new ObjectParameter("PartyType", typeof(string));
    
            var partyIDParameter = partyID.HasValue ?
                new ObjectParameter("PartyID", partyID) :
                new ObjectParameter("PartyID", typeof(int));
    
            var addressLine1Parameter = addressLine1 != null ?
                new ObjectParameter("AddressLine1", addressLine1) :
                new ObjectParameter("AddressLine1", typeof(string));
    
            var addressLine2Parameter = addressLine2 != null ?
                new ObjectParameter("AddressLine2", addressLine2) :
                new ObjectParameter("AddressLine2", typeof(string));
    
            var addressLine3Parameter = addressLine3 != null ?
                new ObjectParameter("AddressLine3", addressLine3) :
                new ObjectParameter("AddressLine3", typeof(string));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var contactPersonParameter = contactPerson != null ?
                new ObjectParameter("ContactPerson", contactPerson) :
                new ObjectParameter("ContactPerson", typeof(string));
    
            var placeParameter = place != null ?
                new ObjectParameter("Place", place) :
                new ObjectParameter("Place", typeof(string));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var pINParameter = pIN != null ?
                new ObjectParameter("PIN", pIN) :
                new ObjectParameter("PIN", typeof(string));
    
            var landLine1Parameter = landLine1 != null ?
                new ObjectParameter("LandLine1", landLine1) :
                new ObjectParameter("LandLine1", typeof(string));
    
            var landLine2Parameter = landLine2 != null ?
                new ObjectParameter("LandLine2", landLine2) :
                new ObjectParameter("LandLine2", typeof(string));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var isBillingParameter = isBilling.HasValue ?
                new ObjectParameter("IsBilling", isBilling) :
                new ObjectParameter("IsBilling", typeof(bool));
    
            var isShippingParameter = isShipping.HasValue ?
                new ObjectParameter("IsShipping", isShipping) :
                new ObjectParameter("IsShipping", typeof(bool));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            var isDefaultShippingParameter = isDefaultShipping.HasValue ?
                new ObjectParameter("IsDefaultShipping", isDefaultShipping) :
                new ObjectParameter("IsDefaultShipping", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateAddress", partyTypeParameter, partyIDParameter, addressLine1Parameter, addressLine2Parameter, addressLine3Parameter, countryIdParameter, contactPersonParameter, placeParameter, districtIDParameter, stateIDParameter, pINParameter, landLine1Parameter, landLine2Parameter, mobileNoParameter, faxParameter, emailParameter, isBillingParameter, isShippingParameter, isDefaultParameter, isDefaultShippingParameter, createdUserIDParameter, createdDateParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetSaleableItemList_Result> SpGetSaleableItemList(Nullable<int> itemCategoryID, Nullable<int> salesCategoryID, Nullable<int> priceListID, Nullable<int> storeID, Nullable<int> batchTypeID, string fullOrLoose, Nullable<bool> checkStock, string codeHint, string nameHint, string itemCategoryHint, string salesCategoryHint, string partsNoHint, string modelHint, string remarkHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var salesCategoryIDParameter = salesCategoryID.HasValue ?
                new ObjectParameter("SalesCategoryID", salesCategoryID) :
                new ObjectParameter("SalesCategoryID", typeof(int));
    
            var priceListIDParameter = priceListID.HasValue ?
                new ObjectParameter("PriceListID", priceListID) :
                new ObjectParameter("PriceListID", typeof(int));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var fullOrLooseParameter = fullOrLoose != null ?
                new ObjectParameter("FullOrLoose", fullOrLoose) :
                new ObjectParameter("FullOrLoose", typeof(string));
    
            var checkStockParameter = checkStock.HasValue ?
                new ObjectParameter("CheckStock", checkStock) :
                new ObjectParameter("CheckStock", typeof(bool));
    
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var itemCategoryHintParameter = itemCategoryHint != null ?
                new ObjectParameter("ItemCategoryHint", itemCategoryHint) :
                new ObjectParameter("ItemCategoryHint", typeof(string));
    
            var salesCategoryHintParameter = salesCategoryHint != null ?
                new ObjectParameter("SalesCategoryHint", salesCategoryHint) :
                new ObjectParameter("SalesCategoryHint", typeof(string));
    
            var partsNoHintParameter = partsNoHint != null ?
                new ObjectParameter("PartsNoHint", partsNoHint) :
                new ObjectParameter("PartsNoHint", typeof(string));
    
            var modelHintParameter = modelHint != null ?
                new ObjectParameter("ModelHint", modelHint) :
                new ObjectParameter("ModelHint", typeof(string));
    
            var remarkHintParameter = remarkHint != null ?
                new ObjectParameter("RemarkHint", remarkHint) :
                new ObjectParameter("RemarkHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSaleableItemList_Result>("SpGetSaleableItemList", itemCategoryIDParameter, salesCategoryIDParameter, priceListIDParameter, storeIDParameter, batchTypeIDParameter, fullOrLooseParameter, checkStockParameter, codeHintParameter, nameHintParameter, itemCategoryHintParameter, salesCategoryHintParameter, partsNoHintParameter, modelHintParameter, remarkHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateItemPartsNumber(Nullable<int> itemID, string partsNumber, Nullable<int> createdUserID, Nullable<bool> isDefault)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var partsNumberParameter = partsNumber != null ?
                new ObjectParameter("PartsNumber", partsNumber) :
                new ObjectParameter("PartsNumber", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateItemPartsNumber", itemIDParameter, partsNumberParameter, createdUserIDParameter, isDefaultParameter);
        }
    
        public virtual int SpCreateItemSecondaryUnit(Nullable<int> itemID, Nullable<int> secondaryUnitID, Nullable<int> createdUserID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var secondaryUnitIDParameter = secondaryUnitID.HasValue ?
                new ObjectParameter("SecondaryUnitID", secondaryUnitID) :
                new ObjectParameter("SecondaryUnitID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateItemSecondaryUnit", itemIDParameter, secondaryUnitIDParameter, createdUserIDParameter);
        }
    
        public virtual ObjectResult<SPGetItemPartsNumberByItemID_Result> SPGetItemPartsNumberByItemID(Nullable<int> itemID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetItemPartsNumberByItemID_Result>("SPGetItemPartsNumberByItemID", itemIDParameter);
        }
    
        public virtual ObjectResult<SPGetItemSecondaryUnitByItemID_Result> SPGetItemSecondaryUnitByItemID(Nullable<int> itemID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetItemSecondaryUnitByItemID_Result>("SPGetItemSecondaryUnitByItemID", itemIDParameter);
        }
    
        public virtual int SpUpdateItemPartsNumber(Nullable<int> iD, Nullable<int> itemID, Nullable<int> createdUserID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateItemPartsNumber", iDParameter, itemIDParameter, createdUserIDParameter);
        }
    
        public virtual int SPDeleteSecondaryUnitItems(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPDeleteSecondaryUnitItems", iDParameter);
        }
    
        public virtual ObjectResult<SPGetSecondarytUnitList_Result> SPGetSecondarytUnitList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetSecondarytUnitList_Result>("SPGetSecondarytUnitList");
        }
    
        public virtual ObjectResult<SPGetSecondarytUnitListByUnitID_Result> SPGetSecondarytUnitListByUnitID(Nullable<int> unitID)
        {
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetSecondarytUnitListByUnitID_Result>("SPGetSecondarytUnitListByUnitID", unitIDParameter);
        }
    
        public virtual ObjectResult<SpGetCustomerByID_Result> SpGetCustomerByID(Nullable<int> customerID, Nullable<int> applicationID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCustomerByID_Result>("SpGetCustomerByID", customerIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetBrand_Result> SpGetBrand()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetBrand_Result>("SpGetBrand");
        }
    
        public virtual ObjectResult<SpGetItemDetail_Result> SpGetItemDetail(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetItemDetail_Result>("SpGetItemDetail", iDParameter);
        }
    
        public virtual ObjectResult<SpGetLocationDetails_Result> SpGetLocationDetails(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetLocationDetails_Result>("SpGetLocationDetails", iDParameter);
        }
    
        public virtual ObjectResult<SpGetCurrencyByID_Result> SpGetCurrencyByID(Nullable<int> currencyID)
        {
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCurrencyByID_Result>("SpGetCurrencyByID", currencyIDParameter);
        }
    
        public virtual int SpUpdateCurrency(Nullable<int> currencyID, string code, string name, string description, Nullable<int> countryID, Nullable<int> decimalPlaces, string minimumCurrency, string minimumCurrencyCode, Nullable<int> modifiedUserID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var decimalPlacesParameter = decimalPlaces.HasValue ?
                new ObjectParameter("DecimalPlaces", decimalPlaces) :
                new ObjectParameter("DecimalPlaces", typeof(int));
    
            var minimumCurrencyParameter = minimumCurrency != null ?
                new ObjectParameter("MinimumCurrency", minimumCurrency) :
                new ObjectParameter("MinimumCurrency", typeof(string));
    
            var minimumCurrencyCodeParameter = minimumCurrencyCode != null ?
                new ObjectParameter("MinimumCurrencyCode", minimumCurrencyCode) :
                new ObjectParameter("MinimumCurrencyCode", typeof(string));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateCurrency", currencyIDParameter, codeParameter, nameParameter, descriptionParameter, countryIDParameter, decimalPlacesParameter, minimumCurrencyParameter, minimumCurrencyCodeParameter, modifiedUserIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int spCreateCurrency(string code, string name, string description, Nullable<int> countryID, Nullable<int> decimalPlaces, Nullable<int> createdUserID, string minimumCurrency, string minimuCurrencyCode)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var decimalPlacesParameter = decimalPlaces.HasValue ?
                new ObjectParameter("DecimalPlaces", decimalPlaces) :
                new ObjectParameter("DecimalPlaces", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var minimumCurrencyParameter = minimumCurrency != null ?
                new ObjectParameter("MinimumCurrency", minimumCurrency) :
                new ObjectParameter("MinimumCurrency", typeof(string));
    
            var minimuCurrencyCodeParameter = minimuCurrencyCode != null ?
                new ObjectParameter("MinimuCurrencyCode", minimuCurrencyCode) :
                new ObjectParameter("MinimuCurrencyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCreateCurrency", codeParameter, nameParameter, descriptionParameter, countryIDParameter, decimalPlacesParameter, createdUserIDParameter, minimumCurrencyParameter, minimuCurrencyCodeParameter);
        }
    
        public virtual int SpUpdateBrand(Nullable<int> iD, Nullable<int> brandId, string code, string brandName, string path, string image, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var brandNameParameter = brandName != null ?
                new ObjectParameter("BrandName", brandName) :
                new ObjectParameter("BrandName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("image", image) :
                new ObjectParameter("image", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateBrand", iDParameter, brandIdParameter, codeParameter, brandNameParameter, pathParameter, imageParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetBinDetailsByID_Result> SpGetBinDetailsByID(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetBinDetailsByID_Result>("SpGetBinDetailsByID", iDParameter);
        }
    
        public virtual ObjectResult<SPGetBinListMaster_Result> SPGetBinListMaster()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetBinListMaster_Result>("SPGetBinListMaster");
        }
    
        public virtual int spCreateBin(string binCode, Nullable<int> wareHouseID, Nullable<int> creatdUserID)
        {
            var binCodeParameter = binCode != null ?
                new ObjectParameter("BinCode", binCode) :
                new ObjectParameter("BinCode", typeof(string));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            var creatdUserIDParameter = creatdUserID.HasValue ?
                new ObjectParameter("CreatdUserID", creatdUserID) :
                new ObjectParameter("CreatdUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCreateBin", binCodeParameter, wareHouseIDParameter, creatdUserIDParameter);
        }
    
        public virtual int spCreateBrand(Nullable<int> id, Nullable<int> brandId, string code, string brandName, string path, string image)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var brandNameParameter = brandName != null ?
                new ObjectParameter("BrandName", brandName) :
                new ObjectParameter("BrandName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("image", image) :
                new ObjectParameter("image", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCreateBrand", idParameter, brandIdParameter, codeParameter, brandNameParameter, pathParameter, imageParameter);
        }
    
        public virtual ObjectResult<SpGetCurrencyByLocationID_Result> SpGetCurrencyByLocationID(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCurrencyByLocationID_Result>("SpGetCurrencyByLocationID", locationIDParameter);
        }
    
        public virtual ObjectResult<SpGetBrandByID_Result> SpGetBrandByID(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetBrandByID_Result>("SpGetBrandByID", iDParameter);
        }
    
        public virtual ObjectResult<SPGetBrandList_Result> SPGetBrandList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetBrandList_Result>("SPGetBrandList");
        }
    
        public virtual int SpUpdateBinDetails(Nullable<int> iD, string binCode, Nullable<int> wareHouseID, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var binCodeParameter = binCode != null ?
                new ObjectParameter("BinCode", binCode) :
                new ObjectParameter("BinCode", typeof(string));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateBinDetails", iDParameter, binCodeParameter, wareHouseIDParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateBrand1(Nullable<int> iD, Nullable<int> brandId, string code, string brandName, string path, string image, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var brandNameParameter = brandName != null ?
                new ObjectParameter("BrandName", brandName) :
                new ObjectParameter("BrandName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("image", image) :
                new ObjectParameter("image", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateBrand1", iDParameter, brandIdParameter, codeParameter, brandNameParameter, pathParameter, imageParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetVatPercentage_Result> SpGetVatPercentage(Nullable<int> locationID, Nullable<int> applicationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetVatPercentage_Result>("SpGetVatPercentage", locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateLocation(string code, string name, string place, Nullable<int> stateID, Nullable<int> locationGroupID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string companyName, string ownerName, string gSTNo, string jurisdiction, string authorizedSignature, string uRl, Nullable<int> locationHeadID, Nullable<int> supplierID, Nullable<int> customerID, Nullable<int> currencyID, Nullable<int> countryID, Nullable<int> applicationID, ObjectParameter locationID, string vatRegNo)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var placeParameter = place != null ?
                new ObjectParameter("Place", place) :
                new ObjectParameter("Place", typeof(string));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var locationGroupIDParameter = locationGroupID.HasValue ?
                new ObjectParameter("LocationGroupID", locationGroupID) :
                new ObjectParameter("LocationGroupID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var ownerNameParameter = ownerName != null ?
                new ObjectParameter("OwnerName", ownerName) :
                new ObjectParameter("OwnerName", typeof(string));
    
            var gSTNoParameter = gSTNo != null ?
                new ObjectParameter("GSTNo", gSTNo) :
                new ObjectParameter("GSTNo", typeof(string));
    
            var jurisdictionParameter = jurisdiction != null ?
                new ObjectParameter("Jurisdiction", jurisdiction) :
                new ObjectParameter("Jurisdiction", typeof(string));
    
            var authorizedSignatureParameter = authorizedSignature != null ?
                new ObjectParameter("AuthorizedSignature", authorizedSignature) :
                new ObjectParameter("AuthorizedSignature", typeof(string));
    
            var uRlParameter = uRl != null ?
                new ObjectParameter("URl", uRl) :
                new ObjectParameter("URl", typeof(string));
    
            var locationHeadIDParameter = locationHeadID.HasValue ?
                new ObjectParameter("LocationHeadID", locationHeadID) :
                new ObjectParameter("LocationHeadID", typeof(int));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var vatRegNoParameter = vatRegNo != null ?
                new ObjectParameter("VatRegNo", vatRegNo) :
                new ObjectParameter("VatRegNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateLocation", codeParameter, nameParameter, placeParameter, stateIDParameter, locationGroupIDParameter, startDateParameter, endDateParameter, companyNameParameter, ownerNameParameter, gSTNoParameter, jurisdictionParameter, authorizedSignatureParameter, uRlParameter, locationHeadIDParameter, supplierIDParameter, customerIDParameter, currencyIDParameter, countryIDParameter, applicationIDParameter, locationID, vatRegNoParameter);
        }
    
        public virtual int SpUpdateLocation(Nullable<int> iD, string code, string name, string place, Nullable<int> stateID, Nullable<int> locationGroupID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string companyName, string ownerName, string gSTNo, string jurisdiction, string authorizedSignature, string uRl, Nullable<int> locationHeadID, Nullable<int> supplierID, Nullable<int> customerID, Nullable<int> currencyID, Nullable<int> countryID, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID, string vatRegNo)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var placeParameter = place != null ?
                new ObjectParameter("Place", place) :
                new ObjectParameter("Place", typeof(string));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var locationGroupIDParameter = locationGroupID.HasValue ?
                new ObjectParameter("LocationGroupID", locationGroupID) :
                new ObjectParameter("LocationGroupID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var ownerNameParameter = ownerName != null ?
                new ObjectParameter("OwnerName", ownerName) :
                new ObjectParameter("OwnerName", typeof(string));
    
            var gSTNoParameter = gSTNo != null ?
                new ObjectParameter("GSTNo", gSTNo) :
                new ObjectParameter("GSTNo", typeof(string));
    
            var jurisdictionParameter = jurisdiction != null ?
                new ObjectParameter("Jurisdiction", jurisdiction) :
                new ObjectParameter("Jurisdiction", typeof(string));
    
            var authorizedSignatureParameter = authorizedSignature != null ?
                new ObjectParameter("AuthorizedSignature", authorizedSignature) :
                new ObjectParameter("AuthorizedSignature", typeof(string));
    
            var uRlParameter = uRl != null ?
                new ObjectParameter("URl", uRl) :
                new ObjectParameter("URl", typeof(string));
    
            var locationHeadIDParameter = locationHeadID.HasValue ?
                new ObjectParameter("LocationHeadID", locationHeadID) :
                new ObjectParameter("LocationHeadID", typeof(int));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var vatRegNoParameter = vatRegNo != null ?
                new ObjectParameter("VatRegNo", vatRegNo) :
                new ObjectParameter("VatRegNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateLocation", iDParameter, codeParameter, nameParameter, placeParameter, stateIDParameter, locationGroupIDParameter, startDateParameter, endDateParameter, companyNameParameter, ownerNameParameter, gSTNoParameter, jurisdictionParameter, authorizedSignatureParameter, uRlParameter, locationHeadIDParameter, supplierIDParameter, customerIDParameter, currencyIDParameter, countryIDParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter, vatRegNoParameter);
        }
    
        public virtual ObjectResult<SpGetAllItemListV31_Result> SpGetAllItemListV31(Nullable<int> itemCategoryID, string codeHint, string nameHint, string itemCategoryHint, string salesCategoryHint, string accountsCategoryHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var itemCategoryHintParameter = itemCategoryHint != null ?
                new ObjectParameter("ItemCategoryHint", itemCategoryHint) :
                new ObjectParameter("ItemCategoryHint", typeof(string));
    
            var salesCategoryHintParameter = salesCategoryHint != null ?
                new ObjectParameter("SalesCategoryHint", salesCategoryHint) :
                new ObjectParameter("SalesCategoryHint", typeof(string));
    
            var accountsCategoryHintParameter = accountsCategoryHint != null ?
                new ObjectParameter("AccountsCategoryHint", accountsCategoryHint) :
                new ObjectParameter("AccountsCategoryHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAllItemListV31_Result>("SpGetAllItemListV31", itemCategoryIDParameter, codeHintParameter, nameHintParameter, itemCategoryHintParameter, salesCategoryHintParameter, accountsCategoryHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetAccountHeadListV3_Result> SpGetAccountHeadListV3(string codeHint, string nameHint, string accountGroupHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var accountGroupHintParameter = accountGroupHint != null ?
                new ObjectParameter("AccountGroupHint", accountGroupHint) :
                new ObjectParameter("AccountGroupHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAccountHeadListV3_Result>("SpGetAccountHeadListV3", codeHintParameter, nameHintParameter, accountGroupHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter);
        }
    }
}
