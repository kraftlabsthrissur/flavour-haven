//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccessLayer.DBContext
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SalesEntities : DbContext
    {
        public SalesEntities()
            : base("name=SalesEntities")
        {
            ((IObjectContextAdapter)this).ObjectContext.CommandTimeout = 0;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CounterSale> CounterSales { get; set; }
        public virtual DbSet<CounterSalesReturnTran> CounterSalesReturnTrans { get; set; }
        public virtual DbSet<ProformaInvoice> ProformaInvoices { get; set; }
        public virtual DbSet<ProformaInvoiceTran> ProformaInvoiceTrans { get; set; }
        public virtual DbSet<SalesInvoice> SalesInvoices { get; set; }
        public virtual DbSet<SalesInvoiceTran> SalesInvoiceTrans { get; set; }
        public virtual DbSet<SalesOrder> SalesOrders { get; set; }
        public virtual DbSet<SalesOrderTran> SalesOrderTrans { get; set; }
        public virtual DbSet<SalesReturn> SalesReturns { get; set; }
        public virtual DbSet<TransportPermit> TransportPermits { get; set; }
        public virtual DbSet<TransportPermitTran> TransportPermitTrans { get; set; }
        public virtual DbSet<CounterSalesInvoiceAmountDetail> CounterSalesInvoiceAmountDetails { get; set; }
        public virtual DbSet<CounterSalesTran> CounterSalesTrans { get; set; }
        public virtual DbSet<GatePass> GatePasses { get; set; }
        public virtual DbSet<GatePassTran> GatePassTrans { get; set; }
        public virtual DbSet<ProformaApproval> ProformaApprovals { get; set; }
        public virtual DbSet<ProformaInvoiceAmountDetail> ProformaInvoiceAmountDetails { get; set; }
        public virtual DbSet<SalesInvoiceAmountDetail> SalesInvoiceAmountDetails { get; set; }
        public virtual DbSet<SalesReturnTran> SalesReturnTrans { get; set; }
        public virtual DbSet<CounterSalesReturn> CounterSalesReturns { get; set; }
    
        public virtual int SpCancelTransaction(Nullable<int> iD, string tableName, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCancelTransaction", iDParameter, tableNameParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateBatch(string itemType, Nullable<int> itemID, string batchNo, string customBatchNo, Nullable<System.DateTime> manufacturingDate, Nullable<System.DateTime> expiryDate, Nullable<int> batchTypeID, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter batchID)
        {
            var itemTypeParameter = itemType != null ?
                new ObjectParameter("ItemType", itemType) :
                new ObjectParameter("ItemType", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchNoParameter = batchNo != null ?
                new ObjectParameter("BatchNo", batchNo) :
                new ObjectParameter("BatchNo", typeof(string));
    
            var customBatchNoParameter = customBatchNo != null ?
                new ObjectParameter("CustomBatchNo", customBatchNo) :
                new ObjectParameter("CustomBatchNo", typeof(string));
    
            var manufacturingDateParameter = manufacturingDate.HasValue ?
                new ObjectParameter("ManufacturingDate", manufacturingDate) :
                new ObjectParameter("ManufacturingDate", typeof(System.DateTime));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateBatch", itemTypeParameter, itemIDParameter, batchNoParameter, customBatchNoParameter, manufacturingDateParameter, expiryDateParameter, batchTypeIDParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter, batchID);
        }
    
        public virtual int SpCreateBatchForDirectInvoice(string itemType, Nullable<int> itemID, string batchNo, string customBatchNo, Nullable<System.DateTime> manufacturingDate, Nullable<System.DateTime> expiryDate, Nullable<int> batchTypeID, Nullable<int> unitID, Nullable<decimal> mRP, Nullable<decimal> rate, Nullable<decimal> retailMRP, Nullable<decimal> retailRate, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter batchID)
        {
            var itemTypeParameter = itemType != null ?
                new ObjectParameter("ItemType", itemType) :
                new ObjectParameter("ItemType", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchNoParameter = batchNo != null ?
                new ObjectParameter("BatchNo", batchNo) :
                new ObjectParameter("BatchNo", typeof(string));
    
            var customBatchNoParameter = customBatchNo != null ?
                new ObjectParameter("CustomBatchNo", customBatchNo) :
                new ObjectParameter("CustomBatchNo", typeof(string));
    
            var manufacturingDateParameter = manufacturingDate.HasValue ?
                new ObjectParameter("ManufacturingDate", manufacturingDate) :
                new ObjectParameter("ManufacturingDate", typeof(System.DateTime));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var mRPParameter = mRP.HasValue ?
                new ObjectParameter("MRP", mRP) :
                new ObjectParameter("MRP", typeof(decimal));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var retailMRPParameter = retailMRP.HasValue ?
                new ObjectParameter("RetailMRP", retailMRP) :
                new ObjectParameter("RetailMRP", typeof(decimal));
    
            var retailRateParameter = retailRate.HasValue ?
                new ObjectParameter("RetailRate", retailRate) :
                new ObjectParameter("RetailRate", typeof(decimal));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateBatchForDirectInvoice", itemTypeParameter, itemIDParameter, batchNoParameter, customBatchNoParameter, manufacturingDateParameter, expiryDateParameter, batchTypeIDParameter, unitIDParameter, mRPParameter, rateParameter, retailMRPParameter, retailRateParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter, batchID);
        }
    
        public virtual int SpCreatePackingDetails(Nullable<int> refID, string type, string packSize, Nullable<int> unitID, Nullable<decimal> quantity, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var refIDParameter = refID.HasValue ?
                new ObjectParameter("RefID", refID) :
                new ObjectParameter("RefID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var packSizeParameter = packSize != null ?
                new ObjectParameter("PackSize", packSize) :
                new ObjectParameter("PackSize", typeof(string));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePackingDetails", refIDParameter, typeParameter, packSizeParameter, unitIDParameter, quantityParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetConfigByUser_Result> SpGetConfigByUser(string configName, Nullable<int> userID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var configNameParameter = configName != null ?
                new ObjectParameter("ConfigName", configName) :
                new ObjectParameter("ConfigName", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetConfigByUser_Result>("SpGetConfigByUser", configNameParameter, userIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCurrentFinYear_Result> SpGetCurrentFinYear(Nullable<int> applicationID)
        {
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCurrentFinYear_Result>("SpGetCurrentFinYear", applicationIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SpGetLocationIDForInterCompanyPurchase(Nullable<int> addressID, string partyType)
        {
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            var partyTypeParameter = partyType != null ?
                new ObjectParameter("PartyType", partyType) :
                new ObjectParameter("PartyType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SpGetLocationIDForInterCompanyPurchase", addressIDParameter, partyTypeParameter);
        }
    
        public virtual ObjectResult<SpGetMailReceiverDetails_Result> SpGetMailReceiverDetails(string uI, Nullable<int> iD)
        {
            var uIParameter = uI != null ?
                new ObjectParameter("UI", uI) :
                new ObjectParameter("UI", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetMailReceiverDetails_Result>("SpGetMailReceiverDetails", uIParameter, iDParameter);
        }
    
        public virtual ObjectResult<SpGetMailSenderDetails_Result> SpGetMailSenderDetails(string keys)
        {
            var keysParameter = keys != null ?
                new ObjectParameter("Keys", keys) :
                new ObjectParameter("Keys", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetMailSenderDetails_Result>("SpGetMailSenderDetails", keysParameter);
        }
    
        public virtual ObjectResult<SpGetPackingDetails_Result> SpGetPackingDetails(Nullable<int> referenceID, string type, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var referenceIDParameter = referenceID.HasValue ?
                new ObjectParameter("ReferenceID", referenceID) :
                new ObjectParameter("ReferenceID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPackingDetails_Result>("SpGetPackingDetails", referenceIDParameter, typeParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpIsCodeAlreadyExists(string tableName, string fieldName, string code, Nullable<int> iD, ObjectParameter isExists)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("tableName", tableName) :
                new ObjectParameter("tableName", typeof(string));
    
            var fieldNameParameter = fieldName != null ?
                new ObjectParameter("FieldName", fieldName) :
                new ObjectParameter("FieldName", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpIsCodeAlreadyExists", tableNameParameter, fieldNameParameter, codeParameter, iDParameter, isExists);
        }
    
        public virtual int SpSuspendTransaction(Nullable<int> iD, string tableName, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter retValue)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpSuspendTransaction", iDParameter, tableNameParameter, finYearParameter, locationIDParameter, applicationIDParameter, retValue);
        }
    
        public virtual int SpUpDateMailSentDetails(string uI, Nullable<int> iD)
        {
            var uIParameter = uI != null ?
                new ObjectParameter("UI", uI) :
                new ObjectParameter("UI", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpDateMailSentDetails", uIParameter, iDParameter);
        }
    
        public virtual int SpUpdateSerialNo(string formName, string fieldName, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter serialNo)
        {
            var formNameParameter = formName != null ?
                new ObjectParameter("FormName", formName) :
                new ObjectParameter("FormName", typeof(string));
    
            var fieldNameParameter = fieldName != null ?
                new ObjectParameter("FieldName", fieldName) :
                new ObjectParameter("FieldName", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateSerialNo", formNameParameter, fieldNameParameter, finYearParameter, locationIDParameter, applicationIDParameter, serialNo);
        }
    
        public virtual int CreateDirectSalesOrderInPatientDiagnosis(Nullable<int> patientID, Nullable<System.DateTime> date, Nullable<int> finYear, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateDirectSalesOrderInPatientDiagnosis", patientIDParameter, dateParameter, finYearParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int InsertSalesOrderItems(Nullable<int> salesOrderID, string salesOrderTrans, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var salesOrderIDParameter = salesOrderID.HasValue ?
                new ObjectParameter("SalesOrderID", salesOrderID) :
                new ObjectParameter("SalesOrderID", typeof(int));
    
            var salesOrderTransParameter = salesOrderTrans != null ?
                new ObjectParameter("SalesOrderTrans", salesOrderTrans) :
                new ObjectParameter("SalesOrderTrans", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSalesOrderItems", salesOrderIDParameter, salesOrderTransParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpApproveSalesOrder(Nullable<int> salesOrderID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var salesOrderIDParameter = salesOrderID.HasValue ?
                new ObjectParameter("SalesOrderID", salesOrderID) :
                new ObjectParameter("SalesOrderID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpApproveSalesOrder", salesOrderIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCalculateEligibleIncentive(string partyType, Nullable<int> timePeriodID, Nullable<int> durationID, Nullable<int> finYear, Nullable<int> applicationID)
        {
            var partyTypeParameter = partyType != null ?
                new ObjectParameter("PartyType", partyType) :
                new ObjectParameter("PartyType", typeof(string));
    
            var timePeriodIDParameter = timePeriodID.HasValue ?
                new ObjectParameter("TimePeriodID", timePeriodID) :
                new ObjectParameter("TimePeriodID", typeof(int));
    
            var durationIDParameter = durationID.HasValue ?
                new ObjectParameter("DurationID", durationID) :
                new ObjectParameter("DurationID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCalculateEligibleIncentive", partyTypeParameter, timePeriodIDParameter, durationIDParameter, finYearParameter, applicationIDParameter);
        }
    
        public virtual int SpCalculateFSOIncentiveMonthly(string month, string partyType, Nullable<int> finYear, Nullable<int> applicationID)
        {
            var monthParameter = month != null ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(string));
    
            var partyTypeParameter = partyType != null ?
                new ObjectParameter("PartyType", partyType) :
                new ObjectParameter("PartyType", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCalculateFSOIncentiveMonthly", monthParameter, partyTypeParameter, finYearParameter, applicationIDParameter);
        }
    
        public virtual int SpCancelCounterSale(Nullable<int> counterSalesID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var counterSalesIDParameter = counterSalesID.HasValue ?
                new ObjectParameter("CounterSalesID", counterSalesID) :
                new ObjectParameter("CounterSalesID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCancelCounterSale", counterSalesIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCancelCounterSales(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCancelCounterSales", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCancelProformaInvoice(Nullable<int> proformaInvoiceID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var proformaInvoiceIDParameter = proformaInvoiceID.HasValue ?
                new ObjectParameter("ProformaInvoiceID", proformaInvoiceID) :
                new ObjectParameter("ProformaInvoiceID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCancelProformaInvoice", proformaInvoiceIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCancelSalesInvoice(Nullable<int> salesInvoiceID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter returnValue)
        {
            var salesInvoiceIDParameter = salesInvoiceID.HasValue ?
                new ObjectParameter("SalesInvoiceID", salesInvoiceID) :
                new ObjectParameter("SalesInvoiceID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCancelSalesInvoice", salesInvoiceIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, returnValue);
        }
    
        public virtual int SpCancelSalesOrder(Nullable<int> salesOrderID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var salesOrderIDParameter = salesOrderID.HasValue ?
                new ObjectParameter("SalesOrderID", salesOrderID) :
                new ObjectParameter("SalesOrderID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCancelSalesOrder", salesOrderIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCancelServiceSalesInvoice(Nullable<int> salesInvoiceID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var salesInvoiceIDParameter = salesInvoiceID.HasValue ?
                new ObjectParameter("SalesInvoiceID", salesInvoiceID) :
                new ObjectParameter("SalesInvoiceID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCancelServiceSalesInvoice", salesInvoiceIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCancelServiceSalesOrder(Nullable<int> salesOrderID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var salesOrderIDParameter = salesOrderID.HasValue ?
                new ObjectParameter("SalesOrderID", salesOrderID) :
                new ObjectParameter("SalesOrderID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCancelServiceSalesOrder", salesOrderIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCashDiscountPercentage(Nullable<int> customerID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter cashDiscountPercentage)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCashDiscountPercentage", customerIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, cashDiscountPercentage);
        }
    
        public virtual int SpCashDiscountReverce()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCashDiscountReverce");
        }
    
        public virtual int SpCashDiscountReverse()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCashDiscountReverse");
        }
    
        public virtual int SpCashDiscountReverseByDate(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCashDiscountReverseByDate", dateParameter);
        }
    
        public virtual int SpCheckCreditStatus(Nullable<int> proformaInvoiceID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var proformaInvoiceIDParameter = proformaInvoiceID.HasValue ?
                new ObjectParameter("ProformaInvoiceID", proformaInvoiceID) :
                new ObjectParameter("ProformaInvoiceID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCheckCreditStatus", proformaInvoiceIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCheckCreditStatusSales(Nullable<int> salesInvoiceID, Nullable<int> applicationID, ObjectParameter retValue)
        {
            var salesInvoiceIDParameter = salesInvoiceID.HasValue ?
                new ObjectParameter("SalesInvoiceID", salesInvoiceID) :
                new ObjectParameter("SalesInvoiceID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCheckCreditStatusSales", salesInvoiceIDParameter, applicationIDParameter, retValue);
        }
    
        public virtual int SpChequeStatusCashDiscountReverse(Nullable<int> voucherID)
        {
            var voucherIDParameter = voucherID.HasValue ?
                new ObjectParameter("voucherID", voucherID) :
                new ObjectParameter("voucherID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpChequeStatusCashDiscountReverse", voucherIDParameter);
        }
    
        public virtual int SpCreateCounterSalesAmountDetails(Nullable<int> counterSalesID, string transNo, Nullable<System.DateTime> transDate, Nullable<decimal> amount, string particulars, Nullable<decimal> percentage, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var counterSalesIDParameter = counterSalesID.HasValue ?
                new ObjectParameter("CounterSalesID", counterSalesID) :
                new ObjectParameter("CounterSalesID", typeof(int));
    
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var transDateParameter = transDate.HasValue ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(System.DateTime));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var particularsParameter = particulars != null ?
                new ObjectParameter("Particulars", particulars) :
                new ObjectParameter("Particulars", typeof(string));
    
            var percentageParameter = percentage.HasValue ?
                new ObjectParameter("Percentage", percentage) :
                new ObjectParameter("Percentage", typeof(decimal));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateCounterSalesAmountDetails", counterSalesIDParameter, transNoParameter, transDateParameter, amountParameter, particularsParameter, percentageParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateDirectSalesOrder(Nullable<int> patientID, Nullable<int> appointmentProcessID, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateDirectSalesOrder", patientIDParameter, appointmentProcessIDParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateDirectServiceSalesInvoiceTrans(Nullable<int> salesInvoiceID, Nullable<int> salesOrderID, Nullable<int> itemID, Nullable<decimal> quantity, Nullable<decimal> invoiceQty, Nullable<decimal> mRP, Nullable<decimal> basicPrice, Nullable<decimal> grossAmount, Nullable<decimal> discountPercentage, Nullable<decimal> discountAmount, Nullable<decimal> taxableAmount, Nullable<decimal> sGSTPercentage, Nullable<decimal> cGSTPercentage, Nullable<decimal> iGSTPercentage, Nullable<decimal> cessPecentage, Nullable<decimal> sGSTAmt, Nullable<decimal> cGSTAmt, Nullable<decimal> iGSTAmt, Nullable<decimal> cessAmount, Nullable<decimal> netAmt, Nullable<int> unitID, string remarks, Nullable<int> billablesID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter processed)
        {
            var salesInvoiceIDParameter = salesInvoiceID.HasValue ?
                new ObjectParameter("SalesInvoiceID", salesInvoiceID) :
                new ObjectParameter("SalesInvoiceID", typeof(int));
    
            var salesOrderIDParameter = salesOrderID.HasValue ?
                new ObjectParameter("SalesOrderID", salesOrderID) :
                new ObjectParameter("SalesOrderID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var invoiceQtyParameter = invoiceQty.HasValue ?
                new ObjectParameter("InvoiceQty", invoiceQty) :
                new ObjectParameter("InvoiceQty", typeof(decimal));
    
            var mRPParameter = mRP.HasValue ?
                new ObjectParameter("MRP", mRP) :
                new ObjectParameter("MRP", typeof(decimal));
    
            var basicPriceParameter = basicPrice.HasValue ?
                new ObjectParameter("BasicPrice", basicPrice) :
                new ObjectParameter("BasicPrice", typeof(decimal));
    
            var grossAmountParameter = grossAmount.HasValue ?
                new ObjectParameter("GrossAmount", grossAmount) :
                new ObjectParameter("GrossAmount", typeof(decimal));
    
            var discountPercentageParameter = discountPercentage.HasValue ?
                new ObjectParameter("DiscountPercentage", discountPercentage) :
                new ObjectParameter("DiscountPercentage", typeof(decimal));
    
            var discountAmountParameter = discountAmount.HasValue ?
                new ObjectParameter("DiscountAmount", discountAmount) :
                new ObjectParameter("DiscountAmount", typeof(decimal));
    
            var taxableAmountParameter = taxableAmount.HasValue ?
                new ObjectParameter("TaxableAmount", taxableAmount) :
                new ObjectParameter("TaxableAmount", typeof(decimal));
    
            var sGSTPercentageParameter = sGSTPercentage.HasValue ?
                new ObjectParameter("SGSTPercentage", sGSTPercentage) :
                new ObjectParameter("SGSTPercentage", typeof(decimal));
    
            var cGSTPercentageParameter = cGSTPercentage.HasValue ?
                new ObjectParameter("CGSTPercentage", cGSTPercentage) :
                new ObjectParameter("CGSTPercentage", typeof(decimal));
    
            var iGSTPercentageParameter = iGSTPercentage.HasValue ?
                new ObjectParameter("IGSTPercentage", iGSTPercentage) :
                new ObjectParameter("IGSTPercentage", typeof(decimal));
    
            var cessPecentageParameter = cessPecentage.HasValue ?
                new ObjectParameter("CessPecentage", cessPecentage) :
                new ObjectParameter("CessPecentage", typeof(decimal));
    
            var sGSTAmtParameter = sGSTAmt.HasValue ?
                new ObjectParameter("SGSTAmt", sGSTAmt) :
                new ObjectParameter("SGSTAmt", typeof(decimal));
    
            var cGSTAmtParameter = cGSTAmt.HasValue ?
                new ObjectParameter("CGSTAmt", cGSTAmt) :
                new ObjectParameter("CGSTAmt", typeof(decimal));
    
            var iGSTAmtParameter = iGSTAmt.HasValue ?
                new ObjectParameter("IGSTAmt", iGSTAmt) :
                new ObjectParameter("IGSTAmt", typeof(decimal));
    
            var cessAmountParameter = cessAmount.HasValue ?
                new ObjectParameter("CessAmount", cessAmount) :
                new ObjectParameter("CessAmount", typeof(decimal));
    
            var netAmtParameter = netAmt.HasValue ?
                new ObjectParameter("NetAmt", netAmt) :
                new ObjectParameter("NetAmt", typeof(decimal));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var billablesIDParameter = billablesID.HasValue ?
                new ObjectParameter("BillablesID", billablesID) :
                new ObjectParameter("BillablesID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateDirectServiceSalesInvoiceTrans", salesInvoiceIDParameter, salesOrderIDParameter, itemIDParameter, quantityParameter, invoiceQtyParameter, mRPParameter, basicPriceParameter, grossAmountParameter, discountPercentageParameter, discountAmountParameter, taxableAmountParameter, sGSTPercentageParameter, cGSTPercentageParameter, iGSTPercentageParameter, cessPecentageParameter, sGSTAmtParameter, cGSTAmtParameter, iGSTAmtParameter, cessAmountParameter, netAmtParameter, unitIDParameter, remarksParameter, billablesIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, processed);
        }
    
        public virtual int SpCreateGatePass(string transNo, Nullable<System.DateTime> transDate, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string salesman, Nullable<int> vehicleNoID, Nullable<System.DateTime> despatchDateTime, string time, Nullable<int> driverID, string drivingLicense, string vehicleOwner, string transportingAgency, string helperName, string area, Nullable<decimal> startingKilometer, string issuedBy, Nullable<int> bagCount, Nullable<int> canCount, Nullable<int> boxCount, Nullable<decimal> totalInvoiceAmount, Nullable<bool> isDraft, string vehicleNo, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter gatePassID)
        {
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var transDateParameter = transDate.HasValue ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(System.DateTime));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var salesmanParameter = salesman != null ?
                new ObjectParameter("Salesman", salesman) :
                new ObjectParameter("Salesman", typeof(string));
    
            var vehicleNoIDParameter = vehicleNoID.HasValue ?
                new ObjectParameter("VehicleNoID", vehicleNoID) :
                new ObjectParameter("VehicleNoID", typeof(int));
    
            var despatchDateTimeParameter = despatchDateTime.HasValue ?
                new ObjectParameter("DespatchDateTime", despatchDateTime) :
                new ObjectParameter("DespatchDateTime", typeof(System.DateTime));
    
            var timeParameter = time != null ?
                new ObjectParameter("Time", time) :
                new ObjectParameter("Time", typeof(string));
    
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(int));
    
            var drivingLicenseParameter = drivingLicense != null ?
                new ObjectParameter("DrivingLicense", drivingLicense) :
                new ObjectParameter("DrivingLicense", typeof(string));
    
            var vehicleOwnerParameter = vehicleOwner != null ?
                new ObjectParameter("VehicleOwner", vehicleOwner) :
                new ObjectParameter("VehicleOwner", typeof(string));
    
            var transportingAgencyParameter = transportingAgency != null ?
                new ObjectParameter("TransportingAgency", transportingAgency) :
                new ObjectParameter("TransportingAgency", typeof(string));
    
            var helperNameParameter = helperName != null ?
                new ObjectParameter("HelperName", helperName) :
                new ObjectParameter("HelperName", typeof(string));
    
            var areaParameter = area != null ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(string));
    
            var startingKilometerParameter = startingKilometer.HasValue ?
                new ObjectParameter("StartingKilometer", startingKilometer) :
                new ObjectParameter("StartingKilometer", typeof(decimal));
    
            var issuedByParameter = issuedBy != null ?
                new ObjectParameter("IssuedBy", issuedBy) :
                new ObjectParameter("IssuedBy", typeof(string));
    
            var bagCountParameter = bagCount.HasValue ?
                new ObjectParameter("BagCount", bagCount) :
                new ObjectParameter("BagCount", typeof(int));
    
            var canCountParameter = canCount.HasValue ?
                new ObjectParameter("CanCount", canCount) :
                new ObjectParameter("CanCount", typeof(int));
    
            var boxCountParameter = boxCount.HasValue ?
                new ObjectParameter("BoxCount", boxCount) :
                new ObjectParameter("BoxCount", typeof(int));
    
            var totalInvoiceAmountParameter = totalInvoiceAmount.HasValue ?
                new ObjectParameter("TotalInvoiceAmount", totalInvoiceAmount) :
                new ObjectParameter("TotalInvoiceAmount", typeof(decimal));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var vehicleNoParameter = vehicleNo != null ?
                new ObjectParameter("VehicleNo", vehicleNo) :
                new ObjectParameter("VehicleNo", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateGatePass", transNoParameter, transDateParameter, fromDateParameter, toDateParameter, salesmanParameter, vehicleNoIDParameter, despatchDateTimeParameter, timeParameter, driverIDParameter, drivingLicenseParameter, vehicleOwnerParameter, transportingAgencyParameter, helperNameParameter, areaParameter, startingKilometerParameter, issuedByParameter, bagCountParameter, canCountParameter, boxCountParameter, totalInvoiceAmountParameter, isDraftParameter, vehicleNoParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, gatePassID);
        }
    
        public virtual int SpCreateGatePassTrans(Nullable<int> gatePassID, Nullable<int> transID, Nullable<decimal> amount, string area, Nullable<int> pPSNO, string type, Nullable<int> noOfBags, Nullable<int> noOfboxes, Nullable<int> noOfCans, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var gatePassIDParameter = gatePassID.HasValue ?
                new ObjectParameter("GatePassID", gatePassID) :
                new ObjectParameter("GatePassID", typeof(int));
    
            var transIDParameter = transID.HasValue ?
                new ObjectParameter("TransID", transID) :
                new ObjectParameter("TransID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var areaParameter = area != null ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(string));
    
            var pPSNOParameter = pPSNO.HasValue ?
                new ObjectParameter("PPSNO", pPSNO) :
                new ObjectParameter("PPSNO", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var noOfBagsParameter = noOfBags.HasValue ?
                new ObjectParameter("NoOfBags", noOfBags) :
                new ObjectParameter("NoOfBags", typeof(int));
    
            var noOfboxesParameter = noOfboxes.HasValue ?
                new ObjectParameter("NoOfboxes", noOfboxes) :
                new ObjectParameter("NoOfboxes", typeof(int));
    
            var noOfCansParameter = noOfCans.HasValue ?
                new ObjectParameter("NoOfCans", noOfCans) :
                new ObjectParameter("NoOfCans", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateGatePassTrans", gatePassIDParameter, transIDParameter, amountParameter, areaParameter, pPSNOParameter, typeParameter, noOfBagsParameter, noOfboxesParameter, noOfCansParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateProformaInvoice(string invoice, string items, string amountDetails, string packingDetails, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter proformaInvoiceID, ObjectParameter retValue)
        {
            var invoiceParameter = invoice != null ?
                new ObjectParameter("Invoice", invoice) :
                new ObjectParameter("Invoice", typeof(string));
    
            var itemsParameter = items != null ?
                new ObjectParameter("Items", items) :
                new ObjectParameter("Items", typeof(string));
    
            var amountDetailsParameter = amountDetails != null ?
                new ObjectParameter("AmountDetails", amountDetails) :
                new ObjectParameter("AmountDetails", typeof(string));
    
            var packingDetailsParameter = packingDetails != null ?
                new ObjectParameter("PackingDetails", packingDetails) :
                new ObjectParameter("PackingDetails", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateProformaInvoice", invoiceParameter, itemsParameter, amountDetailsParameter, packingDetailsParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, proformaInvoiceID, retValue);
        }
    
        public virtual int SpCreateProformaInvoiceTrans(Nullable<int> proformaInvoiceID, string items, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter retValue)
        {
            var proformaInvoiceIDParameter = proformaInvoiceID.HasValue ?
                new ObjectParameter("ProformaInvoiceID", proformaInvoiceID) :
                new ObjectParameter("ProformaInvoiceID", typeof(int));
    
            var itemsParameter = items != null ?
                new ObjectParameter("Items", items) :
                new ObjectParameter("Items", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateProformaInvoiceTrans", proformaInvoiceIDParameter, itemsParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, retValue);
        }
    
        public virtual int SpCreateSalesInvoiceAmountDetails(Nullable<int> salesInvoiceID, Nullable<decimal> amount, string particulars, Nullable<decimal> percentage, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, Nullable<decimal> taxableAmount)
        {
            var salesInvoiceIDParameter = salesInvoiceID.HasValue ?
                new ObjectParameter("SalesInvoiceID", salesInvoiceID) :
                new ObjectParameter("SalesInvoiceID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var particularsParameter = particulars != null ?
                new ObjectParameter("Particulars", particulars) :
                new ObjectParameter("Particulars", typeof(string));
    
            var percentageParameter = percentage.HasValue ?
                new ObjectParameter("Percentage", percentage) :
                new ObjectParameter("Percentage", typeof(decimal));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var taxableAmountParameter = taxableAmount.HasValue ?
                new ObjectParameter("TaxableAmount", taxableAmount) :
                new ObjectParameter("TaxableAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateSalesInvoiceAmountDetails", salesInvoiceIDParameter, amountParameter, particularsParameter, percentageParameter, finYearParameter, locationIDParameter, applicationIDParameter, taxableAmountParameter);
        }
    
        public virtual int SpCreateSalesInvoiceTrans(Nullable<int> salesInvoiceID, string items, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter retValue)
        {
            var salesInvoiceIDParameter = salesInvoiceID.HasValue ?
                new ObjectParameter("SalesInvoiceID", salesInvoiceID) :
                new ObjectParameter("SalesInvoiceID", typeof(int));
    
            var itemsParameter = items != null ?
                new ObjectParameter("Items", items) :
                new ObjectParameter("Items", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateSalesInvoiceTrans", salesInvoiceIDParameter, itemsParameter, finYearParameter, locationIDParameter, applicationIDParameter, retValue);
        }
    
        public virtual int SpCreateSalesReturn(string code, Nullable<System.DateTime> date, Nullable<int> customerID, Nullable<decimal> grossAmoount, Nullable<decimal> taxAmount, Nullable<decimal> sGSTAmount, Nullable<decimal> cGSTAmount, Nullable<decimal> iGSTAmount, Nullable<decimal> roundOff, Nullable<decimal> netAmount, Nullable<bool> isDraft, Nullable<bool> isCancelled, Nullable<System.DateTime> cancelledDate, Nullable<int> salesInvoiceID, string salesInvoiceNo, Nullable<bool> isNewInvoice, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter salesReturnID)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var grossAmoountParameter = grossAmoount.HasValue ?
                new ObjectParameter("GrossAmoount", grossAmoount) :
                new ObjectParameter("GrossAmoount", typeof(decimal));
    
            var taxAmountParameter = taxAmount.HasValue ?
                new ObjectParameter("TaxAmount", taxAmount) :
                new ObjectParameter("TaxAmount", typeof(decimal));
    
            var sGSTAmountParameter = sGSTAmount.HasValue ?
                new ObjectParameter("SGSTAmount", sGSTAmount) :
                new ObjectParameter("SGSTAmount", typeof(decimal));
    
            var cGSTAmountParameter = cGSTAmount.HasValue ?
                new ObjectParameter("CGSTAmount", cGSTAmount) :
                new ObjectParameter("CGSTAmount", typeof(decimal));
    
            var iGSTAmountParameter = iGSTAmount.HasValue ?
                new ObjectParameter("IGSTAmount", iGSTAmount) :
                new ObjectParameter("IGSTAmount", typeof(decimal));
    
            var roundOffParameter = roundOff.HasValue ?
                new ObjectParameter("RoundOff", roundOff) :
                new ObjectParameter("RoundOff", typeof(decimal));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var isCancelledParameter = isCancelled.HasValue ?
                new ObjectParameter("IsCancelled", isCancelled) :
                new ObjectParameter("IsCancelled", typeof(bool));
    
            var cancelledDateParameter = cancelledDate.HasValue ?
                new ObjectParameter("CancelledDate", cancelledDate) :
                new ObjectParameter("CancelledDate", typeof(System.DateTime));
    
            var salesInvoiceIDParameter = salesInvoiceID.HasValue ?
                new ObjectParameter("SalesInvoiceID", salesInvoiceID) :
                new ObjectParameter("SalesInvoiceID", typeof(int));
    
            var salesInvoiceNoParameter = salesInvoiceNo != null ?
                new ObjectParameter("SalesInvoiceNo", salesInvoiceNo) :
                new ObjectParameter("SalesInvoiceNo", typeof(string));
    
            var isNewInvoiceParameter = isNewInvoice.HasValue ?
                new ObjectParameter("IsNewInvoice", isNewInvoice) :
                new ObjectParameter("IsNewInvoice", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateSalesReturn", codeParameter, dateParameter, customerIDParameter, grossAmoountParameter, taxAmountParameter, sGSTAmountParameter, cGSTAmountParameter, iGSTAmountParameter, roundOffParameter, netAmountParameter, isDraftParameter, isCancelledParameter, cancelledDateParameter, salesInvoiceIDParameter, salesInvoiceNoParameter, isNewInvoiceParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, salesReturnID);
        }
    
        public virtual int SpCreateServiceSalesInvoice(string serialNo, Nullable<System.DateTime> invoiceDate, Nullable<int> customerID, Nullable<int> salesOrderID, string salesOrderNos, Nullable<int> paymentModeID, Nullable<int> paymentTypeID, Nullable<decimal> grossAmt, Nullable<decimal> discountAmt, Nullable<decimal> taxableAmt, Nullable<decimal> sGSTAmt, Nullable<decimal> cGSTAmt, Nullable<decimal> iGSTAmt, Nullable<decimal> cessAmount, Nullable<decimal> roundOff, Nullable<decimal> netAmt, Nullable<bool> isDraft, Nullable<int> billingAddressID, Nullable<int> shippingAddressID, Nullable<int> discountCategoryID, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter salesInvoiceID, ObjectParameter isBlockedForSalesInvoice)
        {
            var serialNoParameter = serialNo != null ?
                new ObjectParameter("SerialNo", serialNo) :
                new ObjectParameter("SerialNo", typeof(string));
    
            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(System.DateTime));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var salesOrderIDParameter = salesOrderID.HasValue ?
                new ObjectParameter("SalesOrderID", salesOrderID) :
                new ObjectParameter("SalesOrderID", typeof(int));
    
            var salesOrderNosParameter = salesOrderNos != null ?
                new ObjectParameter("SalesOrderNos", salesOrderNos) :
                new ObjectParameter("SalesOrderNos", typeof(string));
    
            var paymentModeIDParameter = paymentModeID.HasValue ?
                new ObjectParameter("PaymentModeID", paymentModeID) :
                new ObjectParameter("PaymentModeID", typeof(int));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(int));
    
            var grossAmtParameter = grossAmt.HasValue ?
                new ObjectParameter("GrossAmt", grossAmt) :
                new ObjectParameter("GrossAmt", typeof(decimal));
    
            var discountAmtParameter = discountAmt.HasValue ?
                new ObjectParameter("DiscountAmt", discountAmt) :
                new ObjectParameter("DiscountAmt", typeof(decimal));
    
            var taxableAmtParameter = taxableAmt.HasValue ?
                new ObjectParameter("TaxableAmt", taxableAmt) :
                new ObjectParameter("TaxableAmt", typeof(decimal));
    
            var sGSTAmtParameter = sGSTAmt.HasValue ?
                new ObjectParameter("SGSTAmt", sGSTAmt) :
                new ObjectParameter("SGSTAmt", typeof(decimal));
    
            var cGSTAmtParameter = cGSTAmt.HasValue ?
                new ObjectParameter("CGSTAmt", cGSTAmt) :
                new ObjectParameter("CGSTAmt", typeof(decimal));
    
            var iGSTAmtParameter = iGSTAmt.HasValue ?
                new ObjectParameter("IGSTAmt", iGSTAmt) :
                new ObjectParameter("IGSTAmt", typeof(decimal));
    
            var cessAmountParameter = cessAmount.HasValue ?
                new ObjectParameter("CessAmount", cessAmount) :
                new ObjectParameter("CessAmount", typeof(decimal));
    
            var roundOffParameter = roundOff.HasValue ?
                new ObjectParameter("RoundOff", roundOff) :
                new ObjectParameter("RoundOff", typeof(decimal));
    
            var netAmtParameter = netAmt.HasValue ?
                new ObjectParameter("NetAmt", netAmt) :
                new ObjectParameter("NetAmt", typeof(decimal));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var billingAddressIDParameter = billingAddressID.HasValue ?
                new ObjectParameter("BillingAddressID", billingAddressID) :
                new ObjectParameter("BillingAddressID", typeof(int));
    
            var shippingAddressIDParameter = shippingAddressID.HasValue ?
                new ObjectParameter("ShippingAddressID", shippingAddressID) :
                new ObjectParameter("ShippingAddressID", typeof(int));
    
            var discountCategoryIDParameter = discountCategoryID.HasValue ?
                new ObjectParameter("DiscountCategoryID", discountCategoryID) :
                new ObjectParameter("DiscountCategoryID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateServiceSalesInvoice", serialNoParameter, invoiceDateParameter, customerIDParameter, salesOrderIDParameter, salesOrderNosParameter, paymentModeIDParameter, paymentTypeIDParameter, grossAmtParameter, discountAmtParameter, taxableAmtParameter, sGSTAmtParameter, cGSTAmtParameter, iGSTAmtParameter, cessAmountParameter, roundOffParameter, netAmtParameter, isDraftParameter, billingAddressIDParameter, shippingAddressIDParameter, discountCategoryIDParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, salesInvoiceID, isBlockedForSalesInvoice);
        }
    
        public virtual int SpCreateServiceSalesInvoiceTrans(Nullable<int> salesInvoiceID, Nullable<int> salesOrderTransID, Nullable<int> itemID, Nullable<decimal> quantity, Nullable<decimal> invoiceQty, Nullable<decimal> mRP, Nullable<decimal> basicPrice, Nullable<decimal> grossAmount, Nullable<decimal> discountPercentage, Nullable<decimal> discountAmount, Nullable<decimal> taxableAmount, Nullable<decimal> sGSTPercentage, Nullable<decimal> cGSTPercentage, Nullable<decimal> iGSTPercentage, Nullable<decimal> cessPecentage, Nullable<decimal> sGSTAmt, Nullable<decimal> cGSTAmt, Nullable<decimal> iGSTAmt, Nullable<decimal> cessAmount, Nullable<decimal> netAmt, Nullable<int> unitID, string remarks, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var salesInvoiceIDParameter = salesInvoiceID.HasValue ?
                new ObjectParameter("SalesInvoiceID", salesInvoiceID) :
                new ObjectParameter("SalesInvoiceID", typeof(int));
    
            var salesOrderTransIDParameter = salesOrderTransID.HasValue ?
                new ObjectParameter("SalesOrderTransID", salesOrderTransID) :
                new ObjectParameter("SalesOrderTransID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var invoiceQtyParameter = invoiceQty.HasValue ?
                new ObjectParameter("InvoiceQty", invoiceQty) :
                new ObjectParameter("InvoiceQty", typeof(decimal));
    
            var mRPParameter = mRP.HasValue ?
                new ObjectParameter("MRP", mRP) :
                new ObjectParameter("MRP", typeof(decimal));
    
            var basicPriceParameter = basicPrice.HasValue ?
                new ObjectParameter("BasicPrice", basicPrice) :
                new ObjectParameter("BasicPrice", typeof(decimal));
    
            var grossAmountParameter = grossAmount.HasValue ?
                new ObjectParameter("GrossAmount", grossAmount) :
                new ObjectParameter("GrossAmount", typeof(decimal));
    
            var discountPercentageParameter = discountPercentage.HasValue ?
                new ObjectParameter("DiscountPercentage", discountPercentage) :
                new ObjectParameter("DiscountPercentage", typeof(decimal));
    
            var discountAmountParameter = discountAmount.HasValue ?
                new ObjectParameter("DiscountAmount", discountAmount) :
                new ObjectParameter("DiscountAmount", typeof(decimal));
    
            var taxableAmountParameter = taxableAmount.HasValue ?
                new ObjectParameter("TaxableAmount", taxableAmount) :
                new ObjectParameter("TaxableAmount", typeof(decimal));
    
            var sGSTPercentageParameter = sGSTPercentage.HasValue ?
                new ObjectParameter("SGSTPercentage", sGSTPercentage) :
                new ObjectParameter("SGSTPercentage", typeof(decimal));
    
            var cGSTPercentageParameter = cGSTPercentage.HasValue ?
                new ObjectParameter("CGSTPercentage", cGSTPercentage) :
                new ObjectParameter("CGSTPercentage", typeof(decimal));
    
            var iGSTPercentageParameter = iGSTPercentage.HasValue ?
                new ObjectParameter("IGSTPercentage", iGSTPercentage) :
                new ObjectParameter("IGSTPercentage", typeof(decimal));
    
            var cessPecentageParameter = cessPecentage.HasValue ?
                new ObjectParameter("CessPecentage", cessPecentage) :
                new ObjectParameter("CessPecentage", typeof(decimal));
    
            var sGSTAmtParameter = sGSTAmt.HasValue ?
                new ObjectParameter("SGSTAmt", sGSTAmt) :
                new ObjectParameter("SGSTAmt", typeof(decimal));
    
            var cGSTAmtParameter = cGSTAmt.HasValue ?
                new ObjectParameter("CGSTAmt", cGSTAmt) :
                new ObjectParameter("CGSTAmt", typeof(decimal));
    
            var iGSTAmtParameter = iGSTAmt.HasValue ?
                new ObjectParameter("IGSTAmt", iGSTAmt) :
                new ObjectParameter("IGSTAmt", typeof(decimal));
    
            var cessAmountParameter = cessAmount.HasValue ?
                new ObjectParameter("CessAmount", cessAmount) :
                new ObjectParameter("CessAmount", typeof(decimal));
    
            var netAmtParameter = netAmt.HasValue ?
                new ObjectParameter("NetAmt", netAmt) :
                new ObjectParameter("NetAmt", typeof(decimal));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateServiceSalesInvoiceTrans", salesInvoiceIDParameter, salesOrderTransIDParameter, itemIDParameter, quantityParameter, invoiceQtyParameter, mRPParameter, basicPriceParameter, grossAmountParameter, discountPercentageParameter, discountAmountParameter, taxableAmountParameter, sGSTPercentageParameter, cGSTPercentageParameter, iGSTPercentageParameter, cessPecentageParameter, sGSTAmtParameter, cGSTAmtParameter, iGSTAmtParameter, cessAmountParameter, netAmtParameter, unitIDParameter, remarksParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateServiceSalesOrder(string salesOrderNo, Nullable<System.DateTime> orderDate, Nullable<int> customerID, Nullable<decimal> grossAmt, Nullable<decimal> discountAmt, Nullable<decimal> taxableAmt, Nullable<decimal> sGSTAmt, Nullable<decimal> cGSTAmt, Nullable<decimal> iGSTAmt, Nullable<decimal> cessAmount, Nullable<decimal> roundOff, Nullable<decimal> netAmt, Nullable<int> fsoID, string source, Nullable<int> billingAddressID, Nullable<int> shippingAddressID, Nullable<bool> isDraft, Nullable<bool> directInvoice, Nullable<int> createdUserID, Nullable<int> paymentModeID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter salesOrderID)
        {
            var salesOrderNoParameter = salesOrderNo != null ?
                new ObjectParameter("SalesOrderNo", salesOrderNo) :
                new ObjectParameter("SalesOrderNo", typeof(string));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("OrderDate", orderDate) :
                new ObjectParameter("OrderDate", typeof(System.DateTime));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var grossAmtParameter = grossAmt.HasValue ?
                new ObjectParameter("GrossAmt", grossAmt) :
                new ObjectParameter("GrossAmt", typeof(decimal));
    
            var discountAmtParameter = discountAmt.HasValue ?
                new ObjectParameter("DiscountAmt", discountAmt) :
                new ObjectParameter("DiscountAmt", typeof(decimal));
    
            var taxableAmtParameter = taxableAmt.HasValue ?
                new ObjectParameter("TaxableAmt", taxableAmt) :
                new ObjectParameter("TaxableAmt", typeof(decimal));
    
            var sGSTAmtParameter = sGSTAmt.HasValue ?
                new ObjectParameter("SGSTAmt", sGSTAmt) :
                new ObjectParameter("SGSTAmt", typeof(decimal));
    
            var cGSTAmtParameter = cGSTAmt.HasValue ?
                new ObjectParameter("CGSTAmt", cGSTAmt) :
                new ObjectParameter("CGSTAmt", typeof(decimal));
    
            var iGSTAmtParameter = iGSTAmt.HasValue ?
                new ObjectParameter("IGSTAmt", iGSTAmt) :
                new ObjectParameter("IGSTAmt", typeof(decimal));
    
            var cessAmountParameter = cessAmount.HasValue ?
                new ObjectParameter("CessAmount", cessAmount) :
                new ObjectParameter("CessAmount", typeof(decimal));
    
            var roundOffParameter = roundOff.HasValue ?
                new ObjectParameter("RoundOff", roundOff) :
                new ObjectParameter("RoundOff", typeof(decimal));
    
            var netAmtParameter = netAmt.HasValue ?
                new ObjectParameter("NetAmt", netAmt) :
                new ObjectParameter("NetAmt", typeof(decimal));
    
            var fsoIDParameter = fsoID.HasValue ?
                new ObjectParameter("FsoID", fsoID) :
                new ObjectParameter("FsoID", typeof(int));
    
            var sourceParameter = source != null ?
                new ObjectParameter("Source", source) :
                new ObjectParameter("Source", typeof(string));
    
            var billingAddressIDParameter = billingAddressID.HasValue ?
                new ObjectParameter("BillingAddressID", billingAddressID) :
                new ObjectParameter("BillingAddressID", typeof(int));
    
            var shippingAddressIDParameter = shippingAddressID.HasValue ?
                new ObjectParameter("ShippingAddressID", shippingAddressID) :
                new ObjectParameter("ShippingAddressID", typeof(int));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var directInvoiceParameter = directInvoice.HasValue ?
                new ObjectParameter("DirectInvoice", directInvoice) :
                new ObjectParameter("DirectInvoice", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var paymentModeIDParameter = paymentModeID.HasValue ?
                new ObjectParameter("PaymentModeID", paymentModeID) :
                new ObjectParameter("PaymentModeID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateServiceSalesOrder", salesOrderNoParameter, orderDateParameter, customerIDParameter, grossAmtParameter, discountAmtParameter, taxableAmtParameter, sGSTAmtParameter, cGSTAmtParameter, iGSTAmtParameter, cessAmountParameter, roundOffParameter, netAmtParameter, fsoIDParameter, sourceParameter, billingAddressIDParameter, shippingAddressIDParameter, isDraftParameter, directInvoiceParameter, createdUserIDParameter, paymentModeIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, salesOrderID);
        }
    
        public virtual int SpCreateServiceSalesOrderTrans(Nullable<int> salesOrderID, Nullable<int> itemID, Nullable<decimal> mRP, Nullable<decimal> basicPrice, Nullable<decimal> qty, Nullable<decimal> grossAmount, Nullable<decimal> discountPercentage, Nullable<decimal> discountAmount, Nullable<decimal> taxableAmount, Nullable<decimal> gSTPercentage, Nullable<decimal> iGSTPercentage, Nullable<decimal> sGSTPercentage, Nullable<decimal> cGSTPercentage, Nullable<decimal> cGST, Nullable<decimal> sGST, Nullable<decimal> iGST, Nullable<decimal> cessPercentage, Nullable<decimal> cessAmount, Nullable<decimal> netAmount, Nullable<decimal> unitID, Nullable<int> doctorID, string remarks, Nullable<int> billablesID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var salesOrderIDParameter = salesOrderID.HasValue ?
                new ObjectParameter("SalesOrderID", salesOrderID) :
                new ObjectParameter("SalesOrderID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var mRPParameter = mRP.HasValue ?
                new ObjectParameter("MRP", mRP) :
                new ObjectParameter("MRP", typeof(decimal));
    
            var basicPriceParameter = basicPrice.HasValue ?
                new ObjectParameter("BasicPrice", basicPrice) :
                new ObjectParameter("BasicPrice", typeof(decimal));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(decimal));
    
            var grossAmountParameter = grossAmount.HasValue ?
                new ObjectParameter("GrossAmount", grossAmount) :
                new ObjectParameter("GrossAmount", typeof(decimal));
    
            var discountPercentageParameter = discountPercentage.HasValue ?
                new ObjectParameter("DiscountPercentage", discountPercentage) :
                new ObjectParameter("DiscountPercentage", typeof(decimal));
    
            var discountAmountParameter = discountAmount.HasValue ?
                new ObjectParameter("DiscountAmount", discountAmount) :
                new ObjectParameter("DiscountAmount", typeof(decimal));
    
            var taxableAmountParameter = taxableAmount.HasValue ?
                new ObjectParameter("TaxableAmount", taxableAmount) :
                new ObjectParameter("TaxableAmount", typeof(decimal));
    
            var gSTPercentageParameter = gSTPercentage.HasValue ?
                new ObjectParameter("GSTPercentage", gSTPercentage) :
                new ObjectParameter("GSTPercentage", typeof(decimal));
    
            var iGSTPercentageParameter = iGSTPercentage.HasValue ?
                new ObjectParameter("IGSTPercentage", iGSTPercentage) :
                new ObjectParameter("IGSTPercentage", typeof(decimal));
    
            var sGSTPercentageParameter = sGSTPercentage.HasValue ?
                new ObjectParameter("SGSTPercentage", sGSTPercentage) :
                new ObjectParameter("SGSTPercentage", typeof(decimal));
    
            var cGSTPercentageParameter = cGSTPercentage.HasValue ?
                new ObjectParameter("CGSTPercentage", cGSTPercentage) :
                new ObjectParameter("CGSTPercentage", typeof(decimal));
    
            var cGSTParameter = cGST.HasValue ?
                new ObjectParameter("CGST", cGST) :
                new ObjectParameter("CGST", typeof(decimal));
    
            var sGSTParameter = sGST.HasValue ?
                new ObjectParameter("SGST", sGST) :
                new ObjectParameter("SGST", typeof(decimal));
    
            var iGSTParameter = iGST.HasValue ?
                new ObjectParameter("IGST", iGST) :
                new ObjectParameter("IGST", typeof(decimal));
    
            var cessPercentageParameter = cessPercentage.HasValue ?
                new ObjectParameter("CessPercentage", cessPercentage) :
                new ObjectParameter("CessPercentage", typeof(decimal));
    
            var cessAmountParameter = cessAmount.HasValue ?
                new ObjectParameter("CessAmount", cessAmount) :
                new ObjectParameter("CessAmount", typeof(decimal));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(decimal));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var billablesIDParameter = billablesID.HasValue ?
                new ObjectParameter("BillablesID", billablesID) :
                new ObjectParameter("BillablesID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateServiceSalesOrderTrans", salesOrderIDParameter, itemIDParameter, mRPParameter, basicPriceParameter, qtyParameter, grossAmountParameter, discountPercentageParameter, discountAmountParameter, taxableAmountParameter, gSTPercentageParameter, iGSTPercentageParameter, sGSTPercentageParameter, cGSTPercentageParameter, cGSTParameter, sGSTParameter, iGSTParameter, cessPercentageParameter, cessAmountParameter, netAmountParameter, unitIDParameter, doctorIDParameter, remarksParameter, billablesIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateSLAMappingofServiceSalesItem(Nullable<int> salesInvoiceID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var salesInvoiceIDParameter = salesInvoiceID.HasValue ?
                new ObjectParameter("SalesInvoiceID", salesInvoiceID) :
                new ObjectParameter("SalesInvoiceID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateSLAMappingofServiceSalesItem", salesInvoiceIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateTransportPermit(string transNo, string driver, string vehicleNo, Nullable<System.DateTime> validFromDate, Nullable<System.DateTime> validToDate, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter retVal)
        {
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var driverParameter = driver != null ?
                new ObjectParameter("Driver", driver) :
                new ObjectParameter("Driver", typeof(string));
    
            var vehicleNoParameter = vehicleNo != null ?
                new ObjectParameter("VehicleNo", vehicleNo) :
                new ObjectParameter("VehicleNo", typeof(string));
    
            var validFromDateParameter = validFromDate.HasValue ?
                new ObjectParameter("ValidFromDate", validFromDate) :
                new ObjectParameter("ValidFromDate", typeof(System.DateTime));
    
            var validToDateParameter = validToDate.HasValue ?
                new ObjectParameter("ValidToDate", validToDate) :
                new ObjectParameter("ValidToDate", typeof(System.DateTime));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateTransportPermit", transNoParameter, driverParameter, vehicleNoParameter, validFromDateParameter, validToDateParameter, fromDateParameter, toDateParameter, finYearParameter, locationIDParameter, applicationIDParameter, retVal);
        }
    
        public virtual int SpCreateTransportPermitTrans(Nullable<int> permitID, string type, string transNo, Nullable<System.DateTime> transDate, Nullable<int> transID, Nullable<int> receiptLocationID, Nullable<int> customerID, Nullable<int> districtID, Nullable<int> itemID, Nullable<int> batchTypeID, Nullable<decimal> quantity, Nullable<int> finyear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var permitIDParameter = permitID.HasValue ?
                new ObjectParameter("PermitID", permitID) :
                new ObjectParameter("PermitID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var transDateParameter = transDate.HasValue ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(System.DateTime));
    
            var transIDParameter = transID.HasValue ?
                new ObjectParameter("TransID", transID) :
                new ObjectParameter("TransID", typeof(int));
    
            var receiptLocationIDParameter = receiptLocationID.HasValue ?
                new ObjectParameter("ReceiptLocationID", receiptLocationID) :
                new ObjectParameter("ReceiptLocationID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var finyearParameter = finyear.HasValue ?
                new ObjectParameter("Finyear", finyear) :
                new ObjectParameter("Finyear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateTransportPermitTrans", permitIDParameter, typeParameter, transNoParameter, transDateParameter, transIDParameter, receiptLocationIDParameter, customerIDParameter, districtIDParameter, itemIDParameter, batchTypeIDParameter, quantityParameter, finyearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpGatePassTransInvoiceDetails(Nullable<int> gatePassNo, Nullable<int> invoiceID, Nullable<decimal> amount, string area, Nullable<int> pPSNO, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var gatePassNoParameter = gatePassNo.HasValue ?
                new ObjectParameter("GatePassNo", gatePassNo) :
                new ObjectParameter("GatePassNo", typeof(int));
    
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var areaParameter = area != null ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(string));
    
            var pPSNOParameter = pPSNO.HasValue ?
                new ObjectParameter("PPSNO", pPSNO) :
                new ObjectParameter("PPSNO", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGatePassTransInvoiceDetails", gatePassNoParameter, invoiceIDParameter, amountParameter, areaParameter, pPSNOParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetAppointmentProcessList_Result> SpGetAppointmentProcessList(string transNoHint, string transDateHint, string patientNameHint, string doctorNameHint, string phoneNoHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var transNoHintParameter = transNoHint != null ?
                new ObjectParameter("TransNoHint", transNoHint) :
                new ObjectParameter("TransNoHint", typeof(string));
    
            var transDateHintParameter = transDateHint != null ?
                new ObjectParameter("TransDateHint", transDateHint) :
                new ObjectParameter("TransDateHint", typeof(string));
    
            var patientNameHintParameter = patientNameHint != null ?
                new ObjectParameter("PatientNameHint", patientNameHint) :
                new ObjectParameter("PatientNameHint", typeof(string));
    
            var doctorNameHintParameter = doctorNameHint != null ?
                new ObjectParameter("DoctorNameHint", doctorNameHint) :
                new ObjectParameter("DoctorNameHint", typeof(string));
    
            var phoneNoHintParameter = phoneNoHint != null ?
                new ObjectParameter("PhoneNoHint", phoneNoHint) :
                new ObjectParameter("PhoneNoHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAppointmentProcessList_Result>("SpGetAppointmentProcessList", transNoHintParameter, transDateHintParameter, patientNameHintParameter, doctorNameHintParameter, phoneNoHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetAvailableBatches_Result> SpGetAvailableBatches(Nullable<int> itemID, string fullOrLoose, Nullable<int> warehouseID, Nullable<int> itemCategoryID, Nullable<int> priceListID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var fullOrLooseParameter = fullOrLoose != null ?
                new ObjectParameter("FullOrLoose", fullOrLoose) :
                new ObjectParameter("FullOrLoose", typeof(string));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var priceListIDParameter = priceListID.HasValue ?
                new ObjectParameter("PriceListID", priceListID) :
                new ObjectParameter("PriceListID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAvailableBatches_Result>("SpGetAvailableBatches", itemIDParameter, fullOrLooseParameter, warehouseIDParameter, itemCategoryIDParameter, priceListIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetAvailableBatchesForSales_Result> SpGetAvailableBatchesForSales(Nullable<int> itemID, Nullable<decimal> qty, string salesOrderTransIDs, Nullable<int> storeID, Nullable<int> customerID, Nullable<int> schemeID, Nullable<int> unitID, Nullable<int> proformaInvoiceID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(decimal));
    
            var salesOrderTransIDsParameter = salesOrderTransIDs != null ?
                new ObjectParameter("SalesOrderTransIDs", salesOrderTransIDs) :
                new ObjectParameter("SalesOrderTransIDs", typeof(string));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var schemeIDParameter = schemeID.HasValue ?
                new ObjectParameter("SchemeID", schemeID) :
                new ObjectParameter("SchemeID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var proformaInvoiceIDParameter = proformaInvoiceID.HasValue ?
                new ObjectParameter("ProformaInvoiceID", proformaInvoiceID) :
                new ObjectParameter("ProformaInvoiceID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAvailableBatchesForSales_Result>("SpGetAvailableBatchesForSales", itemIDParameter, qtyParameter, salesOrderTransIDsParameter, storeIDParameter, customerIDParameter, schemeIDParameter, unitIDParameter, proformaInvoiceIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpGetAverageSales(Nullable<int> itemID, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter averageSales)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetAverageSales", itemIDParameter, locationIDParameter, applicationIDParameter, averageSales);
        }
    
        public virtual int SpGetBatchTypeForCustomer(Nullable<int> customerID, Nullable<int> applicationID, ObjectParameter batchTypeID, ObjectParameter batchType)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetBatchTypeForCustomer", customerIDParameter, applicationIDParameter, batchTypeID, batchType);
        }
    
        public virtual ObjectResult<SpGetBatchwisePrescriptionItems_Result> SpGetBatchwisePrescriptionItems(Nullable<int> prescriptionID, Nullable<int> patientID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var prescriptionIDParameter = prescriptionID.HasValue ?
                new ObjectParameter("PrescriptionID", prescriptionID) :
                new ObjectParameter("PrescriptionID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetBatchwisePrescriptionItems_Result>("SpGetBatchwisePrescriptionItems", prescriptionIDParameter, patientIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetBillableDetails_Result> SpGetBillableDetails(Nullable<int> iPID, Nullable<int> customerID, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetBillableDetails_Result>("SpGetBillableDetails", iPIDParameter, customerIDParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCollectionList_Result> SpGetCollectionList(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCollectionList_Result>("SpGetCollectionList", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCounterSales_Result> SpGetCounterSales(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCounterSales_Result>("SpGetCounterSales", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCounterSalesAmountDetails_Result> SpGetCounterSalesAmountDetails(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCounterSalesAmountDetails_Result>("SpGetCounterSalesAmountDetails", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpGetCounterSalesPrintConfiguration(Nullable<int> applicationID, ObjectParameter isDotMatrixPrint)
        {
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetCounterSalesPrintConfiguration", applicationIDParameter, isDotMatrixPrint);
        }
    
        public virtual ObjectResult<SpGetCounterSalesReturn_Result> SpGetCounterSalesReturn(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCounterSalesReturn_Result>("SpGetCounterSalesReturn", finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCounterSalesReturnListForDataTable_Result> SpGetCounterSalesReturnListForDataTable(string type, string returnNo, string returnDate, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var returnNoParameter = returnNo != null ?
                new ObjectParameter("ReturnNo", returnNo) :
                new ObjectParameter("ReturnNo", typeof(string));
    
            var returnDateParameter = returnDate != null ?
                new ObjectParameter("ReturnDate", returnDate) :
                new ObjectParameter("ReturnDate", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCounterSalesReturnListForDataTable_Result>("SpGetCounterSalesReturnListForDataTable", typeParameter, returnNoParameter, returnDateParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCounterSalesSignOutPrint_Result> SpGetCounterSalesSignOutPrint(string type, Nullable<int> createdUserID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCounterSalesSignOutPrint_Result>("SpGetCounterSalesSignOutPrint", typeParameter, createdUserIDParameter);
        }
    
        public virtual int SpGetCounterSalesThermalPrintConfiguration(Nullable<int> applicationID, ObjectParameter isThermalPrint)
        {
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetCounterSalesThermalPrintConfiguration", applicationIDParameter, isThermalPrint);
        }
    
        public virtual ObjectResult<SpGetCounterSalesTypeList_Result> SpGetCounterSalesTypeList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCounterSalesTypeList_Result>("SpGetCounterSalesTypeList");
        }
    
        public virtual int SpGetCreditBalanceByCustomer(Nullable<int> customerID, ObjectParameter creditAmount)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetCreditBalanceByCustomer", customerIDParameter, creditAmount);
        }
    
        public virtual ObjectResult<SpGetCustomerCreditSummary_Result> SpGetCustomerCreditSummary(Nullable<int> proformaInvoiceID)
        {
            var proformaInvoiceIDParameter = proformaInvoiceID.HasValue ?
                new ObjectParameter("ProformaInvoiceID", proformaInvoiceID) :
                new ObjectParameter("ProformaInvoiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCustomerCreditSummary_Result>("SpGetCustomerCreditSummary", proformaInvoiceIDParameter);
        }
    
        public virtual int SpGetCustomerIDByIPID(Nullable<int> iPID, Nullable<int> applicationID, ObjectParameter customerID)
        {
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetCustomerIDByIPID", iPIDParameter, applicationIDParameter, customerID);
        }
    
        public virtual int SpGetDiscountPercentage(Nullable<int> customerID, Nullable<int> itemID, Nullable<int> applicationID, ObjectParameter discountPercentage)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetDiscountPercentage", customerIDParameter, itemIDParameter, applicationIDParameter, discountPercentage);
        }
    
        public virtual ObjectResult<SpGetEwayBill_Result> SpGetEwayBill(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetEwayBill_Result>("SpGetEwayBill", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpGetFreightTaxForEcommerceCustomer(Nullable<int> aplicationID, ObjectParameter freightTax)
        {
            var aplicationIDParameter = aplicationID.HasValue ?
                new ObjectParameter("AplicationID", aplicationID) :
                new ObjectParameter("AplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetFreightTaxForEcommerceCustomer", aplicationIDParameter, freightTax);
        }
    
        public virtual ObjectResult<SpGetGatePass_Result> SpGetGatePass(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetGatePass_Result>("SpGetGatePass", finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetGatePassDetail_Result> SpGetGatePassDetail(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetGatePassDetail_Result>("SpGetGatePassDetail", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetGatePassListForDataTable_Result> SpGetGatePassListForDataTable(string type, string transNo, string transDate, string vehicleNo, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var transDateParameter = transDate != null ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(string));
    
            var vehicleNoParameter = vehicleNo != null ?
                new ObjectParameter("VehicleNo", vehicleNo) :
                new ObjectParameter("VehicleNo", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetGatePassListForDataTable_Result>("SpGetGatePassListForDataTable", typeParameter, transNoParameter, transDateParameter, vehicleNoParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetGatePassPrint_Result> SpGetGatePassPrint(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetGatePassPrint_Result>("SpGetGatePassPrint", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetGatePassTransDetails_Result> SpGetGatePassTransDetails(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetGatePassTransDetails_Result>("SpGetGatePassTransDetails", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetItemBatchwise_Result> SpGetItemBatchwise(Nullable<int> itemID, Nullable<decimal> qty, Nullable<decimal> offerQty, Nullable<int> storeID, Nullable<int> customerID, Nullable<int> unitID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(decimal));
    
            var offerQtyParameter = offerQty.HasValue ?
                new ObjectParameter("OfferQty", offerQty) :
                new ObjectParameter("OfferQty", typeof(decimal));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetItemBatchwise_Result>("SpGetItemBatchwise", itemIDParameter, qtyParameter, offerQtyParameter, storeIDParameter, customerIDParameter, unitIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetItemForTransportPermit_Result> SpGetItemForTransportPermit(Nullable<int> stockIssueNoFrom, Nullable<int> stockIssueNoTo, Nullable<int> salesInvoiceNoFrom, Nullable<int> salesInvoiceNoTo, string reportType, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var stockIssueNoFromParameter = stockIssueNoFrom.HasValue ?
                new ObjectParameter("StockIssueNoFrom", stockIssueNoFrom) :
                new ObjectParameter("StockIssueNoFrom", typeof(int));
    
            var stockIssueNoToParameter = stockIssueNoTo.HasValue ?
                new ObjectParameter("StockIssueNoTo", stockIssueNoTo) :
                new ObjectParameter("StockIssueNoTo", typeof(int));
    
            var salesInvoiceNoFromParameter = salesInvoiceNoFrom.HasValue ?
                new ObjectParameter("SalesInvoiceNoFrom", salesInvoiceNoFrom) :
                new ObjectParameter("SalesInvoiceNoFrom", typeof(int));
    
            var salesInvoiceNoToParameter = salesInvoiceNoTo.HasValue ?
                new ObjectParameter("SalesInvoiceNoTo", salesInvoiceNoTo) :
                new ObjectParameter("SalesInvoiceNoTo", typeof(int));
    
            var reportTypeParameter = reportType != null ?
                new ObjectParameter("ReportType", reportType) :
                new ObjectParameter("ReportType", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("finYear", finYear) :
                new ObjectParameter("finYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetItemForTransportPermit_Result>("SpGetItemForTransportPermit", stockIssueNoFromParameter, stockIssueNoToParameter, salesInvoiceNoFromParameter, salesInvoiceNoToParameter, reportTypeParameter, fromDateParameter, toDateParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetOfferDetails_Result> SpGetOfferDetails(Nullable<int> customerID, Nullable<int> schemeID, string itemID, string unitID, Nullable<int> applicationID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var schemeIDParameter = schemeID.HasValue ?
                new ObjectParameter("SchemeID", schemeID) :
                new ObjectParameter("SchemeID", typeof(int));
    
            var itemIDParameter = itemID != null ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(string));
    
            var unitIDParameter = unitID != null ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(string));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetOfferDetails_Result>("SpGetOfferDetails", customerIDParameter, schemeIDParameter, itemIDParameter, unitIDParameter, applicationIDParameter);
        }
    
        public virtual int SpGetOfferQty(Nullable<int> schemeID, Nullable<int> itemID, Nullable<decimal> qty, Nullable<int> applicationID, ObjectParameter offerQty)
        {
            var schemeIDParameter = schemeID.HasValue ?
                new ObjectParameter("SchemeID", schemeID) :
                new ObjectParameter("SchemeID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(decimal));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetOfferQty", schemeIDParameter, itemIDParameter, qtyParameter, applicationIDParameter, offerQty);
        }
    
        public virtual ObjectResult<SpGetProformaInvoiceAmountDetails_Result> SpGetProformaInvoiceAmountDetails(Nullable<int> proformaInvoiceID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var proformaInvoiceIDParameter = proformaInvoiceID.HasValue ?
                new ObjectParameter("ProformaInvoiceID", proformaInvoiceID) :
                new ObjectParameter("ProformaInvoiceID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetProformaInvoiceAmountDetails_Result>("SpGetProformaInvoiceAmountDetails", proformaInvoiceIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetProformaInvoiceList_Result> SpGetProformaInvoiceList(string transNoHint, string invoiceDateHint, string customerNameHint, string locationHint, string netAmount, string type, Nullable<int> itemCategoryID, Nullable<int> customerID, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var transNoHintParameter = transNoHint != null ?
                new ObjectParameter("TransNoHint", transNoHint) :
                new ObjectParameter("TransNoHint", typeof(string));
    
            var invoiceDateHintParameter = invoiceDateHint != null ?
                new ObjectParameter("InvoiceDateHint", invoiceDateHint) :
                new ObjectParameter("InvoiceDateHint", typeof(string));
    
            var customerNameHintParameter = customerNameHint != null ?
                new ObjectParameter("CustomerNameHint", customerNameHint) :
                new ObjectParameter("CustomerNameHint", typeof(string));
    
            var locationHintParameter = locationHint != null ?
                new ObjectParameter("LocationHint", locationHint) :
                new ObjectParameter("LocationHint", typeof(string));
    
            var netAmountParameter = netAmount != null ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetProformaInvoiceList_Result>("SpGetProformaInvoiceList", transNoHintParameter, invoiceDateHintParameter, customerNameHintParameter, locationHintParameter, netAmountParameter, typeParameter, itemCategoryIDParameter, customerIDParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetSalesByLocation_Result> SpGetSalesByLocation(Nullable<System.DateTime> date, Nullable<int> userID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSalesByLocation_Result>("SpGetSalesByLocation", dateParameter, userIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetSalesInvoiceAmountDetails_Result> SpGetSalesInvoiceAmountDetails(Nullable<int> salesInvoiceID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var salesInvoiceIDParameter = salesInvoiceID.HasValue ?
                new ObjectParameter("SalesInvoiceID", salesInvoiceID) :
                new ObjectParameter("SalesInvoiceID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSalesInvoiceAmountDetails_Result>("SpGetSalesInvoiceAmountDetails", salesInvoiceIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetSalesInvoiceBteweenDate_Result> SpGetSalesInvoiceBteweenDate(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string type, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSalesInvoiceBteweenDate_Result>("SpGetSalesInvoiceBteweenDate", fromDateParameter, toDateParameter, typeParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetSalesInvoiceBySupplierID_Result> SpGetSalesInvoiceBySupplierID(Nullable<int> supplierID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSalesInvoiceBySupplierID_Result>("SpGetSalesInvoiceBySupplierID", supplierIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetSalesInvoiceCodeAutoCompleteForReport_Result> SpGetSalesInvoiceCodeAutoCompleteForReport(string codeHint, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSalesInvoiceCodeAutoCompleteForReport_Result>("SpGetSalesInvoiceCodeAutoCompleteForReport", codeHintParameter, fromDateParameter, toDateParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetSalesInvoiceIDForSalesReturn_Result> SpGetSalesInvoiceIDForSalesReturn(Nullable<int> customerID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string transNoHint, string invoiceDateHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var transNoHintParameter = transNoHint != null ?
                new ObjectParameter("TransNoHint", transNoHint) :
                new ObjectParameter("TransNoHint", typeof(string));
    
            var invoiceDateHintParameter = invoiceDateHint != null ?
                new ObjectParameter("InvoiceDateHint", invoiceDateHint) :
                new ObjectParameter("InvoiceDateHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSalesInvoiceIDForSalesReturn_Result>("SpGetSalesInvoiceIDForSalesReturn", customerIDParameter, fromDateParameter, toDateParameter, transNoHintParameter, invoiceDateHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetSalesInvoiceList_Result> SpGetSalesInvoiceList(string type, string transNoHint, string invoiceDateHint, string salesTypeHint, string customerNameHint, string locationHint, string netAmount, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var transNoHintParameter = transNoHint != null ?
                new ObjectParameter("TransNoHint", transNoHint) :
                new ObjectParameter("TransNoHint", typeof(string));
    
            var invoiceDateHintParameter = invoiceDateHint != null ?
                new ObjectParameter("InvoiceDateHint", invoiceDateHint) :
                new ObjectParameter("InvoiceDateHint", typeof(string));
    
            var salesTypeHintParameter = salesTypeHint != null ?
                new ObjectParameter("SalesTypeHint", salesTypeHint) :
                new ObjectParameter("SalesTypeHint", typeof(string));
    
            var customerNameHintParameter = customerNameHint != null ?
                new ObjectParameter("CustomerNameHint", customerNameHint) :
                new ObjectParameter("CustomerNameHint", typeof(string));
    
            var locationHintParameter = locationHint != null ?
                new ObjectParameter("LocationHint", locationHint) :
                new ObjectParameter("LocationHint", typeof(string));
    
            var netAmountParameter = netAmount != null ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSalesInvoiceList_Result>("SpGetSalesInvoiceList", typeParameter, transNoHintParameter, invoiceDateHintParameter, salesTypeHintParameter, customerNameHintParameter, locationHintParameter, netAmountParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetSalesOrderList_Result> SpGetSalesOrderList(Nullable<int> customerID, Nullable<int> itemCategoryID, string type, string sONoHint, string dateHint, string customerNameHint, string salesTypeHint, string despatchDateHint, string netAmount, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var sONoHintParameter = sONoHint != null ?
                new ObjectParameter("SONoHint", sONoHint) :
                new ObjectParameter("SONoHint", typeof(string));
    
            var dateHintParameter = dateHint != null ?
                new ObjectParameter("DateHint", dateHint) :
                new ObjectParameter("DateHint", typeof(string));
    
            var customerNameHintParameter = customerNameHint != null ?
                new ObjectParameter("CustomerNameHint", customerNameHint) :
                new ObjectParameter("CustomerNameHint", typeof(string));
    
            var salesTypeHintParameter = salesTypeHint != null ?
                new ObjectParameter("SalesTypeHint", salesTypeHint) :
                new ObjectParameter("SalesTypeHint", typeof(string));
    
            var despatchDateHintParameter = despatchDateHint != null ?
                new ObjectParameter("DespatchDateHint", despatchDateHint) :
                new ObjectParameter("DespatchDateHint", typeof(string));
    
            var netAmountParameter = netAmount != null ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSalesOrderList_Result>("SpGetSalesOrderList", customerIDParameter, itemCategoryIDParameter, typeParameter, sONoHintParameter, dateHintParameter, customerNameHintParameter, salesTypeHintParameter, despatchDateHintParameter, netAmountParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetSalesOrders_Result> SpGetSalesOrders(Nullable<int> customerID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("customerID", customerID) :
                new ObjectParameter("customerID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSalesOrders_Result>("SpGetSalesOrders", customerIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetSalesReturn_Result> SpGetSalesReturn(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSalesReturn_Result>("SpGetSalesReturn", finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetSalesReturnListForDataTable_Result> SpGetSalesReturnListForDataTable(string type, string returnNo, string returnDate, string customerName, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var returnNoParameter = returnNo != null ?
                new ObjectParameter("ReturnNo", returnNo) :
                new ObjectParameter("ReturnNo", typeof(string));
    
            var returnDateParameter = returnDate != null ?
                new ObjectParameter("ReturnDate", returnDate) :
                new ObjectParameter("ReturnDate", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSalesReturnListForDataTable_Result>("SpGetSalesReturnListForDataTable", typeParameter, returnNoParameter, returnDateParameter, customerNameParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetSalesReturnLogicCode_Result> SpGetSalesReturnLogicCode()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSalesReturnLogicCode_Result>("SpGetSalesReturnLogicCode");
        }
    
        public virtual int SpGetSchemeAllocation(Nullable<int> customerID, Nullable<int> applicationID, ObjectParameter schemeAllocationID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetSchemeAllocation", customerIDParameter, applicationIDParameter, schemeAllocationID);
        }
    
        public virtual ObjectResult<SpGetSchemeItem_Result> SpGetSchemeItem(Nullable<int> customerID, Nullable<int> schemeAllocationID, Nullable<int> itemID, Nullable<int> qty, Nullable<int> unitID, Nullable<int> applicationID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var schemeAllocationIDParameter = schemeAllocationID.HasValue ?
                new ObjectParameter("SchemeAllocationID", schemeAllocationID) :
                new ObjectParameter("SchemeAllocationID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSchemeItem_Result>("SpGetSchemeItem", customerIDParameter, schemeAllocationIDParameter, itemIDParameter, qtyParameter, unitIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetServiceSalesInvoice_Result> SpGetServiceSalesInvoice(Nullable<int> salesInvoiceID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var salesInvoiceIDParameter = salesInvoiceID.HasValue ?
                new ObjectParameter("SalesInvoiceID", salesInvoiceID) :
                new ObjectParameter("SalesInvoiceID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetServiceSalesInvoice_Result>("SpGetServiceSalesInvoice", salesInvoiceIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetServiceSalesInvoiceItems_Result> SpGetServiceSalesInvoiceItems(Nullable<int> salesInvoiceID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var salesInvoiceIDParameter = salesInvoiceID.HasValue ?
                new ObjectParameter("SalesInvoiceID", salesInvoiceID) :
                new ObjectParameter("SalesInvoiceID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetServiceSalesInvoiceItems_Result>("SpGetServiceSalesInvoiceItems", salesInvoiceIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetServiceSalesInvoiceList_Result> SpGetServiceSalesInvoiceList(string type, string transNoHint, string invoiceDateHint, string customerNameHint, string locationHint, string netAmount, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var transNoHintParameter = transNoHint != null ?
                new ObjectParameter("TransNoHint", transNoHint) :
                new ObjectParameter("TransNoHint", typeof(string));
    
            var invoiceDateHintParameter = invoiceDateHint != null ?
                new ObjectParameter("InvoiceDateHint", invoiceDateHint) :
                new ObjectParameter("InvoiceDateHint", typeof(string));
    
            var customerNameHintParameter = customerNameHint != null ?
                new ObjectParameter("CustomerNameHint", customerNameHint) :
                new ObjectParameter("CustomerNameHint", typeof(string));
    
            var locationHintParameter = locationHint != null ?
                new ObjectParameter("LocationHint", locationHint) :
                new ObjectParameter("LocationHint", typeof(string));
    
            var netAmountParameter = netAmount != null ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetServiceSalesInvoiceList_Result>("SpGetServiceSalesInvoiceList", typeParameter, transNoHintParameter, invoiceDateHintParameter, customerNameHintParameter, locationHintParameter, netAmountParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetServiceSalesOrder_Result> SpGetServiceSalesOrder(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetServiceSalesOrder_Result>("SpGetServiceSalesOrder", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetServiceSalesOrderItems_Result> SpGetServiceSalesOrderItems(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetServiceSalesOrderItems_Result>("SpGetServiceSalesOrderItems", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetServiceSalesOrderItemsBySalesOrderIDs_Result> SpGetServiceSalesOrderItemsBySalesOrderIDs(string salesOrderIDs, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var salesOrderIDsParameter = salesOrderIDs != null ?
                new ObjectParameter("SalesOrderIDs", salesOrderIDs) :
                new ObjectParameter("SalesOrderIDs", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetServiceSalesOrderItemsBySalesOrderIDs_Result>("SpGetServiceSalesOrderItemsBySalesOrderIDs", salesOrderIDsParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetServiceSalesOrderList_Result> SpGetServiceSalesOrderList(string type, string sONoHint, string dateHint, string customerNameHint, string netAmount, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var sONoHintParameter = sONoHint != null ?
                new ObjectParameter("SONoHint", sONoHint) :
                new ObjectParameter("SONoHint", typeof(string));
    
            var dateHintParameter = dateHint != null ?
                new ObjectParameter("DateHint", dateHint) :
                new ObjectParameter("DateHint", typeof(string));
    
            var customerNameHintParameter = customerNameHint != null ?
                new ObjectParameter("CustomerNameHint", customerNameHint) :
                new ObjectParameter("CustomerNameHint", typeof(string));
    
            var netAmountParameter = netAmount != null ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetServiceSalesOrderList_Result>("SpGetServiceSalesOrderList", typeParameter, sONoHintParameter, dateHintParameter, customerNameHintParameter, netAmountParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetServiceSalesOrderUnprocessedList_Result> SpGetServiceSalesOrderUnprocessedList(Nullable<int> customerID, string type, string sONoHint, string dateHint, string customerNameHint, string netAmount, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var sONoHintParameter = sONoHint != null ?
                new ObjectParameter("SONoHint", sONoHint) :
                new ObjectParameter("SONoHint", typeof(string));
    
            var dateHintParameter = dateHint != null ?
                new ObjectParameter("DateHint", dateHint) :
                new ObjectParameter("DateHint", typeof(string));
    
            var customerNameHintParameter = customerNameHint != null ?
                new ObjectParameter("CustomerNameHint", customerNameHint) :
                new ObjectParameter("CustomerNameHint", typeof(string));
    
            var netAmountParameter = netAmount != null ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetServiceSalesOrderUnprocessedList_Result>("SpGetServiceSalesOrderUnprocessedList", customerIDParameter, typeParameter, sONoHintParameter, dateHintParameter, customerNameHintParameter, netAmountParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetTransportPermitDetail_Result> SpGetTransportPermitDetail(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetTransportPermitDetail_Result>("SpGetTransportPermitDetail", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetTransportPermitList_Result> SpGetTransportPermitList(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetTransportPermitList_Result>("SpGetTransportPermitList", finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetTransportPermitListForDataTable_Result> SpGetTransportPermitListForDataTable(string transNo, string validFromdate, string validTodate, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var validFromdateParameter = validFromdate != null ?
                new ObjectParameter("ValidFromdate", validFromdate) :
                new ObjectParameter("ValidFromdate", typeof(string));
    
            var validTodateParameter = validTodate != null ?
                new ObjectParameter("ValidTodate", validTodate) :
                new ObjectParameter("ValidTodate", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetTransportPermitListForDataTable_Result>("SpGetTransportPermitListForDataTable", transNoParameter, validFromdateParameter, validTodateParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetTransportPermitTrans_Result> SpGetTransportPermitTrans(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetTransportPermitTrans_Result>("SpGetTransportPermitTrans", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpGetTurnOverDiscount(Nullable<int> customerID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter amount)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetTurnOverDiscount", customerIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, amount);
        }
    
        public virtual ObjectResult<SpGetUnProcessedServiceSalesOrderList_Result> SpGetUnProcessedServiceSalesOrderList(Nullable<int> customerID, Nullable<int> itemCategoryID, string type, string sONoHint, string dateHint, string customerNameHint, string salesTypeHint, string despatchDateHint, string netAmount, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var sONoHintParameter = sONoHint != null ?
                new ObjectParameter("SONoHint", sONoHint) :
                new ObjectParameter("SONoHint", typeof(string));
    
            var dateHintParameter = dateHint != null ?
                new ObjectParameter("DateHint", dateHint) :
                new ObjectParameter("DateHint", typeof(string));
    
            var customerNameHintParameter = customerNameHint != null ?
                new ObjectParameter("CustomerNameHint", customerNameHint) :
                new ObjectParameter("CustomerNameHint", typeof(string));
    
            var salesTypeHintParameter = salesTypeHint != null ?
                new ObjectParameter("SalesTypeHint", salesTypeHint) :
                new ObjectParameter("SalesTypeHint", typeof(string));
    
            var despatchDateHintParameter = despatchDateHint != null ?
                new ObjectParameter("DespatchDateHint", despatchDateHint) :
                new ObjectParameter("DespatchDateHint", typeof(string));
    
            var netAmountParameter = netAmount != null ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetUnProcessedServiceSalesOrderList_Result>("SpGetUnProcessedServiceSalesOrderList", customerIDParameter, itemCategoryIDParameter, typeParameter, sONoHintParameter, dateHintParameter, customerNameHintParameter, salesTypeHintParameter, despatchDateHintParameter, netAmountParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetUserIDsForTicker_Result> SpGetUserIDsForTicker(Nullable<int> locationID, Nullable<int> applicationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetUserIDsForTicker_Result>("SpGetUserIDsForTicker", locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpHasCustomerOutstandingAmount(Nullable<int> customerID, Nullable<int> applicationID, ObjectParameter hasOutstandingAmount)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpHasCustomerOutstandingAmount", customerIDParameter, applicationIDParameter, hasOutstandingAmount);
        }
    
        public virtual int SpInsertBatchConsumption(Nullable<int> itemID, Nullable<decimal> quantity, Nullable<int> fromWarehouseID, Nullable<int> toWarehouseID, string type, Nullable<int> transID, Nullable<int> sortOrder, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter retValue)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var fromWarehouseIDParameter = fromWarehouseID.HasValue ?
                new ObjectParameter("FromWarehouseID", fromWarehouseID) :
                new ObjectParameter("FromWarehouseID", typeof(int));
    
            var toWarehouseIDParameter = toWarehouseID.HasValue ?
                new ObjectParameter("ToWarehouseID", toWarehouseID) :
                new ObjectParameter("ToWarehouseID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var transIDParameter = transID.HasValue ?
                new ObjectParameter("TransID", transID) :
                new ObjectParameter("TransID", typeof(int));
    
            var sortOrderParameter = sortOrder.HasValue ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpInsertBatchConsumption", itemIDParameter, quantityParameter, fromWarehouseIDParameter, toWarehouseIDParameter, typeParameter, transIDParameter, sortOrderParameter, finYearParameter, locationIDParameter, applicationIDParameter, retValue);
        }
    
        public virtual int SpInvoiceIssueItems(Nullable<int> invoiceID, Nullable<int> toWarehouseID, string type, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter retValue)
        {
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            var toWarehouseIDParameter = toWarehouseID.HasValue ?
                new ObjectParameter("ToWarehouseID", toWarehouseID) :
                new ObjectParameter("ToWarehouseID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpInvoiceIssueItems", invoiceIDParameter, toWarehouseIDParameter, typeParameter, finYearParameter, locationIDParameter, applicationIDParameter, retValue);
        }
    
        public virtual int SpIsCounterSalesCancelable(Nullable<int> counterSalesID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter isCancelable)
        {
            var counterSalesIDParameter = counterSalesID.HasValue ?
                new ObjectParameter("CounterSalesID", counterSalesID) :
                new ObjectParameter("CounterSalesID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpIsCounterSalesCancelable", counterSalesIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, isCancelable);
        }
    
        public virtual int SpIsProformaInvoiceCancelable(Nullable<int> proformaInvoiceID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter isCancelable)
        {
            var proformaInvoiceIDParameter = proformaInvoiceID.HasValue ?
                new ObjectParameter("ProformaInvoiceID", proformaInvoiceID) :
                new ObjectParameter("ProformaInvoiceID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpIsProformaInvoiceCancelable", proformaInvoiceIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, isCancelable);
        }
    
        public virtual int SpIsSalesInvoiceCancelable(Nullable<int> salesInvoiceID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter isCancelable)
        {
            var salesInvoiceIDParameter = salesInvoiceID.HasValue ?
                new ObjectParameter("SalesInvoiceID", salesInvoiceID) :
                new ObjectParameter("SalesInvoiceID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpIsSalesInvoiceCancelable", salesInvoiceIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, isCancelable);
        }
    
        public virtual int SpIsSalesOrderCancelable(Nullable<int> salesOrderID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter isCancelable)
        {
            var salesOrderIDParameter = salesOrderID.HasValue ?
                new ObjectParameter("SalesOrderID", salesOrderID) :
                new ObjectParameter("SalesOrderID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpIsSalesOrderCancelable", salesOrderIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, isCancelable);
        }
    
        public virtual int SpIsServiceSalesOrderCancelable(Nullable<int> salesOrderID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter isCancelable)
        {
            var salesOrderIDParameter = salesOrderID.HasValue ?
                new ObjectParameter("SalesOrderID", salesOrderID) :
                new ObjectParameter("SalesOrderID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpIsServiceSalesOrderCancelable", salesOrderIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, isCancelable);
        }
    
        public virtual ObjectResult<SpSGetSalesOrderItems_Result> SpSGetSalesOrderItems(string iD, Nullable<int> storeID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpSGetSalesOrderItems_Result>("SpSGetSalesOrderItems", iDParameter, storeIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateGatePass(Nullable<int> iD, Nullable<System.DateTime> transDate, string salesman, Nullable<int> vehicleNoID, Nullable<System.DateTime> despatchDateTime, string time, Nullable<int> driverID, string drivingLicense, string vehicleOwner, string transportingAgency, string helperName, string area, Nullable<decimal> startingKilometer, string issuedBy, Nullable<int> bagCount, Nullable<int> canCount, Nullable<int> boxCount, Nullable<decimal> totalAmount, Nullable<bool> isDraft, string vehicleNo, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var transDateParameter = transDate.HasValue ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(System.DateTime));
    
            var salesmanParameter = salesman != null ?
                new ObjectParameter("Salesman", salesman) :
                new ObjectParameter("Salesman", typeof(string));
    
            var vehicleNoIDParameter = vehicleNoID.HasValue ?
                new ObjectParameter("VehicleNoID", vehicleNoID) :
                new ObjectParameter("VehicleNoID", typeof(int));
    
            var despatchDateTimeParameter = despatchDateTime.HasValue ?
                new ObjectParameter("DespatchDateTime", despatchDateTime) :
                new ObjectParameter("DespatchDateTime", typeof(System.DateTime));
    
            var timeParameter = time != null ?
                new ObjectParameter("Time", time) :
                new ObjectParameter("Time", typeof(string));
    
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("DriverID", driverID) :
                new ObjectParameter("DriverID", typeof(int));
    
            var drivingLicenseParameter = drivingLicense != null ?
                new ObjectParameter("DrivingLicense", drivingLicense) :
                new ObjectParameter("DrivingLicense", typeof(string));
    
            var vehicleOwnerParameter = vehicleOwner != null ?
                new ObjectParameter("VehicleOwner", vehicleOwner) :
                new ObjectParameter("VehicleOwner", typeof(string));
    
            var transportingAgencyParameter = transportingAgency != null ?
                new ObjectParameter("TransportingAgency", transportingAgency) :
                new ObjectParameter("TransportingAgency", typeof(string));
    
            var helperNameParameter = helperName != null ?
                new ObjectParameter("HelperName", helperName) :
                new ObjectParameter("HelperName", typeof(string));
    
            var areaParameter = area != null ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(string));
    
            var startingKilometerParameter = startingKilometer.HasValue ?
                new ObjectParameter("StartingKilometer", startingKilometer) :
                new ObjectParameter("StartingKilometer", typeof(decimal));
    
            var issuedByParameter = issuedBy != null ?
                new ObjectParameter("IssuedBy", issuedBy) :
                new ObjectParameter("IssuedBy", typeof(string));
    
            var bagCountParameter = bagCount.HasValue ?
                new ObjectParameter("BagCount", bagCount) :
                new ObjectParameter("BagCount", typeof(int));
    
            var canCountParameter = canCount.HasValue ?
                new ObjectParameter("CanCount", canCount) :
                new ObjectParameter("CanCount", typeof(int));
    
            var boxCountParameter = boxCount.HasValue ?
                new ObjectParameter("BoxCount", boxCount) :
                new ObjectParameter("BoxCount", typeof(int));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var vehicleNoParameter = vehicleNo != null ?
                new ObjectParameter("VehicleNo", vehicleNo) :
                new ObjectParameter("VehicleNo", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateGatePass", iDParameter, transDateParameter, salesmanParameter, vehicleNoIDParameter, despatchDateTimeParameter, timeParameter, driverIDParameter, drivingLicenseParameter, vehicleOwnerParameter, transportingAgencyParameter, helperNameParameter, areaParameter, startingKilometerParameter, issuedByParameter, bagCountParameter, canCountParameter, boxCountParameter, totalAmountParameter, isDraftParameter, vehicleNoParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateGatePassDeliveryDate(Nullable<int> gatePassTransID, Nullable<System.DateTime> deliveryDate, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var gatePassTransIDParameter = gatePassTransID.HasValue ?
                new ObjectParameter("GatePassTransID", gatePassTransID) :
                new ObjectParameter("GatePassTransID", typeof(int));
    
            var deliveryDateParameter = deliveryDate.HasValue ?
                new ObjectParameter("DeliveryDate", deliveryDate) :
                new ObjectParameter("DeliveryDate", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateGatePassDeliveryDate", gatePassTransIDParameter, deliveryDateParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateProformaInvoice(Nullable<int> proformaInvoiceID, string invoice, string items, string amountDetails, string packingDetails, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter retValue)
        {
            var proformaInvoiceIDParameter = proformaInvoiceID.HasValue ?
                new ObjectParameter("ProformaInvoiceID", proformaInvoiceID) :
                new ObjectParameter("ProformaInvoiceID", typeof(int));
    
            var invoiceParameter = invoice != null ?
                new ObjectParameter("Invoice", invoice) :
                new ObjectParameter("Invoice", typeof(string));
    
            var itemsParameter = items != null ?
                new ObjectParameter("Items", items) :
                new ObjectParameter("Items", typeof(string));
    
            var amountDetailsParameter = amountDetails != null ?
                new ObjectParameter("AmountDetails", amountDetails) :
                new ObjectParameter("AmountDetails", typeof(string));
    
            var packingDetailsParameter = packingDetails != null ?
                new ObjectParameter("PackingDetails", packingDetails) :
                new ObjectParameter("PackingDetails", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateProformaInvoice", proformaInvoiceIDParameter, invoiceParameter, itemsParameter, amountDetailsParameter, packingDetailsParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, retValue);
        }
    
        public virtual int SpUpdateQuantityMetInProformaInvoice(Nullable<int> invoiceID, ObjectParameter retValue)
        {
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateQuantityMetInProformaInvoice", invoiceIDParameter, retValue);
        }
    
        public virtual int SpUpdateQuantityMetInSalesOrder(Nullable<int> invoiceID, string type, ObjectParameter retValue)
        {
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateQuantityMetInSalesOrder", invoiceIDParameter, typeParameter, retValue);
        }
    
        public virtual int SpUpdateSalesInvoice(Nullable<int> salesInvoiceID, string invoice, string items, string amountDetails, string packingDetails, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter retValue)
        {
            var salesInvoiceIDParameter = salesInvoiceID.HasValue ?
                new ObjectParameter("SalesInvoiceID", salesInvoiceID) :
                new ObjectParameter("SalesInvoiceID", typeof(int));
    
            var invoiceParameter = invoice != null ?
                new ObjectParameter("Invoice", invoice) :
                new ObjectParameter("Invoice", typeof(string));
    
            var itemsParameter = items != null ?
                new ObjectParameter("Items", items) :
                new ObjectParameter("Items", typeof(string));
    
            var amountDetailsParameter = amountDetails != null ?
                new ObjectParameter("AmountDetails", amountDetails) :
                new ObjectParameter("AmountDetails", typeof(string));
    
            var packingDetailsParameter = packingDetails != null ?
                new ObjectParameter("PackingDetails", packingDetails) :
                new ObjectParameter("PackingDetails", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateSalesInvoice", salesInvoiceIDParameter, invoiceParameter, itemsParameter, amountDetailsParameter, packingDetailsParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, retValue);
        }
    
        public virtual int SpUpdateSalesReturn(Nullable<int> iD, Nullable<System.DateTime> date, Nullable<int> customerID, Nullable<decimal> grossAmoount, Nullable<decimal> discountAmount, Nullable<decimal> sGSTAmount, Nullable<decimal> cGSTAmount, Nullable<decimal> iGSTAmount, Nullable<decimal> roundOff, Nullable<decimal> netAmount, Nullable<bool> isDraft, Nullable<int> salesInvoiceID, string salesInvoiceNo, Nullable<bool> isNewInvoice, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var grossAmoountParameter = grossAmoount.HasValue ?
                new ObjectParameter("GrossAmoount", grossAmoount) :
                new ObjectParameter("GrossAmoount", typeof(decimal));
    
            var discountAmountParameter = discountAmount.HasValue ?
                new ObjectParameter("DiscountAmount", discountAmount) :
                new ObjectParameter("DiscountAmount", typeof(decimal));
    
            var sGSTAmountParameter = sGSTAmount.HasValue ?
                new ObjectParameter("SGSTAmount", sGSTAmount) :
                new ObjectParameter("SGSTAmount", typeof(decimal));
    
            var cGSTAmountParameter = cGSTAmount.HasValue ?
                new ObjectParameter("CGSTAmount", cGSTAmount) :
                new ObjectParameter("CGSTAmount", typeof(decimal));
    
            var iGSTAmountParameter = iGSTAmount.HasValue ?
                new ObjectParameter("IGSTAmount", iGSTAmount) :
                new ObjectParameter("IGSTAmount", typeof(decimal));
    
            var roundOffParameter = roundOff.HasValue ?
                new ObjectParameter("RoundOff", roundOff) :
                new ObjectParameter("RoundOff", typeof(decimal));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var salesInvoiceIDParameter = salesInvoiceID.HasValue ?
                new ObjectParameter("SalesInvoiceID", salesInvoiceID) :
                new ObjectParameter("SalesInvoiceID", typeof(int));
    
            var salesInvoiceNoParameter = salesInvoiceNo != null ?
                new ObjectParameter("SalesInvoiceNo", salesInvoiceNo) :
                new ObjectParameter("SalesInvoiceNo", typeof(string));
    
            var isNewInvoiceParameter = isNewInvoice.HasValue ?
                new ObjectParameter("IsNewInvoice", isNewInvoice) :
                new ObjectParameter("IsNewInvoice", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateSalesReturn", iDParameter, dateParameter, customerIDParameter, grossAmoountParameter, discountAmountParameter, sGSTAmountParameter, cGSTAmountParameter, iGSTAmountParameter, roundOffParameter, netAmountParameter, isDraftParameter, salesInvoiceIDParameter, salesInvoiceNoParameter, isNewInvoiceParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateServiceSalesInvoice(Nullable<int> salesInvoiceID, Nullable<int> customerID, Nullable<int> salesOrderID, string salesOrderNos, Nullable<int> paymentModeID, Nullable<int> paymentTypeID, Nullable<decimal> grossAmt, Nullable<decimal> discountAmt, Nullable<decimal> taxableAmt, Nullable<decimal> sGSTAmt, Nullable<decimal> cGSTAmt, Nullable<decimal> iGSTAmt, Nullable<decimal> cessAmount, Nullable<decimal> roundOff, Nullable<decimal> netAmt, Nullable<bool> isDraft, Nullable<int> billingAddressID, Nullable<int> shippingAddressID, Nullable<int> discountCategoryID, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var salesInvoiceIDParameter = salesInvoiceID.HasValue ?
                new ObjectParameter("SalesInvoiceID", salesInvoiceID) :
                new ObjectParameter("SalesInvoiceID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var salesOrderIDParameter = salesOrderID.HasValue ?
                new ObjectParameter("SalesOrderID", salesOrderID) :
                new ObjectParameter("SalesOrderID", typeof(int));
    
            var salesOrderNosParameter = salesOrderNos != null ?
                new ObjectParameter("SalesOrderNos", salesOrderNos) :
                new ObjectParameter("SalesOrderNos", typeof(string));
    
            var paymentModeIDParameter = paymentModeID.HasValue ?
                new ObjectParameter("PaymentModeID", paymentModeID) :
                new ObjectParameter("PaymentModeID", typeof(int));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(int));
    
            var grossAmtParameter = grossAmt.HasValue ?
                new ObjectParameter("GrossAmt", grossAmt) :
                new ObjectParameter("GrossAmt", typeof(decimal));
    
            var discountAmtParameter = discountAmt.HasValue ?
                new ObjectParameter("DiscountAmt", discountAmt) :
                new ObjectParameter("DiscountAmt", typeof(decimal));
    
            var taxableAmtParameter = taxableAmt.HasValue ?
                new ObjectParameter("TaxableAmt", taxableAmt) :
                new ObjectParameter("TaxableAmt", typeof(decimal));
    
            var sGSTAmtParameter = sGSTAmt.HasValue ?
                new ObjectParameter("SGSTAmt", sGSTAmt) :
                new ObjectParameter("SGSTAmt", typeof(decimal));
    
            var cGSTAmtParameter = cGSTAmt.HasValue ?
                new ObjectParameter("CGSTAmt", cGSTAmt) :
                new ObjectParameter("CGSTAmt", typeof(decimal));
    
            var iGSTAmtParameter = iGSTAmt.HasValue ?
                new ObjectParameter("IGSTAmt", iGSTAmt) :
                new ObjectParameter("IGSTAmt", typeof(decimal));
    
            var cessAmountParameter = cessAmount.HasValue ?
                new ObjectParameter("CessAmount", cessAmount) :
                new ObjectParameter("CessAmount", typeof(decimal));
    
            var roundOffParameter = roundOff.HasValue ?
                new ObjectParameter("RoundOff", roundOff) :
                new ObjectParameter("RoundOff", typeof(decimal));
    
            var netAmtParameter = netAmt.HasValue ?
                new ObjectParameter("NetAmt", netAmt) :
                new ObjectParameter("NetAmt", typeof(decimal));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var billingAddressIDParameter = billingAddressID.HasValue ?
                new ObjectParameter("BillingAddressID", billingAddressID) :
                new ObjectParameter("BillingAddressID", typeof(int));
    
            var shippingAddressIDParameter = shippingAddressID.HasValue ?
                new ObjectParameter("ShippingAddressID", shippingAddressID) :
                new ObjectParameter("ShippingAddressID", typeof(int));
    
            var discountCategoryIDParameter = discountCategoryID.HasValue ?
                new ObjectParameter("DiscountCategoryID", discountCategoryID) :
                new ObjectParameter("DiscountCategoryID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateServiceSalesInvoice", salesInvoiceIDParameter, customerIDParameter, salesOrderIDParameter, salesOrderNosParameter, paymentModeIDParameter, paymentTypeIDParameter, grossAmtParameter, discountAmtParameter, taxableAmtParameter, sGSTAmtParameter, cGSTAmtParameter, iGSTAmtParameter, cessAmountParameter, roundOffParameter, netAmtParameter, isDraftParameter, billingAddressIDParameter, shippingAddressIDParameter, discountCategoryIDParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateServiceSalesOrder(Nullable<int> salesOrderID, Nullable<int> customerID, Nullable<decimal> grossAmt, Nullable<decimal> discountAmt, Nullable<decimal> taxableAmt, Nullable<decimal> sGSTAmt, Nullable<decimal> cGSTAmt, Nullable<decimal> iGSTAmt, Nullable<decimal> cessAmount, Nullable<decimal> roundOff, Nullable<decimal> netAmt, Nullable<int> fsoID, string source, Nullable<int> billingAddressID, Nullable<int> shippingAddressID, Nullable<bool> isDirectInvoice, Nullable<bool> isDraft, Nullable<int> createdUserID, Nullable<int> paymentModeID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter serialNo)
        {
            var salesOrderIDParameter = salesOrderID.HasValue ?
                new ObjectParameter("SalesOrderID", salesOrderID) :
                new ObjectParameter("SalesOrderID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var grossAmtParameter = grossAmt.HasValue ?
                new ObjectParameter("GrossAmt", grossAmt) :
                new ObjectParameter("GrossAmt", typeof(decimal));
    
            var discountAmtParameter = discountAmt.HasValue ?
                new ObjectParameter("DiscountAmt", discountAmt) :
                new ObjectParameter("DiscountAmt", typeof(decimal));
    
            var taxableAmtParameter = taxableAmt.HasValue ?
                new ObjectParameter("TaxableAmt", taxableAmt) :
                new ObjectParameter("TaxableAmt", typeof(decimal));
    
            var sGSTAmtParameter = sGSTAmt.HasValue ?
                new ObjectParameter("SGSTAmt", sGSTAmt) :
                new ObjectParameter("SGSTAmt", typeof(decimal));
    
            var cGSTAmtParameter = cGSTAmt.HasValue ?
                new ObjectParameter("CGSTAmt", cGSTAmt) :
                new ObjectParameter("CGSTAmt", typeof(decimal));
    
            var iGSTAmtParameter = iGSTAmt.HasValue ?
                new ObjectParameter("IGSTAmt", iGSTAmt) :
                new ObjectParameter("IGSTAmt", typeof(decimal));
    
            var cessAmountParameter = cessAmount.HasValue ?
                new ObjectParameter("CessAmount", cessAmount) :
                new ObjectParameter("CessAmount", typeof(decimal));
    
            var roundOffParameter = roundOff.HasValue ?
                new ObjectParameter("RoundOff", roundOff) :
                new ObjectParameter("RoundOff", typeof(decimal));
    
            var netAmtParameter = netAmt.HasValue ?
                new ObjectParameter("NetAmt", netAmt) :
                new ObjectParameter("NetAmt", typeof(decimal));
    
            var fsoIDParameter = fsoID.HasValue ?
                new ObjectParameter("FsoID", fsoID) :
                new ObjectParameter("FsoID", typeof(int));
    
            var sourceParameter = source != null ?
                new ObjectParameter("Source", source) :
                new ObjectParameter("Source", typeof(string));
    
            var billingAddressIDParameter = billingAddressID.HasValue ?
                new ObjectParameter("BillingAddressID", billingAddressID) :
                new ObjectParameter("BillingAddressID", typeof(int));
    
            var shippingAddressIDParameter = shippingAddressID.HasValue ?
                new ObjectParameter("ShippingAddressID", shippingAddressID) :
                new ObjectParameter("ShippingAddressID", typeof(int));
    
            var isDirectInvoiceParameter = isDirectInvoice.HasValue ?
                new ObjectParameter("IsDirectInvoice", isDirectInvoice) :
                new ObjectParameter("IsDirectInvoice", typeof(bool));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var paymentModeIDParameter = paymentModeID.HasValue ?
                new ObjectParameter("PaymentModeID", paymentModeID) :
                new ObjectParameter("PaymentModeID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateServiceSalesOrder", salesOrderIDParameter, customerIDParameter, grossAmtParameter, discountAmtParameter, taxableAmtParameter, sGSTAmtParameter, cGSTAmtParameter, iGSTAmtParameter, cessAmountParameter, roundOffParameter, netAmtParameter, fsoIDParameter, sourceParameter, billingAddressIDParameter, shippingAddressIDParameter, isDirectInvoiceParameter, isDraftParameter, createdUserIDParameter, paymentModeIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, serialNo);
        }
    
        public virtual ObjectResult<spGetIsCounterSalesAlreadyExists_Result> spGetIsCounterSalesAlreadyExists(string partyName, Nullable<decimal> netAmount)
        {
            var partyNameParameter = partyName != null ?
                new ObjectParameter("PartyName", partyName) :
                new ObjectParameter("PartyName", typeof(string));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetIsCounterSalesAlreadyExists_Result>("spGetIsCounterSalesAlreadyExists", partyNameParameter, netAmountParameter);
        }
    
        public virtual int InsertDirectSalesOrderItems(Nullable<int> salesOrderID, string invoiceTrans, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var salesOrderIDParameter = salesOrderID.HasValue ?
                new ObjectParameter("SalesOrderID", salesOrderID) :
                new ObjectParameter("SalesOrderID", typeof(int));
    
            var invoiceTransParameter = invoiceTrans != null ?
                new ObjectParameter("InvoiceTrans", invoiceTrans) :
                new ObjectParameter("InvoiceTrans", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertDirectSalesOrderItems", salesOrderIDParameter, invoiceTransParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateDirectSalesInvoice(string invoice, string items, string amountDetails, string packingDetails, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter salesInvoiceID, ObjectParameter retValue, ObjectParameter retDiscountValue, ObjectParameter serialNo, ObjectParameter accountHeadID)
        {
            var invoiceParameter = invoice != null ?
                new ObjectParameter("Invoice", invoice) :
                new ObjectParameter("Invoice", typeof(string));
    
            var itemsParameter = items != null ?
                new ObjectParameter("Items", items) :
                new ObjectParameter("Items", typeof(string));
    
            var amountDetailsParameter = amountDetails != null ?
                new ObjectParameter("AmountDetails", amountDetails) :
                new ObjectParameter("AmountDetails", typeof(string));
    
            var packingDetailsParameter = packingDetails != null ?
                new ObjectParameter("PackingDetails", packingDetails) :
                new ObjectParameter("PackingDetails", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateDirectSalesInvoice", invoiceParameter, itemsParameter, amountDetailsParameter, packingDetailsParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, salesInvoiceID, retValue, retDiscountValue, serialNo, accountHeadID);
        }
    
        public virtual ObjectResult<SpGetDirectSalesInvoice_Result> SpGetDirectSalesInvoice(Nullable<int> salesInvoiceID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var salesInvoiceIDParameter = salesInvoiceID.HasValue ?
                new ObjectParameter("SalesInvoiceID", salesInvoiceID) :
                new ObjectParameter("SalesInvoiceID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDirectSalesInvoice_Result>("SpGetDirectSalesInvoice", salesInvoiceIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetDirectSalesInvoiceAmountDetails_Result> SpGetDirectSalesInvoiceAmountDetails(Nullable<int> salesInvoiceID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var salesInvoiceIDParameter = salesInvoiceID.HasValue ?
                new ObjectParameter("SalesInvoiceID", salesInvoiceID) :
                new ObjectParameter("SalesInvoiceID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDirectSalesInvoiceAmountDetails_Result>("SpGetDirectSalesInvoiceAmountDetails", salesInvoiceIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetDirectSalesInvoiceItems_Result> SpGetDirectSalesInvoiceItems(Nullable<int> salesInvoiceID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var salesInvoiceIDParameter = salesInvoiceID.HasValue ?
                new ObjectParameter("SalesInvoiceID", salesInvoiceID) :
                new ObjectParameter("SalesInvoiceID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDirectSalesInvoiceItems_Result>("SpGetDirectSalesInvoiceItems", salesInvoiceIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetDirectSalesInvoiceList_Result> SpGetDirectSalesInvoiceList(string type, string transNoHint, string invoiceDateHint, string salesTypeHint, string customerNameHint, string locationHint, string doctorHint, string netAmount, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var transNoHintParameter = transNoHint != null ?
                new ObjectParameter("TransNoHint", transNoHint) :
                new ObjectParameter("TransNoHint", typeof(string));
    
            var invoiceDateHintParameter = invoiceDateHint != null ?
                new ObjectParameter("InvoiceDateHint", invoiceDateHint) :
                new ObjectParameter("InvoiceDateHint", typeof(string));
    
            var salesTypeHintParameter = salesTypeHint != null ?
                new ObjectParameter("SalesTypeHint", salesTypeHint) :
                new ObjectParameter("SalesTypeHint", typeof(string));
    
            var customerNameHintParameter = customerNameHint != null ?
                new ObjectParameter("CustomerNameHint", customerNameHint) :
                new ObjectParameter("CustomerNameHint", typeof(string));
    
            var locationHintParameter = locationHint != null ?
                new ObjectParameter("LocationHint", locationHint) :
                new ObjectParameter("LocationHint", typeof(string));
    
            var doctorHintParameter = doctorHint != null ?
                new ObjectParameter("DoctorHint", doctorHint) :
                new ObjectParameter("DoctorHint", typeof(string));
    
            var netAmountParameter = netAmount != null ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDirectSalesInvoiceList_Result>("SpGetDirectSalesInvoiceList", typeParameter, transNoHintParameter, invoiceDateHintParameter, salesTypeHintParameter, customerNameHintParameter, locationHintParameter, doctorHintParameter, netAmountParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetMedicineIssueItemsForDirectSalesInvoice_Result> SpGetMedicineIssueItemsForDirectSalesInvoice(string medicineIssueType, Nullable<int> medicineIssuedToID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var medicineIssueTypeParameter = medicineIssueType != null ?
                new ObjectParameter("MedicineIssueType", medicineIssueType) :
                new ObjectParameter("MedicineIssueType", typeof(string));
    
            var medicineIssuedToIDParameter = medicineIssuedToID.HasValue ?
                new ObjectParameter("MedicineIssuedToID", medicineIssuedToID) :
                new ObjectParameter("MedicineIssuedToID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetMedicineIssueItemsForDirectSalesInvoice_Result>("SpGetMedicineIssueItemsForDirectSalesInvoice", medicineIssueTypeParameter, medicineIssuedToIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateDirectSalesInvoice(Nullable<int> salesInvoiceID, string invoice, string items, string amountDetails, string packingDetails, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter retValue, ObjectParameter accountHeadID, ObjectParameter salesInvoiceNo)
        {
            var salesInvoiceIDParameter = salesInvoiceID.HasValue ?
                new ObjectParameter("SalesInvoiceID", salesInvoiceID) :
                new ObjectParameter("SalesInvoiceID", typeof(int));
    
            var invoiceParameter = invoice != null ?
                new ObjectParameter("Invoice", invoice) :
                new ObjectParameter("Invoice", typeof(string));
    
            var itemsParameter = items != null ?
                new ObjectParameter("Items", items) :
                new ObjectParameter("Items", typeof(string));
    
            var amountDetailsParameter = amountDetails != null ?
                new ObjectParameter("AmountDetails", amountDetails) :
                new ObjectParameter("AmountDetails", typeof(string));
    
            var packingDetailsParameter = packingDetails != null ?
                new ObjectParameter("PackingDetails", packingDetails) :
                new ObjectParameter("PackingDetails", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateDirectSalesInvoice", salesInvoiceIDParameter, invoiceParameter, itemsParameter, amountDetailsParameter, packingDetailsParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, retValue, accountHeadID, salesInvoiceNo);
        }
    
        public virtual int SpCreateSalesOrderDirect(string salesOrderNo, Nullable<System.DateTime> orderDate, Nullable<int> customerID, Nullable<int> itemCategoryID, Nullable<int> schemeAllocationID, Nullable<System.DateTime> despatchDate, Nullable<decimal> freightAmount, Nullable<decimal> grossAmt, Nullable<decimal> discountAmt, Nullable<decimal> taxableAmt, Nullable<decimal> sGSTAmt, Nullable<decimal> cGSTAmt, Nullable<decimal> iGSTAmt, Nullable<decimal> cessAmount, Nullable<decimal> roundOff, Nullable<decimal> netAmt, Nullable<int> purchaseOrderID, Nullable<int> fsoID, string source, Nullable<int> billingAddressID, Nullable<int> shippingAddressID, Nullable<bool> isDraft, Nullable<bool> isApproved, Nullable<int> iPID, Nullable<int> oPID, Nullable<int> salesTypeID, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, string salesOrderTrans)
        {
            var salesOrderNoParameter = salesOrderNo != null ?
                new ObjectParameter("SalesOrderNo", salesOrderNo) :
                new ObjectParameter("SalesOrderNo", typeof(string));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("OrderDate", orderDate) :
                new ObjectParameter("OrderDate", typeof(System.DateTime));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var schemeAllocationIDParameter = schemeAllocationID.HasValue ?
                new ObjectParameter("SchemeAllocationID", schemeAllocationID) :
                new ObjectParameter("SchemeAllocationID", typeof(int));
    
            var despatchDateParameter = despatchDate.HasValue ?
                new ObjectParameter("DespatchDate", despatchDate) :
                new ObjectParameter("DespatchDate", typeof(System.DateTime));
    
            var freightAmountParameter = freightAmount.HasValue ?
                new ObjectParameter("FreightAmount", freightAmount) :
                new ObjectParameter("FreightAmount", typeof(decimal));
    
            var grossAmtParameter = grossAmt.HasValue ?
                new ObjectParameter("GrossAmt", grossAmt) :
                new ObjectParameter("GrossAmt", typeof(decimal));
    
            var discountAmtParameter = discountAmt.HasValue ?
                new ObjectParameter("DiscountAmt", discountAmt) :
                new ObjectParameter("DiscountAmt", typeof(decimal));
    
            var taxableAmtParameter = taxableAmt.HasValue ?
                new ObjectParameter("TaxableAmt", taxableAmt) :
                new ObjectParameter("TaxableAmt", typeof(decimal));
    
            var sGSTAmtParameter = sGSTAmt.HasValue ?
                new ObjectParameter("SGSTAmt", sGSTAmt) :
                new ObjectParameter("SGSTAmt", typeof(decimal));
    
            var cGSTAmtParameter = cGSTAmt.HasValue ?
                new ObjectParameter("CGSTAmt", cGSTAmt) :
                new ObjectParameter("CGSTAmt", typeof(decimal));
    
            var iGSTAmtParameter = iGSTAmt.HasValue ?
                new ObjectParameter("IGSTAmt", iGSTAmt) :
                new ObjectParameter("IGSTAmt", typeof(decimal));
    
            var cessAmountParameter = cessAmount.HasValue ?
                new ObjectParameter("CessAmount", cessAmount) :
                new ObjectParameter("CessAmount", typeof(decimal));
    
            var roundOffParameter = roundOff.HasValue ?
                new ObjectParameter("RoundOff", roundOff) :
                new ObjectParameter("RoundOff", typeof(decimal));
    
            var netAmtParameter = netAmt.HasValue ?
                new ObjectParameter("NetAmt", netAmt) :
                new ObjectParameter("NetAmt", typeof(decimal));
    
            var purchaseOrderIDParameter = purchaseOrderID.HasValue ?
                new ObjectParameter("PurchaseOrderID", purchaseOrderID) :
                new ObjectParameter("PurchaseOrderID", typeof(int));
    
            var fsoIDParameter = fsoID.HasValue ?
                new ObjectParameter("FsoID", fsoID) :
                new ObjectParameter("FsoID", typeof(int));
    
            var sourceParameter = source != null ?
                new ObjectParameter("Source", source) :
                new ObjectParameter("Source", typeof(string));
    
            var billingAddressIDParameter = billingAddressID.HasValue ?
                new ObjectParameter("BillingAddressID", billingAddressID) :
                new ObjectParameter("BillingAddressID", typeof(int));
    
            var shippingAddressIDParameter = shippingAddressID.HasValue ?
                new ObjectParameter("ShippingAddressID", shippingAddressID) :
                new ObjectParameter("ShippingAddressID", typeof(int));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var oPIDParameter = oPID.HasValue ?
                new ObjectParameter("OPID", oPID) :
                new ObjectParameter("OPID", typeof(int));
    
            var salesTypeIDParameter = salesTypeID.HasValue ?
                new ObjectParameter("SalesTypeID", salesTypeID) :
                new ObjectParameter("SalesTypeID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var salesOrderTransParameter = salesOrderTrans != null ?
                new ObjectParameter("SalesOrderTrans", salesOrderTrans) :
                new ObjectParameter("SalesOrderTrans", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateSalesOrderDirect", salesOrderNoParameter, orderDateParameter, customerIDParameter, itemCategoryIDParameter, schemeAllocationIDParameter, despatchDateParameter, freightAmountParameter, grossAmtParameter, discountAmtParameter, taxableAmtParameter, sGSTAmtParameter, cGSTAmtParameter, iGSTAmtParameter, cessAmountParameter, roundOffParameter, netAmtParameter, purchaseOrderIDParameter, fsoIDParameter, sourceParameter, billingAddressIDParameter, shippingAddressIDParameter, isDraftParameter, isApprovedParameter, iPIDParameter, oPIDParameter, salesTypeIDParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, salesOrderTransParameter);
        }
    
        public virtual ObjectResult<SpGetCounterSalesForReturn_Result> SpGetCounterSalesForReturn(Nullable<int> iD, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string transNoHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var transNoHintParameter = transNoHint != null ?
                new ObjectParameter("TransNoHint", transNoHint) :
                new ObjectParameter("TransNoHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCounterSalesForReturn_Result>("SpGetCounterSalesForReturn", iDParameter, fromDateParameter, toDateParameter, transNoHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetListForCounterSales_Result> SpGetListForCounterSales(string type, string transNoHint, string transDateHint, string salesTypeHint, string partyNameHint, string netAmountHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var transNoHintParameter = transNoHint != null ?
                new ObjectParameter("TransNoHint", transNoHint) :
                new ObjectParameter("TransNoHint", typeof(string));
    
            var transDateHintParameter = transDateHint != null ?
                new ObjectParameter("TransDateHint", transDateHint) :
                new ObjectParameter("TransDateHint", typeof(string));
    
            var salesTypeHintParameter = salesTypeHint != null ?
                new ObjectParameter("SalesTypeHint", salesTypeHint) :
                new ObjectParameter("SalesTypeHint", typeof(string));
    
            var partyNameHintParameter = partyNameHint != null ?
                new ObjectParameter("PartyNameHint", partyNameHint) :
                new ObjectParameter("PartyNameHint", typeof(string));
    
            var netAmountHintParameter = netAmountHint != null ?
                new ObjectParameter("NetAmountHint", netAmountHint) :
                new ObjectParameter("NetAmountHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetListForCounterSales_Result>("SpGetListForCounterSales", typeParameter, transNoHintParameter, transDateHintParameter, salesTypeHintParameter, partyNameHintParameter, netAmountHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCurrencyDecimalClassByCurrencyID_Result> SpGetCurrencyDecimalClassByCurrencyID(Nullable<int> currencyID)
        {
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCurrencyDecimalClassByCurrencyID_Result>("SpGetCurrencyDecimalClassByCurrencyID", currencyIDParameter);
        }
    
        public virtual ObjectResult<SpGetGoodsReceiptList_Result> SpGetGoodsReceiptList(string transNoHint, string receiptDateHint, string customerNameHint, string netAmount, string type, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var transNoHintParameter = transNoHint != null ?
                new ObjectParameter("TransNoHint", transNoHint) :
                new ObjectParameter("TransNoHint", typeof(string));
    
            var receiptDateHintParameter = receiptDateHint != null ?
                new ObjectParameter("ReceiptDateHint", receiptDateHint) :
                new ObjectParameter("ReceiptDateHint", typeof(string));
    
            var customerNameHintParameter = customerNameHint != null ?
                new ObjectParameter("CustomerNameHint", customerNameHint) :
                new ObjectParameter("CustomerNameHint", typeof(string));
    
            var netAmountParameter = netAmount != null ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetGoodsReceiptList_Result>("SpGetGoodsReceiptList", transNoHintParameter, receiptDateHintParameter, customerNameHintParameter, netAmountParameter, typeParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCustomerCounterSalesList_Result> SpGetCustomerCounterSalesList(Nullable<int> customerID, string transNoHint, string transDateHint, string partyNameHint, string netAmountHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var transNoHintParameter = transNoHint != null ?
                new ObjectParameter("TransNoHint", transNoHint) :
                new ObjectParameter("TransNoHint", typeof(string));
    
            var transDateHintParameter = transDateHint != null ?
                new ObjectParameter("TransDateHint", transDateHint) :
                new ObjectParameter("TransDateHint", typeof(string));
    
            var partyNameHintParameter = partyNameHint != null ?
                new ObjectParameter("PartyNameHint", partyNameHint) :
                new ObjectParameter("PartyNameHint", typeof(string));
    
            var netAmountHintParameter = netAmountHint != null ?
                new ObjectParameter("NetAmountHint", netAmountHint) :
                new ObjectParameter("NetAmountHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCustomerCounterSalesList_Result>("SpGetCustomerCounterSalesList", customerIDParameter, transNoHintParameter, transDateHintParameter, partyNameHintParameter, netAmountHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCustomerSalesInvoiceList_Result> SpGetCustomerSalesInvoiceList(Nullable<int> customerID, string transNoHint, string transDateHint, string partyNameHint, string netAmountHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var transNoHintParameter = transNoHint != null ?
                new ObjectParameter("TransNoHint", transNoHint) :
                new ObjectParameter("TransNoHint", typeof(string));
    
            var transDateHintParameter = transDateHint != null ?
                new ObjectParameter("TransDateHint", transDateHint) :
                new ObjectParameter("TransDateHint", typeof(string));
    
            var partyNameHintParameter = partyNameHint != null ?
                new ObjectParameter("PartyNameHint", partyNameHint) :
                new ObjectParameter("PartyNameHint", typeof(string));
    
            var netAmountHintParameter = netAmountHint != null ?
                new ObjectParameter("NetAmountHint", netAmountHint) :
                new ObjectParameter("NetAmountHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCustomerSalesInvoiceList_Result>("SpGetCustomerSalesInvoiceList", customerIDParameter, transNoHintParameter, transDateHintParameter, partyNameHintParameter, netAmountHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCustomerSalesOrderList_Result> SpGetCustomerSalesOrderList(Nullable<int> customerID, string transNoHint, string transDateHint, string partyNameHint, string netAmountHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var transNoHintParameter = transNoHint != null ?
                new ObjectParameter("TransNoHint", transNoHint) :
                new ObjectParameter("TransNoHint", typeof(string));
    
            var transDateHintParameter = transDateHint != null ?
                new ObjectParameter("TransDateHint", transDateHint) :
                new ObjectParameter("TransDateHint", typeof(string));
    
            var partyNameHintParameter = partyNameHint != null ?
                new ObjectParameter("PartyNameHint", partyNameHint) :
                new ObjectParameter("PartyNameHint", typeof(string));
    
            var netAmountHintParameter = netAmountHint != null ?
                new ObjectParameter("NetAmountHint", netAmountHint) :
                new ObjectParameter("NetAmountHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCustomerSalesOrderList_Result>("SpGetCustomerSalesOrderList", customerIDParameter, transNoHintParameter, transDateHintParameter, partyNameHintParameter, netAmountHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetGoodsReceiptDetail_Result> SpGetGoodsReceiptDetail(Nullable<int> goodReceiptNoteID)
        {
            var goodReceiptNoteIDParameter = goodReceiptNoteID.HasValue ?
                new ObjectParameter("GoodReceiptNoteID", goodReceiptNoteID) :
                new ObjectParameter("GoodReceiptNoteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetGoodsReceiptDetail_Result>("SpGetGoodsReceiptDetail", goodReceiptNoteIDParameter);
        }
    
        public virtual ObjectResult<SpGetBatchwiseItemForCounterSales_Result> SpGetBatchwiseItemForCounterSales(Nullable<int> itemID, Nullable<int> warehouseID, Nullable<int> batchTypeID, Nullable<int> unitID, Nullable<decimal> qty, string customerType, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> taxTypeID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(decimal));
    
            var customerTypeParameter = customerType != null ?
                new ObjectParameter("CustomerType", customerType) :
                new ObjectParameter("CustomerType", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var taxTypeIDParameter = taxTypeID.HasValue ?
                new ObjectParameter("TaxTypeID", taxTypeID) :
                new ObjectParameter("TaxTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetBatchwiseItemForCounterSales_Result>("SpGetBatchwiseItemForCounterSales", itemIDParameter, warehouseIDParameter, batchTypeIDParameter, unitIDParameter, qtyParameter, customerTypeParameter, finYearParameter, locationIDParameter, applicationIDParameter, taxTypeIDParameter);
        }
    
        public virtual int SpCreateSalesInvoice(string invoice, string items, string amountDetails, string packingDetails, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter salesInvoiceID, ObjectParameter retValue, ObjectParameter serialNo)
        {
            var invoiceParameter = invoice != null ?
                new ObjectParameter("Invoice", invoice) :
                new ObjectParameter("Invoice", typeof(string));
    
            var itemsParameter = items != null ?
                new ObjectParameter("Items", items) :
                new ObjectParameter("Items", typeof(string));
    
            var amountDetailsParameter = amountDetails != null ?
                new ObjectParameter("AmountDetails", amountDetails) :
                new ObjectParameter("AmountDetails", typeof(string));
    
            var packingDetailsParameter = packingDetails != null ?
                new ObjectParameter("PackingDetails", packingDetails) :
                new ObjectParameter("PackingDetails", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateSalesInvoice", invoiceParameter, itemsParameter, amountDetailsParameter, packingDetailsParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, salesInvoiceID, retValue, serialNo);
        }
    
        public virtual ObjectResult<SpGetCounterSalesTransHistory_Result> SpGetCounterSalesTransHistory(Nullable<int> itemID, string transNo, string transDate, string customerName, string itemName, string partsNumber, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var transDateParameter = transDate != null ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var partsNumberParameter = partsNumber != null ?
                new ObjectParameter("PartsNumber", partsNumber) :
                new ObjectParameter("PartsNumber", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCounterSalesTransHistory_Result>("SpGetCounterSalesTransHistory", itemIDParameter, transNoParameter, transDateParameter, customerNameParameter, itemNameParameter, partsNumberParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter);
        }
    
        public virtual ObjectResult<SpGetGoodsReceiptSalesOrderItems_Result> SpGetGoodsReceiptSalesOrderItems(string salesOrderIDs, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var salesOrderIDsParameter = salesOrderIDs != null ?
                new ObjectParameter("SalesOrderIDs", salesOrderIDs) :
                new ObjectParameter("SalesOrderIDs", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetGoodsReceiptSalesOrderItems_Result>("SpGetGoodsReceiptSalesOrderItems", salesOrderIDsParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateGoodsReceiptNote(string invoice, string items, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter retValue, ObjectParameter goodsReceiptNoteID)
        {
            var invoiceParameter = invoice != null ?
                new ObjectParameter("Invoice", invoice) :
                new ObjectParameter("Invoice", typeof(string));
    
            var itemsParameter = items != null ?
                new ObjectParameter("Items", items) :
                new ObjectParameter("Items", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateGoodsReceiptNote", invoiceParameter, itemsParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, retValue, goodsReceiptNoteID);
        }
    
        public virtual ObjectResult<SpGetGoodsReceiptSalesInvoiceItems_Result> SpGetGoodsReceiptSalesInvoiceItems(string salesInvoiceIDs, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var salesInvoiceIDsParameter = salesInvoiceIDs != null ?
                new ObjectParameter("SalesInvoiceIDs", salesInvoiceIDs) :
                new ObjectParameter("SalesInvoiceIDs", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetGoodsReceiptSalesInvoiceItems_Result>("SpGetGoodsReceiptSalesInvoiceItems", salesInvoiceIDsParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateSalesReturnTrans(Nullable<int> salesReturnID, Nullable<int> invoiceID, string transNo, Nullable<int> itemID, Nullable<decimal> qty, Nullable<decimal> rate, Nullable<decimal> mRP, Nullable<decimal> secondaryQty, string secondaryUnit, Nullable<decimal> secondaryUnitSize, Nullable<decimal> secondaryMRP, Nullable<decimal> basicPrice, Nullable<decimal> offerQty, Nullable<decimal> grossAmount, Nullable<int> discountID, Nullable<decimal> discountPercentage, Nullable<decimal> discountAmount, Nullable<decimal> taxableAmount, Nullable<decimal> sGSTPercent, Nullable<decimal> cGSTPercent, Nullable<decimal> iGSTPercent, Nullable<decimal> sGSTAmount, Nullable<decimal> cGSTAmount, Nullable<decimal> iGSTAmount, Nullable<decimal> netAmount, Nullable<decimal> returnQty, Nullable<decimal> returnOfferQty, Nullable<int> batchTypeID, Nullable<int> batchID, string batch, Nullable<int> unitID, Nullable<int> salesInvoiceTransID, Nullable<int> logicCodeID, Nullable<decimal> vATPercentage, Nullable<decimal> vATAmount, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var salesReturnIDParameter = salesReturnID.HasValue ?
                new ObjectParameter("SalesReturnID", salesReturnID) :
                new ObjectParameter("SalesReturnID", typeof(int));
    
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(decimal));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var mRPParameter = mRP.HasValue ?
                new ObjectParameter("MRP", mRP) :
                new ObjectParameter("MRP", typeof(decimal));
    
            var secondaryQtyParameter = secondaryQty.HasValue ?
                new ObjectParameter("SecondaryQty", secondaryQty) :
                new ObjectParameter("SecondaryQty", typeof(decimal));
    
            var secondaryUnitParameter = secondaryUnit != null ?
                new ObjectParameter("SecondaryUnit", secondaryUnit) :
                new ObjectParameter("SecondaryUnit", typeof(string));
    
            var secondaryUnitSizeParameter = secondaryUnitSize.HasValue ?
                new ObjectParameter("SecondaryUnitSize", secondaryUnitSize) :
                new ObjectParameter("SecondaryUnitSize", typeof(decimal));
    
            var secondaryMRPParameter = secondaryMRP.HasValue ?
                new ObjectParameter("SecondaryMRP", secondaryMRP) :
                new ObjectParameter("SecondaryMRP", typeof(decimal));
    
            var basicPriceParameter = basicPrice.HasValue ?
                new ObjectParameter("BasicPrice", basicPrice) :
                new ObjectParameter("BasicPrice", typeof(decimal));
    
            var offerQtyParameter = offerQty.HasValue ?
                new ObjectParameter("OfferQty", offerQty) :
                new ObjectParameter("OfferQty", typeof(decimal));
    
            var grossAmountParameter = grossAmount.HasValue ?
                new ObjectParameter("GrossAmount", grossAmount) :
                new ObjectParameter("GrossAmount", typeof(decimal));
    
            var discountIDParameter = discountID.HasValue ?
                new ObjectParameter("DiscountID", discountID) :
                new ObjectParameter("DiscountID", typeof(int));
    
            var discountPercentageParameter = discountPercentage.HasValue ?
                new ObjectParameter("DiscountPercentage", discountPercentage) :
                new ObjectParameter("DiscountPercentage", typeof(decimal));
    
            var discountAmountParameter = discountAmount.HasValue ?
                new ObjectParameter("DiscountAmount", discountAmount) :
                new ObjectParameter("DiscountAmount", typeof(decimal));
    
            var taxableAmountParameter = taxableAmount.HasValue ?
                new ObjectParameter("TaxableAmount", taxableAmount) :
                new ObjectParameter("TaxableAmount", typeof(decimal));
    
            var sGSTPercentParameter = sGSTPercent.HasValue ?
                new ObjectParameter("SGSTPercent", sGSTPercent) :
                new ObjectParameter("SGSTPercent", typeof(decimal));
    
            var cGSTPercentParameter = cGSTPercent.HasValue ?
                new ObjectParameter("CGSTPercent", cGSTPercent) :
                new ObjectParameter("CGSTPercent", typeof(decimal));
    
            var iGSTPercentParameter = iGSTPercent.HasValue ?
                new ObjectParameter("IGSTPercent", iGSTPercent) :
                new ObjectParameter("IGSTPercent", typeof(decimal));
    
            var sGSTAmountParameter = sGSTAmount.HasValue ?
                new ObjectParameter("SGSTAmount", sGSTAmount) :
                new ObjectParameter("SGSTAmount", typeof(decimal));
    
            var cGSTAmountParameter = cGSTAmount.HasValue ?
                new ObjectParameter("CGSTAmount", cGSTAmount) :
                new ObjectParameter("CGSTAmount", typeof(decimal));
    
            var iGSTAmountParameter = iGSTAmount.HasValue ?
                new ObjectParameter("IGSTAmount", iGSTAmount) :
                new ObjectParameter("IGSTAmount", typeof(decimal));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var returnQtyParameter = returnQty.HasValue ?
                new ObjectParameter("ReturnQty", returnQty) :
                new ObjectParameter("ReturnQty", typeof(decimal));
    
            var returnOfferQtyParameter = returnOfferQty.HasValue ?
                new ObjectParameter("ReturnOfferQty", returnOfferQty) :
                new ObjectParameter("ReturnOfferQty", typeof(decimal));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var batchParameter = batch != null ?
                new ObjectParameter("Batch", batch) :
                new ObjectParameter("Batch", typeof(string));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var salesInvoiceTransIDParameter = salesInvoiceTransID.HasValue ?
                new ObjectParameter("SalesInvoiceTransID", salesInvoiceTransID) :
                new ObjectParameter("SalesInvoiceTransID", typeof(int));
    
            var logicCodeIDParameter = logicCodeID.HasValue ?
                new ObjectParameter("LogicCodeID", logicCodeID) :
                new ObjectParameter("LogicCodeID", typeof(int));
    
            var vATPercentageParameter = vATPercentage.HasValue ?
                new ObjectParameter("VATPercentage", vATPercentage) :
                new ObjectParameter("VATPercentage", typeof(decimal));
    
            var vATAmountParameter = vATAmount.HasValue ?
                new ObjectParameter("VATAmount", vATAmount) :
                new ObjectParameter("VATAmount", typeof(decimal));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateSalesReturnTrans", salesReturnIDParameter, invoiceIDParameter, transNoParameter, itemIDParameter, qtyParameter, rateParameter, mRPParameter, secondaryQtyParameter, secondaryUnitParameter, secondaryUnitSizeParameter, secondaryMRPParameter, basicPriceParameter, offerQtyParameter, grossAmountParameter, discountIDParameter, discountPercentageParameter, discountAmountParameter, taxableAmountParameter, sGSTPercentParameter, cGSTPercentParameter, iGSTPercentParameter, sGSTAmountParameter, cGSTAmountParameter, iGSTAmountParameter, netAmountParameter, returnQtyParameter, returnOfferQtyParameter, batchTypeIDParameter, batchIDParameter, batchParameter, unitIDParameter, salesInvoiceTransIDParameter, logicCodeIDParameter, vATPercentageParameter, vATAmountParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetBatchwiseSalesOrderItems_Result> SpGetBatchwiseSalesOrderItems(string salesOrderIDs, Nullable<int> storeID, Nullable<int> customerID, Nullable<int> schemeID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var salesOrderIDsParameter = salesOrderIDs != null ?
                new ObjectParameter("SalesOrderIDs", salesOrderIDs) :
                new ObjectParameter("SalesOrderIDs", typeof(string));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var schemeIDParameter = schemeID.HasValue ?
                new ObjectParameter("SchemeID", schemeID) :
                new ObjectParameter("SchemeID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetBatchwiseSalesOrderItems_Result>("SpGetBatchwiseSalesOrderItems", salesOrderIDsParameter, storeIDParameter, customerIDParameter, schemeIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCheckItemCreatedForSalesInquiryItems(Nullable<int> salesInquiryItemID, ObjectParameter itemID)
        {
            var salesInquiryItemIDParameter = salesInquiryItemID.HasValue ?
                new ObjectParameter("SalesInquiryItemID", salesInquiryItemID) :
                new ObjectParameter("SalesInquiryItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCheckItemCreatedForSalesInquiryItems", salesInquiryItemIDParameter, itemID);
        }
    
        public virtual ObjectResult<SpGetSalesInquiryItemsPurchaseRequisition_Result> SpGetSalesInquiryItemsPurchaseRequisition(Nullable<int> salesInquiryID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var salesInquiryIDParameter = salesInquiryID.HasValue ?
                new ObjectParameter("SalesInquiryID", salesInquiryID) :
                new ObjectParameter("SalesInquiryID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSalesInquiryItemsPurchaseRequisition_Result>("SpGetSalesInquiryItemsPurchaseRequisition", salesInquiryIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetProformaInvoiceItems_Result> SpGetProformaInvoiceItems(string proformaInvoiceID, string @for, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var proformaInvoiceIDParameter = proformaInvoiceID != null ?
                new ObjectParameter("ProformaInvoiceID", proformaInvoiceID) :
                new ObjectParameter("ProformaInvoiceID", typeof(string));
    
            var forParameter = @for != null ?
                new ObjectParameter("For", @for) :
                new ObjectParameter("For", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetProformaInvoiceItems_Result>("SpGetProformaInvoiceItems", proformaInvoiceIDParameter, forParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetProformaInvoice_Result> SpGetProformaInvoice(Nullable<int> proformaInvoiceID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var proformaInvoiceIDParameter = proformaInvoiceID.HasValue ?
                new ObjectParameter("ProformaInvoiceID", proformaInvoiceID) :
                new ObjectParameter("ProformaInvoiceID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetProformaInvoice_Result>("SpGetProformaInvoice", proformaInvoiceIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetSalesInquiryList_Result> SpGetSalesInquiryList(string type, string salesInquiryNoHint, string salesInquiryDateHint, string requestedCustomerNameHint, string phoneNo, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var salesInquiryNoHintParameter = salesInquiryNoHint != null ?
                new ObjectParameter("SalesInquiryNoHint", salesInquiryNoHint) :
                new ObjectParameter("SalesInquiryNoHint", typeof(string));
    
            var salesInquiryDateHintParameter = salesInquiryDateHint != null ?
                new ObjectParameter("SalesInquiryDateHint", salesInquiryDateHint) :
                new ObjectParameter("SalesInquiryDateHint", typeof(string));
    
            var requestedCustomerNameHintParameter = requestedCustomerNameHint != null ?
                new ObjectParameter("RequestedCustomerNameHint", requestedCustomerNameHint) :
                new ObjectParameter("RequestedCustomerNameHint", typeof(string));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSalesInquiryList_Result>("SpGetSalesInquiryList", typeParameter, salesInquiryNoHintParameter, salesInquiryDateHintParameter, requestedCustomerNameHintParameter, phoneNoParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetSalesInquiryItems_Result> SpGetSalesInquiryItems(Nullable<int> salesInquiryID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var salesInquiryIDParameter = salesInquiryID.HasValue ?
                new ObjectParameter("SalesInquiryID", salesInquiryID) :
                new ObjectParameter("SalesInquiryID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSalesInquiryItems_Result>("SpGetSalesInquiryItems", salesInquiryIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetInqueryCustomer_Result> SpGetInqueryCustomer(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetInqueryCustomer_Result>("SpGetInqueryCustomer", nameParameter);
        }
    
        public virtual ObjectResult<SpGetAllSalesInquiryList_Result> SpGetAllSalesInquiryList(string type, string salesInquiryNoHint, string salesInquiryDateHint, string requestedCustomerNameHint, string phoneNo, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var salesInquiryNoHintParameter = salesInquiryNoHint != null ?
                new ObjectParameter("SalesInquiryNoHint", salesInquiryNoHint) :
                new ObjectParameter("SalesInquiryNoHint", typeof(string));
    
            var salesInquiryDateHintParameter = salesInquiryDateHint != null ?
                new ObjectParameter("SalesInquiryDateHint", salesInquiryDateHint) :
                new ObjectParameter("SalesInquiryDateHint", typeof(string));
    
            var requestedCustomerNameHintParameter = requestedCustomerNameHint != null ?
                new ObjectParameter("RequestedCustomerNameHint", requestedCustomerNameHint) :
                new ObjectParameter("RequestedCustomerNameHint", typeof(string));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAllSalesInquiryList_Result>("SpGetAllSalesInquiryList", typeParameter, salesInquiryNoHintParameter, salesInquiryDateHintParameter, requestedCustomerNameHintParameter, phoneNoParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateSalesInquiry(string salesInquiryNo, Nullable<System.DateTime> salesInquiryDate, Nullable<System.DateTime> requestedDelivaryDate, Nullable<System.DateTime> requestExpiryDate, string requestedCustomerName, string requestedCustomerAddress, string remarks, string phoneNo1, string phoneNo2, string make, string model, string year, string sIOrVINNumber, Nullable<decimal> grossAmount, Nullable<decimal> netAmount, Nullable<bool> isDraft, Nullable<int> locationID, Nullable<int> createdUserID, string salesInqueryTrans)
        {
            var salesInquiryNoParameter = salesInquiryNo != null ?
                new ObjectParameter("SalesInquiryNo", salesInquiryNo) :
                new ObjectParameter("SalesInquiryNo", typeof(string));
    
            var salesInquiryDateParameter = salesInquiryDate.HasValue ?
                new ObjectParameter("SalesInquiryDate", salesInquiryDate) :
                new ObjectParameter("SalesInquiryDate", typeof(System.DateTime));
    
            var requestedDelivaryDateParameter = requestedDelivaryDate.HasValue ?
                new ObjectParameter("RequestedDelivaryDate", requestedDelivaryDate) :
                new ObjectParameter("RequestedDelivaryDate", typeof(System.DateTime));
    
            var requestExpiryDateParameter = requestExpiryDate.HasValue ?
                new ObjectParameter("RequestExpiryDate", requestExpiryDate) :
                new ObjectParameter("RequestExpiryDate", typeof(System.DateTime));
    
            var requestedCustomerNameParameter = requestedCustomerName != null ?
                new ObjectParameter("RequestedCustomerName", requestedCustomerName) :
                new ObjectParameter("RequestedCustomerName", typeof(string));
    
            var requestedCustomerAddressParameter = requestedCustomerAddress != null ?
                new ObjectParameter("RequestedCustomerAddress", requestedCustomerAddress) :
                new ObjectParameter("RequestedCustomerAddress", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var phoneNo1Parameter = phoneNo1 != null ?
                new ObjectParameter("PhoneNo1", phoneNo1) :
                new ObjectParameter("PhoneNo1", typeof(string));
    
            var phoneNo2Parameter = phoneNo2 != null ?
                new ObjectParameter("PhoneNo2", phoneNo2) :
                new ObjectParameter("PhoneNo2", typeof(string));
    
            var makeParameter = make != null ?
                new ObjectParameter("Make", make) :
                new ObjectParameter("Make", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var sIOrVINNumberParameter = sIOrVINNumber != null ?
                new ObjectParameter("SIOrVINNumber", sIOrVINNumber) :
                new ObjectParameter("SIOrVINNumber", typeof(string));
    
            var grossAmountParameter = grossAmount.HasValue ?
                new ObjectParameter("GrossAmount", grossAmount) :
                new ObjectParameter("GrossAmount", typeof(decimal));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var salesInqueryTransParameter = salesInqueryTrans != null ?
                new ObjectParameter("SalesInqueryTrans", salesInqueryTrans) :
                new ObjectParameter("SalesInqueryTrans", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateSalesInquiry", salesInquiryNoParameter, salesInquiryDateParameter, requestedDelivaryDateParameter, requestExpiryDateParameter, requestedCustomerNameParameter, requestedCustomerAddressParameter, remarksParameter, phoneNo1Parameter, phoneNo2Parameter, makeParameter, modelParameter, yearParameter, sIOrVINNumberParameter, grossAmountParameter, netAmountParameter, isDraftParameter, locationIDParameter, createdUserIDParameter, salesInqueryTransParameter);
        }
    
        public virtual int SpUpdateSalesInquiry(Nullable<int> iD, Nullable<System.DateTime> salesInquiryDate, Nullable<System.DateTime> requestedDelivaryDate, Nullable<System.DateTime> requestExpiryDate, string requestedCustomerName, string requestedCustomerAddress, string remarks, string phoneNo1, string phoneNo2, string make, string model, string year, string sIOrVINNumber, Nullable<decimal> grossAmount, Nullable<decimal> netAmount, Nullable<bool> isDraft, Nullable<int> locationID, Nullable<int> modifiedUserID, string salesInqueryTrans)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var salesInquiryDateParameter = salesInquiryDate.HasValue ?
                new ObjectParameter("SalesInquiryDate", salesInquiryDate) :
                new ObjectParameter("SalesInquiryDate", typeof(System.DateTime));
    
            var requestedDelivaryDateParameter = requestedDelivaryDate.HasValue ?
                new ObjectParameter("RequestedDelivaryDate", requestedDelivaryDate) :
                new ObjectParameter("RequestedDelivaryDate", typeof(System.DateTime));
    
            var requestExpiryDateParameter = requestExpiryDate.HasValue ?
                new ObjectParameter("RequestExpiryDate", requestExpiryDate) :
                new ObjectParameter("RequestExpiryDate", typeof(System.DateTime));
    
            var requestedCustomerNameParameter = requestedCustomerName != null ?
                new ObjectParameter("RequestedCustomerName", requestedCustomerName) :
                new ObjectParameter("RequestedCustomerName", typeof(string));
    
            var requestedCustomerAddressParameter = requestedCustomerAddress != null ?
                new ObjectParameter("RequestedCustomerAddress", requestedCustomerAddress) :
                new ObjectParameter("RequestedCustomerAddress", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var phoneNo1Parameter = phoneNo1 != null ?
                new ObjectParameter("PhoneNo1", phoneNo1) :
                new ObjectParameter("PhoneNo1", typeof(string));
    
            var phoneNo2Parameter = phoneNo2 != null ?
                new ObjectParameter("PhoneNo2", phoneNo2) :
                new ObjectParameter("PhoneNo2", typeof(string));
    
            var makeParameter = make != null ?
                new ObjectParameter("Make", make) :
                new ObjectParameter("Make", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var sIOrVINNumberParameter = sIOrVINNumber != null ?
                new ObjectParameter("SIOrVINNumber", sIOrVINNumber) :
                new ObjectParameter("SIOrVINNumber", typeof(string));
    
            var grossAmountParameter = grossAmount.HasValue ?
                new ObjectParameter("GrossAmount", grossAmount) :
                new ObjectParameter("GrossAmount", typeof(decimal));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var modifiedUserIDParameter = modifiedUserID.HasValue ?
                new ObjectParameter("ModifiedUserID", modifiedUserID) :
                new ObjectParameter("ModifiedUserID", typeof(int));
    
            var salesInqueryTransParameter = salesInqueryTrans != null ?
                new ObjectParameter("SalesInqueryTrans", salesInqueryTrans) :
                new ObjectParameter("SalesInqueryTrans", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateSalesInquiry", iDParameter, salesInquiryDateParameter, requestedDelivaryDateParameter, requestExpiryDateParameter, requestedCustomerNameParameter, requestedCustomerAddressParameter, remarksParameter, phoneNo1Parameter, phoneNo2Parameter, makeParameter, modelParameter, yearParameter, sIOrVINNumberParameter, grossAmountParameter, netAmountParameter, isDraftParameter, locationIDParameter, modifiedUserIDParameter, salesInqueryTransParameter);
        }
    
        public virtual ObjectResult<SpGetInquiry_Result> SpGetInquiry(Nullable<int> iD, Nullable<int> locationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetInquiry_Result>("SpGetInquiry", iDParameter, locationIDParameter);
        }
    
        public virtual int SPCreateSalesInquiryItems(Nullable<int> salesInquirID, string salesInqueryTrans)
        {
            var salesInquirIDParameter = salesInquirID.HasValue ?
                new ObjectParameter("SalesInquirID", salesInquirID) :
                new ObjectParameter("SalesInquirID", typeof(int));
    
            var salesInqueryTransParameter = salesInqueryTrans != null ?
                new ObjectParameter("SalesInqueryTrans", salesInqueryTrans) :
                new ObjectParameter("SalesInqueryTrans", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPCreateSalesInquiryItems", salesInquirIDParameter, salesInqueryTransParameter);
        }
    
        public virtual ObjectResult<SpGetGoodsReceiptCounterSalesItems_Result> SpGetGoodsReceiptCounterSalesItems(string counterSalesIDs, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var counterSalesIDsParameter = counterSalesIDs != null ?
                new ObjectParameter("CounterSalesIDs", counterSalesIDs) :
                new ObjectParameter("CounterSalesIDs", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetGoodsReceiptCounterSalesItems_Result>("SpGetGoodsReceiptCounterSalesItems", counterSalesIDsParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetGoodsReceiptItemDetail_Result> SpGetGoodsReceiptItemDetail(Nullable<int> goodReceiptNoteID)
        {
            var goodReceiptNoteIDParameter = goodReceiptNoteID.HasValue ?
                new ObjectParameter("GoodReceiptNoteID", goodReceiptNoteID) :
                new ObjectParameter("GoodReceiptNoteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetGoodsReceiptItemDetail_Result>("SpGetGoodsReceiptItemDetail", goodReceiptNoteIDParameter);
        }
    
        public virtual int SpCreateGoodsReceiptNoteTrans(Nullable<int> goodsReceiptNoteID, string items, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter retValue)
        {
            var goodsReceiptNoteIDParameter = goodsReceiptNoteID.HasValue ?
                new ObjectParameter("GoodsReceiptNoteID", goodsReceiptNoteID) :
                new ObjectParameter("GoodsReceiptNoteID", typeof(int));
    
            var itemsParameter = items != null ?
                new ObjectParameter("Items", items) :
                new ObjectParameter("Items", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateGoodsReceiptNoteTrans", goodsReceiptNoteIDParameter, itemsParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, retValue);
        }
    
        public virtual int SpUpdateCounterSaleReturn(Nullable<int> counterSalesReturnID, Nullable<bool> isDraft, Nullable<decimal> sGSTAmount, Nullable<decimal> cGSTAmount, Nullable<decimal> iGSTAmount, Nullable<decimal> roundOff, Nullable<decimal> netAmount, Nullable<int> bankID, Nullable<int> paymentID, Nullable<int> invoiceID, string reason, Nullable<decimal> billDiscount, Nullable<int> customerID, Nullable<decimal> vATAmount, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, string counterSalesTrans, ObjectParameter eRR, ObjectParameter retValue)
        {
            var counterSalesReturnIDParameter = counterSalesReturnID.HasValue ?
                new ObjectParameter("CounterSalesReturnID", counterSalesReturnID) :
                new ObjectParameter("CounterSalesReturnID", typeof(int));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var sGSTAmountParameter = sGSTAmount.HasValue ?
                new ObjectParameter("SGSTAmount", sGSTAmount) :
                new ObjectParameter("SGSTAmount", typeof(decimal));
    
            var cGSTAmountParameter = cGSTAmount.HasValue ?
                new ObjectParameter("CGSTAmount", cGSTAmount) :
                new ObjectParameter("CGSTAmount", typeof(decimal));
    
            var iGSTAmountParameter = iGSTAmount.HasValue ?
                new ObjectParameter("IGSTAmount", iGSTAmount) :
                new ObjectParameter("IGSTAmount", typeof(decimal));
    
            var roundOffParameter = roundOff.HasValue ?
                new ObjectParameter("RoundOff", roundOff) :
                new ObjectParameter("RoundOff", typeof(decimal));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var paymentIDParameter = paymentID.HasValue ?
                new ObjectParameter("PaymentID", paymentID) :
                new ObjectParameter("PaymentID", typeof(int));
    
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var billDiscountParameter = billDiscount.HasValue ?
                new ObjectParameter("BillDiscount", billDiscount) :
                new ObjectParameter("BillDiscount", typeof(decimal));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var vATAmountParameter = vATAmount.HasValue ?
                new ObjectParameter("VATAmount", vATAmount) :
                new ObjectParameter("VATAmount", typeof(decimal));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var counterSalesTransParameter = counterSalesTrans != null ?
                new ObjectParameter("CounterSalesTrans", counterSalesTrans) :
                new ObjectParameter("CounterSalesTrans", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateCounterSaleReturn", counterSalesReturnIDParameter, isDraftParameter, sGSTAmountParameter, cGSTAmountParameter, iGSTAmountParameter, roundOffParameter, netAmountParameter, bankIDParameter, paymentIDParameter, invoiceIDParameter, reasonParameter, billDiscountParameter, customerIDParameter, vATAmountParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, counterSalesTransParameter, eRR, retValue);
        }
    
        public virtual int SpCreateCounterSalesReturn(string transNo, Nullable<System.DateTime> transDate, Nullable<bool> isDraft, Nullable<decimal> sGSTAmount, Nullable<decimal> cGSTAmount, Nullable<decimal> iGSTAmount, Nullable<decimal> roundOff, Nullable<decimal> netAmount, Nullable<int> bankNameID, Nullable<int> paymentID, Nullable<int> invoiceID, string reason, Nullable<decimal> billDiscount, Nullable<int> customerID, Nullable<decimal> vATAmount, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, string counterSalesTrans, ObjectParameter eRR, ObjectParameter retValue)
        {
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var transDateParameter = transDate.HasValue ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(System.DateTime));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var sGSTAmountParameter = sGSTAmount.HasValue ?
                new ObjectParameter("SGSTAmount", sGSTAmount) :
                new ObjectParameter("SGSTAmount", typeof(decimal));
    
            var cGSTAmountParameter = cGSTAmount.HasValue ?
                new ObjectParameter("CGSTAmount", cGSTAmount) :
                new ObjectParameter("CGSTAmount", typeof(decimal));
    
            var iGSTAmountParameter = iGSTAmount.HasValue ?
                new ObjectParameter("IGSTAmount", iGSTAmount) :
                new ObjectParameter("IGSTAmount", typeof(decimal));
    
            var roundOffParameter = roundOff.HasValue ?
                new ObjectParameter("RoundOff", roundOff) :
                new ObjectParameter("RoundOff", typeof(decimal));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var bankNameIDParameter = bankNameID.HasValue ?
                new ObjectParameter("BankNameID", bankNameID) :
                new ObjectParameter("BankNameID", typeof(int));
    
            var paymentIDParameter = paymentID.HasValue ?
                new ObjectParameter("PaymentID", paymentID) :
                new ObjectParameter("PaymentID", typeof(int));
    
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var billDiscountParameter = billDiscount.HasValue ?
                new ObjectParameter("BillDiscount", billDiscount) :
                new ObjectParameter("BillDiscount", typeof(decimal));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var vATAmountParameter = vATAmount.HasValue ?
                new ObjectParameter("VATAmount", vATAmount) :
                new ObjectParameter("VATAmount", typeof(decimal));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var counterSalesTransParameter = counterSalesTrans != null ?
                new ObjectParameter("CounterSalesTrans", counterSalesTrans) :
                new ObjectParameter("CounterSalesTrans", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateCounterSalesReturn", transNoParameter, transDateParameter, isDraftParameter, sGSTAmountParameter, cGSTAmountParameter, iGSTAmountParameter, roundOffParameter, netAmountParameter, bankNameIDParameter, paymentIDParameter, invoiceIDParameter, reasonParameter, billDiscountParameter, customerIDParameter, vATAmountParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, counterSalesTransParameter, eRR, retValue);
        }
    
        public virtual int SpCancelAPICounterSale(string referenceCode, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var referenceCodeParameter = referenceCode != null ?
                new ObjectParameter("ReferenceCode", referenceCode) :
                new ObjectParameter("ReferenceCode", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCancelAPICounterSale", referenceCodeParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateAPICounterSaleInvoice(string transNo, Nullable<System.DateTime> transDate, string partyName, string mobileNumber, string customerCode, string customerName, Nullable<decimal> grossAmount, Nullable<decimal> discountAmt, Nullable<decimal> discountPercent, Nullable<bool> printWithItemCode, Nullable<decimal> taxableAmt, Nullable<bool> isDraft, Nullable<decimal> totalVATAmount, Nullable<decimal> packingPrice, string currencyCode, Nullable<decimal> netAmount, string remarks, Nullable<int> createdUserID, Nullable<int> finYear, string referenceCode, string locationCode, Nullable<int> applicationID, string amountDetails, string counterSalesTrans, ObjectParameter eRR, ObjectParameter retValue, ObjectParameter counterSalesID)
        {
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var transDateParameter = transDate.HasValue ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(System.DateTime));
    
            var partyNameParameter = partyName != null ?
                new ObjectParameter("PartyName", partyName) :
                new ObjectParameter("PartyName", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var customerCodeParameter = customerCode != null ?
                new ObjectParameter("CustomerCode", customerCode) :
                new ObjectParameter("CustomerCode", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var grossAmountParameter = grossAmount.HasValue ?
                new ObjectParameter("GrossAmount", grossAmount) :
                new ObjectParameter("GrossAmount", typeof(decimal));
    
            var discountAmtParameter = discountAmt.HasValue ?
                new ObjectParameter("DiscountAmt", discountAmt) :
                new ObjectParameter("DiscountAmt", typeof(decimal));
    
            var discountPercentParameter = discountPercent.HasValue ?
                new ObjectParameter("DiscountPercent", discountPercent) :
                new ObjectParameter("DiscountPercent", typeof(decimal));
    
            var printWithItemCodeParameter = printWithItemCode.HasValue ?
                new ObjectParameter("PrintWithItemCode", printWithItemCode) :
                new ObjectParameter("PrintWithItemCode", typeof(bool));
    
            var taxableAmtParameter = taxableAmt.HasValue ?
                new ObjectParameter("TaxableAmt", taxableAmt) :
                new ObjectParameter("TaxableAmt", typeof(decimal));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var totalVATAmountParameter = totalVATAmount.HasValue ?
                new ObjectParameter("TotalVATAmount", totalVATAmount) :
                new ObjectParameter("TotalVATAmount", typeof(decimal));
    
            var packingPriceParameter = packingPrice.HasValue ?
                new ObjectParameter("PackingPrice", packingPrice) :
                new ObjectParameter("PackingPrice", typeof(decimal));
    
            var currencyCodeParameter = currencyCode != null ?
                new ObjectParameter("CurrencyCode", currencyCode) :
                new ObjectParameter("CurrencyCode", typeof(string));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var referenceCodeParameter = referenceCode != null ?
                new ObjectParameter("ReferenceCode", referenceCode) :
                new ObjectParameter("ReferenceCode", typeof(string));
    
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("LocationCode", locationCode) :
                new ObjectParameter("LocationCode", typeof(string));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var amountDetailsParameter = amountDetails != null ?
                new ObjectParameter("AmountDetails", amountDetails) :
                new ObjectParameter("AmountDetails", typeof(string));
    
            var counterSalesTransParameter = counterSalesTrans != null ?
                new ObjectParameter("CounterSalesTrans", counterSalesTrans) :
                new ObjectParameter("CounterSalesTrans", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateAPICounterSaleInvoice", transNoParameter, transDateParameter, partyNameParameter, mobileNumberParameter, customerCodeParameter, customerNameParameter, grossAmountParameter, discountAmtParameter, discountPercentParameter, printWithItemCodeParameter, taxableAmtParameter, isDraftParameter, totalVATAmountParameter, packingPriceParameter, currencyCodeParameter, netAmountParameter, remarksParameter, createdUserIDParameter, finYearParameter, referenceCodeParameter, locationCodeParameter, applicationIDParameter, amountDetailsParameter, counterSalesTransParameter, eRR, retValue, counterSalesID);
        }
    
        public virtual ObjectResult<SpGetCounterSalesTransForCounterSalesReturn_Result> SpGetCounterSalesTransForCounterSalesReturn(Nullable<int> counterSalesID, Nullable<int> priceListID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var counterSalesIDParameter = counterSalesID.HasValue ?
                new ObjectParameter("CounterSalesID", counterSalesID) :
                new ObjectParameter("CounterSalesID", typeof(int));
    
            var priceListIDParameter = priceListID.HasValue ?
                new ObjectParameter("PriceListID", priceListID) :
                new ObjectParameter("PriceListID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCounterSalesTransForCounterSalesReturn_Result>("SpGetCounterSalesTransForCounterSalesReturn", counterSalesIDParameter, priceListIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateCounterSaleInvoice(string transNo, Nullable<System.DateTime> transDate, string partyName, Nullable<int> customerID, Nullable<int> contactID, string civilID, string mobileNumber, Nullable<bool> printWithItemName, Nullable<int> patientID, Nullable<decimal> packingPrice, Nullable<int> doctorID, string doctorName, Nullable<int> warehouseID, Nullable<decimal> grossAmount, Nullable<decimal> discountAmt, Nullable<decimal> discountPercent, Nullable<decimal> taxableAmt, Nullable<bool> isDraft, Nullable<int> currencyID, Nullable<int> isVAT, Nullable<int> isGST, Nullable<decimal> sGSTAmount, Nullable<decimal> cGSTAmount, Nullable<decimal> iGSTAmount, Nullable<decimal> cessAmount, Nullable<decimal> totalVATAmount, Nullable<decimal> roundOff, Nullable<decimal> netAmount, Nullable<decimal> balanceAmount, string remarks, Nullable<int> employeeID, Nullable<int> salesTypeID, Nullable<int> bankID, Nullable<int> discountCategoryID, string amountDetails, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, Nullable<decimal> totalAmountReceived, Nullable<int> paymentModeID, Nullable<decimal> balanceToBePaid, string counterSalesTrans, ObjectParameter eRR, ObjectParameter retValue, ObjectParameter counterSalesID, Nullable<decimal> amountReceiveds, string referenceNo, Nullable<int> receiverBankID, string checqueDate, string bankInstrumentNumber, Nullable<decimal> bankCharges, string receiverBankName, Nullable<decimal> vATPercentage, Nullable<int> vATPercentageID)
        {
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var transDateParameter = transDate.HasValue ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(System.DateTime));
    
            var partyNameParameter = partyName != null ?
                new ObjectParameter("PartyName", partyName) :
                new ObjectParameter("PartyName", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(int));
    
            var civilIDParameter = civilID != null ?
                new ObjectParameter("CivilID", civilID) :
                new ObjectParameter("CivilID", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var printWithItemNameParameter = printWithItemName.HasValue ?
                new ObjectParameter("PrintWithItemName", printWithItemName) :
                new ObjectParameter("PrintWithItemName", typeof(bool));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var packingPriceParameter = packingPrice.HasValue ?
                new ObjectParameter("PackingPrice", packingPrice) :
                new ObjectParameter("PackingPrice", typeof(decimal));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var doctorNameParameter = doctorName != null ?
                new ObjectParameter("DoctorName", doctorName) :
                new ObjectParameter("DoctorName", typeof(string));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var grossAmountParameter = grossAmount.HasValue ?
                new ObjectParameter("GrossAmount", grossAmount) :
                new ObjectParameter("GrossAmount", typeof(decimal));
    
            var discountAmtParameter = discountAmt.HasValue ?
                new ObjectParameter("DiscountAmt", discountAmt) :
                new ObjectParameter("DiscountAmt", typeof(decimal));
    
            var discountPercentParameter = discountPercent.HasValue ?
                new ObjectParameter("DiscountPercent", discountPercent) :
                new ObjectParameter("DiscountPercent", typeof(decimal));
    
            var taxableAmtParameter = taxableAmt.HasValue ?
                new ObjectParameter("TaxableAmt", taxableAmt) :
                new ObjectParameter("TaxableAmt", typeof(decimal));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var isVATParameter = isVAT.HasValue ?
                new ObjectParameter("IsVAT", isVAT) :
                new ObjectParameter("IsVAT", typeof(int));
    
            var isGSTParameter = isGST.HasValue ?
                new ObjectParameter("IsGST", isGST) :
                new ObjectParameter("IsGST", typeof(int));
    
            var sGSTAmountParameter = sGSTAmount.HasValue ?
                new ObjectParameter("SGSTAmount", sGSTAmount) :
                new ObjectParameter("SGSTAmount", typeof(decimal));
    
            var cGSTAmountParameter = cGSTAmount.HasValue ?
                new ObjectParameter("CGSTAmount", cGSTAmount) :
                new ObjectParameter("CGSTAmount", typeof(decimal));
    
            var iGSTAmountParameter = iGSTAmount.HasValue ?
                new ObjectParameter("IGSTAmount", iGSTAmount) :
                new ObjectParameter("IGSTAmount", typeof(decimal));
    
            var cessAmountParameter = cessAmount.HasValue ?
                new ObjectParameter("CessAmount", cessAmount) :
                new ObjectParameter("CessAmount", typeof(decimal));
    
            var totalVATAmountParameter = totalVATAmount.HasValue ?
                new ObjectParameter("TotalVATAmount", totalVATAmount) :
                new ObjectParameter("TotalVATAmount", typeof(decimal));
    
            var roundOffParameter = roundOff.HasValue ?
                new ObjectParameter("RoundOff", roundOff) :
                new ObjectParameter("RoundOff", typeof(decimal));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var balanceAmountParameter = balanceAmount.HasValue ?
                new ObjectParameter("BalanceAmount", balanceAmount) :
                new ObjectParameter("BalanceAmount", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var salesTypeIDParameter = salesTypeID.HasValue ?
                new ObjectParameter("SalesTypeID", salesTypeID) :
                new ObjectParameter("SalesTypeID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var discountCategoryIDParameter = discountCategoryID.HasValue ?
                new ObjectParameter("DiscountCategoryID", discountCategoryID) :
                new ObjectParameter("DiscountCategoryID", typeof(int));
    
            var amountDetailsParameter = amountDetails != null ?
                new ObjectParameter("AmountDetails", amountDetails) :
                new ObjectParameter("AmountDetails", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var totalAmountReceivedParameter = totalAmountReceived.HasValue ?
                new ObjectParameter("TotalAmountReceived", totalAmountReceived) :
                new ObjectParameter("TotalAmountReceived", typeof(decimal));
    
            var paymentModeIDParameter = paymentModeID.HasValue ?
                new ObjectParameter("PaymentModeID", paymentModeID) :
                new ObjectParameter("PaymentModeID", typeof(int));
    
            var balanceToBePaidParameter = balanceToBePaid.HasValue ?
                new ObjectParameter("BalanceToBePaid", balanceToBePaid) :
                new ObjectParameter("BalanceToBePaid", typeof(decimal));
    
            var counterSalesTransParameter = counterSalesTrans != null ?
                new ObjectParameter("CounterSalesTrans", counterSalesTrans) :
                new ObjectParameter("CounterSalesTrans", typeof(string));
    
            var amountReceivedsParameter = amountReceiveds.HasValue ?
                new ObjectParameter("AmountReceiveds", amountReceiveds) :
                new ObjectParameter("AmountReceiveds", typeof(decimal));
    
            var referenceNoParameter = referenceNo != null ?
                new ObjectParameter("ReferenceNo", referenceNo) :
                new ObjectParameter("ReferenceNo", typeof(string));
    
            var receiverBankIDParameter = receiverBankID.HasValue ?
                new ObjectParameter("ReceiverBankID", receiverBankID) :
                new ObjectParameter("ReceiverBankID", typeof(int));
    
            var checqueDateParameter = checqueDate != null ?
                new ObjectParameter("ChecqueDate", checqueDate) :
                new ObjectParameter("ChecqueDate", typeof(string));
    
            var bankInstrumentNumberParameter = bankInstrumentNumber != null ?
                new ObjectParameter("BankInstrumentNumber", bankInstrumentNumber) :
                new ObjectParameter("BankInstrumentNumber", typeof(string));
    
            var bankChargesParameter = bankCharges.HasValue ?
                new ObjectParameter("BankCharges", bankCharges) :
                new ObjectParameter("BankCharges", typeof(decimal));
    
            var receiverBankNameParameter = receiverBankName != null ?
                new ObjectParameter("ReceiverBankName", receiverBankName) :
                new ObjectParameter("ReceiverBankName", typeof(string));
    
            var vATPercentageParameter = vATPercentage.HasValue ?
                new ObjectParameter("VATPercentage", vATPercentage) :
                new ObjectParameter("VATPercentage", typeof(decimal));
    
            var vATPercentageIDParameter = vATPercentageID.HasValue ?
                new ObjectParameter("VATPercentageID", vATPercentageID) :
                new ObjectParameter("VATPercentageID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateCounterSaleInvoice", transNoParameter, transDateParameter, partyNameParameter, customerIDParameter, contactIDParameter, civilIDParameter, mobileNumberParameter, printWithItemNameParameter, patientIDParameter, packingPriceParameter, doctorIDParameter, doctorNameParameter, warehouseIDParameter, grossAmountParameter, discountAmtParameter, discountPercentParameter, taxableAmtParameter, isDraftParameter, currencyIDParameter, isVATParameter, isGSTParameter, sGSTAmountParameter, cGSTAmountParameter, iGSTAmountParameter, cessAmountParameter, totalVATAmountParameter, roundOffParameter, netAmountParameter, balanceAmountParameter, remarksParameter, employeeIDParameter, salesTypeIDParameter, bankIDParameter, discountCategoryIDParameter, amountDetailsParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, totalAmountReceivedParameter, paymentModeIDParameter, balanceToBePaidParameter, counterSalesTransParameter, eRR, retValue, counterSalesID, amountReceivedsParameter, referenceNoParameter, receiverBankIDParameter, checqueDateParameter, bankInstrumentNumberParameter, bankChargesParameter, receiverBankNameParameter, vATPercentageParameter, vATPercentageIDParameter);
        }
    
        public virtual ObjectResult<SpGetCounterSalesDetail_Result> SpGetCounterSalesDetail(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCounterSalesDetail_Result>("SpGetCounterSalesDetail", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateCounterSaleInvoice(Nullable<long> counterSalesID, Nullable<int> warehouseID, Nullable<decimal> grossAmount, Nullable<decimal> discountAmt, Nullable<decimal> discountPercent, Nullable<decimal> taxableAmt, Nullable<bool> isDraft, Nullable<int> currencyID, Nullable<int> isVAT, Nullable<int> isGST, Nullable<bool> printWithItemName, Nullable<decimal> sGSTAmount, Nullable<decimal> cGSTAmount, Nullable<decimal> iGSTAmount, Nullable<decimal> cessAmount, Nullable<decimal> totalVATAmount, Nullable<decimal> roundOff, Nullable<decimal> netAmount, Nullable<decimal> balanceAmount, Nullable<int> salesTypeID, Nullable<int> employeeID, Nullable<int> patientID, string partyName, Nullable<int> customerID, Nullable<int> contactID, string civilID, string mobileNumber, string remarks, Nullable<int> bankID, Nullable<int> discountCategoryID, string amountDetails, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, Nullable<decimal> totalAmountReceived, Nullable<int> paymentModeID, Nullable<decimal> balanceToBePaid, string counterSalesTrans, ObjectParameter eRR, ObjectParameter retValue, Nullable<decimal> amountReceiveds, Nullable<int> receiverBankID, string checqueDate, string bankInstrumentNumber, Nullable<decimal> bankCharges, string receiverBankName, Nullable<decimal> vATPercentage, Nullable<int> vATPercentageID)
        {
            var counterSalesIDParameter = counterSalesID.HasValue ?
                new ObjectParameter("CounterSalesID", counterSalesID) :
                new ObjectParameter("CounterSalesID", typeof(long));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var grossAmountParameter = grossAmount.HasValue ?
                new ObjectParameter("GrossAmount", grossAmount) :
                new ObjectParameter("GrossAmount", typeof(decimal));
    
            var discountAmtParameter = discountAmt.HasValue ?
                new ObjectParameter("DiscountAmt", discountAmt) :
                new ObjectParameter("DiscountAmt", typeof(decimal));
    
            var discountPercentParameter = discountPercent.HasValue ?
                new ObjectParameter("DiscountPercent", discountPercent) :
                new ObjectParameter("DiscountPercent", typeof(decimal));
    
            var taxableAmtParameter = taxableAmt.HasValue ?
                new ObjectParameter("TaxableAmt", taxableAmt) :
                new ObjectParameter("TaxableAmt", typeof(decimal));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var isVATParameter = isVAT.HasValue ?
                new ObjectParameter("IsVAT", isVAT) :
                new ObjectParameter("IsVAT", typeof(int));
    
            var isGSTParameter = isGST.HasValue ?
                new ObjectParameter("IsGST", isGST) :
                new ObjectParameter("IsGST", typeof(int));
    
            var printWithItemNameParameter = printWithItemName.HasValue ?
                new ObjectParameter("PrintWithItemName", printWithItemName) :
                new ObjectParameter("PrintWithItemName", typeof(bool));
    
            var sGSTAmountParameter = sGSTAmount.HasValue ?
                new ObjectParameter("SGSTAmount", sGSTAmount) :
                new ObjectParameter("SGSTAmount", typeof(decimal));
    
            var cGSTAmountParameter = cGSTAmount.HasValue ?
                new ObjectParameter("CGSTAmount", cGSTAmount) :
                new ObjectParameter("CGSTAmount", typeof(decimal));
    
            var iGSTAmountParameter = iGSTAmount.HasValue ?
                new ObjectParameter("IGSTAmount", iGSTAmount) :
                new ObjectParameter("IGSTAmount", typeof(decimal));
    
            var cessAmountParameter = cessAmount.HasValue ?
                new ObjectParameter("CessAmount", cessAmount) :
                new ObjectParameter("CessAmount", typeof(decimal));
    
            var totalVATAmountParameter = totalVATAmount.HasValue ?
                new ObjectParameter("TotalVATAmount", totalVATAmount) :
                new ObjectParameter("TotalVATAmount", typeof(decimal));
    
            var roundOffParameter = roundOff.HasValue ?
                new ObjectParameter("RoundOff", roundOff) :
                new ObjectParameter("RoundOff", typeof(decimal));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var balanceAmountParameter = balanceAmount.HasValue ?
                new ObjectParameter("BalanceAmount", balanceAmount) :
                new ObjectParameter("BalanceAmount", typeof(decimal));
    
            var salesTypeIDParameter = salesTypeID.HasValue ?
                new ObjectParameter("SalesTypeID", salesTypeID) :
                new ObjectParameter("SalesTypeID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var partyNameParameter = partyName != null ?
                new ObjectParameter("PartyName", partyName) :
                new ObjectParameter("PartyName", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(int));
    
            var civilIDParameter = civilID != null ?
                new ObjectParameter("CivilID", civilID) :
                new ObjectParameter("CivilID", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var discountCategoryIDParameter = discountCategoryID.HasValue ?
                new ObjectParameter("DiscountCategoryID", discountCategoryID) :
                new ObjectParameter("DiscountCategoryID", typeof(int));
    
            var amountDetailsParameter = amountDetails != null ?
                new ObjectParameter("AmountDetails", amountDetails) :
                new ObjectParameter("AmountDetails", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var totalAmountReceivedParameter = totalAmountReceived.HasValue ?
                new ObjectParameter("TotalAmountReceived", totalAmountReceived) :
                new ObjectParameter("TotalAmountReceived", typeof(decimal));
    
            var paymentModeIDParameter = paymentModeID.HasValue ?
                new ObjectParameter("PaymentModeID", paymentModeID) :
                new ObjectParameter("PaymentModeID", typeof(int));
    
            var balanceToBePaidParameter = balanceToBePaid.HasValue ?
                new ObjectParameter("BalanceToBePaid", balanceToBePaid) :
                new ObjectParameter("BalanceToBePaid", typeof(decimal));
    
            var counterSalesTransParameter = counterSalesTrans != null ?
                new ObjectParameter("CounterSalesTrans", counterSalesTrans) :
                new ObjectParameter("CounterSalesTrans", typeof(string));
    
            var amountReceivedsParameter = amountReceiveds.HasValue ?
                new ObjectParameter("AmountReceiveds", amountReceiveds) :
                new ObjectParameter("AmountReceiveds", typeof(decimal));
    
            var receiverBankIDParameter = receiverBankID.HasValue ?
                new ObjectParameter("ReceiverBankID", receiverBankID) :
                new ObjectParameter("ReceiverBankID", typeof(int));
    
            var checqueDateParameter = checqueDate != null ?
                new ObjectParameter("ChecqueDate", checqueDate) :
                new ObjectParameter("ChecqueDate", typeof(string));
    
            var bankInstrumentNumberParameter = bankInstrumentNumber != null ?
                new ObjectParameter("BankInstrumentNumber", bankInstrumentNumber) :
                new ObjectParameter("BankInstrumentNumber", typeof(string));
    
            var bankChargesParameter = bankCharges.HasValue ?
                new ObjectParameter("BankCharges", bankCharges) :
                new ObjectParameter("BankCharges", typeof(decimal));
    
            var receiverBankNameParameter = receiverBankName != null ?
                new ObjectParameter("ReceiverBankName", receiverBankName) :
                new ObjectParameter("ReceiverBankName", typeof(string));
    
            var vATPercentageParameter = vATPercentage.HasValue ?
                new ObjectParameter("VATPercentage", vATPercentage) :
                new ObjectParameter("VATPercentage", typeof(decimal));
    
            var vATPercentageIDParameter = vATPercentageID.HasValue ?
                new ObjectParameter("VATPercentageID", vATPercentageID) :
                new ObjectParameter("VATPercentageID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateCounterSaleInvoice", counterSalesIDParameter, warehouseIDParameter, grossAmountParameter, discountAmtParameter, discountPercentParameter, taxableAmtParameter, isDraftParameter, currencyIDParameter, isVATParameter, isGSTParameter, printWithItemNameParameter, sGSTAmountParameter, cGSTAmountParameter, iGSTAmountParameter, cessAmountParameter, totalVATAmountParameter, roundOffParameter, netAmountParameter, balanceAmountParameter, salesTypeIDParameter, employeeIDParameter, patientIDParameter, partyNameParameter, customerIDParameter, contactIDParameter, civilIDParameter, mobileNumberParameter, remarksParameter, bankIDParameter, discountCategoryIDParameter, amountDetailsParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, totalAmountReceivedParameter, paymentModeIDParameter, balanceToBePaidParameter, counterSalesTransParameter, eRR, retValue, amountReceivedsParameter, receiverBankIDParameter, checqueDateParameter, bankInstrumentNumberParameter, bankChargesParameter, receiverBankNameParameter, vATPercentageParameter, vATPercentageIDParameter);
        }
    
        public virtual ObjectResult<SpGetSalesInvoice_Result> SpGetSalesInvoice(Nullable<int> salesInvoiceID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var salesInvoiceIDParameter = salesInvoiceID.HasValue ?
                new ObjectParameter("SalesInvoiceID", salesInvoiceID) :
                new ObjectParameter("SalesInvoiceID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSalesInvoice_Result>("SpGetSalesInvoice", salesInvoiceIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateGoodsReceiptNote(Nullable<int> goodsReceiptNoteID, string invoice, string items, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter retValue)
        {
            var goodsReceiptNoteIDParameter = goodsReceiptNoteID.HasValue ?
                new ObjectParameter("GoodsReceiptNoteID", goodsReceiptNoteID) :
                new ObjectParameter("GoodsReceiptNoteID", typeof(int));
    
            var invoiceParameter = invoice != null ?
                new ObjectParameter("Invoice", invoice) :
                new ObjectParameter("Invoice", typeof(string));
    
            var itemsParameter = items != null ?
                new ObjectParameter("Items", items) :
                new ObjectParameter("Items", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateGoodsReceiptNote", goodsReceiptNoteIDParameter, invoiceParameter, itemsParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, retValue);
        }
    
        public virtual ObjectResult<SpGetSalesInvoiceItemForSalesReturn_Result> SpGetSalesInvoiceItemForSalesReturn(Nullable<int> salesInvoiceID, Nullable<int> pricelistID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var salesInvoiceIDParameter = salesInvoiceID.HasValue ?
                new ObjectParameter("SalesInvoiceID", salesInvoiceID) :
                new ObjectParameter("SalesInvoiceID", typeof(int));
    
            var pricelistIDParameter = pricelistID.HasValue ?
                new ObjectParameter("PricelistID", pricelistID) :
                new ObjectParameter("PricelistID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSalesInvoiceItemForSalesReturn_Result>("SpGetSalesInvoiceItemForSalesReturn", salesInvoiceIDParameter, pricelistIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetSalesReturnDetail_Result> SpGetSalesReturnDetail(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSalesReturnDetail_Result>("SpGetSalesReturnDetail", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCounterSalesReturnDetail_Result> SpGetCounterSalesReturnDetail(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCounterSalesReturnDetail_Result>("SpGetCounterSalesReturnDetail", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCounterSalesTrans_Result> SpGetCounterSalesTrans(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCounterSalesTrans_Result>("SpGetCounterSalesTrans", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetSalesInvoiceItems_Result> SpGetSalesInvoiceItems(Nullable<int> salesInvoiceID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var salesInvoiceIDParameter = salesInvoiceID.HasValue ?
                new ObjectParameter("SalesInvoiceID", salesInvoiceID) :
                new ObjectParameter("SalesInvoiceID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSalesInvoiceItems_Result>("SpGetSalesInvoiceItems", salesInvoiceIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetSalesReturnTrans_Result> SpGetSalesReturnTrans(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSalesReturnTrans_Result>("SpGetSalesReturnTrans", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetSalesOrderItems_Result> SpGetSalesOrderItems(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSalesOrderItems_Result>("SpGetSalesOrderItems", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCounterSalesReturnTrans_Result> SpGetCounterSalesReturnTrans(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCounterSalesReturnTrans_Result>("SpGetCounterSalesReturnTrans", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateSalesOrder(string salesOrderNo, Nullable<System.DateTime> orderDate, Nullable<int> customerID, Nullable<int> itemCategoryID, Nullable<int> schemeAllocationID, Nullable<System.DateTime> despatchDate, Nullable<decimal> freightAmount, Nullable<decimal> grossAmt, Nullable<decimal> discountAmt, Nullable<decimal> taxableAmt, Nullable<decimal> sGSTAmt, Nullable<decimal> cGSTAmt, Nullable<decimal> iGSTAmt, Nullable<decimal> cessAmount, Nullable<decimal> roundOff, string customerEnquiryNumber, Nullable<System.DateTime> quotationExpiry, string paymentTerms, Nullable<decimal> netAmt, Nullable<int> purchaseOrderID, Nullable<int> fsoID, string source, Nullable<int> billingAddressID, Nullable<int> shippingAddressID, Nullable<bool> isDraft, Nullable<bool> isApproved, Nullable<int> currencyID, Nullable<int> isGST, Nullable<int> isVat, Nullable<decimal> currencyExchangeRate, Nullable<decimal> vATAmount, Nullable<bool> printWithItemName, Nullable<System.DateTime> enquiryDate, string remarks, Nullable<int> vATPercentageID, Nullable<decimal> vATPercentage, Nullable<decimal> discountPercentage, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, string salesOrderTrans)
        {
            var salesOrderNoParameter = salesOrderNo != null ?
                new ObjectParameter("SalesOrderNo", salesOrderNo) :
                new ObjectParameter("SalesOrderNo", typeof(string));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("OrderDate", orderDate) :
                new ObjectParameter("OrderDate", typeof(System.DateTime));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var schemeAllocationIDParameter = schemeAllocationID.HasValue ?
                new ObjectParameter("SchemeAllocationID", schemeAllocationID) :
                new ObjectParameter("SchemeAllocationID", typeof(int));
    
            var despatchDateParameter = despatchDate.HasValue ?
                new ObjectParameter("DespatchDate", despatchDate) :
                new ObjectParameter("DespatchDate", typeof(System.DateTime));
    
            var freightAmountParameter = freightAmount.HasValue ?
                new ObjectParameter("FreightAmount", freightAmount) :
                new ObjectParameter("FreightAmount", typeof(decimal));
    
            var grossAmtParameter = grossAmt.HasValue ?
                new ObjectParameter("GrossAmt", grossAmt) :
                new ObjectParameter("GrossAmt", typeof(decimal));
    
            var discountAmtParameter = discountAmt.HasValue ?
                new ObjectParameter("DiscountAmt", discountAmt) :
                new ObjectParameter("DiscountAmt", typeof(decimal));
    
            var taxableAmtParameter = taxableAmt.HasValue ?
                new ObjectParameter("TaxableAmt", taxableAmt) :
                new ObjectParameter("TaxableAmt", typeof(decimal));
    
            var sGSTAmtParameter = sGSTAmt.HasValue ?
                new ObjectParameter("SGSTAmt", sGSTAmt) :
                new ObjectParameter("SGSTAmt", typeof(decimal));
    
            var cGSTAmtParameter = cGSTAmt.HasValue ?
                new ObjectParameter("CGSTAmt", cGSTAmt) :
                new ObjectParameter("CGSTAmt", typeof(decimal));
    
            var iGSTAmtParameter = iGSTAmt.HasValue ?
                new ObjectParameter("IGSTAmt", iGSTAmt) :
                new ObjectParameter("IGSTAmt", typeof(decimal));
    
            var cessAmountParameter = cessAmount.HasValue ?
                new ObjectParameter("CessAmount", cessAmount) :
                new ObjectParameter("CessAmount", typeof(decimal));
    
            var roundOffParameter = roundOff.HasValue ?
                new ObjectParameter("RoundOff", roundOff) :
                new ObjectParameter("RoundOff", typeof(decimal));
    
            var customerEnquiryNumberParameter = customerEnquiryNumber != null ?
                new ObjectParameter("CustomerEnquiryNumber", customerEnquiryNumber) :
                new ObjectParameter("CustomerEnquiryNumber", typeof(string));
    
            var quotationExpiryParameter = quotationExpiry.HasValue ?
                new ObjectParameter("QuotationExpiry", quotationExpiry) :
                new ObjectParameter("QuotationExpiry", typeof(System.DateTime));
    
            var paymentTermsParameter = paymentTerms != null ?
                new ObjectParameter("PaymentTerms", paymentTerms) :
                new ObjectParameter("PaymentTerms", typeof(string));
    
            var netAmtParameter = netAmt.HasValue ?
                new ObjectParameter("NetAmt", netAmt) :
                new ObjectParameter("NetAmt", typeof(decimal));
    
            var purchaseOrderIDParameter = purchaseOrderID.HasValue ?
                new ObjectParameter("PurchaseOrderID", purchaseOrderID) :
                new ObjectParameter("PurchaseOrderID", typeof(int));
    
            var fsoIDParameter = fsoID.HasValue ?
                new ObjectParameter("FsoID", fsoID) :
                new ObjectParameter("FsoID", typeof(int));
    
            var sourceParameter = source != null ?
                new ObjectParameter("Source", source) :
                new ObjectParameter("Source", typeof(string));
    
            var billingAddressIDParameter = billingAddressID.HasValue ?
                new ObjectParameter("BillingAddressID", billingAddressID) :
                new ObjectParameter("BillingAddressID", typeof(int));
    
            var shippingAddressIDParameter = shippingAddressID.HasValue ?
                new ObjectParameter("ShippingAddressID", shippingAddressID) :
                new ObjectParameter("ShippingAddressID", typeof(int));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var isGSTParameter = isGST.HasValue ?
                new ObjectParameter("IsGST", isGST) :
                new ObjectParameter("IsGST", typeof(int));
    
            var isVatParameter = isVat.HasValue ?
                new ObjectParameter("IsVat", isVat) :
                new ObjectParameter("IsVat", typeof(int));
    
            var currencyExchangeRateParameter = currencyExchangeRate.HasValue ?
                new ObjectParameter("CurrencyExchangeRate", currencyExchangeRate) :
                new ObjectParameter("CurrencyExchangeRate", typeof(decimal));
    
            var vATAmountParameter = vATAmount.HasValue ?
                new ObjectParameter("VATAmount", vATAmount) :
                new ObjectParameter("VATAmount", typeof(decimal));
    
            var printWithItemNameParameter = printWithItemName.HasValue ?
                new ObjectParameter("PrintWithItemName", printWithItemName) :
                new ObjectParameter("PrintWithItemName", typeof(bool));
    
            var enquiryDateParameter = enquiryDate.HasValue ?
                new ObjectParameter("EnquiryDate", enquiryDate) :
                new ObjectParameter("EnquiryDate", typeof(System.DateTime));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var vATPercentageIDParameter = vATPercentageID.HasValue ?
                new ObjectParameter("VATPercentageID", vATPercentageID) :
                new ObjectParameter("VATPercentageID", typeof(int));
    
            var vATPercentageParameter = vATPercentage.HasValue ?
                new ObjectParameter("VATPercentage", vATPercentage) :
                new ObjectParameter("VATPercentage", typeof(decimal));
    
            var discountPercentageParameter = discountPercentage.HasValue ?
                new ObjectParameter("DiscountPercentage", discountPercentage) :
                new ObjectParameter("DiscountPercentage", typeof(decimal));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var salesOrderTransParameter = salesOrderTrans != null ?
                new ObjectParameter("SalesOrderTrans", salesOrderTrans) :
                new ObjectParameter("SalesOrderTrans", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateSalesOrder", salesOrderNoParameter, orderDateParameter, customerIDParameter, itemCategoryIDParameter, schemeAllocationIDParameter, despatchDateParameter, freightAmountParameter, grossAmtParameter, discountAmtParameter, taxableAmtParameter, sGSTAmtParameter, cGSTAmtParameter, iGSTAmtParameter, cessAmountParameter, roundOffParameter, customerEnquiryNumberParameter, quotationExpiryParameter, paymentTermsParameter, netAmtParameter, purchaseOrderIDParameter, fsoIDParameter, sourceParameter, billingAddressIDParameter, shippingAddressIDParameter, isDraftParameter, isApprovedParameter, currencyIDParameter, isGSTParameter, isVatParameter, currencyExchangeRateParameter, vATAmountParameter, printWithItemNameParameter, enquiryDateParameter, remarksParameter, vATPercentageIDParameter, vATPercentageParameter, discountPercentageParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, salesOrderTransParameter);
        }
    
        public virtual ObjectResult<SpSGetSalesOrder_Result> SpSGetSalesOrder(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpSGetSalesOrder_Result>("SpSGetSalesOrder", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpSUpdateSalesOrder(Nullable<int> salesOrderID, string salesOrderNo, Nullable<System.DateTime> orderDate, Nullable<int> customerID, Nullable<int> schemeAllocationID, Nullable<System.DateTime> despatchDate, Nullable<decimal> freightAmount, Nullable<decimal> grossAmt, Nullable<decimal> discountAmt, Nullable<decimal> taxableAmt, Nullable<decimal> sGSTAmt, Nullable<decimal> cGSTAmt, Nullable<decimal> iGSTAmt, Nullable<decimal> cessAmount, Nullable<decimal> roundOff, string customerEnquiryNumber, Nullable<System.DateTime> quotationExpiry, string paymentTerms, Nullable<decimal> netAmt, Nullable<int> billingAddressID, Nullable<int> shippingAddressID, Nullable<bool> isDraft, Nullable<int> salesTypeID, Nullable<int> currencyID, Nullable<int> isGST, Nullable<int> isVat, Nullable<decimal> currencyExchangeRate, Nullable<System.DateTime> enquiryDate, string remarks, Nullable<decimal> vATAmount, Nullable<int> vATPercentageID, Nullable<decimal> vATPercentage, Nullable<decimal> discountPercentage, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, Nullable<bool> isApproved, string salesOrderTrans)
        {
            var salesOrderIDParameter = salesOrderID.HasValue ?
                new ObjectParameter("SalesOrderID", salesOrderID) :
                new ObjectParameter("SalesOrderID", typeof(int));
    
            var salesOrderNoParameter = salesOrderNo != null ?
                new ObjectParameter("SalesOrderNo", salesOrderNo) :
                new ObjectParameter("SalesOrderNo", typeof(string));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("OrderDate", orderDate) :
                new ObjectParameter("OrderDate", typeof(System.DateTime));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var schemeAllocationIDParameter = schemeAllocationID.HasValue ?
                new ObjectParameter("SchemeAllocationID", schemeAllocationID) :
                new ObjectParameter("SchemeAllocationID", typeof(int));
    
            var despatchDateParameter = despatchDate.HasValue ?
                new ObjectParameter("DespatchDate", despatchDate) :
                new ObjectParameter("DespatchDate", typeof(System.DateTime));
    
            var freightAmountParameter = freightAmount.HasValue ?
                new ObjectParameter("FreightAmount", freightAmount) :
                new ObjectParameter("FreightAmount", typeof(decimal));
    
            var grossAmtParameter = grossAmt.HasValue ?
                new ObjectParameter("GrossAmt", grossAmt) :
                new ObjectParameter("GrossAmt", typeof(decimal));
    
            var discountAmtParameter = discountAmt.HasValue ?
                new ObjectParameter("DiscountAmt", discountAmt) :
                new ObjectParameter("DiscountAmt", typeof(decimal));
    
            var taxableAmtParameter = taxableAmt.HasValue ?
                new ObjectParameter("TaxableAmt", taxableAmt) :
                new ObjectParameter("TaxableAmt", typeof(decimal));
    
            var sGSTAmtParameter = sGSTAmt.HasValue ?
                new ObjectParameter("SGSTAmt", sGSTAmt) :
                new ObjectParameter("SGSTAmt", typeof(decimal));
    
            var cGSTAmtParameter = cGSTAmt.HasValue ?
                new ObjectParameter("CGSTAmt", cGSTAmt) :
                new ObjectParameter("CGSTAmt", typeof(decimal));
    
            var iGSTAmtParameter = iGSTAmt.HasValue ?
                new ObjectParameter("IGSTAmt", iGSTAmt) :
                new ObjectParameter("IGSTAmt", typeof(decimal));
    
            var cessAmountParameter = cessAmount.HasValue ?
                new ObjectParameter("CessAmount", cessAmount) :
                new ObjectParameter("CessAmount", typeof(decimal));
    
            var roundOffParameter = roundOff.HasValue ?
                new ObjectParameter("RoundOff", roundOff) :
                new ObjectParameter("RoundOff", typeof(decimal));
    
            var customerEnquiryNumberParameter = customerEnquiryNumber != null ?
                new ObjectParameter("CustomerEnquiryNumber", customerEnquiryNumber) :
                new ObjectParameter("CustomerEnquiryNumber", typeof(string));
    
            var quotationExpiryParameter = quotationExpiry.HasValue ?
                new ObjectParameter("QuotationExpiry", quotationExpiry) :
                new ObjectParameter("QuotationExpiry", typeof(System.DateTime));
    
            var paymentTermsParameter = paymentTerms != null ?
                new ObjectParameter("PaymentTerms", paymentTerms) :
                new ObjectParameter("PaymentTerms", typeof(string));
    
            var netAmtParameter = netAmt.HasValue ?
                new ObjectParameter("NetAmt", netAmt) :
                new ObjectParameter("NetAmt", typeof(decimal));
    
            var billingAddressIDParameter = billingAddressID.HasValue ?
                new ObjectParameter("BillingAddressID", billingAddressID) :
                new ObjectParameter("BillingAddressID", typeof(int));
    
            var shippingAddressIDParameter = shippingAddressID.HasValue ?
                new ObjectParameter("ShippingAddressID", shippingAddressID) :
                new ObjectParameter("ShippingAddressID", typeof(int));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var salesTypeIDParameter = salesTypeID.HasValue ?
                new ObjectParameter("SalesTypeID", salesTypeID) :
                new ObjectParameter("SalesTypeID", typeof(int));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var isGSTParameter = isGST.HasValue ?
                new ObjectParameter("IsGST", isGST) :
                new ObjectParameter("IsGST", typeof(int));
    
            var isVatParameter = isVat.HasValue ?
                new ObjectParameter("IsVat", isVat) :
                new ObjectParameter("IsVat", typeof(int));
    
            var currencyExchangeRateParameter = currencyExchangeRate.HasValue ?
                new ObjectParameter("CurrencyExchangeRate", currencyExchangeRate) :
                new ObjectParameter("CurrencyExchangeRate", typeof(decimal));
    
            var enquiryDateParameter = enquiryDate.HasValue ?
                new ObjectParameter("EnquiryDate", enquiryDate) :
                new ObjectParameter("EnquiryDate", typeof(System.DateTime));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var vATAmountParameter = vATAmount.HasValue ?
                new ObjectParameter("VATAmount", vATAmount) :
                new ObjectParameter("VATAmount", typeof(decimal));
    
            var vATPercentageIDParameter = vATPercentageID.HasValue ?
                new ObjectParameter("VATPercentageID", vATPercentageID) :
                new ObjectParameter("VATPercentageID", typeof(int));
    
            var vATPercentageParameter = vATPercentage.HasValue ?
                new ObjectParameter("VATPercentage", vATPercentage) :
                new ObjectParameter("VATPercentage", typeof(decimal));
    
            var discountPercentageParameter = discountPercentage.HasValue ?
                new ObjectParameter("DiscountPercentage", discountPercentage) :
                new ObjectParameter("DiscountPercentage", typeof(decimal));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            var salesOrderTransParameter = salesOrderTrans != null ?
                new ObjectParameter("SalesOrderTrans", salesOrderTrans) :
                new ObjectParameter("SalesOrderTrans", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpSUpdateSalesOrder", salesOrderIDParameter, salesOrderNoParameter, orderDateParameter, customerIDParameter, schemeAllocationIDParameter, despatchDateParameter, freightAmountParameter, grossAmtParameter, discountAmtParameter, taxableAmtParameter, sGSTAmtParameter, cGSTAmtParameter, iGSTAmtParameter, cessAmountParameter, roundOffParameter, customerEnquiryNumberParameter, quotationExpiryParameter, paymentTermsParameter, netAmtParameter, billingAddressIDParameter, shippingAddressIDParameter, isDraftParameter, salesTypeIDParameter, currencyIDParameter, isGSTParameter, isVatParameter, currencyExchangeRateParameter, enquiryDateParameter, remarksParameter, vATAmountParameter, vATPercentageIDParameter, vATPercentageParameter, discountPercentageParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, isApprovedParameter, salesOrderTransParameter);
        }
    
        public virtual ObjectResult<SpGetPendingPOTransHistory_Result> SpGetPendingPOTransHistory(Nullable<int> itemID, Nullable<int> locationID, string purchaseOrderNo, string purchaseOrderDate, string supplierName, string itemName, string partsNumber, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var purchaseOrderNoParameter = purchaseOrderNo != null ?
                new ObjectParameter("PurchaseOrderNo", purchaseOrderNo) :
                new ObjectParameter("PurchaseOrderNo", typeof(string));
    
            var purchaseOrderDateParameter = purchaseOrderDate != null ?
                new ObjectParameter("PurchaseOrderDate", purchaseOrderDate) :
                new ObjectParameter("PurchaseOrderDate", typeof(string));
    
            var supplierNameParameter = supplierName != null ?
                new ObjectParameter("SupplierName", supplierName) :
                new ObjectParameter("SupplierName", typeof(string));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var partsNumberParameter = partsNumber != null ?
                new ObjectParameter("PartsNumber", partsNumber) :
                new ObjectParameter("PartsNumber", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPendingPOTransHistory_Result>("SpGetPendingPOTransHistory", itemIDParameter, locationIDParameter, purchaseOrderNoParameter, purchaseOrderDateParameter, supplierNameParameter, itemNameParameter, partsNumberParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter);
        }
    
        public virtual ObjectResult<SpGetPurchaseLegacyHistory_Result> SpGetPurchaseLegacyHistory(Nullable<int> itemID, string referenceNo, string orderDate, string supplierName, string itemName, string partsNumber, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var referenceNoParameter = referenceNo != null ?
                new ObjectParameter("ReferenceNo", referenceNo) :
                new ObjectParameter("ReferenceNo", typeof(string));
    
            var orderDateParameter = orderDate != null ?
                new ObjectParameter("OrderDate", orderDate) :
                new ObjectParameter("OrderDate", typeof(string));
    
            var supplierNameParameter = supplierName != null ?
                new ObjectParameter("SupplierName", supplierName) :
                new ObjectParameter("SupplierName", typeof(string));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var partsNumberParameter = partsNumber != null ?
                new ObjectParameter("PartsNumber", partsNumber) :
                new ObjectParameter("PartsNumber", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPurchaseLegacyHistory_Result>("SpGetPurchaseLegacyHistory", itemIDParameter, referenceNoParameter, orderDateParameter, supplierNameParameter, itemNameParameter, partsNumberParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter);
        }
    
        public virtual ObjectResult<SpGetPurchaseOrderTransHistory_Result> SpGetPurchaseOrderTransHistory(Nullable<int> itemID, Nullable<int> locationID, string purchaseOrderNo, string purchaseOrderDate, string supplierName, string itemName, string partsNumber, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var purchaseOrderNoParameter = purchaseOrderNo != null ?
                new ObjectParameter("PurchaseOrderNo", purchaseOrderNo) :
                new ObjectParameter("PurchaseOrderNo", typeof(string));
    
            var purchaseOrderDateParameter = purchaseOrderDate != null ?
                new ObjectParameter("PurchaseOrderDate", purchaseOrderDate) :
                new ObjectParameter("PurchaseOrderDate", typeof(string));
    
            var supplierNameParameter = supplierName != null ?
                new ObjectParameter("SupplierName", supplierName) :
                new ObjectParameter("SupplierName", typeof(string));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var partsNumberParameter = partsNumber != null ?
                new ObjectParameter("PartsNumber", partsNumber) :
                new ObjectParameter("PartsNumber", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPurchaseOrderTransHistory_Result>("SpGetPurchaseOrderTransHistory", itemIDParameter, locationIDParameter, purchaseOrderNoParameter, purchaseOrderDateParameter, supplierNameParameter, itemNameParameter, partsNumberParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter);
        }
    
        public virtual ObjectResult<SpGetSalesInvoiceTransHistory_Result> SpGetSalesInvoiceTransHistory(Nullable<int> itemID, string salesOrderNos, string invoiceDate, string customerName, string itemName, string partsNumber, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var salesOrderNosParameter = salesOrderNos != null ?
                new ObjectParameter("SalesOrderNos", salesOrderNos) :
                new ObjectParameter("SalesOrderNos", typeof(string));
    
            var invoiceDateParameter = invoiceDate != null ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var partsNumberParameter = partsNumber != null ?
                new ObjectParameter("PartsNumber", partsNumber) :
                new ObjectParameter("PartsNumber", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSalesInvoiceTransHistory_Result>("SpGetSalesInvoiceTransHistory", itemIDParameter, salesOrderNosParameter, invoiceDateParameter, customerNameParameter, itemNameParameter, partsNumberParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter);
        }
    
        public virtual ObjectResult<SpGetSalesOrderTransHistory_Result> SpGetSalesOrderTransHistory(string type, Nullable<int> itemID, string salesOrderNo, string orderDate, string customerName, string itemName, string partsNumber, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var salesOrderNoParameter = salesOrderNo != null ?
                new ObjectParameter("SalesOrderNo", salesOrderNo) :
                new ObjectParameter("SalesOrderNo", typeof(string));
    
            var orderDateParameter = orderDate != null ?
                new ObjectParameter("OrderDate", orderDate) :
                new ObjectParameter("OrderDate", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var partsNumberParameter = partsNumber != null ?
                new ObjectParameter("PartsNumber", partsNumber) :
                new ObjectParameter("PartsNumber", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSalesOrderTransHistory_Result>("SpGetSalesOrderTransHistory", typeParameter, itemIDParameter, salesOrderNoParameter, orderDateParameter, customerNameParameter, itemNameParameter, partsNumberParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter);
        }
    }
}
