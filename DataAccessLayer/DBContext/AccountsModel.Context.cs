//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccessLayer.DBContext
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AccountsEntities : DbContext
    {
        public AccountsEntities()
            : base("name=AccountsEntities")
        {
            ((IObjectContextAdapter)this).ObjectContext.CommandTimeout = 0;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual int SpCreateAccountEntryDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateAccountEntryDetails");
        }
    
        public virtual int SpCreateAdvance(string adavnceNo, string advanceCategory, Nullable<System.DateTime> advanceDate, Nullable<int> supplierID, Nullable<int> employeeID, Nullable<int> paymentTypeID, string bankName, string referenceNo, Nullable<decimal> amount, Nullable<bool> isOfficial, Nullable<bool> isPayment, Nullable<bool> isDraft, Nullable<decimal> netAmount, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter advanceID)
        {
            var adavnceNoParameter = adavnceNo != null ?
                new ObjectParameter("AdavnceNo", adavnceNo) :
                new ObjectParameter("AdavnceNo", typeof(string));
    
            var advanceCategoryParameter = advanceCategory != null ?
                new ObjectParameter("AdvanceCategory", advanceCategory) :
                new ObjectParameter("AdvanceCategory", typeof(string));
    
            var advanceDateParameter = advanceDate.HasValue ?
                new ObjectParameter("AdvanceDate", advanceDate) :
                new ObjectParameter("AdvanceDate", typeof(System.DateTime));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(int));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var referenceNoParameter = referenceNo != null ?
                new ObjectParameter("ReferenceNo", referenceNo) :
                new ObjectParameter("ReferenceNo", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var isOfficialParameter = isOfficial.HasValue ?
                new ObjectParameter("IsOfficial", isOfficial) :
                new ObjectParameter("IsOfficial", typeof(bool));
    
            var isPaymentParameter = isPayment.HasValue ?
                new ObjectParameter("IsPayment", isPayment) :
                new ObjectParameter("IsPayment", typeof(bool));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateAdvance", adavnceNoParameter, advanceCategoryParameter, advanceDateParameter, supplierIDParameter, employeeIDParameter, paymentTypeIDParameter, bankNameParameter, referenceNoParameter, amountParameter, isOfficialParameter, isPaymentParameter, isDraftParameter, netAmountParameter, finYearParameter, locationIDParameter, applicationIDParameter, advanceID);
        }
    
        public virtual int SpCreateAdvanceReceipt(string advanceNo, Nullable<int> customerID, Nullable<int> paymenttypeID, string bankname, string referenceNo, Nullable<System.DateTime> advanceReceiptDate, string advanceReceiptNo, Nullable<decimal> amount, Nullable<decimal> netamount, Nullable<decimal> tdsamount, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter advanceID)
        {
            var advanceNoParameter = advanceNo != null ?
                new ObjectParameter("AdvanceNo", advanceNo) :
                new ObjectParameter("AdvanceNo", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var paymenttypeIDParameter = paymenttypeID.HasValue ?
                new ObjectParameter("PaymenttypeID", paymenttypeID) :
                new ObjectParameter("PaymenttypeID", typeof(int));
    
            var banknameParameter = bankname != null ?
                new ObjectParameter("Bankname", bankname) :
                new ObjectParameter("Bankname", typeof(string));
    
            var referenceNoParameter = referenceNo != null ?
                new ObjectParameter("ReferenceNo", referenceNo) :
                new ObjectParameter("ReferenceNo", typeof(string));
    
            var advanceReceiptDateParameter = advanceReceiptDate.HasValue ?
                new ObjectParameter("AdvanceReceiptDate", advanceReceiptDate) :
                new ObjectParameter("AdvanceReceiptDate", typeof(System.DateTime));
    
            var advanceReceiptNoParameter = advanceReceiptNo != null ?
                new ObjectParameter("AdvanceReceiptNo", advanceReceiptNo) :
                new ObjectParameter("AdvanceReceiptNo", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var netamountParameter = netamount.HasValue ?
                new ObjectParameter("Netamount", netamount) :
                new ObjectParameter("Netamount", typeof(decimal));
    
            var tdsamountParameter = tdsamount.HasValue ?
                new ObjectParameter("Tdsamount", tdsamount) :
                new ObjectParameter("Tdsamount", typeof(decimal));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateAdvanceReceipt", advanceNoParameter, customerIDParameter, paymenttypeIDParameter, banknameParameter, referenceNoParameter, advanceReceiptDateParameter, advanceReceiptNoParameter, amountParameter, netamountParameter, tdsamountParameter, finYearParameter, locationIDParameter, applicationIDParameter, advanceID);
        }
    
        public virtual int SpCreateAdvanceReceiptTrans(Nullable<int> advanceID, Nullable<System.DateTime> salesOrderDate, string transNo, Nullable<int> itemID, Nullable<int> tDSID, Nullable<decimal> itemAmount, Nullable<decimal> tDSAmount, string remarks, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var advanceIDParameter = advanceID.HasValue ?
                new ObjectParameter("AdvanceID", advanceID) :
                new ObjectParameter("AdvanceID", typeof(int));
    
            var salesOrderDateParameter = salesOrderDate.HasValue ?
                new ObjectParameter("SalesOrderDate", salesOrderDate) :
                new ObjectParameter("SalesOrderDate", typeof(System.DateTime));
    
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var tDSIDParameter = tDSID.HasValue ?
                new ObjectParameter("TDSID", tDSID) :
                new ObjectParameter("TDSID", typeof(int));
    
            var itemAmountParameter = itemAmount.HasValue ?
                new ObjectParameter("ItemAmount", itemAmount) :
                new ObjectParameter("ItemAmount", typeof(decimal));
    
            var tDSAmountParameter = tDSAmount.HasValue ?
                new ObjectParameter("TDSAmount", tDSAmount) :
                new ObjectParameter("TDSAmount", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateAdvanceReceiptTrans", advanceIDParameter, salesOrderDateParameter, transNoParameter, itemIDParameter, tDSIDParameter, itemAmountParameter, tDSAmountParameter, remarksParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateAdvanceRequestTrans(Nullable<int> advanceRequestID, Nullable<int> itemID, Nullable<int> employeeID, Nullable<bool> isOfficial, Nullable<decimal> amount, string remarks, Nullable<System.DateTime> expectedDate, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var advanceRequestIDParameter = advanceRequestID.HasValue ?
                new ObjectParameter("AdvanceRequestID", advanceRequestID) :
                new ObjectParameter("AdvanceRequestID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var isOfficialParameter = isOfficial.HasValue ?
                new ObjectParameter("IsOfficial", isOfficial) :
                new ObjectParameter("IsOfficial", typeof(bool));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var expectedDateParameter = expectedDate.HasValue ?
                new ObjectParameter("ExpectedDate", expectedDate) :
                new ObjectParameter("ExpectedDate", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateAdvanceRequestTrans", advanceRequestIDParameter, itemIDParameter, employeeIDParameter, isOfficialParameter, amountParameter, remarksParameter, expectedDateParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateBankExpense(string transNo, Nullable<System.DateTime> date, Nullable<int> bankID, Nullable<decimal> totalAmount, Nullable<bool> isDraft, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter bankExpensesID)
        {
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateBankExpense", transNoParameter, dateParameter, bankIDParameter, totalAmountParameter, isDraftParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, bankExpensesID);
        }
    
        public virtual int SpCreateBRS(string transNo, Nullable<System.DateTime> date, Nullable<int> bankID, Nullable<System.DateTime> fromTransactionDate, Nullable<System.DateTime> toTransactionDate, Nullable<int> attachmentID, Nullable<bool> isDraft, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter bRSID)
        {
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var fromTransactionDateParameter = fromTransactionDate.HasValue ?
                new ObjectParameter("FromTransactionDate", fromTransactionDate) :
                new ObjectParameter("FromTransactionDate", typeof(System.DateTime));
    
            var toTransactionDateParameter = toTransactionDate.HasValue ?
                new ObjectParameter("ToTransactionDate", toTransactionDate) :
                new ObjectParameter("ToTransactionDate", typeof(System.DateTime));
    
            var attachmentIDParameter = attachmentID.HasValue ?
                new ObjectParameter("AttachmentID", attachmentID) :
                new ObjectParameter("AttachmentID", typeof(int));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateBRS", transNoParameter, dateParameter, bankIDParameter, fromTransactionDateParameter, toTransactionDateParameter, attachmentIDParameter, isDraftParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, bRSID);
        }
    
        public virtual int SpCreateBRSBankTrans(Nullable<int> bRSID, string instrumentNo, Nullable<System.DateTime> instrumentDate, Nullable<decimal> credit, Nullable<decimal> debit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var bRSIDParameter = bRSID.HasValue ?
                new ObjectParameter("BRSID", bRSID) :
                new ObjectParameter("BRSID", typeof(int));
    
            var instrumentNoParameter = instrumentNo != null ?
                new ObjectParameter("InstrumentNo", instrumentNo) :
                new ObjectParameter("InstrumentNo", typeof(string));
    
            var instrumentDateParameter = instrumentDate.HasValue ?
                new ObjectParameter("InstrumentDate", instrumentDate) :
                new ObjectParameter("InstrumentDate", typeof(System.DateTime));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(decimal));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(decimal));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateBRSBankTrans", bRSIDParameter, instrumentNoParameter, instrumentDateParameter, creditParameter, debitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateBRSTrans(Nullable<int> bRSID, string documentNo, string instrumentNo, Nullable<System.DateTime> instrumentDate, Nullable<decimal> credit, Nullable<decimal> debit, Nullable<decimal> bankCharge, Nullable<int> itemID, Nullable<int> equivalentTransactionNo, string status, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var bRSIDParameter = bRSID.HasValue ?
                new ObjectParameter("BRSID", bRSID) :
                new ObjectParameter("BRSID", typeof(int));
    
            var documentNoParameter = documentNo != null ?
                new ObjectParameter("DocumentNo", documentNo) :
                new ObjectParameter("DocumentNo", typeof(string));
    
            var instrumentNoParameter = instrumentNo != null ?
                new ObjectParameter("InstrumentNo", instrumentNo) :
                new ObjectParameter("InstrumentNo", typeof(string));
    
            var instrumentDateParameter = instrumentDate.HasValue ?
                new ObjectParameter("InstrumentDate", instrumentDate) :
                new ObjectParameter("InstrumentDate", typeof(System.DateTime));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(decimal));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(decimal));
    
            var bankChargeParameter = bankCharge.HasValue ?
                new ObjectParameter("BankCharge", bankCharge) :
                new ObjectParameter("BankCharge", typeof(decimal));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var equivalentTransactionNoParameter = equivalentTransactionNo.HasValue ?
                new ObjectParameter("EquivalentTransactionNo", equivalentTransactionNo) :
                new ObjectParameter("EquivalentTransactionNo", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateBRSTrans", bRSIDParameter, documentNoParameter, instrumentNoParameter, instrumentDateParameter, creditParameter, debitParameter, bankChargeParameter, itemIDParameter, equivalentTransactionNoParameter, statusParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateChequeStatus(string transNo, Nullable<System.DateTime> date, Nullable<System.DateTime> fromReceiptnDate, Nullable<System.DateTime> toReceiptDate, string instrumentStatus, Nullable<bool> isDraft, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter chequeStatusID)
        {
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var fromReceiptnDateParameter = fromReceiptnDate.HasValue ?
                new ObjectParameter("FromReceiptnDate", fromReceiptnDate) :
                new ObjectParameter("FromReceiptnDate", typeof(System.DateTime));
    
            var toReceiptDateParameter = toReceiptDate.HasValue ?
                new ObjectParameter("ToReceiptDate", toReceiptDate) :
                new ObjectParameter("ToReceiptDate", typeof(System.DateTime));
    
            var instrumentStatusParameter = instrumentStatus != null ?
                new ObjectParameter("InstrumentStatus", instrumentStatus) :
                new ObjectParameter("InstrumentStatus", typeof(string));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateChequeStatus", transNoParameter, dateParameter, fromReceiptnDateParameter, toReceiptDateParameter, instrumentStatusParameter, isDraftParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, chequeStatusID);
        }
    
        public virtual int SpCreateChequeStatusTrans(Nullable<int> chequeStatusID, string instrumentNo, Nullable<System.DateTime> instrumentDate, string instrumentStatus, Nullable<System.DateTime> statusChangeDate, Nullable<int> customerID, Nullable<decimal> instrumentAmount, Nullable<decimal> bankCharges, Nullable<decimal> netAmount, Nullable<decimal> chargesToCustomer, string remarks, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, Nullable<bool> isActive, string voucherNo, Nullable<int> receiptVoucherID, Nullable<decimal> cGST, Nullable<decimal> sGST, Nullable<decimal> iGST)
        {
            var chequeStatusIDParameter = chequeStatusID.HasValue ?
                new ObjectParameter("ChequeStatusID", chequeStatusID) :
                new ObjectParameter("ChequeStatusID", typeof(int));
    
            var instrumentNoParameter = instrumentNo != null ?
                new ObjectParameter("InstrumentNo", instrumentNo) :
                new ObjectParameter("InstrumentNo", typeof(string));
    
            var instrumentDateParameter = instrumentDate.HasValue ?
                new ObjectParameter("InstrumentDate", instrumentDate) :
                new ObjectParameter("InstrumentDate", typeof(System.DateTime));
    
            var instrumentStatusParameter = instrumentStatus != null ?
                new ObjectParameter("InstrumentStatus", instrumentStatus) :
                new ObjectParameter("InstrumentStatus", typeof(string));
    
            var statusChangeDateParameter = statusChangeDate.HasValue ?
                new ObjectParameter("StatusChangeDate", statusChangeDate) :
                new ObjectParameter("StatusChangeDate", typeof(System.DateTime));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var instrumentAmountParameter = instrumentAmount.HasValue ?
                new ObjectParameter("InstrumentAmount", instrumentAmount) :
                new ObjectParameter("InstrumentAmount", typeof(decimal));
    
            var bankChargesParameter = bankCharges.HasValue ?
                new ObjectParameter("BankCharges", bankCharges) :
                new ObjectParameter("BankCharges", typeof(decimal));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var chargesToCustomerParameter = chargesToCustomer.HasValue ?
                new ObjectParameter("ChargesToCustomer", chargesToCustomer) :
                new ObjectParameter("ChargesToCustomer", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var voucherNoParameter = voucherNo != null ?
                new ObjectParameter("VoucherNo", voucherNo) :
                new ObjectParameter("VoucherNo", typeof(string));
    
            var receiptVoucherIDParameter = receiptVoucherID.HasValue ?
                new ObjectParameter("ReceiptVoucherID", receiptVoucherID) :
                new ObjectParameter("ReceiptVoucherID", typeof(int));
    
            var cGSTParameter = cGST.HasValue ?
                new ObjectParameter("CGST", cGST) :
                new ObjectParameter("CGST", typeof(decimal));
    
            var sGSTParameter = sGST.HasValue ?
                new ObjectParameter("SGST", sGST) :
                new ObjectParameter("SGST", typeof(decimal));
    
            var iGSTParameter = iGST.HasValue ?
                new ObjectParameter("IGST", iGST) :
                new ObjectParameter("IGST", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateChequeStatusTrans", chequeStatusIDParameter, instrumentNoParameter, instrumentDateParameter, instrumentStatusParameter, statusChangeDateParameter, customerIDParameter, instrumentAmountParameter, bankChargesParameter, netAmountParameter, chargesToCustomerParameter, remarksParameter, finYearParameter, locationIDParameter, applicationIDParameter, isActiveParameter, voucherNoParameter, receiptVoucherIDParameter, cGSTParameter, sGSTParameter, iGSTParameter);
        }
    
        public virtual int SpCreateCustomerDebitNote(string transNo, Nullable<System.DateTime> date, Nullable<int> customerID, Nullable<decimal> totalAmount, Nullable<decimal> taxableAmount, Nullable<decimal> cGSTAmount, Nullable<decimal> sGSTAmount, Nullable<decimal> iGSTAmount, Nullable<bool> isDraft, Nullable<bool> isProcessed, Nullable<decimal> roundOff, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter debitNoteID)
        {
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var taxableAmountParameter = taxableAmount.HasValue ?
                new ObjectParameter("TaxableAmount", taxableAmount) :
                new ObjectParameter("TaxableAmount", typeof(decimal));
    
            var cGSTAmountParameter = cGSTAmount.HasValue ?
                new ObjectParameter("CGSTAmount", cGSTAmount) :
                new ObjectParameter("CGSTAmount", typeof(decimal));
    
            var sGSTAmountParameter = sGSTAmount.HasValue ?
                new ObjectParameter("SGSTAmount", sGSTAmount) :
                new ObjectParameter("SGSTAmount", typeof(decimal));
    
            var iGSTAmountParameter = iGSTAmount.HasValue ?
                new ObjectParameter("IGSTAmount", iGSTAmount) :
                new ObjectParameter("IGSTAmount", typeof(decimal));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var isProcessedParameter = isProcessed.HasValue ?
                new ObjectParameter("IsProcessed", isProcessed) :
                new ObjectParameter("IsProcessed", typeof(bool));
    
            var roundOffParameter = roundOff.HasValue ?
                new ObjectParameter("RoundOff", roundOff) :
                new ObjectParameter("RoundOff", typeof(decimal));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateCustomerDebitNote", transNoParameter, dateParameter, customerIDParameter, totalAmountParameter, taxableAmountParameter, cGSTAmountParameter, sGSTAmountParameter, iGSTAmountParameter, isDraftParameter, isProcessedParameter, roundOffParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, debitNoteID);
        }
    
        public virtual int SpCreateCustomerDebitNoteTrans(Nullable<int> debitNoteID, string referenceInvoiceNumber, Nullable<System.DateTime> referenceDocumentDate, Nullable<int> itemID, Nullable<decimal> quantity, Nullable<decimal> rate, Nullable<decimal> netAmount, Nullable<int> departmentID, Nullable<int> debitNoteLocationID, Nullable<int> employeeID, Nullable<int> interCompanyID, Nullable<int> projectID, string remarks, Nullable<decimal> taxableAmount, Nullable<decimal> sGSTAmount, Nullable<decimal> cGSTAmount, Nullable<decimal> iGSTAmount, Nullable<decimal> gSTPercentage, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var debitNoteIDParameter = debitNoteID.HasValue ?
                new ObjectParameter("DebitNoteID", debitNoteID) :
                new ObjectParameter("DebitNoteID", typeof(int));
    
            var referenceInvoiceNumberParameter = referenceInvoiceNumber != null ?
                new ObjectParameter("ReferenceInvoiceNumber", referenceInvoiceNumber) :
                new ObjectParameter("ReferenceInvoiceNumber", typeof(string));
    
            var referenceDocumentDateParameter = referenceDocumentDate.HasValue ?
                new ObjectParameter("ReferenceDocumentDate", referenceDocumentDate) :
                new ObjectParameter("ReferenceDocumentDate", typeof(System.DateTime));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var debitNoteLocationIDParameter = debitNoteLocationID.HasValue ?
                new ObjectParameter("DebitNoteLocationID", debitNoteLocationID) :
                new ObjectParameter("DebitNoteLocationID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var interCompanyIDParameter = interCompanyID.HasValue ?
                new ObjectParameter("InterCompanyID", interCompanyID) :
                new ObjectParameter("InterCompanyID", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var taxableAmountParameter = taxableAmount.HasValue ?
                new ObjectParameter("TaxableAmount", taxableAmount) :
                new ObjectParameter("TaxableAmount", typeof(decimal));
    
            var sGSTAmountParameter = sGSTAmount.HasValue ?
                new ObjectParameter("SGSTAmount", sGSTAmount) :
                new ObjectParameter("SGSTAmount", typeof(decimal));
    
            var cGSTAmountParameter = cGSTAmount.HasValue ?
                new ObjectParameter("CGSTAmount", cGSTAmount) :
                new ObjectParameter("CGSTAmount", typeof(decimal));
    
            var iGSTAmountParameter = iGSTAmount.HasValue ?
                new ObjectParameter("IGSTAmount", iGSTAmount) :
                new ObjectParameter("IGSTAmount", typeof(decimal));
    
            var gSTPercentageParameter = gSTPercentage.HasValue ?
                new ObjectParameter("GSTPercentage", gSTPercentage) :
                new ObjectParameter("GSTPercentage", typeof(decimal));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateCustomerDebitNoteTrans", debitNoteIDParameter, referenceInvoiceNumberParameter, referenceDocumentDateParameter, itemIDParameter, quantityParameter, rateParameter, netAmountParameter, departmentIDParameter, debitNoteLocationIDParameter, employeeIDParameter, interCompanyIDParameter, projectIDParameter, remarksParameter, taxableAmountParameter, sGSTAmountParameter, cGSTAmountParameter, iGSTAmountParameter, gSTPercentageParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateFundTransfer(string transactionNumber, Nullable<System.DateTime> date, Nullable<decimal> totalAmount, Nullable<bool> isDraft, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter fundTransferID)
        {
            var transactionNumberParameter = transactionNumber != null ?
                new ObjectParameter("TransactionNumber", transactionNumber) :
                new ObjectParameter("TransactionNumber", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateFundTransfer", transactionNumberParameter, dateParameter, totalAmountParameter, isDraftParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, fundTransferID);
        }
    
        public virtual int SpCreateFundTransferReceipt(Nullable<int> iD, string transNo, Nullable<System.DateTime> trasDate, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter receiptID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var trasDateParameter = trasDate.HasValue ?
                new ObjectParameter("TrasDate", trasDate) :
                new ObjectParameter("TrasDate", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateFundTransferReceipt", iDParameter, transNoParameter, trasDateParameter, finYearParameter, locationIDParameter, applicationIDParameter, receiptID);
        }
    
        public virtual int SpCreateFundTransferReceiptTransDetails(Nullable<int> receiptID, Nullable<int> issueTransID, Nullable<int> fromLocationID, Nullable<int> fromBankID, Nullable<int> toLocationID, Nullable<int> toBankID, Nullable<int> modeOfPayment, Nullable<decimal> amount, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var receiptIDParameter = receiptID.HasValue ?
                new ObjectParameter("ReceiptID", receiptID) :
                new ObjectParameter("ReceiptID", typeof(int));
    
            var issueTransIDParameter = issueTransID.HasValue ?
                new ObjectParameter("IssueTransID", issueTransID) :
                new ObjectParameter("IssueTransID", typeof(int));
    
            var fromLocationIDParameter = fromLocationID.HasValue ?
                new ObjectParameter("FromLocationID", fromLocationID) :
                new ObjectParameter("FromLocationID", typeof(int));
    
            var fromBankIDParameter = fromBankID.HasValue ?
                new ObjectParameter("FromBankID", fromBankID) :
                new ObjectParameter("FromBankID", typeof(int));
    
            var toLocationIDParameter = toLocationID.HasValue ?
                new ObjectParameter("ToLocationID", toLocationID) :
                new ObjectParameter("ToLocationID", typeof(int));
    
            var toBankIDParameter = toBankID.HasValue ?
                new ObjectParameter("ToBankID", toBankID) :
                new ObjectParameter("ToBankID", typeof(int));
    
            var modeOfPaymentParameter = modeOfPayment.HasValue ?
                new ObjectParameter("ModeOfPayment", modeOfPayment) :
                new ObjectParameter("ModeOfPayment", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateFundTransferReceiptTransDetails", receiptIDParameter, issueTransIDParameter, fromLocationIDParameter, fromBankIDParameter, toLocationIDParameter, toBankIDParameter, modeOfPaymentParameter, amountParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateFundTransferTrans(Nullable<int> fundTransferID, Nullable<int> fromLocationID, Nullable<int> toLocationID, Nullable<int> fromBankID, Nullable<int> toBankID, Nullable<decimal> amount, Nullable<int> modeOfPayment, string instrumentNumber, Nullable<System.DateTime> instrumentDate, string remarks, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter retValue)
        {
            var fundTransferIDParameter = fundTransferID.HasValue ?
                new ObjectParameter("FundTransferID", fundTransferID) :
                new ObjectParameter("FundTransferID", typeof(int));
    
            var fromLocationIDParameter = fromLocationID.HasValue ?
                new ObjectParameter("FromLocationID", fromLocationID) :
                new ObjectParameter("FromLocationID", typeof(int));
    
            var toLocationIDParameter = toLocationID.HasValue ?
                new ObjectParameter("ToLocationID", toLocationID) :
                new ObjectParameter("ToLocationID", typeof(int));
    
            var fromBankIDParameter = fromBankID.HasValue ?
                new ObjectParameter("FromBankID", fromBankID) :
                new ObjectParameter("FromBankID", typeof(int));
    
            var toBankIDParameter = toBankID.HasValue ?
                new ObjectParameter("ToBankID", toBankID) :
                new ObjectParameter("ToBankID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var modeOfPaymentParameter = modeOfPayment.HasValue ?
                new ObjectParameter("ModeOfPayment", modeOfPayment) :
                new ObjectParameter("ModeOfPayment", typeof(int));
    
            var instrumentNumberParameter = instrumentNumber != null ?
                new ObjectParameter("InstrumentNumber", instrumentNumber) :
                new ObjectParameter("InstrumentNumber", typeof(string));
    
            var instrumentDateParameter = instrumentDate.HasValue ?
                new ObjectParameter("InstrumentDate", instrumentDate) :
                new ObjectParameter("InstrumentDate", typeof(System.DateTime));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateFundTransferTrans", fundTransferIDParameter, fromLocationIDParameter, toLocationIDParameter, fromBankIDParameter, toBankIDParameter, amountParameter, modeOfPaymentParameter, instrumentNumberParameter, instrumentDateParameter, remarksParameter, finYearParameter, locationIDParameter, applicationIDParameter, retValue);
        }
    
        public virtual int SpCreateJournal(string voucherNo, Nullable<System.DateTime> date, Nullable<decimal> totalCreditAmount, Nullable<decimal> totalDebitAmount, Nullable<int> currencyID, Nullable<bool> isDraft, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter journalID)
        {
            var voucherNoParameter = voucherNo != null ?
                new ObjectParameter("VoucherNo", voucherNo) :
                new ObjectParameter("VoucherNo", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var totalCreditAmountParameter = totalCreditAmount.HasValue ?
                new ObjectParameter("TotalCreditAmount", totalCreditAmount) :
                new ObjectParameter("TotalCreditAmount", typeof(decimal));
    
            var totalDebitAmountParameter = totalDebitAmount.HasValue ?
                new ObjectParameter("TotalDebitAmount", totalDebitAmount) :
                new ObjectParameter("TotalDebitAmount", typeof(decimal));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateJournal", voucherNoParameter, dateParameter, totalCreditAmountParameter, totalDebitAmountParameter, currencyIDParameter, isDraftParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, journalID);
        }
    
        public virtual int SpCreatePayment(string voucherNO, Nullable<System.DateTime> voucherDate, Nullable<int> supplierID, Nullable<int> paymentTypeID, string bankName, string referenceNo, Nullable<decimal> paidAmount, string description, string type, Nullable<bool> isSettled, Nullable<decimal> settledAmount, Nullable<int> transactionID, Nullable<int> accountID, Nullable<bool> isDraft, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter paymentID)
        {
            var voucherNOParameter = voucherNO != null ?
                new ObjectParameter("VoucherNO", voucherNO) :
                new ObjectParameter("VoucherNO", typeof(string));
    
            var voucherDateParameter = voucherDate.HasValue ?
                new ObjectParameter("VoucherDate", voucherDate) :
                new ObjectParameter("VoucherDate", typeof(System.DateTime));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(int));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var referenceNoParameter = referenceNo != null ?
                new ObjectParameter("ReferenceNo", referenceNo) :
                new ObjectParameter("ReferenceNo", typeof(string));
    
            var paidAmountParameter = paidAmount.HasValue ?
                new ObjectParameter("PaidAmount", paidAmount) :
                new ObjectParameter("PaidAmount", typeof(decimal));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var isSettledParameter = isSettled.HasValue ?
                new ObjectParameter("IsSettled", isSettled) :
                new ObjectParameter("IsSettled", typeof(bool));
    
            var settledAmountParameter = settledAmount.HasValue ?
                new ObjectParameter("SettledAmount", settledAmount) :
                new ObjectParameter("SettledAmount", typeof(decimal));
    
            var transactionIDParameter = transactionID.HasValue ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePayment", voucherNOParameter, voucherDateParameter, supplierIDParameter, paymentTypeIDParameter, bankNameParameter, referenceNoParameter, paidAmountParameter, descriptionParameter, typeParameter, isSettledParameter, settledAmountParameter, transactionIDParameter, accountIDParameter, isDraftParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, paymentID);
        }
    
        public virtual int SpCreateReceiptVoucherTrans(Nullable<int> creditNoteID, Nullable<int> debitNoteID, Nullable<System.DateTime> receiptDate, Nullable<int> customerID, Nullable<int> paymentTypeID, Nullable<int> bankID, string referenceNo, Nullable<decimal> advanceReceivedAmount, Nullable<int> receiptVoucherID, Nullable<int> receivableID, Nullable<int> advanceID, string documentType, string documentNo, Nullable<System.DateTime> receivableDate, Nullable<decimal> amount, Nullable<decimal> balance, Nullable<decimal> amountToBeMatched, string status, Nullable<int> pendingDays, Nullable<int> salesReturnID, Nullable<int> customerReturnVoucherID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter retValue)
        {
            var creditNoteIDParameter = creditNoteID.HasValue ?
                new ObjectParameter("CreditNoteID", creditNoteID) :
                new ObjectParameter("CreditNoteID", typeof(int));
    
            var debitNoteIDParameter = debitNoteID.HasValue ?
                new ObjectParameter("DebitNoteID", debitNoteID) :
                new ObjectParameter("DebitNoteID", typeof(int));
    
            var receiptDateParameter = receiptDate.HasValue ?
                new ObjectParameter("ReceiptDate", receiptDate) :
                new ObjectParameter("ReceiptDate", typeof(System.DateTime));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var referenceNoParameter = referenceNo != null ?
                new ObjectParameter("ReferenceNo", referenceNo) :
                new ObjectParameter("ReferenceNo", typeof(string));
    
            var advanceReceivedAmountParameter = advanceReceivedAmount.HasValue ?
                new ObjectParameter("AdvanceReceivedAmount", advanceReceivedAmount) :
                new ObjectParameter("AdvanceReceivedAmount", typeof(decimal));
    
            var receiptVoucherIDParameter = receiptVoucherID.HasValue ?
                new ObjectParameter("ReceiptVoucherID", receiptVoucherID) :
                new ObjectParameter("ReceiptVoucherID", typeof(int));
    
            var receivableIDParameter = receivableID.HasValue ?
                new ObjectParameter("ReceivableID", receivableID) :
                new ObjectParameter("ReceivableID", typeof(int));
    
            var advanceIDParameter = advanceID.HasValue ?
                new ObjectParameter("AdvanceID", advanceID) :
                new ObjectParameter("AdvanceID", typeof(int));
    
            var documentTypeParameter = documentType != null ?
                new ObjectParameter("DocumentType", documentType) :
                new ObjectParameter("DocumentType", typeof(string));
    
            var documentNoParameter = documentNo != null ?
                new ObjectParameter("DocumentNo", documentNo) :
                new ObjectParameter("DocumentNo", typeof(string));
    
            var receivableDateParameter = receivableDate.HasValue ?
                new ObjectParameter("ReceivableDate", receivableDate) :
                new ObjectParameter("ReceivableDate", typeof(System.DateTime));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(decimal));
    
            var amountToBeMatchedParameter = amountToBeMatched.HasValue ?
                new ObjectParameter("AmountToBeMatched", amountToBeMatched) :
                new ObjectParameter("AmountToBeMatched", typeof(decimal));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var pendingDaysParameter = pendingDays.HasValue ?
                new ObjectParameter("PendingDays", pendingDays) :
                new ObjectParameter("PendingDays", typeof(int));
    
            var salesReturnIDParameter = salesReturnID.HasValue ?
                new ObjectParameter("SalesReturnID", salesReturnID) :
                new ObjectParameter("SalesReturnID", typeof(int));
    
            var customerReturnVoucherIDParameter = customerReturnVoucherID.HasValue ?
                new ObjectParameter("CustomerReturnVoucherID", customerReturnVoucherID) :
                new ObjectParameter("CustomerReturnVoucherID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateReceiptVoucherTrans", creditNoteIDParameter, debitNoteIDParameter, receiptDateParameter, customerIDParameter, paymentTypeIDParameter, bankIDParameter, referenceNoParameter, advanceReceivedAmountParameter, receiptVoucherIDParameter, receivableIDParameter, advanceIDParameter, documentTypeParameter, documentNoParameter, receivableDateParameter, amountParameter, balanceParameter, amountToBeMatchedParameter, statusParameter, pendingDaysParameter, salesReturnIDParameter, customerReturnVoucherIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, retValue);
        }
    
        public virtual int SpCreateSupplierCreditNote(string transactionNumber, Nullable<System.DateTime> date, Nullable<int> supplierID, Nullable<decimal> totalAmount, Nullable<decimal> taxableAmount, Nullable<decimal> cGSTAmount, Nullable<decimal> sGSTAmount, Nullable<decimal> iGSTAmount, Nullable<bool> isDraft, Nullable<bool> isProcessed, Nullable<decimal> roundOff, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter creditNoteID)
        {
            var transactionNumberParameter = transactionNumber != null ?
                new ObjectParameter("TransactionNumber", transactionNumber) :
                new ObjectParameter("TransactionNumber", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var taxableAmountParameter = taxableAmount.HasValue ?
                new ObjectParameter("TaxableAmount", taxableAmount) :
                new ObjectParameter("TaxableAmount", typeof(decimal));
    
            var cGSTAmountParameter = cGSTAmount.HasValue ?
                new ObjectParameter("CGSTAmount", cGSTAmount) :
                new ObjectParameter("CGSTAmount", typeof(decimal));
    
            var sGSTAmountParameter = sGSTAmount.HasValue ?
                new ObjectParameter("SGSTAmount", sGSTAmount) :
                new ObjectParameter("SGSTAmount", typeof(decimal));
    
            var iGSTAmountParameter = iGSTAmount.HasValue ?
                new ObjectParameter("IGSTAmount", iGSTAmount) :
                new ObjectParameter("IGSTAmount", typeof(decimal));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var isProcessedParameter = isProcessed.HasValue ?
                new ObjectParameter("IsProcessed", isProcessed) :
                new ObjectParameter("IsProcessed", typeof(bool));
    
            var roundOffParameter = roundOff.HasValue ?
                new ObjectParameter("RoundOff", roundOff) :
                new ObjectParameter("RoundOff", typeof(decimal));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateSupplierCreditNote", transactionNumberParameter, dateParameter, supplierIDParameter, totalAmountParameter, taxableAmountParameter, cGSTAmountParameter, sGSTAmountParameter, iGSTAmountParameter, isDraftParameter, isProcessedParameter, roundOffParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, creditNoteID);
        }
    
        public virtual int SpCreateSupplierCreditNoteTrans(Nullable<int> creditNoteID, string referenceInvoiceNumber, Nullable<System.DateTime> referenceDocumentDate, Nullable<int> itemID, Nullable<decimal> quantity, Nullable<decimal> rate, Nullable<decimal> netAmount, Nullable<int> departmentID, Nullable<int> creditLocationID, Nullable<int> employeeID, Nullable<int> interCompanyID, Nullable<int> projectID, string remarks, Nullable<decimal> taxableAmount, Nullable<decimal> cGSTAmount, Nullable<decimal> sGSTAmount, Nullable<decimal> iGSTAmount, Nullable<decimal> gSTPercentage, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var creditNoteIDParameter = creditNoteID.HasValue ?
                new ObjectParameter("CreditNoteID", creditNoteID) :
                new ObjectParameter("CreditNoteID", typeof(int));
    
            var referenceInvoiceNumberParameter = referenceInvoiceNumber != null ?
                new ObjectParameter("ReferenceInvoiceNumber", referenceInvoiceNumber) :
                new ObjectParameter("ReferenceInvoiceNumber", typeof(string));
    
            var referenceDocumentDateParameter = referenceDocumentDate.HasValue ?
                new ObjectParameter("ReferenceDocumentDate", referenceDocumentDate) :
                new ObjectParameter("ReferenceDocumentDate", typeof(System.DateTime));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var creditLocationIDParameter = creditLocationID.HasValue ?
                new ObjectParameter("CreditLocationID", creditLocationID) :
                new ObjectParameter("CreditLocationID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var interCompanyIDParameter = interCompanyID.HasValue ?
                new ObjectParameter("InterCompanyID", interCompanyID) :
                new ObjectParameter("InterCompanyID", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var taxableAmountParameter = taxableAmount.HasValue ?
                new ObjectParameter("TaxableAmount", taxableAmount) :
                new ObjectParameter("TaxableAmount", typeof(decimal));
    
            var cGSTAmountParameter = cGSTAmount.HasValue ?
                new ObjectParameter("CGSTAmount", cGSTAmount) :
                new ObjectParameter("CGSTAmount", typeof(decimal));
    
            var sGSTAmountParameter = sGSTAmount.HasValue ?
                new ObjectParameter("SGSTAmount", sGSTAmount) :
                new ObjectParameter("SGSTAmount", typeof(decimal));
    
            var iGSTAmountParameter = iGSTAmount.HasValue ?
                new ObjectParameter("IGSTAmount", iGSTAmount) :
                new ObjectParameter("IGSTAmount", typeof(decimal));
    
            var gSTPercentageParameter = gSTPercentage.HasValue ?
                new ObjectParameter("GSTPercentage", gSTPercentage) :
                new ObjectParameter("GSTPercentage", typeof(decimal));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateSupplierCreditNoteTrans", creditNoteIDParameter, referenceInvoiceNumberParameter, referenceDocumentDateParameter, itemIDParameter, quantityParameter, rateParameter, netAmountParameter, departmentIDParameter, creditLocationIDParameter, employeeIDParameter, interCompanyIDParameter, projectIDParameter, remarksParameter, taxableAmountParameter, cGSTAmountParameter, sGSTAmountParameter, iGSTAmountParameter, gSTPercentageParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateSupplierDebitNote(string transNo, Nullable<System.DateTime> date, Nullable<int> supplierID, Nullable<decimal> totalAmount, Nullable<decimal> taxableAmount, Nullable<decimal> cGSTAmount, Nullable<decimal> sGSTAmount, Nullable<decimal> iGSTAmount, Nullable<bool> isDraft, Nullable<bool> isProcessed, Nullable<decimal> roundOff, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter debitNoteID)
        {
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var taxableAmountParameter = taxableAmount.HasValue ?
                new ObjectParameter("TaxableAmount", taxableAmount) :
                new ObjectParameter("TaxableAmount", typeof(decimal));
    
            var cGSTAmountParameter = cGSTAmount.HasValue ?
                new ObjectParameter("CGSTAmount", cGSTAmount) :
                new ObjectParameter("CGSTAmount", typeof(decimal));
    
            var sGSTAmountParameter = sGSTAmount.HasValue ?
                new ObjectParameter("SGSTAmount", sGSTAmount) :
                new ObjectParameter("SGSTAmount", typeof(decimal));
    
            var iGSTAmountParameter = iGSTAmount.HasValue ?
                new ObjectParameter("IGSTAmount", iGSTAmount) :
                new ObjectParameter("IGSTAmount", typeof(decimal));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var isProcessedParameter = isProcessed.HasValue ?
                new ObjectParameter("IsProcessed", isProcessed) :
                new ObjectParameter("IsProcessed", typeof(bool));
    
            var roundOffParameter = roundOff.HasValue ?
                new ObjectParameter("RoundOff", roundOff) :
                new ObjectParameter("RoundOff", typeof(decimal));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateSupplierDebitNote", transNoParameter, dateParameter, supplierIDParameter, totalAmountParameter, taxableAmountParameter, cGSTAmountParameter, sGSTAmountParameter, iGSTAmountParameter, isDraftParameter, isProcessedParameter, roundOffParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, debitNoteID);
        }
    
        public virtual int SpGenerateAccountEntryDataUsingSLARules()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGenerateAccountEntryDataUsingSLARules");
        }
    
        public virtual ObjectResult<SpGetAccountCodeAutoComplete_Result> SpGetAccountCodeAutoComplete(string codeHint)
        {
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAccountCodeAutoComplete_Result>("SpGetAccountCodeAutoComplete", codeHintParameter);
        }
    
        public virtual ObjectResult<SpGetAccountHeadAutoComplete_Result> SpGetAccountHeadAutoComplete(string accountNameHint, string accountIDHint, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var accountNameHintParameter = accountNameHint != null ?
                new ObjectParameter("AccountNameHint", accountNameHint) :
                new ObjectParameter("AccountNameHint", typeof(string));
    
            var accountIDHintParameter = accountIDHint != null ?
                new ObjectParameter("AccountIDHint", accountIDHint) :
                new ObjectParameter("AccountIDHint", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAccountHeadAutoComplete_Result>("SpGetAccountHeadAutoComplete", accountNameHintParameter, accountIDHintParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<spGetAccountsPostedValues_Result> spGetAccountsPostedValues(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAccountsPostedValues_Result>("spGetAccountsPostedValues", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<spGetAccountsToBePostedValues_Result> spGetAccountsToBePostedValues(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAccountsToBePostedValues_Result>("spGetAccountsToBePostedValues", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<SpGetAdvanceReceipt_Result> SpGetAdvanceReceipt()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAdvanceReceipt_Result>("SpGetAdvanceReceipt");
        }
    
        public virtual ObjectResult<SpGetAdvanceReceiptTrans_Result> SpGetAdvanceReceiptTrans(Nullable<int> customerID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAdvanceReceiptTrans_Result>("SpGetAdvanceReceiptTrans", customerIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetAdvanceReceiptTransDetails_Result> SpGetAdvanceReceiptTransDetails(Nullable<int> id, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAdvanceReceiptTransDetails_Result>("SpGetAdvanceReceiptTransDetails", idParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetAdvanceReceipyByID_Result> SpGetAdvanceReceipyByID(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAdvanceReceipyByID_Result>("SpGetAdvanceReceipyByID", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<spGetAdvanceRequestTrans_Result> spGetAdvanceRequestTrans(Nullable<int> advanceRequestID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var advanceRequestIDParameter = advanceRequestID.HasValue ?
                new ObjectParameter("AdvanceRequestID", advanceRequestID) :
                new ObjectParameter("AdvanceRequestID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAdvanceRequestTrans_Result>("spGetAdvanceRequestTrans", advanceRequestIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetAdvanceReturn_Result> SpGetAdvanceReturn(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAdvanceReturn_Result>("SpGetAdvanceReturn", finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetBankExpensesDetails_Result> SpGetBankExpensesDetails(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetBankExpensesDetails_Result>("SpGetBankExpensesDetails", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetBankExpensesList_Result> SpGetBankExpensesList(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetBankExpensesList_Result>("SpGetBankExpensesList", finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetBRSBankTransDetails_Result> SpGetBRSBankTransDetails(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetBRSBankTransDetails_Result>("SpGetBRSBankTransDetails", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetBRSDetails_Result> SpGetBRSDetails(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetBRSDetails_Result>("SpGetBRSDetails", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetBRSList_Result> SpGetBRSList(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetBRSList_Result>("SpGetBRSList", finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetBRSTransDetails_Result> SpGetBRSTransDetails(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetBRSTransDetails_Result>("SpGetBRSTransDetails", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetChequeStatusDetails_Result> SpGetChequeStatusDetails(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetChequeStatusDetails_Result>("SpGetChequeStatusDetails", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetChequeStatusList_Result> SpGetChequeStatusList(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetChequeStatusList_Result>("SpGetChequeStatusList", finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCustomerCategoryList_Result> SpGetCustomerCategoryList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCustomerCategoryList_Result>("SpGetCustomerCategoryList");
        }
    
        public virtual ObjectResult<SpGetCustomerCreditNoteList_Result> SpGetCustomerCreditNoteList(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCustomerCreditNoteList_Result>("SpGetCustomerCreditNoteList", finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetDocumentNoAutocomplete_Result> SpGetDocumentNoAutocomplete(string hint, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var hintParameter = hint != null ?
                new ObjectParameter("Hint", hint) :
                new ObjectParameter("Hint", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDocumentNoAutocomplete_Result>("SpGetDocumentNoAutocomplete", hintParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetErrorsDuringSLAMapping_Result> SpGetErrorsDuringSLAMapping()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetErrorsDuringSLAMapping_Result>("SpGetErrorsDuringSLAMapping");
        }
    
        public virtual ObjectResult<SpGetFundTransferDetails_Result> SpGetFundTransferDetails(Nullable<int> iD, Nullable<int> finYEAR, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYEARParameter = finYEAR.HasValue ?
                new ObjectParameter("FinYEAR", finYEAR) :
                new ObjectParameter("FinYEAR", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetFundTransferDetails_Result>("SpGetFundTransferDetails", iDParameter, finYEARParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetFundTransferIssueItems_Result> SpGetFundTransferIssueItems(Nullable<int> issueID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var issueIDParameter = issueID.HasValue ?
                new ObjectParameter("IssueID", issueID) :
                new ObjectParameter("IssueID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetFundTransferIssueItems_Result>("SpGetFundTransferIssueItems", issueIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetFundTransferIssueList_Result> SpGetFundTransferIssueList(Nullable<int> issueLocationID, string issueTransNoHint, string issueLocationHint, string issueBankDetailsHint, string receiptLocationHint, string receiptBankDetailsHint, string amountHint, string modeOfPaymentHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> receiptLocationID, Nullable<int> applicationID)
        {
            var issueLocationIDParameter = issueLocationID.HasValue ?
                new ObjectParameter("IssueLocationID", issueLocationID) :
                new ObjectParameter("IssueLocationID", typeof(int));
    
            var issueTransNoHintParameter = issueTransNoHint != null ?
                new ObjectParameter("IssueTransNoHint", issueTransNoHint) :
                new ObjectParameter("IssueTransNoHint", typeof(string));
    
            var issueLocationHintParameter = issueLocationHint != null ?
                new ObjectParameter("IssueLocationHint", issueLocationHint) :
                new ObjectParameter("IssueLocationHint", typeof(string));
    
            var issueBankDetailsHintParameter = issueBankDetailsHint != null ?
                new ObjectParameter("IssueBankDetailsHint", issueBankDetailsHint) :
                new ObjectParameter("IssueBankDetailsHint", typeof(string));
    
            var receiptLocationHintParameter = receiptLocationHint != null ?
                new ObjectParameter("ReceiptLocationHint", receiptLocationHint) :
                new ObjectParameter("ReceiptLocationHint", typeof(string));
    
            var receiptBankDetailsHintParameter = receiptBankDetailsHint != null ?
                new ObjectParameter("ReceiptBankDetailsHint", receiptBankDetailsHint) :
                new ObjectParameter("ReceiptBankDetailsHint", typeof(string));
    
            var amountHintParameter = amountHint != null ?
                new ObjectParameter("AmountHint", amountHint) :
                new ObjectParameter("AmountHint", typeof(string));
    
            var modeOfPaymentHintParameter = modeOfPaymentHint != null ?
                new ObjectParameter("ModeOfPaymentHint", modeOfPaymentHint) :
                new ObjectParameter("ModeOfPaymentHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var receiptLocationIDParameter = receiptLocationID.HasValue ?
                new ObjectParameter("ReceiptLocationID", receiptLocationID) :
                new ObjectParameter("ReceiptLocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetFundTransferIssueList_Result>("SpGetFundTransferIssueList", issueLocationIDParameter, issueTransNoHintParameter, issueLocationHintParameter, issueBankDetailsHintParameter, receiptLocationHintParameter, receiptBankDetailsHintParameter, amountHintParameter, modeOfPaymentHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, receiptLocationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetFundTransferList_Result> SpGetFundTransferList(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetFundTransferList_Result>("SpGetFundTransferList", finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetFundTransferReceiptByID_Result> SpGetFundTransferReceiptByID(Nullable<int> iD, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetFundTransferReceiptByID_Result>("SpGetFundTransferReceiptByID", iDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetFundTransferReceiptList_Result> SpGetFundTransferReceiptList(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetFundTransferReceiptList_Result>("SpGetFundTransferReceiptList", locationIDParameter);
        }
    
        public virtual ObjectResult<SpGetFundTransferReceiptTransByID_Result> SpGetFundTransferReceiptTransByID(Nullable<int> iD, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetFundTransferReceiptTransByID_Result>("SpGetFundTransferReceiptTransByID", iDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetInstrumentStatusReceivedList_Result> SpGetInstrumentStatusReceivedList(Nullable<System.DateTime> fromReciptDate, Nullable<System.DateTime> toReciptDate, Nullable<int> finYEAR, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromReciptDateParameter = fromReciptDate.HasValue ?
                new ObjectParameter("FromReciptDate", fromReciptDate) :
                new ObjectParameter("FromReciptDate", typeof(System.DateTime));
    
            var toReciptDateParameter = toReciptDate.HasValue ?
                new ObjectParameter("ToReciptDate", toReciptDate) :
                new ObjectParameter("ToReciptDate", typeof(System.DateTime));
    
            var finYEARParameter = finYEAR.HasValue ?
                new ObjectParameter("FinYEAR", finYEAR) :
                new ObjectParameter("FinYEAR", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetInstrumentStatusReceivedList_Result>("SpGetInstrumentStatusReceivedList", fromReciptDateParameter, toReciptDateParameter, finYEARParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetItemsForBankExpenses_Result> SpGetItemsForBankExpenses()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetItemsForBankExpenses_Result>("SpGetItemsForBankExpenses");
        }
    
        public virtual ObjectResult<SpGetItemsForSalesOrder_Result> SpGetItemsForSalesOrder(Nullable<int> salesID, string transNo, string search, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var salesIDParameter = salesID.HasValue ?
                new ObjectParameter("SalesID", salesID) :
                new ObjectParameter("SalesID", typeof(int));
    
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetItemsForSalesOrder_Result>("SpGetItemsForSalesOrder", salesIDParameter, transNoParameter, searchParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetJournalList_Result> SpGetJournalList(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetJournalList_Result>("SpGetJournalList", finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetReceiptVoucher_Result> SpGetReceiptVoucher(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetReceiptVoucher_Result>("SpGetReceiptVoucher", finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetReceiptVoucherDetail_Result> SpGetReceiptVoucherDetail(Nullable<int> receiptVoucherID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var receiptVoucherIDParameter = receiptVoucherID.HasValue ?
                new ObjectParameter("ReceiptVoucherID", receiptVoucherID) :
                new ObjectParameter("ReceiptVoucherID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetReceiptVoucherDetail_Result>("SpGetReceiptVoucherDetail", receiptVoucherIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetReceiptVoucherTrans_Result> SpGetReceiptVoucherTrans(Nullable<int> receiptVoucherID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var receiptVoucherIDParameter = receiptVoucherID.HasValue ?
                new ObjectParameter("ReceiptVoucherID", receiptVoucherID) :
                new ObjectParameter("ReceiptVoucherID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetReceiptVoucherTrans_Result>("SpGetReceiptVoucherTrans", receiptVoucherIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetSLAErrorList_Result> SpGetSLAErrorList(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string type, string dateHint, string transationTypeHint, string keyValueHint, string eventHint, string itemNameHint, string supplierNameHint, string description, string remarks, string documentTableHint, string documentNumberHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var dateHintParameter = dateHint != null ?
                new ObjectParameter("DateHint", dateHint) :
                new ObjectParameter("DateHint", typeof(string));
    
            var transationTypeHintParameter = transationTypeHint != null ?
                new ObjectParameter("TransationTypeHint", transationTypeHint) :
                new ObjectParameter("TransationTypeHint", typeof(string));
    
            var keyValueHintParameter = keyValueHint != null ?
                new ObjectParameter("KeyValueHint", keyValueHint) :
                new ObjectParameter("KeyValueHint", typeof(string));
    
            var eventHintParameter = eventHint != null ?
                new ObjectParameter("EventHint", eventHint) :
                new ObjectParameter("EventHint", typeof(string));
    
            var itemNameHintParameter = itemNameHint != null ?
                new ObjectParameter("ItemNameHint", itemNameHint) :
                new ObjectParameter("ItemNameHint", typeof(string));
    
            var supplierNameHintParameter = supplierNameHint != null ?
                new ObjectParameter("SupplierNameHint", supplierNameHint) :
                new ObjectParameter("SupplierNameHint", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var documentTableHintParameter = documentTableHint != null ?
                new ObjectParameter("DocumentTableHint", documentTableHint) :
                new ObjectParameter("DocumentTableHint", typeof(string));
    
            var documentNumberHintParameter = documentNumberHint != null ?
                new ObjectParameter("DocumentNumberHint", documentNumberHint) :
                new ObjectParameter("DocumentNumberHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSLAErrorList_Result>("SpGetSLAErrorList", fromDateParameter, toDateParameter, typeParameter, dateHintParameter, transationTypeHintParameter, keyValueHintParameter, eventHintParameter, itemNameHintParameter, supplierNameHintParameter, descriptionParameter, remarksParameter, documentTableHintParameter, documentNumberHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetSLAPostedList_Result> SpGetSLAPostedList(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string type, string dateHint, string debitAccountHint, string debitAccountNameHint, string creditAccountHint, string creditAccountNameHint, string amountHint, string documentTableHint, string documentNumberHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var dateHintParameter = dateHint != null ?
                new ObjectParameter("DateHint", dateHint) :
                new ObjectParameter("DateHint", typeof(string));
    
            var debitAccountHintParameter = debitAccountHint != null ?
                new ObjectParameter("DebitAccountHint", debitAccountHint) :
                new ObjectParameter("DebitAccountHint", typeof(string));
    
            var debitAccountNameHintParameter = debitAccountNameHint != null ?
                new ObjectParameter("DebitAccountNameHint", debitAccountNameHint) :
                new ObjectParameter("DebitAccountNameHint", typeof(string));
    
            var creditAccountHintParameter = creditAccountHint != null ?
                new ObjectParameter("CreditAccountHint", creditAccountHint) :
                new ObjectParameter("CreditAccountHint", typeof(string));
    
            var creditAccountNameHintParameter = creditAccountNameHint != null ?
                new ObjectParameter("CreditAccountNameHint", creditAccountNameHint) :
                new ObjectParameter("CreditAccountNameHint", typeof(string));
    
            var amountHintParameter = amountHint != null ?
                new ObjectParameter("AmountHint", amountHint) :
                new ObjectParameter("AmountHint", typeof(string));
    
            var documentTableHintParameter = documentTableHint != null ?
                new ObjectParameter("DocumentTableHint", documentTableHint) :
                new ObjectParameter("DocumentTableHint", typeof(string));
    
            var documentNumberHintParameter = documentNumberHint != null ?
                new ObjectParameter("DocumentNumberHint", documentNumberHint) :
                new ObjectParameter("DocumentNumberHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSLAPostedList_Result>("SpGetSLAPostedList", fromDateParameter, toDateParameter, typeParameter, dateHintParameter, debitAccountHintParameter, debitAccountNameHintParameter, creditAccountHintParameter, creditAccountNameHintParameter, amountHintParameter, documentTableHintParameter, documentNumberHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetSLAToBePostedList_Result> SpGetSLAToBePostedList(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string type, string dateHint, string debitAccountHint, string debitAccountNameHint, string creditAccountHint, string creditAccountNameHint, string amountHint, string itemNameHint, string supplierNameHint, string documentTableHint, string documentNumberHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var dateHintParameter = dateHint != null ?
                new ObjectParameter("DateHint", dateHint) :
                new ObjectParameter("DateHint", typeof(string));
    
            var debitAccountHintParameter = debitAccountHint != null ?
                new ObjectParameter("DebitAccountHint", debitAccountHint) :
                new ObjectParameter("DebitAccountHint", typeof(string));
    
            var debitAccountNameHintParameter = debitAccountNameHint != null ?
                new ObjectParameter("DebitAccountNameHint", debitAccountNameHint) :
                new ObjectParameter("DebitAccountNameHint", typeof(string));
    
            var creditAccountHintParameter = creditAccountHint != null ?
                new ObjectParameter("CreditAccountHint", creditAccountHint) :
                new ObjectParameter("CreditAccountHint", typeof(string));
    
            var creditAccountNameHintParameter = creditAccountNameHint != null ?
                new ObjectParameter("CreditAccountNameHint", creditAccountNameHint) :
                new ObjectParameter("CreditAccountNameHint", typeof(string));
    
            var amountHintParameter = amountHint != null ?
                new ObjectParameter("AmountHint", amountHint) :
                new ObjectParameter("AmountHint", typeof(string));
    
            var itemNameHintParameter = itemNameHint != null ?
                new ObjectParameter("ItemNameHint", itemNameHint) :
                new ObjectParameter("ItemNameHint", typeof(string));
    
            var supplierNameHintParameter = supplierNameHint != null ?
                new ObjectParameter("SupplierNameHint", supplierNameHint) :
                new ObjectParameter("SupplierNameHint", typeof(string));
    
            var documentTableHintParameter = documentTableHint != null ?
                new ObjectParameter("DocumentTableHint", documentTableHint) :
                new ObjectParameter("DocumentTableHint", typeof(string));
    
            var documentNumberHintParameter = documentNumberHint != null ?
                new ObjectParameter("DocumentNumberHint", documentNumberHint) :
                new ObjectParameter("DocumentNumberHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSLAToBePostedList_Result>("SpGetSLAToBePostedList", fromDateParameter, toDateParameter, typeParameter, dateHintParameter, debitAccountHintParameter, debitAccountNameHintParameter, creditAccountHintParameter, creditAccountNameHintParameter, amountHintParameter, itemNameHintParameter, supplierNameHintParameter, documentTableHintParameter, documentNumberHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetSLAValuesList_Result> SpGetSLAValuesList(string type, string dateHint, string transationTypeHint, string keyValueHint, string amountHint, string eventHint, string documentTableHint, string documentNumberHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var dateHintParameter = dateHint != null ?
                new ObjectParameter("DateHint", dateHint) :
                new ObjectParameter("DateHint", typeof(string));
    
            var transationTypeHintParameter = transationTypeHint != null ?
                new ObjectParameter("TransationTypeHint", transationTypeHint) :
                new ObjectParameter("TransationTypeHint", typeof(string));
    
            var keyValueHintParameter = keyValueHint != null ?
                new ObjectParameter("KeyValueHint", keyValueHint) :
                new ObjectParameter("KeyValueHint", typeof(string));
    
            var amountHintParameter = amountHint != null ?
                new ObjectParameter("AmountHint", amountHint) :
                new ObjectParameter("AmountHint", typeof(string));
    
            var eventHintParameter = eventHint != null ?
                new ObjectParameter("EventHint", eventHint) :
                new ObjectParameter("EventHint", typeof(string));
    
            var documentTableHintParameter = documentTableHint != null ?
                new ObjectParameter("DocumentTableHint", documentTableHint) :
                new ObjectParameter("DocumentTableHint", typeof(string));
    
            var documentNumberHintParameter = documentNumberHint != null ?
                new ObjectParameter("DocumentNumberHint", documentNumberHint) :
                new ObjectParameter("DocumentNumberHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSLAValuesList_Result>("SpGetSLAValuesList", typeParameter, dateHintParameter, transationTypeHintParameter, keyValueHintParameter, amountHintParameter, eventHintParameter, documentTableHintParameter, documentNumberHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetStatusAsPerBooksForBRS_Result> SpGetStatusAsPerBooksForBRS(Nullable<System.DateTime> fromTransactionDate, Nullable<System.DateTime> toTransactionNumber, Nullable<int> finYEAR, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromTransactionDateParameter = fromTransactionDate.HasValue ?
                new ObjectParameter("FromTransactionDate", fromTransactionDate) :
                new ObjectParameter("FromTransactionDate", typeof(System.DateTime));
    
            var toTransactionNumberParameter = toTransactionNumber.HasValue ?
                new ObjectParameter("ToTransactionNumber", toTransactionNumber) :
                new ObjectParameter("ToTransactionNumber", typeof(System.DateTime));
    
            var finYEARParameter = finYEAR.HasValue ?
                new ObjectParameter("FinYEAR", finYEAR) :
                new ObjectParameter("FinYEAR", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetStatusAsPerBooksForBRS_Result>("SpGetStatusAsPerBooksForBRS", fromTransactionDateParameter, toTransactionNumberParameter, finYEARParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetTransTypeAutoComplete_Result> SpGetTransTypeAutoComplete(string hint)
        {
            var hintParameter = hint != null ?
                new ObjectParameter("Hint", hint) :
                new ObjectParameter("Hint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetTransTypeAutoComplete_Result>("SpGetTransTypeAutoComplete", hintParameter);
        }
    
        public virtual ObjectResult<SpGetTreasuryDetails_Result> SpGetTreasuryDetails(string type)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetTreasuryDetails_Result>("SpGetTreasuryDetails", typeParameter);
        }
    
        public virtual ObjectResult<SpGetTreasuryType_Result> SpGetTreasuryType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetTreasuryType_Result>("SpGetTreasuryType");
        }
    
        public virtual ObjectResult<SpGetUnMappedValuesToSLA_Result> SpGetUnMappedValuesToSLA()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetUnMappedValuesToSLA_Result>("SpGetUnMappedValuesToSLA");
        }
    
        public virtual ObjectResult<SpGetUnProcessedAdvancePayment_Result> SpGetUnProcessedAdvancePayment(Nullable<int> supplierID, Nullable<int> employeeID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetUnProcessedAdvancePayment_Result>("SpGetUnProcessedAdvancePayment", supplierIDParameter, employeeIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetUnProcessedAdvancePaymentTrans_Result> SpGetUnProcessedAdvancePaymentTrans(Nullable<int> advanceID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var advanceIDParameter = advanceID.HasValue ?
                new ObjectParameter("AdvanceID", advanceID) :
                new ObjectParameter("AdvanceID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetUnProcessedAdvancePaymentTrans_Result>("SpGetUnProcessedAdvancePaymentTrans", advanceIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpInsertReceivables(string transNo, Nullable<System.DateTime> transDate, string receivableType, Nullable<int> referenceID, string documentNo, Nullable<int> partyID, Nullable<decimal> receivableAmount, string description, Nullable<decimal> receivedAmount, string status, Nullable<decimal> discount, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter receivableID)
        {
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var transDateParameter = transDate.HasValue ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(System.DateTime));
    
            var receivableTypeParameter = receivableType != null ?
                new ObjectParameter("ReceivableType", receivableType) :
                new ObjectParameter("ReceivableType", typeof(string));
    
            var referenceIDParameter = referenceID.HasValue ?
                new ObjectParameter("ReferenceID", referenceID) :
                new ObjectParameter("ReferenceID", typeof(int));
    
            var documentNoParameter = documentNo != null ?
                new ObjectParameter("DocumentNo", documentNo) :
                new ObjectParameter("DocumentNo", typeof(string));
    
            var partyIDParameter = partyID.HasValue ?
                new ObjectParameter("PartyID", partyID) :
                new ObjectParameter("PartyID", typeof(int));
    
            var receivableAmountParameter = receivableAmount.HasValue ?
                new ObjectParameter("ReceivableAmount", receivableAmount) :
                new ObjectParameter("ReceivableAmount", typeof(decimal));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var receivedAmountParameter = receivedAmount.HasValue ?
                new ObjectParameter("ReceivedAmount", receivedAmount) :
                new ObjectParameter("ReceivedAmount", typeof(decimal));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpInsertReceivables", transNoParameter, transDateParameter, receivableTypeParameter, referenceIDParameter, documentNoParameter, partyIDParameter, receivableAmountParameter, descriptionParameter, receivedAmountParameter, statusParameter, discountParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, receivableID);
        }
    
        public virtual int SpUpdateBRS(Nullable<int> iD, Nullable<System.DateTime> date, Nullable<int> bankID, Nullable<System.DateTime> fromTransactionDate, Nullable<System.DateTime> toTransactionDate, Nullable<int> attachmentID, Nullable<bool> isDraft, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var fromTransactionDateParameter = fromTransactionDate.HasValue ?
                new ObjectParameter("FromTransactionDate", fromTransactionDate) :
                new ObjectParameter("FromTransactionDate", typeof(System.DateTime));
    
            var toTransactionDateParameter = toTransactionDate.HasValue ?
                new ObjectParameter("ToTransactionDate", toTransactionDate) :
                new ObjectParameter("ToTransactionDate", typeof(System.DateTime));
    
            var attachmentIDParameter = attachmentID.HasValue ?
                new ObjectParameter("AttachmentID", attachmentID) :
                new ObjectParameter("AttachmentID", typeof(int));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateBRS", iDParameter, dateParameter, bankIDParameter, fromTransactionDateParameter, toTransactionDateParameter, attachmentIDParameter, isDraftParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateChequeStatus(Nullable<int> iD, Nullable<System.DateTime> date, string instrumentStatus, Nullable<System.DateTime> receiptDateFrom, Nullable<System.DateTime> receiptDateTo, Nullable<bool> isDraft, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var instrumentStatusParameter = instrumentStatus != null ?
                new ObjectParameter("InstrumentStatus", instrumentStatus) :
                new ObjectParameter("InstrumentStatus", typeof(string));
    
            var receiptDateFromParameter = receiptDateFrom.HasValue ?
                new ObjectParameter("ReceiptDateFrom", receiptDateFrom) :
                new ObjectParameter("ReceiptDateFrom", typeof(System.DateTime));
    
            var receiptDateToParameter = receiptDateTo.HasValue ?
                new ObjectParameter("ReceiptDateTo", receiptDateTo) :
                new ObjectParameter("ReceiptDateTo", typeof(System.DateTime));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateChequeStatus", iDParameter, dateParameter, instrumentStatusParameter, receiptDateFromParameter, receiptDateToParameter, isDraftParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateFundTransfer(Nullable<int> iD, Nullable<System.DateTime> date, Nullable<decimal> totalAmount, Nullable<bool> isDraft, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateFundTransfer", iDParameter, dateParameter, totalAmountParameter, isDraftParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateJournal(Nullable<int> iD, Nullable<System.DateTime> date, Nullable<decimal> totalCreditAmount, Nullable<decimal> totalDebitAmount, Nullable<int> currencyID, Nullable<bool> isDraft, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var totalCreditAmountParameter = totalCreditAmount.HasValue ?
                new ObjectParameter("TotalCreditAmount", totalCreditAmount) :
                new ObjectParameter("TotalCreditAmount", typeof(decimal));
    
            var totalDebitAmountParameter = totalDebitAmount.HasValue ?
                new ObjectParameter("TotalDebitAmount", totalDebitAmount) :
                new ObjectParameter("TotalDebitAmount", typeof(decimal));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateJournal", iDParameter, dateParameter, totalCreditAmountParameter, totalDebitAmountParameter, currencyIDParameter, isDraftParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateReceiptVoucher(Nullable<int> iD, Nullable<System.DateTime> voucherDate, Nullable<int> customerID, Nullable<decimal> receiptAmount, Nullable<int> paymentTypeID, Nullable<int> bankID, Nullable<System.DateTime> date, string referenceNo, string remarks, Nullable<bool> isDraft, string settlements, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var voucherDateParameter = voucherDate.HasValue ?
                new ObjectParameter("VoucherDate", voucherDate) :
                new ObjectParameter("VoucherDate", typeof(System.DateTime));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var receiptAmountParameter = receiptAmount.HasValue ?
                new ObjectParameter("ReceiptAmount", receiptAmount) :
                new ObjectParameter("ReceiptAmount", typeof(decimal));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var referenceNoParameter = referenceNo != null ?
                new ObjectParameter("ReferenceNo", referenceNo) :
                new ObjectParameter("ReferenceNo", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var settlementsParameter = settlements != null ?
                new ObjectParameter("Settlements", settlements) :
                new ObjectParameter("Settlements", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateReceiptVoucher", iDParameter, voucherDateParameter, customerIDParameter, receiptAmountParameter, paymentTypeIDParameter, bankIDParameter, dateParameter, referenceNoParameter, remarksParameter, isDraftParameter, settlementsParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCancelTransaction(Nullable<int> iD, string tableName, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCancelTransaction", iDParameter, tableNameParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateBatch(string itemType, Nullable<int> itemID, string batchNo, string customBatchNo, Nullable<System.DateTime> manufacturingDate, Nullable<System.DateTime> expiryDate, Nullable<int> batchTypeID, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter batchID)
        {
            var itemTypeParameter = itemType != null ?
                new ObjectParameter("ItemType", itemType) :
                new ObjectParameter("ItemType", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchNoParameter = batchNo != null ?
                new ObjectParameter("BatchNo", batchNo) :
                new ObjectParameter("BatchNo", typeof(string));
    
            var customBatchNoParameter = customBatchNo != null ?
                new ObjectParameter("CustomBatchNo", customBatchNo) :
                new ObjectParameter("CustomBatchNo", typeof(string));
    
            var manufacturingDateParameter = manufacturingDate.HasValue ?
                new ObjectParameter("ManufacturingDate", manufacturingDate) :
                new ObjectParameter("ManufacturingDate", typeof(System.DateTime));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateBatch", itemTypeParameter, itemIDParameter, batchNoParameter, customBatchNoParameter, manufacturingDateParameter, expiryDateParameter, batchTypeIDParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter, batchID);
        }
    
        public virtual ObjectResult<SpGetConfigByUser_Result> SpGetConfigByUser(string configName, Nullable<int> userID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var configNameParameter = configName != null ?
                new ObjectParameter("ConfigName", configName) :
                new ObjectParameter("ConfigName", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetConfigByUser_Result>("SpGetConfigByUser", configNameParameter, userIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCurrentFinYear_Result> SpGetCurrentFinYear(Nullable<int> applicationID)
        {
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCurrentFinYear_Result>("SpGetCurrentFinYear", applicationIDParameter);
        }
    
        public virtual int SpIsCodeAlreadyExists(string tableName, string fieldName, string code, Nullable<int> iD, ObjectParameter isExists)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("tableName", tableName) :
                new ObjectParameter("tableName", typeof(string));
    
            var fieldNameParameter = fieldName != null ?
                new ObjectParameter("FieldName", fieldName) :
                new ObjectParameter("FieldName", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpIsCodeAlreadyExists", tableNameParameter, fieldNameParameter, codeParameter, iDParameter, isExists);
        }
    
        public virtual int SpSuspendTransaction(Nullable<int> iD, string tableName, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter retValue)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpSuspendTransaction", iDParameter, tableNameParameter, finYearParameter, locationIDParameter, applicationIDParameter, retValue);
        }
    
        public virtual int SpUpdateSerialNo(string formName, string fieldName, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter serialNo)
        {
            var formNameParameter = formName != null ?
                new ObjectParameter("FormName", formName) :
                new ObjectParameter("FormName", typeof(string));
    
            var fieldNameParameter = fieldName != null ?
                new ObjectParameter("FieldName", fieldName) :
                new ObjectParameter("FieldName", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateSerialNo", formNameParameter, fieldNameParameter, finYearParameter, locationIDParameter, applicationIDParameter, serialNo);
        }
    
        public virtual ObjectResult<SpGetReceiptVoucherList_Result> SpGetReceiptVoucherList(string type, string receiptNoHint, string invoiceDateHint, string customerHint, string receiptAmountHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var receiptNoHintParameter = receiptNoHint != null ?
                new ObjectParameter("ReceiptNoHint", receiptNoHint) :
                new ObjectParameter("ReceiptNoHint", typeof(string));
    
            var invoiceDateHintParameter = invoiceDateHint != null ?
                new ObjectParameter("InvoiceDateHint", invoiceDateHint) :
                new ObjectParameter("InvoiceDateHint", typeof(string));
    
            var customerHintParameter = customerHint != null ?
                new ObjectParameter("CustomerHint", customerHint) :
                new ObjectParameter("CustomerHint", typeof(string));
    
            var receiptAmountHintParameter = receiptAmountHint != null ?
                new ObjectParameter("ReceiptAmountHint", receiptAmountHint) :
                new ObjectParameter("ReceiptAmountHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetReceiptVoucherList_Result>("SpGetReceiptVoucherList", typeParameter, receiptNoHintParameter, invoiceDateHintParameter, customerHintParameter, receiptAmountHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateCustomerCreditNoteTrans(Nullable<int> creditNoteID, string referenceInvoiceNumber, Nullable<System.DateTime> referenceDocumentDate, Nullable<int> itemID, Nullable<decimal> quantity, Nullable<decimal> rate, Nullable<decimal> netAmount, Nullable<int> departmentID, Nullable<int> creditNoteLocationID, Nullable<int> employeeID, Nullable<int> interCompanyID, Nullable<int> projectID, string remarks, Nullable<decimal> taxableAmount, Nullable<decimal> cGSTAmount, Nullable<decimal> sGSTAmount, Nullable<decimal> iGSTAmount, Nullable<decimal> gSTPercentage, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var creditNoteIDParameter = creditNoteID.HasValue ?
                new ObjectParameter("CreditNoteID", creditNoteID) :
                new ObjectParameter("CreditNoteID", typeof(int));
    
            var referenceInvoiceNumberParameter = referenceInvoiceNumber != null ?
                new ObjectParameter("ReferenceInvoiceNumber", referenceInvoiceNumber) :
                new ObjectParameter("ReferenceInvoiceNumber", typeof(string));
    
            var referenceDocumentDateParameter = referenceDocumentDate.HasValue ?
                new ObjectParameter("ReferenceDocumentDate", referenceDocumentDate) :
                new ObjectParameter("ReferenceDocumentDate", typeof(System.DateTime));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var creditNoteLocationIDParameter = creditNoteLocationID.HasValue ?
                new ObjectParameter("CreditNoteLocationID", creditNoteLocationID) :
                new ObjectParameter("CreditNoteLocationID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var interCompanyIDParameter = interCompanyID.HasValue ?
                new ObjectParameter("InterCompanyID", interCompanyID) :
                new ObjectParameter("InterCompanyID", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var taxableAmountParameter = taxableAmount.HasValue ?
                new ObjectParameter("TaxableAmount", taxableAmount) :
                new ObjectParameter("TaxableAmount", typeof(decimal));
    
            var cGSTAmountParameter = cGSTAmount.HasValue ?
                new ObjectParameter("CGSTAmount", cGSTAmount) :
                new ObjectParameter("CGSTAmount", typeof(decimal));
    
            var sGSTAmountParameter = sGSTAmount.HasValue ?
                new ObjectParameter("SGSTAmount", sGSTAmount) :
                new ObjectParameter("SGSTAmount", typeof(decimal));
    
            var iGSTAmountParameter = iGSTAmount.HasValue ?
                new ObjectParameter("IGSTAmount", iGSTAmount) :
                new ObjectParameter("IGSTAmount", typeof(decimal));
    
            var gSTPercentageParameter = gSTPercentage.HasValue ?
                new ObjectParameter("GSTPercentage", gSTPercentage) :
                new ObjectParameter("GSTPercentage", typeof(decimal));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateCustomerCreditNoteTrans", creditNoteIDParameter, referenceInvoiceNumberParameter, referenceDocumentDateParameter, itemIDParameter, quantityParameter, rateParameter, netAmountParameter, departmentIDParameter, creditNoteLocationIDParameter, employeeIDParameter, interCompanyIDParameter, projectIDParameter, remarksParameter, taxableAmountParameter, cGSTAmountParameter, sGSTAmountParameter, iGSTAmountParameter, gSTPercentageParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateSupplierDebitNoteTrans(Nullable<int> debitNoteID, string referenceInvoiceNumber, Nullable<System.DateTime> referenceDocumentDate, Nullable<int> itemID, Nullable<decimal> quantity, Nullable<decimal> rate, Nullable<decimal> netAmount, Nullable<int> departmentID, Nullable<int> debitNoteLocationID, Nullable<int> employeeID, Nullable<int> interCompanyID, Nullable<int> projectID, string remarks, Nullable<decimal> taxableAmount, Nullable<decimal> sGSTAmount, Nullable<decimal> cGSTAmount, Nullable<decimal> iGSTAmount, Nullable<decimal> gSTPercentage, Nullable<int> purchaseReturnID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var debitNoteIDParameter = debitNoteID.HasValue ?
                new ObjectParameter("DebitNoteID", debitNoteID) :
                new ObjectParameter("DebitNoteID", typeof(int));
    
            var referenceInvoiceNumberParameter = referenceInvoiceNumber != null ?
                new ObjectParameter("ReferenceInvoiceNumber", referenceInvoiceNumber) :
                new ObjectParameter("ReferenceInvoiceNumber", typeof(string));
    
            var referenceDocumentDateParameter = referenceDocumentDate.HasValue ?
                new ObjectParameter("ReferenceDocumentDate", referenceDocumentDate) :
                new ObjectParameter("ReferenceDocumentDate", typeof(System.DateTime));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var debitNoteLocationIDParameter = debitNoteLocationID.HasValue ?
                new ObjectParameter("DebitNoteLocationID", debitNoteLocationID) :
                new ObjectParameter("DebitNoteLocationID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var interCompanyIDParameter = interCompanyID.HasValue ?
                new ObjectParameter("InterCompanyID", interCompanyID) :
                new ObjectParameter("InterCompanyID", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var taxableAmountParameter = taxableAmount.HasValue ?
                new ObjectParameter("TaxableAmount", taxableAmount) :
                new ObjectParameter("TaxableAmount", typeof(decimal));
    
            var sGSTAmountParameter = sGSTAmount.HasValue ?
                new ObjectParameter("SGSTAmount", sGSTAmount) :
                new ObjectParameter("SGSTAmount", typeof(decimal));
    
            var cGSTAmountParameter = cGSTAmount.HasValue ?
                new ObjectParameter("CGSTAmount", cGSTAmount) :
                new ObjectParameter("CGSTAmount", typeof(decimal));
    
            var iGSTAmountParameter = iGSTAmount.HasValue ?
                new ObjectParameter("IGSTAmount", iGSTAmount) :
                new ObjectParameter("IGSTAmount", typeof(decimal));
    
            var gSTPercentageParameter = gSTPercentage.HasValue ?
                new ObjectParameter("GSTPercentage", gSTPercentage) :
                new ObjectParameter("GSTPercentage", typeof(decimal));
    
            var purchaseReturnIDParameter = purchaseReturnID.HasValue ?
                new ObjectParameter("PurchaseReturnID", purchaseReturnID) :
                new ObjectParameter("PurchaseReturnID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateSupplierDebitNoteTrans", debitNoteIDParameter, referenceInvoiceNumberParameter, referenceDocumentDateParameter, itemIDParameter, quantityParameter, rateParameter, netAmountParameter, departmentIDParameter, debitNoteLocationIDParameter, employeeIDParameter, interCompanyIDParameter, projectIDParameter, remarksParameter, taxableAmountParameter, sGSTAmountParameter, cGSTAmountParameter, iGSTAmountParameter, gSTPercentageParameter, purchaseReturnIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetLocationwiseBanks_Result> SpGetLocationwiseBanks(Nullable<int> userID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetLocationwiseBanks_Result>("SpGetLocationwiseBanks", userIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpInsertReceiptSettlement(Nullable<int> receiptVoucherID, string settlements, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var receiptVoucherIDParameter = receiptVoucherID.HasValue ?
                new ObjectParameter("ReceiptVoucherID", receiptVoucherID) :
                new ObjectParameter("ReceiptVoucherID", typeof(int));
    
            var settlementsParameter = settlements != null ?
                new ObjectParameter("Settlements", settlements) :
                new ObjectParameter("Settlements", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpInsertReceiptSettlement", receiptVoucherIDParameter, settlementsParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateReceiptVoucher(string voucherNo, Nullable<System.DateTime> voucherDate, Nullable<int> customerID, Nullable<decimal> receiptAmount, Nullable<int> paymentTypeID, Nullable<int> bankID, Nullable<System.DateTime> date, string referenceNo, string remarks, Nullable<bool> isDraft, string settlements, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter receiptVoucherID, string receiverBankName, string bankInstrumentNumber, string checqueDate)
        {
            var voucherNoParameter = voucherNo != null ?
                new ObjectParameter("VoucherNo", voucherNo) :
                new ObjectParameter("VoucherNo", typeof(string));
    
            var voucherDateParameter = voucherDate.HasValue ?
                new ObjectParameter("VoucherDate", voucherDate) :
                new ObjectParameter("VoucherDate", typeof(System.DateTime));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var receiptAmountParameter = receiptAmount.HasValue ?
                new ObjectParameter("ReceiptAmount", receiptAmount) :
                new ObjectParameter("ReceiptAmount", typeof(decimal));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var referenceNoParameter = referenceNo != null ?
                new ObjectParameter("ReferenceNo", referenceNo) :
                new ObjectParameter("ReferenceNo", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var settlementsParameter = settlements != null ?
                new ObjectParameter("Settlements", settlements) :
                new ObjectParameter("Settlements", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var receiverBankNameParameter = receiverBankName != null ?
                new ObjectParameter("ReceiverBankName", receiverBankName) :
                new ObjectParameter("ReceiverBankName", typeof(string));
    
            var bankInstrumentNumberParameter = bankInstrumentNumber != null ?
                new ObjectParameter("BankInstrumentNumber", bankInstrumentNumber) :
                new ObjectParameter("BankInstrumentNumber", typeof(string));
    
            var checqueDateParameter = checqueDate != null ?
                new ObjectParameter("checqueDate", checqueDate) :
                new ObjectParameter("checqueDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateReceiptVoucher", voucherNoParameter, voucherDateParameter, customerIDParameter, receiptAmountParameter, paymentTypeIDParameter, bankIDParameter, dateParameter, referenceNoParameter, remarksParameter, isDraftParameter, settlementsParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, receiptVoucherID, receiverBankNameParameter, bankInstrumentNumberParameter, checqueDateParameter);
        }
    
        public virtual ObjectResult<SpGetBanklist_Result> SpGetBanklist(Nullable<int> userID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetBanklist_Result>("SpGetBanklist", userIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetFundTransferTransDetails_Result> SpGetFundTransferTransDetails(Nullable<int> iD, Nullable<int> userID, Nullable<int> finYEAR, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYEARParameter = finYEAR.HasValue ?
                new ObjectParameter("FinYEAR", finYEAR) :
                new ObjectParameter("FinYEAR", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetFundTransferTransDetails_Result>("SpGetFundTransferTransDetails", iDParameter, userIDParameter, finYEARParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetBankName_Result> SpGetBankName(string receiptOrPayment, string type, Nullable<int> userID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var receiptOrPaymentParameter = receiptOrPayment != null ?
                new ObjectParameter("ReceiptOrPayment", receiptOrPayment) :
                new ObjectParameter("ReceiptOrPayment", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetBankName_Result>("SpGetBankName", receiptOrPaymentParameter, typeParameter, userIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetInstrumentStatusList_Result> SpGetInstrumentStatusList(Nullable<System.DateTime> fromReciptDate, Nullable<System.DateTime> toReciptDate, string chequeStatus, Nullable<int> finYEAR, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromReciptDateParameter = fromReciptDate.HasValue ?
                new ObjectParameter("FromReciptDate", fromReciptDate) :
                new ObjectParameter("FromReciptDate", typeof(System.DateTime));
    
            var toReciptDateParameter = toReciptDate.HasValue ?
                new ObjectParameter("ToReciptDate", toReciptDate) :
                new ObjectParameter("ToReciptDate", typeof(System.DateTime));
    
            var chequeStatusParameter = chequeStatus != null ?
                new ObjectParameter("ChequeStatus", chequeStatus) :
                new ObjectParameter("ChequeStatus", typeof(string));
    
            var finYEARParameter = finYEAR.HasValue ?
                new ObjectParameter("FinYEAR", finYEAR) :
                new ObjectParameter("FinYEAR", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetInstrumentStatusList_Result>("SpGetInstrumentStatusList", fromReciptDateParameter, toReciptDateParameter, chequeStatusParameter, finYEARParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetChequeStatusTransDetails_Result> SpGetChequeStatusTransDetails(Nullable<int> iD, Nullable<int> fInYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var fInYearParameter = fInYear.HasValue ?
                new ObjectParameter("FInYear", fInYear) :
                new ObjectParameter("FInYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetChequeStatusTransDetails_Result>("SpGetChequeStatusTransDetails", iDParameter, fInYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetBankForCounterSales_Result> SpGetBankForCounterSales(string type, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetBankForCounterSales_Result>("SpGetBankForCounterSales", typeParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateAdvanceReturn(string advanceReturnNo, Nullable<System.DateTime> advanceReturnDate, string advanceReturnCategory, Nullable<int> supplierID, Nullable<int> employeeID, Nullable<decimal> amount, Nullable<bool> isDraft, Nullable<int> paymentTypeID, Nullable<int> bankID, string referenceNumber, string remarks, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter advanceReturnID)
        {
            var advanceReturnNoParameter = advanceReturnNo != null ?
                new ObjectParameter("AdvanceReturnNo", advanceReturnNo) :
                new ObjectParameter("AdvanceReturnNo", typeof(string));
    
            var advanceReturnDateParameter = advanceReturnDate.HasValue ?
                new ObjectParameter("AdvanceReturnDate", advanceReturnDate) :
                new ObjectParameter("AdvanceReturnDate", typeof(System.DateTime));
    
            var advanceReturnCategoryParameter = advanceReturnCategory != null ?
                new ObjectParameter("AdvanceReturnCategory", advanceReturnCategory) :
                new ObjectParameter("AdvanceReturnCategory", typeof(string));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var referenceNumberParameter = referenceNumber != null ?
                new ObjectParameter("ReferenceNumber", referenceNumber) :
                new ObjectParameter("ReferenceNumber", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateAdvanceReturn", advanceReturnNoParameter, advanceReturnDateParameter, advanceReturnCategoryParameter, supplierIDParameter, employeeIDParameter, amountParameter, isDraftParameter, paymentTypeIDParameter, bankIDParameter, referenceNumberParameter, remarksParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, advanceReturnID);
        }
    
        public virtual ObjectResult<SpGetAdvanceReturnDetail_Result> SpGetAdvanceReturnDetail(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAdvanceReturnDetail_Result>("SpGetAdvanceReturnDetail", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateAdvanceReturn(Nullable<int> iD, Nullable<System.DateTime> advanceReturnDate, string advanceReturnCategory, Nullable<int> supplierID, Nullable<int> employeeID, Nullable<decimal> amount, Nullable<bool> isDraft, Nullable<int> paymentTypeID, Nullable<int> bankID, string referenceNumber, string remarks, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var advanceReturnDateParameter = advanceReturnDate.HasValue ?
                new ObjectParameter("AdvanceReturnDate", advanceReturnDate) :
                new ObjectParameter("AdvanceReturnDate", typeof(System.DateTime));
    
            var advanceReturnCategoryParameter = advanceReturnCategory != null ?
                new ObjectParameter("AdvanceReturnCategory", advanceReturnCategory) :
                new ObjectParameter("AdvanceReturnCategory", typeof(string));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var referenceNumberParameter = referenceNumber != null ?
                new ObjectParameter("ReferenceNumber", referenceNumber) :
                new ObjectParameter("ReferenceNumber", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateAdvanceReturn", iDParameter, advanceReturnDateParameter, advanceReturnCategoryParameter, supplierIDParameter, employeeIDParameter, amountParameter, isDraftParameter, paymentTypeIDParameter, bankIDParameter, referenceNumberParameter, remarksParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetAdvanceReturnTrans_Result> SpGetAdvanceReturnTrans(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAdvanceReturnTrans_Result>("SpGetAdvanceReturnTrans", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetItemName_Result> SpGetItemName()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetItemName_Result>("SpGetItemName");
        }
    
        public virtual ObjectResult<SpGetAdvanceRequestByEmployeeID_Result> SpGetAdvanceRequestByEmployeeID(Nullable<int> employeeID, Nullable<int> isOfficial, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var isOfficialParameter = isOfficial.HasValue ?
                new ObjectParameter("IsOfficial", isOfficial) :
                new ObjectParameter("IsOfficial", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAdvanceRequestByEmployeeID_Result>("SpGetAdvanceRequestByEmployeeID", employeeIDParameter, isOfficialParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetAdvancePaymentTrans_Result> SpGetAdvancePaymentTrans(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAdvancePaymentTrans_Result>("SpGetAdvancePaymentTrans", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateAdvanceDetails(Nullable<int> advanceID, string transNo, Nullable<int> transID, Nullable<System.DateTime> pODate, string pOTerms, Nullable<int> itemID, Nullable<decimal> amount, Nullable<int> tDSID, Nullable<decimal> tDSAmount, string remarks, Nullable<bool> isDraft, Nullable<decimal> advance, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var advanceIDParameter = advanceID.HasValue ?
                new ObjectParameter("AdvanceID", advanceID) :
                new ObjectParameter("AdvanceID", typeof(int));
    
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var transIDParameter = transID.HasValue ?
                new ObjectParameter("TransID", transID) :
                new ObjectParameter("TransID", typeof(int));
    
            var pODateParameter = pODate.HasValue ?
                new ObjectParameter("PODate", pODate) :
                new ObjectParameter("PODate", typeof(System.DateTime));
    
            var pOTermsParameter = pOTerms != null ?
                new ObjectParameter("POTerms", pOTerms) :
                new ObjectParameter("POTerms", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var tDSIDParameter = tDSID.HasValue ?
                new ObjectParameter("TDSID", tDSID) :
                new ObjectParameter("TDSID", typeof(int));
    
            var tDSAmountParameter = tDSAmount.HasValue ?
                new ObjectParameter("TDSAmount", tDSAmount) :
                new ObjectParameter("TDSAmount", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var advanceParameter = advance.HasValue ?
                new ObjectParameter("Advance", advance) :
                new ObjectParameter("Advance", typeof(decimal));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateAdvanceDetails", advanceIDParameter, transNoParameter, transIDParameter, pODateParameter, pOTermsParameter, itemIDParameter, amountParameter, tDSIDParameter, tDSAmountParameter, remarksParameter, isDraftParameter, advanceParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateAdvancePayment(Nullable<int> iD, Nullable<int> paymentTypeID, string bankName, string referenceNo, Nullable<decimal> amount, Nullable<bool> isDraft, Nullable<decimal> netAmount, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> createdUserID, ObjectParameter retValue)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(int));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var referenceNoParameter = referenceNo != null ?
                new ObjectParameter("ReferenceNo", referenceNo) :
                new ObjectParameter("ReferenceNo", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var netAmountParameter = netAmount.HasValue ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(decimal));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateAdvancePayment", iDParameter, paymentTypeIDParameter, bankNameParameter, referenceNoParameter, amountParameter, isDraftParameter, netAmountParameter, finYearParameter, locationIDParameter, applicationIDParameter, createdUserIDParameter, retValue);
        }
    
        public virtual int SpUpdateBankExpenses(Nullable<int> iD, Nullable<System.DateTime> transactionDate, Nullable<int> bankID, Nullable<decimal> amount, Nullable<bool> isDraft, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> createdUserID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateBankExpenses", iDParameter, transactionDateParameter, bankIDParameter, amountParameter, isDraftParameter, finYearParameter, locationIDParameter, applicationIDParameter, createdUserIDParameter);
        }
    
        public virtual ObjectResult<SpGetBankExpensesTransDetails_Result> SpGetBankExpensesTransDetails(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetBankExpensesTransDetails_Result>("SpGetBankExpensesTransDetails", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateCustomerReturnVoucher(string voucherNo, Nullable<System.DateTime> voucherDate, Nullable<int> customerID, Nullable<int> paymentTypeID, Nullable<int> bankID, string bankReferenceNumber, Nullable<bool> isDraft, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter customerReturnID)
        {
            var voucherNoParameter = voucherNo != null ?
                new ObjectParameter("VoucherNo", voucherNo) :
                new ObjectParameter("VoucherNo", typeof(string));
    
            var voucherDateParameter = voucherDate.HasValue ?
                new ObjectParameter("VoucherDate", voucherDate) :
                new ObjectParameter("VoucherDate", typeof(System.DateTime));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var bankReferenceNumberParameter = bankReferenceNumber != null ?
                new ObjectParameter("BankReferenceNumber", bankReferenceNumber) :
                new ObjectParameter("BankReferenceNumber", typeof(string));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateCustomerReturnVoucher", voucherNoParameter, voucherDateParameter, customerIDParameter, paymentTypeIDParameter, bankIDParameter, bankReferenceNumberParameter, isDraftParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, customerReturnID);
        }
    
        public virtual int SpCreateCustomerReturnVoucherTrans(Nullable<int> customerReturnID, Nullable<decimal> amount, string remarks, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter retValue)
        {
            var customerReturnIDParameter = customerReturnID.HasValue ?
                new ObjectParameter("CustomerReturnID", customerReturnID) :
                new ObjectParameter("CustomerReturnID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateCustomerReturnVoucherTrans", customerReturnIDParameter, amountParameter, remarksParameter, finYearParameter, locationIDParameter, applicationIDParameter, retValue);
        }
    
        public virtual int SpUpdateCustomerReturnVoucher(Nullable<int> iD, Nullable<System.DateTime> voucherDate, Nullable<int> paymentTypeID, Nullable<int> bankID, string bankReferenceNo, Nullable<bool> isDraft, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var voucherDateParameter = voucherDate.HasValue ?
                new ObjectParameter("VoucherDate", voucherDate) :
                new ObjectParameter("VoucherDate", typeof(System.DateTime));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var bankReferenceNoParameter = bankReferenceNo != null ?
                new ObjectParameter("BankReferenceNo", bankReferenceNo) :
                new ObjectParameter("BankReferenceNo", typeof(string));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateCustomerReturnVoucher", iDParameter, voucherDateParameter, paymentTypeIDParameter, bankIDParameter, bankReferenceNoParameter, isDraftParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCustomerReturnVoucherDetails_Result> SpGetCustomerReturnVoucherDetails(Nullable<int> iD, Nullable<int> finYEAR, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYEARParameter = finYEAR.HasValue ?
                new ObjectParameter("FinYEAR", finYEAR) :
                new ObjectParameter("FinYEAR", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCustomerReturnVoucherDetails_Result>("SpGetCustomerReturnVoucherDetails", iDParameter, finYEARParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCustomerReturnVoucherList_Result> SpGetCustomerReturnVoucherList(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCustomerReturnVoucherList_Result>("SpGetCustomerReturnVoucherList", finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCustomerReturnVoucherTransDetails_Result> SpGetCustomerReturnVoucherTransDetails(Nullable<int> iD, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCustomerReturnVoucherTransDetails_Result>("SpGetCustomerReturnVoucherTransDetails", iDParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetReceivables_Result> SpGetReceivables(Nullable<int> customerID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetReceivables_Result>("SpGetReceivables", customerIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetReceiptVoucherTransForEdit_Result> SpGetReceiptVoucherTransForEdit(Nullable<int> receiptVoucherID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var receiptVoucherIDParameter = receiptVoucherID.HasValue ?
                new ObjectParameter("ReceiptVoucherID", receiptVoucherID) :
                new ObjectParameter("ReceiptVoucherID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetReceiptVoucherTransForEdit_Result>("SpGetReceiptVoucherTransForEdit", receiptVoucherIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPaymentVoucherDetail_Result> SpGetPaymentVoucherDetail(Nullable<int> paymentID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var paymentIDParameter = paymentID.HasValue ?
                new ObjectParameter("PaymentID", paymentID) :
                new ObjectParameter("PaymentID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPaymentVoucherDetail_Result>("SpGetPaymentVoucherDetail", paymentIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetAdvancePayment_Result> SpGetAdvancePayment(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAdvancePayment_Result>("SpGetAdvancePayment", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateCustomerCreditNote(Nullable<int> iD, Nullable<int> customerID, Nullable<System.DateTime> date, Nullable<decimal> totalAmount, Nullable<decimal> taxableAmount, Nullable<decimal> cGSTAmount, Nullable<decimal> sGSTAmount, Nullable<decimal> iGSTAmount, Nullable<bool> isDraft, Nullable<bool> isProcessed, Nullable<decimal> roundOff, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var taxableAmountParameter = taxableAmount.HasValue ?
                new ObjectParameter("TaxableAmount", taxableAmount) :
                new ObjectParameter("TaxableAmount", typeof(decimal));
    
            var cGSTAmountParameter = cGSTAmount.HasValue ?
                new ObjectParameter("CGSTAmount", cGSTAmount) :
                new ObjectParameter("CGSTAmount", typeof(decimal));
    
            var sGSTAmountParameter = sGSTAmount.HasValue ?
                new ObjectParameter("SGSTAmount", sGSTAmount) :
                new ObjectParameter("SGSTAmount", typeof(decimal));
    
            var iGSTAmountParameter = iGSTAmount.HasValue ?
                new ObjectParameter("IGSTAmount", iGSTAmount) :
                new ObjectParameter("IGSTAmount", typeof(decimal));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var isProcessedParameter = isProcessed.HasValue ?
                new ObjectParameter("IsProcessed", isProcessed) :
                new ObjectParameter("IsProcessed", typeof(bool));
    
            var roundOffParameter = roundOff.HasValue ?
                new ObjectParameter("RoundOff", roundOff) :
                new ObjectParameter("RoundOff", typeof(decimal));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateCustomerCreditNote", iDParameter, customerIDParameter, dateParameter, totalAmountParameter, taxableAmountParameter, cGSTAmountParameter, sGSTAmountParameter, iGSTAmountParameter, isDraftParameter, isProcessedParameter, roundOffParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateCustomerDebitNote(Nullable<int> iD, Nullable<int> customerID, Nullable<System.DateTime> date, Nullable<decimal> totalAmount, Nullable<decimal> taxableAmount, Nullable<decimal> cGSTAmount, Nullable<decimal> sGSTAmount, Nullable<decimal> iGSTAmount, Nullable<bool> isDraft, Nullable<bool> isProcessed, Nullable<decimal> roundOff, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var taxableAmountParameter = taxableAmount.HasValue ?
                new ObjectParameter("TaxableAmount", taxableAmount) :
                new ObjectParameter("TaxableAmount", typeof(decimal));
    
            var cGSTAmountParameter = cGSTAmount.HasValue ?
                new ObjectParameter("CGSTAmount", cGSTAmount) :
                new ObjectParameter("CGSTAmount", typeof(decimal));
    
            var sGSTAmountParameter = sGSTAmount.HasValue ?
                new ObjectParameter("SGSTAmount", sGSTAmount) :
                new ObjectParameter("SGSTAmount", typeof(decimal));
    
            var iGSTAmountParameter = iGSTAmount.HasValue ?
                new ObjectParameter("IGSTAmount", iGSTAmount) :
                new ObjectParameter("IGSTAmount", typeof(decimal));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var isProcessedParameter = isProcessed.HasValue ?
                new ObjectParameter("IsProcessed", isProcessed) :
                new ObjectParameter("IsProcessed", typeof(bool));
    
            var roundOffParameter = roundOff.HasValue ?
                new ObjectParameter("RoundOff", roundOff) :
                new ObjectParameter("RoundOff", typeof(decimal));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateCustomerDebitNote", iDParameter, customerIDParameter, dateParameter, totalAmountParameter, taxableAmountParameter, cGSTAmountParameter, sGSTAmountParameter, iGSTAmountParameter, isDraftParameter, isProcessedParameter, roundOffParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateSupplierCreditNote(Nullable<int> iD, Nullable<int> supplierID, Nullable<System.DateTime> date, Nullable<decimal> totalAmount, Nullable<decimal> taxableAmount, Nullable<decimal> cGSTAmount, Nullable<decimal> sGSTAmount, Nullable<decimal> iGSTAmount, Nullable<bool> isDraft, Nullable<decimal> roundOff, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var taxableAmountParameter = taxableAmount.HasValue ?
                new ObjectParameter("TaxableAmount", taxableAmount) :
                new ObjectParameter("TaxableAmount", typeof(decimal));
    
            var cGSTAmountParameter = cGSTAmount.HasValue ?
                new ObjectParameter("CGSTAmount", cGSTAmount) :
                new ObjectParameter("CGSTAmount", typeof(decimal));
    
            var sGSTAmountParameter = sGSTAmount.HasValue ?
                new ObjectParameter("SGSTAmount", sGSTAmount) :
                new ObjectParameter("SGSTAmount", typeof(decimal));
    
            var iGSTAmountParameter = iGSTAmount.HasValue ?
                new ObjectParameter("IGSTAmount", iGSTAmount) :
                new ObjectParameter("IGSTAmount", typeof(decimal));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var roundOffParameter = roundOff.HasValue ?
                new ObjectParameter("RoundOff", roundOff) :
                new ObjectParameter("RoundOff", typeof(decimal));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateSupplierCreditNote", iDParameter, supplierIDParameter, dateParameter, totalAmountParameter, taxableAmountParameter, cGSTAmountParameter, sGSTAmountParameter, iGSTAmountParameter, isDraftParameter, roundOffParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetSupplierCreditNoteTransDetail_Result> SpGetSupplierCreditNoteTransDetail(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSupplierCreditNoteTransDetail_Result>("SpGetSupplierCreditNoteTransDetail", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetSupplierCreditNoteList_Result> SpGetSupplierCreditNoteList(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSupplierCreditNoteList_Result>("SpGetSupplierCreditNoteList", finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateSupplierDebitNote(Nullable<int> iD, Nullable<int> supplierID, Nullable<System.DateTime> date, Nullable<decimal> totalAmount, Nullable<decimal> taxableAmount, Nullable<decimal> cGSTAmount, Nullable<decimal> sGSTAmount, Nullable<decimal> iGSTAmount, Nullable<bool> isDraft, Nullable<bool> isProcessed, Nullable<decimal> roundOff, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var taxableAmountParameter = taxableAmount.HasValue ?
                new ObjectParameter("TaxableAmount", taxableAmount) :
                new ObjectParameter("TaxableAmount", typeof(decimal));
    
            var cGSTAmountParameter = cGSTAmount.HasValue ?
                new ObjectParameter("CGSTAmount", cGSTAmount) :
                new ObjectParameter("CGSTAmount", typeof(decimal));
    
            var sGSTAmountParameter = sGSTAmount.HasValue ?
                new ObjectParameter("SGSTAmount", sGSTAmount) :
                new ObjectParameter("SGSTAmount", typeof(decimal));
    
            var iGSTAmountParameter = iGSTAmount.HasValue ?
                new ObjectParameter("IGSTAmount", iGSTAmount) :
                new ObjectParameter("IGSTAmount", typeof(decimal));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var isProcessedParameter = isProcessed.HasValue ?
                new ObjectParameter("IsProcessed", isProcessed) :
                new ObjectParameter("IsProcessed", typeof(bool));
    
            var roundOffParameter = roundOff.HasValue ?
                new ObjectParameter("RoundOff", roundOff) :
                new ObjectParameter("RoundOff", typeof(decimal));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateSupplierDebitNote", iDParameter, supplierIDParameter, dateParameter, totalAmountParameter, taxableAmountParameter, cGSTAmountParameter, sGSTAmountParameter, iGSTAmountParameter, isDraftParameter, isProcessedParameter, roundOffParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetSupplierDebitNoteTransDetails_Result> SpGetSupplierDebitNoteTransDetails(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSupplierDebitNoteTransDetails_Result>("SpGetSupplierDebitNoteTransDetails", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCustomerDebitNoteTransDetail_Result> SpGetCustomerDebitNoteTransDetail(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCustomerDebitNoteTransDetail_Result>("SpGetCustomerDebitNoteTransDetail", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCustomerCreditNoteTransDetails_Result> SpGetCustomerCreditNoteTransDetails(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCustomerCreditNoteTransDetails_Result>("SpGetCustomerCreditNoteTransDetails", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCustomerDebitNoteList_Result> SpGetCustomerDebitNoteList(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCustomerDebitNoteList_Result>("SpGetCustomerDebitNoteList", finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetSupplierDebitNoteList_Result> SpGetSupplierDebitNoteList(Nullable<int> finYear, Nullable<int> location, Nullable<int> applicationID)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationParameter = location.HasValue ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSupplierDebitNoteList_Result>("SpGetSupplierDebitNoteList", finYearParameter, locationParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCustomerCreditNoteListForDatatable_Result> SpGetCustomerCreditNoteListForDatatable(string type, string transNoNoHint, string transDateHint, string customerHint, string invoiceNoHint, string documentDateHint, string amountHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var transNoNoHintParameter = transNoNoHint != null ?
                new ObjectParameter("TransNoNoHint", transNoNoHint) :
                new ObjectParameter("TransNoNoHint", typeof(string));
    
            var transDateHintParameter = transDateHint != null ?
                new ObjectParameter("TransDateHint", transDateHint) :
                new ObjectParameter("TransDateHint", typeof(string));
    
            var customerHintParameter = customerHint != null ?
                new ObjectParameter("CustomerHint", customerHint) :
                new ObjectParameter("CustomerHint", typeof(string));
    
            var invoiceNoHintParameter = invoiceNoHint != null ?
                new ObjectParameter("InvoiceNoHint", invoiceNoHint) :
                new ObjectParameter("InvoiceNoHint", typeof(string));
    
            var documentDateHintParameter = documentDateHint != null ?
                new ObjectParameter("DocumentDateHint", documentDateHint) :
                new ObjectParameter("DocumentDateHint", typeof(string));
    
            var amountHintParameter = amountHint != null ?
                new ObjectParameter("AmountHint", amountHint) :
                new ObjectParameter("AmountHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCustomerCreditNoteListForDatatable_Result>("SpGetCustomerCreditNoteListForDatatable", typeParameter, transNoNoHintParameter, transDateHintParameter, customerHintParameter, invoiceNoHintParameter, documentDateHintParameter, amountHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCustomerDebitNote_Result> SpGetCustomerDebitNote(string type, string transNoNoHint, string transDateHint, string customerHint, string invoiceNoHint, string documentDateHint, string amountHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var transNoNoHintParameter = transNoNoHint != null ?
                new ObjectParameter("TransNoNoHint", transNoNoHint) :
                new ObjectParameter("TransNoNoHint", typeof(string));
    
            var transDateHintParameter = transDateHint != null ?
                new ObjectParameter("TransDateHint", transDateHint) :
                new ObjectParameter("TransDateHint", typeof(string));
    
            var customerHintParameter = customerHint != null ?
                new ObjectParameter("CustomerHint", customerHint) :
                new ObjectParameter("CustomerHint", typeof(string));
    
            var invoiceNoHintParameter = invoiceNoHint != null ?
                new ObjectParameter("InvoiceNoHint", invoiceNoHint) :
                new ObjectParameter("InvoiceNoHint", typeof(string));
    
            var documentDateHintParameter = documentDateHint != null ?
                new ObjectParameter("DocumentDateHint", documentDateHint) :
                new ObjectParameter("DocumentDateHint", typeof(string));
    
            var amountHintParameter = amountHint != null ?
                new ObjectParameter("AmountHint", amountHint) :
                new ObjectParameter("AmountHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCustomerDebitNote_Result>("SpGetCustomerDebitNote", typeParameter, transNoNoHintParameter, transDateHintParameter, customerHintParameter, invoiceNoHintParameter, documentDateHintParameter, amountHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPaymentVoucherList_Result> SpGetPaymentVoucherList(string type, string voucherNumber, string voucherDate, string supplierName, string amount, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var voucherNumberParameter = voucherNumber != null ?
                new ObjectParameter("VoucherNumber", voucherNumber) :
                new ObjectParameter("VoucherNumber", typeof(string));
    
            var voucherDateParameter = voucherDate != null ?
                new ObjectParameter("VoucherDate", voucherDate) :
                new ObjectParameter("VoucherDate", typeof(string));
    
            var supplierNameParameter = supplierName != null ?
                new ObjectParameter("SupplierName", supplierName) :
                new ObjectParameter("SupplierName", typeof(string));
    
            var amountParameter = amount != null ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPaymentVoucherList_Result>("SpGetPaymentVoucherList", typeParameter, voucherNumberParameter, voucherDateParameter, supplierNameParameter, amountParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetSupplierCreditNoteListForDataTable_Result> SpGetSupplierCreditNoteListForDataTable(string type, string transNo, string transDate, string supplier, string referenceInvoiceNumber, string referenceDocumentDate, string totalAmount, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var transDateParameter = transDate != null ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(string));
    
            var supplierParameter = supplier != null ?
                new ObjectParameter("Supplier", supplier) :
                new ObjectParameter("Supplier", typeof(string));
    
            var referenceInvoiceNumberParameter = referenceInvoiceNumber != null ?
                new ObjectParameter("ReferenceInvoiceNumber", referenceInvoiceNumber) :
                new ObjectParameter("ReferenceInvoiceNumber", typeof(string));
    
            var referenceDocumentDateParameter = referenceDocumentDate != null ?
                new ObjectParameter("ReferenceDocumentDate", referenceDocumentDate) :
                new ObjectParameter("ReferenceDocumentDate", typeof(string));
    
            var totalAmountParameter = totalAmount != null ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSupplierCreditNoteListForDataTable_Result>("SpGetSupplierCreditNoteListForDataTable", typeParameter, transNoParameter, transDateParameter, supplierParameter, referenceInvoiceNumberParameter, referenceDocumentDateParameter, totalAmountParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetSupplierDebitNoteListForDataTable_Result> SpGetSupplierDebitNoteListForDataTable(string type, string transNo, string transDate, string supplier, string referenceInvoiceNumber, string referenceDocumentDate, string totalAmount, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var transDateParameter = transDate != null ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(string));
    
            var supplierParameter = supplier != null ?
                new ObjectParameter("Supplier", supplier) :
                new ObjectParameter("Supplier", typeof(string));
    
            var referenceInvoiceNumberParameter = referenceInvoiceNumber != null ?
                new ObjectParameter("ReferenceInvoiceNumber", referenceInvoiceNumber) :
                new ObjectParameter("ReferenceInvoiceNumber", typeof(string));
    
            var referenceDocumentDateParameter = referenceDocumentDate != null ?
                new ObjectParameter("ReferenceDocumentDate", referenceDocumentDate) :
                new ObjectParameter("ReferenceDocumentDate", typeof(string));
    
            var totalAmountParameter = totalAmount != null ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSupplierDebitNoteListForDataTable_Result>("SpGetSupplierDebitNoteListForDataTable", typeParameter, transNoParameter, transDateParameter, supplierParameter, referenceInvoiceNumberParameter, referenceDocumentDateParameter, totalAmountParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetFundTransferListForDataTable_Result> SpGetFundTransferListForDataTable(string type, string fundTransferNo, string fundTransferDate, string fromLocation, string toLocation, string modeOfPayment, string totalAmount, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var fundTransferNoParameter = fundTransferNo != null ?
                new ObjectParameter("FundTransferNo", fundTransferNo) :
                new ObjectParameter("FundTransferNo", typeof(string));
    
            var fundTransferDateParameter = fundTransferDate != null ?
                new ObjectParameter("FundTransferDate", fundTransferDate) :
                new ObjectParameter("FundTransferDate", typeof(string));
    
            var fromLocationParameter = fromLocation != null ?
                new ObjectParameter("FromLocation", fromLocation) :
                new ObjectParameter("FromLocation", typeof(string));
    
            var toLocationParameter = toLocation != null ?
                new ObjectParameter("ToLocation", toLocation) :
                new ObjectParameter("ToLocation", typeof(string));
    
            var modeOfPaymentParameter = modeOfPayment != null ?
                new ObjectParameter("ModeOfPayment", modeOfPayment) :
                new ObjectParameter("ModeOfPayment", typeof(string));
    
            var totalAmountParameter = totalAmount != null ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetFundTransferListForDataTable_Result>("SpGetFundTransferListForDataTable", typeParameter, fundTransferNoParameter, fundTransferDateParameter, fromLocationParameter, toLocationParameter, modeOfPaymentParameter, totalAmountParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetAdvanceReturnList_Result> SpGetAdvanceReturnList(string type, string aRNoHint, string aRDateHint, string nameHint, string categoryHint, string netAmountHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var aRNoHintParameter = aRNoHint != null ?
                new ObjectParameter("ARNoHint", aRNoHint) :
                new ObjectParameter("ARNoHint", typeof(string));
    
            var aRDateHintParameter = aRDateHint != null ?
                new ObjectParameter("ARDateHint", aRDateHint) :
                new ObjectParameter("ARDateHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var categoryHintParameter = categoryHint != null ?
                new ObjectParameter("CategoryHint", categoryHint) :
                new ObjectParameter("CategoryHint", typeof(string));
    
            var netAmountHintParameter = netAmountHint != null ?
                new ObjectParameter("NetAmountHint", netAmountHint) :
                new ObjectParameter("NetAmountHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAdvanceReturnList_Result>("SpGetAdvanceReturnList", typeParameter, aRNoHintParameter, aRDateHintParameter, nameHintParameter, categoryHintParameter, netAmountHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetFundTransferReceiptListForDataTable_Result> SpGetFundTransferReceiptListForDataTable(string fundTransferNo, string fundTransferDate, string fromLocation, string toLocation, string modeOfPayment, string totalAmount, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fundTransferNoParameter = fundTransferNo != null ?
                new ObjectParameter("FundTransferNo", fundTransferNo) :
                new ObjectParameter("FundTransferNo", typeof(string));
    
            var fundTransferDateParameter = fundTransferDate != null ?
                new ObjectParameter("FundTransferDate", fundTransferDate) :
                new ObjectParameter("FundTransferDate", typeof(string));
    
            var fromLocationParameter = fromLocation != null ?
                new ObjectParameter("FromLocation", fromLocation) :
                new ObjectParameter("FromLocation", typeof(string));
    
            var toLocationParameter = toLocation != null ?
                new ObjectParameter("ToLocation", toLocation) :
                new ObjectParameter("ToLocation", typeof(string));
    
            var modeOfPaymentParameter = modeOfPayment != null ?
                new ObjectParameter("ModeOfPayment", modeOfPayment) :
                new ObjectParameter("ModeOfPayment", typeof(string));
    
            var totalAmountParameter = totalAmount != null ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetFundTransferReceiptListForDataTable_Result>("SpGetFundTransferReceiptListForDataTable", fundTransferNoParameter, fundTransferDateParameter, fromLocationParameter, toLocationParameter, modeOfPaymentParameter, totalAmountParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetJournalListForDatatable_Result> SpGetJournalListForDatatable(string type, string voucherNoHint, string transDateHint, string debitAccountNameHint, string creditAccountNameHint, string totalCreditAmountHint, string totalDebitAmountHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var voucherNoHintParameter = voucherNoHint != null ?
                new ObjectParameter("VoucherNoHint", voucherNoHint) :
                new ObjectParameter("VoucherNoHint", typeof(string));
    
            var transDateHintParameter = transDateHint != null ?
                new ObjectParameter("TransDateHint", transDateHint) :
                new ObjectParameter("TransDateHint", typeof(string));
    
            var debitAccountNameHintParameter = debitAccountNameHint != null ?
                new ObjectParameter("DebitAccountNameHint", debitAccountNameHint) :
                new ObjectParameter("DebitAccountNameHint", typeof(string));
    
            var creditAccountNameHintParameter = creditAccountNameHint != null ?
                new ObjectParameter("CreditAccountNameHint", creditAccountNameHint) :
                new ObjectParameter("CreditAccountNameHint", typeof(string));
    
            var totalCreditAmountHintParameter = totalCreditAmountHint != null ?
                new ObjectParameter("TotalCreditAmountHint", totalCreditAmountHint) :
                new ObjectParameter("TotalCreditAmountHint", typeof(string));
    
            var totalDebitAmountHintParameter = totalDebitAmountHint != null ?
                new ObjectParameter("TotalDebitAmountHint", totalDebitAmountHint) :
                new ObjectParameter("TotalDebitAmountHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetJournalListForDatatable_Result>("SpGetJournalListForDatatable", typeParameter, voucherNoHintParameter, transDateHintParameter, debitAccountNameHintParameter, creditAccountNameHintParameter, totalCreditAmountHintParameter, totalDebitAmountHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetChequeStatusListForDatatable_Result> SpGetChequeStatusListForDatatable(string type, string statusNoHint, string transDateHint, string instrumentStatusHint, string fromDateHint, string toDateHint, string customerNameHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var statusNoHintParameter = statusNoHint != null ?
                new ObjectParameter("StatusNoHint", statusNoHint) :
                new ObjectParameter("StatusNoHint", typeof(string));
    
            var transDateHintParameter = transDateHint != null ?
                new ObjectParameter("TransDateHint", transDateHint) :
                new ObjectParameter("TransDateHint", typeof(string));
    
            var instrumentStatusHintParameter = instrumentStatusHint != null ?
                new ObjectParameter("InstrumentStatusHint", instrumentStatusHint) :
                new ObjectParameter("InstrumentStatusHint", typeof(string));
    
            var fromDateHintParameter = fromDateHint != null ?
                new ObjectParameter("FromDateHint", fromDateHint) :
                new ObjectParameter("FromDateHint", typeof(string));
    
            var toDateHintParameter = toDateHint != null ?
                new ObjectParameter("ToDateHint", toDateHint) :
                new ObjectParameter("ToDateHint", typeof(string));
    
            var customerNameHintParameter = customerNameHint != null ?
                new ObjectParameter("CustomerNameHint", customerNameHint) :
                new ObjectParameter("CustomerNameHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetChequeStatusListForDatatable_Result>("SpGetChequeStatusListForDatatable", typeParameter, statusNoHintParameter, transDateHintParameter, instrumentStatusHintParameter, fromDateHintParameter, toDateHintParameter, customerNameHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCustomerReturnVoucherListForDatatable_Result> SpGetCustomerReturnVoucherListForDatatable(string type, string voucherNoHint, string voucherDateHint, string customerNameHint, string paymentHint, string returnAmountHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var voucherNoHintParameter = voucherNoHint != null ?
                new ObjectParameter("VoucherNoHint", voucherNoHint) :
                new ObjectParameter("VoucherNoHint", typeof(string));
    
            var voucherDateHintParameter = voucherDateHint != null ?
                new ObjectParameter("VoucherDateHint", voucherDateHint) :
                new ObjectParameter("VoucherDateHint", typeof(string));
    
            var customerNameHintParameter = customerNameHint != null ?
                new ObjectParameter("CustomerNameHint", customerNameHint) :
                new ObjectParameter("CustomerNameHint", typeof(string));
    
            var paymentHintParameter = paymentHint != null ?
                new ObjectParameter("PaymentHint", paymentHint) :
                new ObjectParameter("PaymentHint", typeof(string));
    
            var returnAmountHintParameter = returnAmountHint != null ?
                new ObjectParameter("ReturnAmountHint", returnAmountHint) :
                new ObjectParameter("ReturnAmountHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCustomerReturnVoucherListForDatatable_Result>("SpGetCustomerReturnVoucherListForDatatable", typeParameter, voucherNoHintParameter, voucherDateHintParameter, customerNameHintParameter, paymentHintParameter, returnAmountHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetFinancialExpensesList_Result> SpGetFinancialExpensesList(string type, string transNoHint, string transDateHint, string itemNameHint, string paymentHint, string amountHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var transNoHintParameter = transNoHint != null ?
                new ObjectParameter("TransNoHint", transNoHint) :
                new ObjectParameter("TransNoHint", typeof(string));
    
            var transDateHintParameter = transDateHint != null ?
                new ObjectParameter("TransDateHint", transDateHint) :
                new ObjectParameter("TransDateHint", typeof(string));
    
            var itemNameHintParameter = itemNameHint != null ?
                new ObjectParameter("ItemNameHint", itemNameHint) :
                new ObjectParameter("ItemNameHint", typeof(string));
    
            var paymentHintParameter = paymentHint != null ?
                new ObjectParameter("PaymentHint", paymentHint) :
                new ObjectParameter("PaymentHint", typeof(string));
    
            var amountHintParameter = amountHint != null ?
                new ObjectParameter("AmountHint", amountHint) :
                new ObjectParameter("AmountHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetFinancialExpensesList_Result>("SpGetFinancialExpensesList", typeParameter, transNoHintParameter, transDateHintParameter, itemNameHintParameter, paymentHintParameter, amountHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetAdvancePaymentList_Result> SpGetAdvancePaymentList(string type, string advancePaymentNo, string advancePaymentDate, string category, string name, string amount, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var advancePaymentNoParameter = advancePaymentNo != null ?
                new ObjectParameter("AdvancePaymentNo", advancePaymentNo) :
                new ObjectParameter("AdvancePaymentNo", typeof(string));
    
            var advancePaymentDateParameter = advancePaymentDate != null ?
                new ObjectParameter("AdvancePaymentDate", advancePaymentDate) :
                new ObjectParameter("AdvancePaymentDate", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var amountParameter = amount != null ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAdvancePaymentList_Result>("SpGetAdvancePaymentList", typeParameter, advancePaymentNoParameter, advancePaymentDateParameter, categoryParameter, nameParameter, amountParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetAdvancePaymentTransForEdit_Result> SpGetAdvancePaymentTransForEdit(Nullable<int> advanceID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var advanceIDParameter = advanceID.HasValue ?
                new ObjectParameter("AdvanceID", advanceID) :
                new ObjectParameter("AdvanceID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAdvancePaymentTransForEdit_Result>("SpGetAdvancePaymentTransForEdit", advanceIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpSuspendAdvanceRequest(Nullable<int> iD, Nullable<int> finYear, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpSuspendAdvanceRequest", iDParameter, finYearParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreatePaymentReturnVoucherTrans(Nullable<int> paymentReturnID, Nullable<decimal> amount, string remarks, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter retValue)
        {
            var paymentReturnIDParameter = paymentReturnID.HasValue ?
                new ObjectParameter("PaymentReturnID", paymentReturnID) :
                new ObjectParameter("PaymentReturnID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePaymentReturnVoucherTrans", paymentReturnIDParameter, amountParameter, remarksParameter, finYearParameter, locationIDParameter, applicationIDParameter, retValue);
        }
    
        public virtual ObjectResult<SpGetPaymentReturnVoucherListForDatatable_Result> SpGetPaymentReturnVoucherListForDatatable(string type, string voucherNoHint, string voucherDateHint, string supplierNameHint, string paymentHint, string returnAmountHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var voucherNoHintParameter = voucherNoHint != null ?
                new ObjectParameter("VoucherNoHint", voucherNoHint) :
                new ObjectParameter("VoucherNoHint", typeof(string));
    
            var voucherDateHintParameter = voucherDateHint != null ?
                new ObjectParameter("VoucherDateHint", voucherDateHint) :
                new ObjectParameter("VoucherDateHint", typeof(string));
    
            var supplierNameHintParameter = supplierNameHint != null ?
                new ObjectParameter("SupplierNameHint", supplierNameHint) :
                new ObjectParameter("SupplierNameHint", typeof(string));
    
            var paymentHintParameter = paymentHint != null ?
                new ObjectParameter("PaymentHint", paymentHint) :
                new ObjectParameter("PaymentHint", typeof(string));
    
            var returnAmountHintParameter = returnAmountHint != null ?
                new ObjectParameter("ReturnAmountHint", returnAmountHint) :
                new ObjectParameter("ReturnAmountHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPaymentReturnVoucherListForDatatable_Result>("SpGetPaymentReturnVoucherListForDatatable", typeParameter, voucherNoHintParameter, voucherDateHintParameter, supplierNameHintParameter, paymentHintParameter, returnAmountHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPaymentReturnVoucherTransDetails_Result> SpGetPaymentReturnVoucherTransDetails(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPaymentReturnVoucherTransDetails_Result>("SpGetPaymentReturnVoucherTransDetails", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdatePaymentReturnVoucher(Nullable<int> iD, Nullable<System.DateTime> voucherDate, Nullable<int> paymentTypeID, Nullable<int> bankID, string bankReferenceNo, Nullable<bool> isDraft, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var voucherDateParameter = voucherDate.HasValue ?
                new ObjectParameter("VoucherDate", voucherDate) :
                new ObjectParameter("VoucherDate", typeof(System.DateTime));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var bankReferenceNoParameter = bankReferenceNo != null ?
                new ObjectParameter("BankReferenceNo", bankReferenceNo) :
                new ObjectParameter("BankReferenceNo", typeof(string));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdatePaymentReturnVoucher", iDParameter, voucherDateParameter, paymentTypeIDParameter, bankIDParameter, bankReferenceNoParameter, isDraftParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPayableDetailsForPaymentVoucher_Result> SpGetPayableDetailsForPaymentVoucher(Nullable<int> supplierID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPayableDetailsForPaymentVoucher_Result>("SpGetPayableDetailsForPaymentVoucher", supplierIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<spGetAdvanceRequestList_Result> spGetAdvanceRequestList(string type, string advanceRequestNo, string advanceRequestDate, string employeeName, string amount, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> userID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var advanceRequestNoParameter = advanceRequestNo != null ?
                new ObjectParameter("AdvanceRequestNo", advanceRequestNo) :
                new ObjectParameter("AdvanceRequestNo", typeof(string));
    
            var advanceRequestDateParameter = advanceRequestDate != null ?
                new ObjectParameter("AdvanceRequestDate", advanceRequestDate) :
                new ObjectParameter("AdvanceRequestDate", typeof(string));
    
            var employeeNameParameter = employeeName != null ?
                new ObjectParameter("EmployeeName", employeeName) :
                new ObjectParameter("EmployeeName", typeof(string));
    
            var amountParameter = amount != null ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAdvanceRequestList_Result>("spGetAdvanceRequestList", typeParameter, advanceRequestNoParameter, advanceRequestDateParameter, employeeNameParameter, amountParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter, userIDParameter);
        }
    
        public virtual int SpCreateBankExpenseTrans(Nullable<int> bankExpenseID, string transactionNo, Nullable<System.DateTime> transactionDate, Nullable<int> modeOfPaymentID, Nullable<decimal> amount, Nullable<int> itemID, string remarks, string referenceNo, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter returnValue)
        {
            var bankExpenseIDParameter = bankExpenseID.HasValue ?
                new ObjectParameter("BankExpenseID", bankExpenseID) :
                new ObjectParameter("BankExpenseID", typeof(int));
    
            var transactionNoParameter = transactionNo != null ?
                new ObjectParameter("TransactionNo", transactionNo) :
                new ObjectParameter("TransactionNo", typeof(string));
    
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            var modeOfPaymentIDParameter = modeOfPaymentID.HasValue ?
                new ObjectParameter("ModeOfPaymentID", modeOfPaymentID) :
                new ObjectParameter("ModeOfPaymentID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var referenceNoParameter = referenceNo != null ?
                new ObjectParameter("ReferenceNo", referenceNo) :
                new ObjectParameter("ReferenceNo", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateBankExpenseTrans", bankExpenseIDParameter, transactionNoParameter, transactionDateParameter, modeOfPaymentIDParameter, amountParameter, itemIDParameter, remarksParameter, referenceNoParameter, finYearParameter, locationIDParameter, applicationIDParameter, returnValue);
        }
    
        public virtual int SpCreateAdvanceReturnTrans(Nullable<int> advanceReturnID, Nullable<int> advanceTransID, Nullable<decimal> returnAmount, Nullable<int> itemID, Nullable<decimal> paidAmount, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter retVal)
        {
            var advanceReturnIDParameter = advanceReturnID.HasValue ?
                new ObjectParameter("AdvanceReturnID", advanceReturnID) :
                new ObjectParameter("AdvanceReturnID", typeof(int));
    
            var advanceTransIDParameter = advanceTransID.HasValue ?
                new ObjectParameter("AdvanceTransID", advanceTransID) :
                new ObjectParameter("AdvanceTransID", typeof(int));
    
            var returnAmountParameter = returnAmount.HasValue ?
                new ObjectParameter("ReturnAmount", returnAmount) :
                new ObjectParameter("ReturnAmount", typeof(decimal));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var paidAmountParameter = paidAmount.HasValue ?
                new ObjectParameter("PaidAmount", paidAmount) :
                new ObjectParameter("PaidAmount", typeof(decimal));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateAdvanceReturnTrans", advanceReturnIDParameter, advanceTransIDParameter, returnAmountParameter, itemIDParameter, paidAmountParameter, finYearParameter, locationIDParameter, applicationIDParameter, retVal);
        }
    
        public virtual int SpCreateAdvanceReturn1(string advanceReturnNo, Nullable<System.DateTime> advanceReturnDate, string advanceReturnCategory, Nullable<int> supplierID, Nullable<int> employeeID, Nullable<decimal> amount, Nullable<bool> isDraft, Nullable<int> paymentTypeID, Nullable<int> bankID, string referenceNumber, string remarks, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter advanceReturnID)
        {
            var advanceReturnNoParameter = advanceReturnNo != null ?
                new ObjectParameter("AdvanceReturnNo", advanceReturnNo) :
                new ObjectParameter("AdvanceReturnNo", typeof(string));
    
            var advanceReturnDateParameter = advanceReturnDate.HasValue ?
                new ObjectParameter("AdvanceReturnDate", advanceReturnDate) :
                new ObjectParameter("AdvanceReturnDate", typeof(System.DateTime));
    
            var advanceReturnCategoryParameter = advanceReturnCategory != null ?
                new ObjectParameter("AdvanceReturnCategory", advanceReturnCategory) :
                new ObjectParameter("AdvanceReturnCategory", typeof(string));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var referenceNumberParameter = referenceNumber != null ?
                new ObjectParameter("ReferenceNumber", referenceNumber) :
                new ObjectParameter("ReferenceNumber", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateAdvanceReturn1", advanceReturnNoParameter, advanceReturnDateParameter, advanceReturnCategoryParameter, supplierIDParameter, employeeIDParameter, amountParameter, isDraftParameter, paymentTypeIDParameter, bankIDParameter, referenceNumberParameter, remarksParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, advanceReturnID);
        }
    
        public virtual int SpCreateCustomerCreditNote(string transactionNumber, Nullable<System.DateTime> date, Nullable<int> customerID, Nullable<decimal> totalAmount, Nullable<decimal> taxableAmount, Nullable<decimal> cGSTAmount, Nullable<decimal> sGSTAmount, Nullable<decimal> iGSTAmount, Nullable<bool> isDraft, Nullable<bool> isProcessed, Nullable<decimal> roundOff, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter creditNoteID)
        {
            var transactionNumberParameter = transactionNumber != null ?
                new ObjectParameter("TransactionNumber", transactionNumber) :
                new ObjectParameter("TransactionNumber", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var taxableAmountParameter = taxableAmount.HasValue ?
                new ObjectParameter("TaxableAmount", taxableAmount) :
                new ObjectParameter("TaxableAmount", typeof(decimal));
    
            var cGSTAmountParameter = cGSTAmount.HasValue ?
                new ObjectParameter("CGSTAmount", cGSTAmount) :
                new ObjectParameter("CGSTAmount", typeof(decimal));
    
            var sGSTAmountParameter = sGSTAmount.HasValue ?
                new ObjectParameter("SGSTAmount", sGSTAmount) :
                new ObjectParameter("SGSTAmount", typeof(decimal));
    
            var iGSTAmountParameter = iGSTAmount.HasValue ?
                new ObjectParameter("IGSTAmount", iGSTAmount) :
                new ObjectParameter("IGSTAmount", typeof(decimal));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var isProcessedParameter = isProcessed.HasValue ?
                new ObjectParameter("IsProcessed", isProcessed) :
                new ObjectParameter("IsProcessed", typeof(bool));
    
            var roundOffParameter = roundOff.HasValue ?
                new ObjectParameter("RoundOff", roundOff) :
                new ObjectParameter("RoundOff", typeof(decimal));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateCustomerCreditNote", transactionNumberParameter, dateParameter, customerIDParameter, totalAmountParameter, taxableAmountParameter, cGSTAmountParameter, sGSTAmountParameter, iGSTAmountParameter, isDraftParameter, isProcessedParameter, roundOffParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, creditNoteID);
        }
    
        public virtual ObjectResult<SpGetPaymentReturnVoucherDetails_Result> SpGetPaymentReturnVoucherDetails(Nullable<int> iD, Nullable<int> finYEAR, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYEARParameter = finYEAR.HasValue ?
                new ObjectParameter("FinYEAR", finYEAR) :
                new ObjectParameter("FinYEAR", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPaymentReturnVoucherDetails_Result>("SpGetPaymentReturnVoucherDetails", iDParameter, finYEARParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetAdvanceRequestTransForEdit_Result> SpGetAdvanceRequestTransForEdit(Nullable<int> advanceID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var advanceIDParameter = advanceID.HasValue ?
                new ObjectParameter("AdvanceID", advanceID) :
                new ObjectParameter("AdvanceID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAdvanceRequestTransForEdit_Result>("SpGetAdvanceRequestTransForEdit", advanceIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCustomerCreditNoteDetails_Result> SpGetCustomerCreditNoteDetails(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCustomerCreditNoteDetails_Result>("SpGetCustomerCreditNoteDetails", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetSupplierCreditNoteDetail_Result> SpGetSupplierCreditNoteDetail(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSupplierCreditNoteDetail_Result>("SpGetSupplierCreditNoteDetail", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCustomerDebitNoteDetail_Result> SpGetCustomerDebitNoteDetail(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCustomerDebitNoteDetail_Result>("SpGetCustomerDebitNoteDetail", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetSupplierDebitNoteDetails_Result> SpGetSupplierDebitNoteDetails(Nullable<int> iD, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSupplierDebitNoteDetails_Result>("SpGetSupplierDebitNoteDetails", iDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateAdvanceRequest(string requestNO, Nullable<System.DateTime> requestedDate, Nullable<decimal> amount, Nullable<int> quotationID, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter iD)
        {
            var requestNOParameter = requestNO != null ?
                new ObjectParameter("RequestNO", requestNO) :
                new ObjectParameter("RequestNO", typeof(string));
    
            var requestedDateParameter = requestedDate.HasValue ?
                new ObjectParameter("RequestedDate", requestedDate) :
                new ObjectParameter("RequestedDate", typeof(System.DateTime));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var quotationIDParameter = quotationID.HasValue ?
                new ObjectParameter("QuotationID", quotationID) :
                new ObjectParameter("QuotationID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateAdvanceRequest", requestNOParameter, requestedDateParameter, amountParameter, quotationIDParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, iD);
        }
    
        public virtual ObjectResult<spGetAdvanceRequest_Result> spGetAdvanceRequest(Nullable<int> iD, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAdvanceRequest_Result>("spGetAdvanceRequest", iDParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreatePaymentDet(string documentType, string documentNo, Nullable<int> advanceID, Nullable<int> debitNoteID, Nullable<int> creditNoteID, Nullable<decimal> amount, Nullable<decimal> discountAmt, Nullable<System.DateTime> settledDate, Nullable<int> payableID, Nullable<int> paymentID, Nullable<int> iRGID, Nullable<int> paymentReturnVoucherTransID, Nullable<decimal> balancePayable, Nullable<bool> isDraft, string narration, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter retVal)
        {
            var documentTypeParameter = documentType != null ?
                new ObjectParameter("DocumentType", documentType) :
                new ObjectParameter("DocumentType", typeof(string));
    
            var documentNoParameter = documentNo != null ?
                new ObjectParameter("DocumentNo", documentNo) :
                new ObjectParameter("DocumentNo", typeof(string));
    
            var advanceIDParameter = advanceID.HasValue ?
                new ObjectParameter("AdvanceID", advanceID) :
                new ObjectParameter("AdvanceID", typeof(int));
    
            var debitNoteIDParameter = debitNoteID.HasValue ?
                new ObjectParameter("DebitNoteID", debitNoteID) :
                new ObjectParameter("DebitNoteID", typeof(int));
    
            var creditNoteIDParameter = creditNoteID.HasValue ?
                new ObjectParameter("CreditNoteID", creditNoteID) :
                new ObjectParameter("CreditNoteID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var discountAmtParameter = discountAmt.HasValue ?
                new ObjectParameter("DiscountAmt", discountAmt) :
                new ObjectParameter("DiscountAmt", typeof(decimal));
    
            var settledDateParameter = settledDate.HasValue ?
                new ObjectParameter("SettledDate", settledDate) :
                new ObjectParameter("SettledDate", typeof(System.DateTime));
    
            var payableIDParameter = payableID.HasValue ?
                new ObjectParameter("PayableID", payableID) :
                new ObjectParameter("PayableID", typeof(int));
    
            var paymentIDParameter = paymentID.HasValue ?
                new ObjectParameter("PaymentID", paymentID) :
                new ObjectParameter("PaymentID", typeof(int));
    
            var iRGIDParameter = iRGID.HasValue ?
                new ObjectParameter("IRGID", iRGID) :
                new ObjectParameter("IRGID", typeof(int));
    
            var paymentReturnVoucherTransIDParameter = paymentReturnVoucherTransID.HasValue ?
                new ObjectParameter("PaymentReturnVoucherTransID", paymentReturnVoucherTransID) :
                new ObjectParameter("PaymentReturnVoucherTransID", typeof(int));
    
            var balancePayableParameter = balancePayable.HasValue ?
                new ObjectParameter("BalancePayable", balancePayable) :
                new ObjectParameter("BalancePayable", typeof(decimal));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var narrationParameter = narration != null ?
                new ObjectParameter("Narration", narration) :
                new ObjectParameter("Narration", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePaymentDet", documentTypeParameter, documentNoParameter, advanceIDParameter, debitNoteIDParameter, creditNoteIDParameter, amountParameter, discountAmtParameter, settledDateParameter, payableIDParameter, paymentIDParameter, iRGIDParameter, paymentReturnVoucherTransIDParameter, balancePayableParameter, isDraftParameter, narrationParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, retVal);
        }
    
        public virtual ObjectResult<SpGetPaymentVoucherTrans_Result> SpGetPaymentVoucherTrans(Nullable<int> paymentID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var paymentIDParameter = paymentID.HasValue ?
                new ObjectParameter("PaymentID", paymentID) :
                new ObjectParameter("PaymentID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPaymentVoucherTrans_Result>("SpGetPaymentVoucherTrans", paymentIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPaymentVoucherTransForEdit_Result> SpGetPaymentVoucherTransForEdit(Nullable<int> paymentID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var paymentIDParameter = paymentID.HasValue ?
                new ObjectParameter("PaymentID", paymentID) :
                new ObjectParameter("PaymentID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPaymentVoucherTransForEdit_Result>("SpGetPaymentVoucherTransForEdit", paymentIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateAutomaticFundTransferReceipt(Nullable<int> fundTransferIssueID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fundTransferIssueIDParameter = fundTransferIssueID.HasValue ?
                new ObjectParameter("FundTransferIssueID", fundTransferIssueID) :
                new ObjectParameter("FundTransferIssueID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateAutomaticFundTransferReceipt", fundTransferIssueIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SPGetTreasuryList_Result> SPGetTreasuryList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetTreasuryList_Result>("SPGetTreasuryList");
        }
    
        public virtual int SPCreateTreasury(string type, string bankCode, string accountCode, string bankName, string aliasName, string coBranchName, string bankBranchName, string accountType1, string accountType2, string accountNo, string iFSCCode, Nullable<int> locationMapping, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string remarks, Nullable<bool> isPayment, Nullable<bool> isReceipt, Nullable<decimal> openingAmount, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter iD)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var bankCodeParameter = bankCode != null ?
                new ObjectParameter("BankCode", bankCode) :
                new ObjectParameter("BankCode", typeof(string));
    
            var accountCodeParameter = accountCode != null ?
                new ObjectParameter("AccountCode", accountCode) :
                new ObjectParameter("AccountCode", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var aliasNameParameter = aliasName != null ?
                new ObjectParameter("AliasName", aliasName) :
                new ObjectParameter("AliasName", typeof(string));
    
            var coBranchNameParameter = coBranchName != null ?
                new ObjectParameter("CoBranchName", coBranchName) :
                new ObjectParameter("CoBranchName", typeof(string));
    
            var bankBranchNameParameter = bankBranchName != null ?
                new ObjectParameter("BankBranchName", bankBranchName) :
                new ObjectParameter("BankBranchName", typeof(string));
    
            var accountType1Parameter = accountType1 != null ?
                new ObjectParameter("AccountType1", accountType1) :
                new ObjectParameter("AccountType1", typeof(string));
    
            var accountType2Parameter = accountType2 != null ?
                new ObjectParameter("AccountType2", accountType2) :
                new ObjectParameter("AccountType2", typeof(string));
    
            var accountNoParameter = accountNo != null ?
                new ObjectParameter("AccountNo", accountNo) :
                new ObjectParameter("AccountNo", typeof(string));
    
            var iFSCCodeParameter = iFSCCode != null ?
                new ObjectParameter("IFSCCode", iFSCCode) :
                new ObjectParameter("IFSCCode", typeof(string));
    
            var locationMappingParameter = locationMapping.HasValue ?
                new ObjectParameter("LocationMapping", locationMapping) :
                new ObjectParameter("LocationMapping", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("remarks", remarks) :
                new ObjectParameter("remarks", typeof(string));
    
            var isPaymentParameter = isPayment.HasValue ?
                new ObjectParameter("IsPayment", isPayment) :
                new ObjectParameter("IsPayment", typeof(bool));
    
            var isReceiptParameter = isReceipt.HasValue ?
                new ObjectParameter("IsReceipt", isReceipt) :
                new ObjectParameter("IsReceipt", typeof(bool));
    
            var openingAmountParameter = openingAmount.HasValue ?
                new ObjectParameter("OpeningAmount", openingAmount) :
                new ObjectParameter("OpeningAmount", typeof(decimal));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPCreateTreasury", typeParameter, bankCodeParameter, accountCodeParameter, bankNameParameter, aliasNameParameter, coBranchNameParameter, bankBranchNameParameter, accountType1Parameter, accountType2Parameter, accountNoParameter, iFSCCodeParameter, locationMappingParameter, startDateParameter, endDateParameter, remarksParameter, isPaymentParameter, isReceiptParameter, openingAmountParameter, locationIDParameter, applicationIDParameter, iD);
        }
    
        public virtual int SpUpdateTreasury(Nullable<int> treasuryID, string type, string bankCode, string accountCode, string bankName, string aliasName, string coBranchName, string accountType1, string accountType2, string bankBranchName, string accountNo, string iFSCCode, Nullable<int> locationMapping, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string remarks, Nullable<bool> isPayment, Nullable<bool> isReceipt, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var treasuryIDParameter = treasuryID.HasValue ?
                new ObjectParameter("TreasuryID", treasuryID) :
                new ObjectParameter("TreasuryID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var bankCodeParameter = bankCode != null ?
                new ObjectParameter("BankCode", bankCode) :
                new ObjectParameter("BankCode", typeof(string));
    
            var accountCodeParameter = accountCode != null ?
                new ObjectParameter("AccountCode", accountCode) :
                new ObjectParameter("AccountCode", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var aliasNameParameter = aliasName != null ?
                new ObjectParameter("AliasName", aliasName) :
                new ObjectParameter("AliasName", typeof(string));
    
            var coBranchNameParameter = coBranchName != null ?
                new ObjectParameter("CoBranchName", coBranchName) :
                new ObjectParameter("CoBranchName", typeof(string));
    
            var accountType1Parameter = accountType1 != null ?
                new ObjectParameter("AccountType1", accountType1) :
                new ObjectParameter("AccountType1", typeof(string));
    
            var accountType2Parameter = accountType2 != null ?
                new ObjectParameter("AccountType2", accountType2) :
                new ObjectParameter("AccountType2", typeof(string));
    
            var bankBranchNameParameter = bankBranchName != null ?
                new ObjectParameter("BankBranchName", bankBranchName) :
                new ObjectParameter("BankBranchName", typeof(string));
    
            var accountNoParameter = accountNo != null ?
                new ObjectParameter("AccountNo", accountNo) :
                new ObjectParameter("AccountNo", typeof(string));
    
            var iFSCCodeParameter = iFSCCode != null ?
                new ObjectParameter("IFSCCode", iFSCCode) :
                new ObjectParameter("IFSCCode", typeof(string));
    
            var locationMappingParameter = locationMapping.HasValue ?
                new ObjectParameter("LocationMapping", locationMapping) :
                new ObjectParameter("LocationMapping", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("remarks", remarks) :
                new ObjectParameter("remarks", typeof(string));
    
            var isPaymentParameter = isPayment.HasValue ?
                new ObjectParameter("IsPayment", isPayment) :
                new ObjectParameter("IsPayment", typeof(bool));
    
            var isReceiptParameter = isReceipt.HasValue ?
                new ObjectParameter("IsReceipt", isReceipt) :
                new ObjectParameter("IsReceipt", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateTreasury", treasuryIDParameter, typeParameter, bankCodeParameter, accountCodeParameter, bankNameParameter, aliasNameParameter, coBranchNameParameter, accountType1Parameter, accountType2Parameter, bankBranchNameParameter, accountNoParameter, iFSCCodeParameter, locationMappingParameter, startDateParameter, endDateParameter, remarksParameter, isPaymentParameter, isReceiptParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateAccountHeadByType(string type, Nullable<int> iD, Nullable<int> createdUserID, Nullable<int> applicationID, Nullable<int> locationID, Nullable<int> finYear)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateAccountHeadByType", typeParameter, iDParameter, createdUserIDParameter, applicationIDParameter, locationIDParameter, finYearParameter);
        }
    
        public virtual int SpUpdateAccountHeadByType(string type, Nullable<int> iD, string accountName, Nullable<int> createdUserID, Nullable<int> applicationID, Nullable<int> locationID, Nullable<int> finYear)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateAccountHeadByType", typeParameter, iDParameter, accountNameParameter, createdUserIDParameter, applicationIDParameter, locationIDParameter, finYearParameter);
        }
    
        public virtual ObjectResult<SpGetPayableDetailsForPaymentVoucherV3_Result> SpGetPayableDetailsForPaymentVoucherV3(Nullable<int> accountHeadID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var accountHeadIDParameter = accountHeadID.HasValue ?
                new ObjectParameter("AccountHeadID", accountHeadID) :
                new ObjectParameter("AccountHeadID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPayableDetailsForPaymentVoucherV3_Result>("SpGetPayableDetailsForPaymentVoucherV3", accountHeadIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPaymentVoucherTransForEditV3_Result> SpGetPaymentVoucherTransForEditV3(Nullable<int> paymentID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var paymentIDParameter = paymentID.HasValue ?
                new ObjectParameter("PaymentID", paymentID) :
                new ObjectParameter("PaymentID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPaymentVoucherTransForEditV3_Result>("SpGetPaymentVoucherTransForEditV3", paymentIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateAccountEntryMaster(string transCode, Nullable<System.DateTime> transDate, string voucherNo, string remarks, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter accountEntryMasterID)
        {
            var transCodeParameter = transCode != null ?
                new ObjectParameter("TransCode", transCode) :
                new ObjectParameter("TransCode", typeof(string));
    
            var transDateParameter = transDate.HasValue ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(System.DateTime));
    
            var voucherNoParameter = voucherNo != null ?
                new ObjectParameter("VoucherNo", voucherNo) :
                new ObjectParameter("VoucherNo", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateAccountEntryMaster", transCodeParameter, transDateParameter, voucherNoParameter, remarksParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, accountEntryMasterID);
        }
    
        public virtual int SpCreateAccountEntryTrans(Nullable<int> accountEntryMasterID, Nullable<int> accountCreditID, Nullable<int> accountDebitID, Nullable<decimal> accountAmt, Nullable<System.DateTime> transDate, string transForm, Nullable<System.DateTime> voucherDate, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, string transNo)
        {
            var accountEntryMasterIDParameter = accountEntryMasterID.HasValue ?
                new ObjectParameter("AccountEntryMasterID", accountEntryMasterID) :
                new ObjectParameter("AccountEntryMasterID", typeof(int));
    
            var accountCreditIDParameter = accountCreditID.HasValue ?
                new ObjectParameter("AccountCreditID", accountCreditID) :
                new ObjectParameter("AccountCreditID", typeof(int));
    
            var accountDebitIDParameter = accountDebitID.HasValue ?
                new ObjectParameter("AccountDebitID", accountDebitID) :
                new ObjectParameter("AccountDebitID", typeof(int));
    
            var accountAmtParameter = accountAmt.HasValue ?
                new ObjectParameter("AccountAmt", accountAmt) :
                new ObjectParameter("AccountAmt", typeof(decimal));
    
            var transDateParameter = transDate.HasValue ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(System.DateTime));
    
            var transFormParameter = transForm != null ?
                new ObjectParameter("TransForm", transForm) :
                new ObjectParameter("TransForm", typeof(string));
    
            var voucherDateParameter = voucherDate.HasValue ?
                new ObjectParameter("VoucherDate", voucherDate) :
                new ObjectParameter("VoucherDate", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateAccountEntryTrans", accountEntryMasterIDParameter, accountCreditIDParameter, accountDebitIDParameter, accountAmtParameter, transDateParameter, transFormParameter, voucherDateParameter, finYearParameter, locationIDParameter, applicationIDParameter, transNoParameter);
        }
    
        public virtual int SpCreateReceiptVoucherTransV3(Nullable<int> creditNoteID, Nullable<int> debitNoteID, Nullable<System.DateTime> receiptDate, Nullable<int> customerID, Nullable<int> paymentTypeID, Nullable<int> bankID, string referenceNo, Nullable<decimal> advanceReceivedAmount, Nullable<int> receiptVoucherID, Nullable<int> receivableID, Nullable<int> advanceID, string documentType, string documentNo, Nullable<System.DateTime> receivableDate, Nullable<decimal> amount, Nullable<decimal> balance, Nullable<decimal> amountToBeMatched, string status, Nullable<int> pendingDays, Nullable<int> salesReturnID, Nullable<int> customerReturnVoucherID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter retValue)
        {
            var creditNoteIDParameter = creditNoteID.HasValue ?
                new ObjectParameter("CreditNoteID", creditNoteID) :
                new ObjectParameter("CreditNoteID", typeof(int));
    
            var debitNoteIDParameter = debitNoteID.HasValue ?
                new ObjectParameter("DebitNoteID", debitNoteID) :
                new ObjectParameter("DebitNoteID", typeof(int));
    
            var receiptDateParameter = receiptDate.HasValue ?
                new ObjectParameter("ReceiptDate", receiptDate) :
                new ObjectParameter("ReceiptDate", typeof(System.DateTime));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var referenceNoParameter = referenceNo != null ?
                new ObjectParameter("ReferenceNo", referenceNo) :
                new ObjectParameter("ReferenceNo", typeof(string));
    
            var advanceReceivedAmountParameter = advanceReceivedAmount.HasValue ?
                new ObjectParameter("AdvanceReceivedAmount", advanceReceivedAmount) :
                new ObjectParameter("AdvanceReceivedAmount", typeof(decimal));
    
            var receiptVoucherIDParameter = receiptVoucherID.HasValue ?
                new ObjectParameter("ReceiptVoucherID", receiptVoucherID) :
                new ObjectParameter("ReceiptVoucherID", typeof(int));
    
            var receivableIDParameter = receivableID.HasValue ?
                new ObjectParameter("ReceivableID", receivableID) :
                new ObjectParameter("ReceivableID", typeof(int));
    
            var advanceIDParameter = advanceID.HasValue ?
                new ObjectParameter("AdvanceID", advanceID) :
                new ObjectParameter("AdvanceID", typeof(int));
    
            var documentTypeParameter = documentType != null ?
                new ObjectParameter("DocumentType", documentType) :
                new ObjectParameter("DocumentType", typeof(string));
    
            var documentNoParameter = documentNo != null ?
                new ObjectParameter("DocumentNo", documentNo) :
                new ObjectParameter("DocumentNo", typeof(string));
    
            var receivableDateParameter = receivableDate.HasValue ?
                new ObjectParameter("ReceivableDate", receivableDate) :
                new ObjectParameter("ReceivableDate", typeof(System.DateTime));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(decimal));
    
            var amountToBeMatchedParameter = amountToBeMatched.HasValue ?
                new ObjectParameter("AmountToBeMatched", amountToBeMatched) :
                new ObjectParameter("AmountToBeMatched", typeof(decimal));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var pendingDaysParameter = pendingDays.HasValue ?
                new ObjectParameter("PendingDays", pendingDays) :
                new ObjectParameter("PendingDays", typeof(int));
    
            var salesReturnIDParameter = salesReturnID.HasValue ?
                new ObjectParameter("SalesReturnID", salesReturnID) :
                new ObjectParameter("SalesReturnID", typeof(int));
    
            var customerReturnVoucherIDParameter = customerReturnVoucherID.HasValue ?
                new ObjectParameter("CustomerReturnVoucherID", customerReturnVoucherID) :
                new ObjectParameter("CustomerReturnVoucherID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateReceiptVoucherTransV3", creditNoteIDParameter, debitNoteIDParameter, receiptDateParameter, customerIDParameter, paymentTypeIDParameter, bankIDParameter, referenceNoParameter, advanceReceivedAmountParameter, receiptVoucherIDParameter, receivableIDParameter, advanceIDParameter, documentTypeParameter, documentNoParameter, receivableDateParameter, amountParameter, balanceParameter, amountToBeMatchedParameter, statusParameter, pendingDaysParameter, salesReturnIDParameter, customerReturnVoucherIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, retValue);
        }
    
        public virtual int SpCreateReceiptVoucherV3(string voucherNo, Nullable<System.DateTime> voucherDate, Nullable<int> customerID, Nullable<int> accountHeadID, Nullable<int> accountDebitID, Nullable<decimal> receiptAmount, Nullable<int> currencyID, Nullable<int> paymentTypeID, Nullable<int> bankID, Nullable<System.DateTime> date, string referenceNo, string remarks, Nullable<bool> isDraft, string settlements, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter receiptVoucherID, string bankInstrumentNumber, string checqueDate, Nullable<int> receiverBankID)
        {
            var voucherNoParameter = voucherNo != null ?
                new ObjectParameter("VoucherNo", voucherNo) :
                new ObjectParameter("VoucherNo", typeof(string));
    
            var voucherDateParameter = voucherDate.HasValue ?
                new ObjectParameter("VoucherDate", voucherDate) :
                new ObjectParameter("VoucherDate", typeof(System.DateTime));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var accountHeadIDParameter = accountHeadID.HasValue ?
                new ObjectParameter("AccountHeadID", accountHeadID) :
                new ObjectParameter("AccountHeadID", typeof(int));
    
            var accountDebitIDParameter = accountDebitID.HasValue ?
                new ObjectParameter("AccountDebitID", accountDebitID) :
                new ObjectParameter("AccountDebitID", typeof(int));
    
            var receiptAmountParameter = receiptAmount.HasValue ?
                new ObjectParameter("ReceiptAmount", receiptAmount) :
                new ObjectParameter("ReceiptAmount", typeof(decimal));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var referenceNoParameter = referenceNo != null ?
                new ObjectParameter("ReferenceNo", referenceNo) :
                new ObjectParameter("ReferenceNo", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var settlementsParameter = settlements != null ?
                new ObjectParameter("Settlements", settlements) :
                new ObjectParameter("Settlements", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var bankInstrumentNumberParameter = bankInstrumentNumber != null ?
                new ObjectParameter("BankInstrumentNumber", bankInstrumentNumber) :
                new ObjectParameter("BankInstrumentNumber", typeof(string));
    
            var checqueDateParameter = checqueDate != null ?
                new ObjectParameter("checqueDate", checqueDate) :
                new ObjectParameter("checqueDate", typeof(string));
    
            var receiverBankIDParameter = receiverBankID.HasValue ?
                new ObjectParameter("ReceiverBankID", receiverBankID) :
                new ObjectParameter("ReceiverBankID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateReceiptVoucherV3", voucherNoParameter, voucherDateParameter, customerIDParameter, accountHeadIDParameter, accountDebitIDParameter, receiptAmountParameter, currencyIDParameter, paymentTypeIDParameter, bankIDParameter, dateParameter, referenceNoParameter, remarksParameter, isDraftParameter, settlementsParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, receiptVoucherID, bankInstrumentNumberParameter, checqueDateParameter, receiverBankIDParameter);
        }
    
        public virtual ObjectResult<SpGetReceiptVoucherTransV3_Result> SpGetReceiptVoucherTransV3(Nullable<int> receiptVoucherID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var receiptVoucherIDParameter = receiptVoucherID.HasValue ?
                new ObjectParameter("ReceiptVoucherID", receiptVoucherID) :
                new ObjectParameter("ReceiptVoucherID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetReceiptVoucherTransV3_Result>("SpGetReceiptVoucherTransV3", receiptVoucherIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetReceivablesV3_Result> SpGetReceivablesV3(Nullable<int> accountHeadID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var accountHeadIDParameter = accountHeadID.HasValue ?
                new ObjectParameter("AccountHeadID", accountHeadID) :
                new ObjectParameter("AccountHeadID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetReceivablesV3_Result>("SpGetReceivablesV3", accountHeadIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateReceiptVoucherV3(Nullable<int> iD, Nullable<System.DateTime> voucherDate, Nullable<int> customerID, Nullable<int> accountHeadID, Nullable<decimal> receiptAmount, Nullable<int> currencyID, Nullable<int> paymentTypeID, Nullable<int> bankID, Nullable<System.DateTime> date, string referenceNo, string remarks, Nullable<bool> isDraft, string settlements, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var voucherDateParameter = voucherDate.HasValue ?
                new ObjectParameter("VoucherDate", voucherDate) :
                new ObjectParameter("VoucherDate", typeof(System.DateTime));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var accountHeadIDParameter = accountHeadID.HasValue ?
                new ObjectParameter("AccountHeadID", accountHeadID) :
                new ObjectParameter("AccountHeadID", typeof(int));
    
            var receiptAmountParameter = receiptAmount.HasValue ?
                new ObjectParameter("ReceiptAmount", receiptAmount) :
                new ObjectParameter("ReceiptAmount", typeof(decimal));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var referenceNoParameter = referenceNo != null ?
                new ObjectParameter("ReferenceNo", referenceNo) :
                new ObjectParameter("ReferenceNo", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var settlementsParameter = settlements != null ?
                new ObjectParameter("Settlements", settlements) :
                new ObjectParameter("Settlements", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateReceiptVoucherV3", iDParameter, voucherDateParameter, customerIDParameter, accountHeadIDParameter, receiptAmountParameter, currencyIDParameter, paymentTypeIDParameter, bankIDParameter, dateParameter, referenceNoParameter, remarksParameter, isDraftParameter, settlementsParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetDebitNoteList_Result> SpGetDebitNoteList(string type, string transNo, string transDate, string debitAccount, string creditAccount, string amount, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var transDateParameter = transDate != null ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(string));
    
            var debitAccountParameter = debitAccount != null ?
                new ObjectParameter("DebitAccount", debitAccount) :
                new ObjectParameter("DebitAccount", typeof(string));
    
            var creditAccountParameter = creditAccount != null ?
                new ObjectParameter("CreditAccount", creditAccount) :
                new ObjectParameter("CreditAccount", typeof(string));
    
            var amountParameter = amount != null ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDebitNoteList_Result>("SpGetDebitNoteList", typeParameter, transNoParameter, transDateParameter, debitAccountParameter, creditAccountParameter, amountParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPaymentVoucherTransV3_Result> SpGetPaymentVoucherTransV3(Nullable<int> paymentID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var paymentIDParameter = paymentID.HasValue ?
                new ObjectParameter("PaymentID", paymentID) :
                new ObjectParameter("PaymentID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPaymentVoucherTransV3_Result>("SpGetPaymentVoucherTransV3", paymentIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateCreditNote(string serialNo, Nullable<System.DateTime> transDate, Nullable<int> creditAccountID, Nullable<int> debitAccountID, Nullable<decimal> amount, string remarks, Nullable<bool> isDraft, Nullable<bool> isInclusive, Nullable<int> gSTCategoryID, Nullable<decimal> taxableAmount, Nullable<decimal> gSTAmount, Nullable<decimal> totalAmount, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter creditNoteID)
        {
            var serialNoParameter = serialNo != null ?
                new ObjectParameter("SerialNo", serialNo) :
                new ObjectParameter("SerialNo", typeof(string));
    
            var transDateParameter = transDate.HasValue ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(System.DateTime));
    
            var creditAccountIDParameter = creditAccountID.HasValue ?
                new ObjectParameter("CreditAccountID", creditAccountID) :
                new ObjectParameter("CreditAccountID", typeof(int));
    
            var debitAccountIDParameter = debitAccountID.HasValue ?
                new ObjectParameter("DebitAccountID", debitAccountID) :
                new ObjectParameter("DebitAccountID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var isInclusiveParameter = isInclusive.HasValue ?
                new ObjectParameter("IsInclusive", isInclusive) :
                new ObjectParameter("IsInclusive", typeof(bool));
    
            var gSTCategoryIDParameter = gSTCategoryID.HasValue ?
                new ObjectParameter("GSTCategoryID", gSTCategoryID) :
                new ObjectParameter("GSTCategoryID", typeof(int));
    
            var taxableAmountParameter = taxableAmount.HasValue ?
                new ObjectParameter("TaxableAmount", taxableAmount) :
                new ObjectParameter("TaxableAmount", typeof(decimal));
    
            var gSTAmountParameter = gSTAmount.HasValue ?
                new ObjectParameter("GSTAmount", gSTAmount) :
                new ObjectParameter("GSTAmount", typeof(decimal));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateCreditNote", serialNoParameter, transDateParameter, creditAccountIDParameter, debitAccountIDParameter, amountParameter, remarksParameter, isDraftParameter, isInclusiveParameter, gSTCategoryIDParameter, taxableAmountParameter, gSTAmountParameter, totalAmountParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, creditNoteID);
        }
    
        public virtual int SpCreateDebitNote(string serialNo, Nullable<System.DateTime> transDate, Nullable<int> creditAccountID, Nullable<int> debitAccountID, Nullable<decimal> amount, string remarks, Nullable<bool> isDraft, Nullable<bool> isInclusive, Nullable<int> gSTCategoryID, Nullable<decimal> taxableAmount, Nullable<decimal> gSTAmount, Nullable<decimal> totalAmount, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter debitNoteID)
        {
            var serialNoParameter = serialNo != null ?
                new ObjectParameter("SerialNo", serialNo) :
                new ObjectParameter("SerialNo", typeof(string));
    
            var transDateParameter = transDate.HasValue ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(System.DateTime));
    
            var creditAccountIDParameter = creditAccountID.HasValue ?
                new ObjectParameter("CreditAccountID", creditAccountID) :
                new ObjectParameter("CreditAccountID", typeof(int));
    
            var debitAccountIDParameter = debitAccountID.HasValue ?
                new ObjectParameter("DebitAccountID", debitAccountID) :
                new ObjectParameter("DebitAccountID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var isInclusiveParameter = isInclusive.HasValue ?
                new ObjectParameter("IsInclusive", isInclusive) :
                new ObjectParameter("IsInclusive", typeof(bool));
    
            var gSTCategoryIDParameter = gSTCategoryID.HasValue ?
                new ObjectParameter("GSTCategoryID", gSTCategoryID) :
                new ObjectParameter("GSTCategoryID", typeof(int));
    
            var taxableAmountParameter = taxableAmount.HasValue ?
                new ObjectParameter("TaxableAmount", taxableAmount) :
                new ObjectParameter("TaxableAmount", typeof(decimal));
    
            var gSTAmountParameter = gSTAmount.HasValue ?
                new ObjectParameter("GSTAmount", gSTAmount) :
                new ObjectParameter("GSTAmount", typeof(decimal));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateDebitNote", serialNoParameter, transDateParameter, creditAccountIDParameter, debitAccountIDParameter, amountParameter, remarksParameter, isDraftParameter, isInclusiveParameter, gSTCategoryIDParameter, taxableAmountParameter, gSTAmountParameter, totalAmountParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, debitNoteID);
        }
    
        public virtual ObjectResult<SpGetCreditNoteList_Result> SpGetCreditNoteList(string type, string transNo, string transDate, string debitAccount, string creditAccount, string amount, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var transDateParameter = transDate != null ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(string));
    
            var debitAccountParameter = debitAccount != null ?
                new ObjectParameter("DebitAccount", debitAccount) :
                new ObjectParameter("DebitAccount", typeof(string));
    
            var creditAccountParameter = creditAccount != null ?
                new ObjectParameter("CreditAccount", creditAccount) :
                new ObjectParameter("CreditAccount", typeof(string));
    
            var amountParameter = amount != null ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCreditNoteList_Result>("SpGetCreditNoteList", typeParameter, transNoParameter, transDateParameter, debitAccountParameter, creditAccountParameter, amountParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCreditNote_Result> SpGetCreditNote(Nullable<int> creditNoteID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var creditNoteIDParameter = creditNoteID.HasValue ?
                new ObjectParameter("CreditNoteID", creditNoteID) :
                new ObjectParameter("CreditNoteID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCreditNote_Result>("SpGetCreditNote", creditNoteIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateCreditNote(Nullable<int> creditNoteID, Nullable<int> creditAccountID, Nullable<int> debitAccountID, Nullable<decimal> amount, string remarks, Nullable<bool> isDraft, Nullable<bool> isInclusive, Nullable<int> gSTCategoryID, Nullable<decimal> taxableAmount, Nullable<decimal> gSTAmount, Nullable<decimal> totalAmount, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var creditNoteIDParameter = creditNoteID.HasValue ?
                new ObjectParameter("CreditNoteID", creditNoteID) :
                new ObjectParameter("CreditNoteID", typeof(int));
    
            var creditAccountIDParameter = creditAccountID.HasValue ?
                new ObjectParameter("CreditAccountID", creditAccountID) :
                new ObjectParameter("CreditAccountID", typeof(int));
    
            var debitAccountIDParameter = debitAccountID.HasValue ?
                new ObjectParameter("DebitAccountID", debitAccountID) :
                new ObjectParameter("DebitAccountID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var isInclusiveParameter = isInclusive.HasValue ?
                new ObjectParameter("IsInclusive", isInclusive) :
                new ObjectParameter("IsInclusive", typeof(bool));
    
            var gSTCategoryIDParameter = gSTCategoryID.HasValue ?
                new ObjectParameter("GSTCategoryID", gSTCategoryID) :
                new ObjectParameter("GSTCategoryID", typeof(int));
    
            var taxableAmountParameter = taxableAmount.HasValue ?
                new ObjectParameter("TaxableAmount", taxableAmount) :
                new ObjectParameter("TaxableAmount", typeof(decimal));
    
            var gSTAmountParameter = gSTAmount.HasValue ?
                new ObjectParameter("GSTAmount", gSTAmount) :
                new ObjectParameter("GSTAmount", typeof(decimal));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateCreditNote", creditNoteIDParameter, creditAccountIDParameter, debitAccountIDParameter, amountParameter, remarksParameter, isDraftParameter, isInclusiveParameter, gSTCategoryIDParameter, taxableAmountParameter, gSTAmountParameter, totalAmountParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateDebitNote(Nullable<int> debitNoteID, Nullable<int> creditAccountID, Nullable<int> debitAccountID, Nullable<decimal> amount, string remarks, Nullable<bool> isDraft, Nullable<bool> isInclusive, Nullable<int> gSTCategoryID, Nullable<decimal> taxableAmount, Nullable<decimal> gSTAmount, Nullable<decimal> totalAmount, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var debitNoteIDParameter = debitNoteID.HasValue ?
                new ObjectParameter("DebitNoteID", debitNoteID) :
                new ObjectParameter("DebitNoteID", typeof(int));
    
            var creditAccountIDParameter = creditAccountID.HasValue ?
                new ObjectParameter("CreditAccountID", creditAccountID) :
                new ObjectParameter("CreditAccountID", typeof(int));
    
            var debitAccountIDParameter = debitAccountID.HasValue ?
                new ObjectParameter("DebitAccountID", debitAccountID) :
                new ObjectParameter("DebitAccountID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var isInclusiveParameter = isInclusive.HasValue ?
                new ObjectParameter("IsInclusive", isInclusive) :
                new ObjectParameter("IsInclusive", typeof(bool));
    
            var gSTCategoryIDParameter = gSTCategoryID.HasValue ?
                new ObjectParameter("GSTCategoryID", gSTCategoryID) :
                new ObjectParameter("GSTCategoryID", typeof(int));
    
            var taxableAmountParameter = taxableAmount.HasValue ?
                new ObjectParameter("TaxableAmount", taxableAmount) :
                new ObjectParameter("TaxableAmount", typeof(decimal));
    
            var gSTAmountParameter = gSTAmount.HasValue ?
                new ObjectParameter("GSTAmount", gSTAmount) :
                new ObjectParameter("GSTAmount", typeof(decimal));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateDebitNote", debitNoteIDParameter, creditAccountIDParameter, debitAccountIDParameter, amountParameter, remarksParameter, isDraftParameter, isInclusiveParameter, gSTCategoryIDParameter, taxableAmountParameter, gSTAmountParameter, totalAmountParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetAccountHeadAutoCompleteForJounal_Result> SpGetAccountHeadAutoCompleteForJounal(string accountNameHint, string accountIDHint, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var accountNameHintParameter = accountNameHint != null ?
                new ObjectParameter("AccountNameHint", accountNameHint) :
                new ObjectParameter("AccountNameHint", typeof(string));
    
            var accountIDHintParameter = accountIDHint != null ?
                new ObjectParameter("AccountIDHint", accountIDHint) :
                new ObjectParameter("AccountIDHint", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAccountHeadAutoCompleteForJounal_Result>("SpGetAccountHeadAutoCompleteForJounal", accountNameHintParameter, accountIDHintParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateReceiptReconciledDate(Nullable<int> iD, Nullable<System.DateTime> reconciledDate, string refernceNo, string remarks, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var reconciledDateParameter = reconciledDate.HasValue ?
                new ObjectParameter("ReconciledDate", reconciledDate) :
                new ObjectParameter("ReconciledDate", typeof(System.DateTime));
    
            var refernceNoParameter = refernceNo != null ?
                new ObjectParameter("RefernceNo", refernceNo) :
                new ObjectParameter("RefernceNo", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateReceiptReconciledDate", iDParameter, reconciledDateParameter, refernceNoParameter, remarksParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetReceiptVoucherListV3_Result> SpGetReceiptVoucherListV3(string type, string receiptNoHint, string invoiceDateHint, string accountHeadHint, string receiptAmountHint, string reconciledDateHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var receiptNoHintParameter = receiptNoHint != null ?
                new ObjectParameter("ReceiptNoHint", receiptNoHint) :
                new ObjectParameter("ReceiptNoHint", typeof(string));
    
            var invoiceDateHintParameter = invoiceDateHint != null ?
                new ObjectParameter("InvoiceDateHint", invoiceDateHint) :
                new ObjectParameter("InvoiceDateHint", typeof(string));
    
            var accountHeadHintParameter = accountHeadHint != null ?
                new ObjectParameter("AccountHeadHint", accountHeadHint) :
                new ObjectParameter("AccountHeadHint", typeof(string));
    
            var receiptAmountHintParameter = receiptAmountHint != null ?
                new ObjectParameter("ReceiptAmountHint", receiptAmountHint) :
                new ObjectParameter("ReceiptAmountHint", typeof(string));
    
            var reconciledDateHintParameter = reconciledDateHint != null ?
                new ObjectParameter("ReconciledDateHint", reconciledDateHint) :
                new ObjectParameter("ReconciledDateHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetReceiptVoucherListV3_Result>("SpGetReceiptVoucherListV3", typeParameter, receiptNoHintParameter, invoiceDateHintParameter, accountHeadHintParameter, receiptAmountHintParameter, reconciledDateHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetListForTreasury_Result> SpGetListForTreasury(string type, string accountCode, string bankName, string aliasName, string coBranchName, string bankBranchName, string accountType, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var accountCodeParameter = accountCode != null ?
                new ObjectParameter("AccountCode", accountCode) :
                new ObjectParameter("AccountCode", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var aliasNameParameter = aliasName != null ?
                new ObjectParameter("AliasName", aliasName) :
                new ObjectParameter("AliasName", typeof(string));
    
            var coBranchNameParameter = coBranchName != null ?
                new ObjectParameter("CoBranchName", coBranchName) :
                new ObjectParameter("CoBranchName", typeof(string));
    
            var bankBranchNameParameter = bankBranchName != null ?
                new ObjectParameter("BankBranchName", bankBranchName) :
                new ObjectParameter("BankBranchName", typeof(string));
    
            var accountTypeParameter = accountType != null ?
                new ObjectParameter("AccountType", accountType) :
                new ObjectParameter("AccountType", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetListForTreasury_Result>("SpGetListForTreasury", typeParameter, accountCodeParameter, bankNameParameter, aliasNameParameter, coBranchNameParameter, bankBranchNameParameter, accountTypeParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdatePaymentReconciledDate(Nullable<int> iD, Nullable<System.DateTime> reconciledDate, string refernceNo, string remarks, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var reconciledDateParameter = reconciledDate.HasValue ?
                new ObjectParameter("ReconciledDate", reconciledDate) :
                new ObjectParameter("ReconciledDate", typeof(System.DateTime));
    
            var refernceNoParameter = refernceNo != null ?
                new ObjectParameter("RefernceNo", refernceNo) :
                new ObjectParameter("RefernceNo", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdatePaymentReconciledDate", iDParameter, reconciledDateParameter, refernceNoParameter, remarksParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPaymentVoucherListV3_Result> SpGetPaymentVoucherListV3(string type, string voucherNumber, string voucherDate, string accountHead, string amount, string reconciledDateHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var voucherNumberParameter = voucherNumber != null ?
                new ObjectParameter("VoucherNumber", voucherNumber) :
                new ObjectParameter("VoucherNumber", typeof(string));
    
            var voucherDateParameter = voucherDate != null ?
                new ObjectParameter("VoucherDate", voucherDate) :
                new ObjectParameter("VoucherDate", typeof(string));
    
            var accountHeadParameter = accountHead != null ?
                new ObjectParameter("AccountHead", accountHead) :
                new ObjectParameter("AccountHead", typeof(string));
    
            var amountParameter = amount != null ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(string));
    
            var reconciledDateHintParameter = reconciledDateHint != null ?
                new ObjectParameter("ReconciledDateHint", reconciledDateHint) :
                new ObjectParameter("ReconciledDateHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPaymentVoucherListV3_Result>("SpGetPaymentVoucherListV3", typeParameter, voucherNumberParameter, voucherDateParameter, accountHeadParameter, amountParameter, reconciledDateHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetBRSListV3_Result> SpGetBRSListV3(string type, string documentType, string documentNumber, string transactionDate, string accountName, string bankName, string debitAmount, string creditAmount, string reconciledDateHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var documentTypeParameter = documentType != null ?
                new ObjectParameter("DocumentType", documentType) :
                new ObjectParameter("DocumentType", typeof(string));
    
            var documentNumberParameter = documentNumber != null ?
                new ObjectParameter("DocumentNumber", documentNumber) :
                new ObjectParameter("DocumentNumber", typeof(string));
    
            var transactionDateParameter = transactionDate != null ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(string));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var debitAmountParameter = debitAmount != null ?
                new ObjectParameter("DebitAmount", debitAmount) :
                new ObjectParameter("DebitAmount", typeof(string));
    
            var creditAmountParameter = creditAmount != null ?
                new ObjectParameter("CreditAmount", creditAmount) :
                new ObjectParameter("CreditAmount", typeof(string));
    
            var reconciledDateHintParameter = reconciledDateHint != null ?
                new ObjectParameter("ReconciledDateHint", reconciledDateHint) :
                new ObjectParameter("ReconciledDateHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetBRSListV3_Result>("SpGetBRSListV3", typeParameter, documentTypeParameter, documentNumberParameter, transactionDateParameter, accountNameParameter, bankNameParameter, debitAmountParameter, creditAmountParameter, reconciledDateHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetDataForBankReconciliation_Result> SpGetDataForBankReconciliation(Nullable<int> bankID, Nullable<System.DateTime> fromTransactionDate, Nullable<System.DateTime> toTransactionNumber, Nullable<int> finYEAR, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var fromTransactionDateParameter = fromTransactionDate.HasValue ?
                new ObjectParameter("FromTransactionDate", fromTransactionDate) :
                new ObjectParameter("FromTransactionDate", typeof(System.DateTime));
    
            var toTransactionNumberParameter = toTransactionNumber.HasValue ?
                new ObjectParameter("ToTransactionNumber", toTransactionNumber) :
                new ObjectParameter("ToTransactionNumber", typeof(System.DateTime));
    
            var finYEARParameter = finYEAR.HasValue ?
                new ObjectParameter("FinYEAR", finYEAR) :
                new ObjectParameter("FinYEAR", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDataForBankReconciliation_Result>("SpGetDataForBankReconciliation", bankIDParameter, fromTransactionDateParameter, toTransactionNumberParameter, finYEARParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetTotalBalanceAmountDetailsForBankReconciliation_Result> SpGetTotalBalanceAmountDetailsForBankReconciliation(Nullable<int> bankID, Nullable<System.DateTime> fromTransactionDate, Nullable<System.DateTime> toTransactionNumber, Nullable<int> finYEAR, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var fromTransactionDateParameter = fromTransactionDate.HasValue ?
                new ObjectParameter("FromTransactionDate", fromTransactionDate) :
                new ObjectParameter("FromTransactionDate", typeof(System.DateTime));
    
            var toTransactionNumberParameter = toTransactionNumber.HasValue ?
                new ObjectParameter("ToTransactionNumber", toTransactionNumber) :
                new ObjectParameter("ToTransactionNumber", typeof(System.DateTime));
    
            var finYEARParameter = finYEAR.HasValue ?
                new ObjectParameter("FinYEAR", finYEAR) :
                new ObjectParameter("FinYEAR", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetTotalBalanceAmountDetailsForBankReconciliation_Result>("SpGetTotalBalanceAmountDetailsForBankReconciliation", bankIDParameter, fromTransactionDateParameter, toTransactionNumberParameter, finYEARParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetDebitNote_Result> SpGetDebitNote(Nullable<int> debitNoteID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var debitNoteIDParameter = debitNoteID.HasValue ?
                new ObjectParameter("DebitNoteID", debitNoteID) :
                new ObjectParameter("DebitNoteID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDebitNote_Result>("SpGetDebitNote", debitNoteIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreatePaymentReturnVoucher(string voucherNo, Nullable<System.DateTime> voucherDate, Nullable<int> supplierID, Nullable<int> paymentTypeID, Nullable<int> bankID, string bankReferenceNumber, Nullable<bool> isDraft, Nullable<int> debitNoteID, string debitAccountCode, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter paymentReturnID)
        {
            var voucherNoParameter = voucherNo != null ?
                new ObjectParameter("VoucherNo", voucherNo) :
                new ObjectParameter("VoucherNo", typeof(string));
    
            var voucherDateParameter = voucherDate.HasValue ?
                new ObjectParameter("VoucherDate", voucherDate) :
                new ObjectParameter("VoucherDate", typeof(System.DateTime));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var bankReferenceNumberParameter = bankReferenceNumber != null ?
                new ObjectParameter("BankReferenceNumber", bankReferenceNumber) :
                new ObjectParameter("BankReferenceNumber", typeof(string));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var debitNoteIDParameter = debitNoteID.HasValue ?
                new ObjectParameter("DebitNoteID", debitNoteID) :
                new ObjectParameter("DebitNoteID", typeof(int));
    
            var debitAccountCodeParameter = debitAccountCode != null ?
                new ObjectParameter("DebitAccountCode", debitAccountCode) :
                new ObjectParameter("DebitAccountCode", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePaymentReturnVoucher", voucherNoParameter, voucherDateParameter, supplierIDParameter, paymentTypeIDParameter, bankIDParameter, bankReferenceNumberParameter, isDraftParameter, debitNoteIDParameter, debitAccountCodeParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, paymentReturnID);
        }
    
        public virtual ObjectResult<SpGetJournalDetails_Result> SpGetJournalDetails(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetJournalDetails_Result>("SpGetJournalDetails", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpTreasuryDetails_Result> SpTreasuryDetails(Nullable<int> treasuryID)
        {
            var treasuryIDParameter = treasuryID.HasValue ?
                new ObjectParameter("TreasuryID", treasuryID) :
                new ObjectParameter("TreasuryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpTreasuryDetails_Result>("SpTreasuryDetails", treasuryIDParameter);
        }
    
        public virtual ObjectResult<SpGetReceiptVoucherDetailV3_Result> SpGetReceiptVoucherDetailV3(Nullable<int> receiptVoucherID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var receiptVoucherIDParameter = receiptVoucherID.HasValue ?
                new ObjectParameter("ReceiptVoucherID", receiptVoucherID) :
                new ObjectParameter("ReceiptVoucherID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetReceiptVoucherDetailV3_Result>("SpGetReceiptVoucherDetailV3", receiptVoucherIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetReceiptVoucherTransForEditV3_Result> SpGetReceiptVoucherTransForEditV3(Nullable<int> receiptVoucherID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var receiptVoucherIDParameter = receiptVoucherID.HasValue ?
                new ObjectParameter("ReceiptVoucherID", receiptVoucherID) :
                new ObjectParameter("ReceiptVoucherID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetReceiptVoucherTransForEditV3_Result>("SpGetReceiptVoucherTransForEditV3", receiptVoucherIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetReceiverBankName_Result> SpGetReceiverBankName(Nullable<int> userID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetReceiverBankName_Result>("SpGetReceiverBankName", userIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCurrencyExchangeDetails_Result> SpGetCurrencyExchangeDetails(Nullable<int> baseCurrencyID, Nullable<int> conversionCurrencyID, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> coApplicationID)
        {
            var baseCurrencyIDParameter = baseCurrencyID.HasValue ?
                new ObjectParameter("BaseCurrencyID", baseCurrencyID) :
                new ObjectParameter("BaseCurrencyID", typeof(int));
    
            var conversionCurrencyIDParameter = conversionCurrencyID.HasValue ?
                new ObjectParameter("ConversionCurrencyID", conversionCurrencyID) :
                new ObjectParameter("ConversionCurrencyID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var coApplicationIDParameter = coApplicationID.HasValue ?
                new ObjectParameter("CoApplicationID", coApplicationID) :
                new ObjectParameter("CoApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCurrencyExchangeDetails_Result>("SpGetCurrencyExchangeDetails", baseCurrencyIDParameter, conversionCurrencyIDParameter, createdUserIDParameter, locationIDParameter, coApplicationIDParameter);
        }
    
        public virtual int SpCreateJournalTrans(Nullable<int> journalID, Nullable<int> creditAccountID, string creditAccountCode, Nullable<decimal> creditAmount, Nullable<int> debitAccountID, string debitAccountCode, Nullable<decimal> debitAmount, Nullable<int> departmentID, Nullable<int> employeeID, Nullable<int> interCompanyID, Nullable<int> projectID, string remarks, Nullable<int> journalLocationID, Nullable<int> localCurrencyID, string localCurrency, Nullable<int> debitCurrencyID, string debitCurrency, Nullable<int> creditCurrencyID, string creditCurrency, Nullable<decimal> debitExchangeRate, Nullable<decimal> creditExchangeRate, Nullable<decimal> localDebitAmount, Nullable<decimal> localCreditAmount, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var journalIDParameter = journalID.HasValue ?
                new ObjectParameter("JournalID", journalID) :
                new ObjectParameter("JournalID", typeof(int));
    
            var creditAccountIDParameter = creditAccountID.HasValue ?
                new ObjectParameter("CreditAccountID", creditAccountID) :
                new ObjectParameter("CreditAccountID", typeof(int));
    
            var creditAccountCodeParameter = creditAccountCode != null ?
                new ObjectParameter("CreditAccountCode", creditAccountCode) :
                new ObjectParameter("CreditAccountCode", typeof(string));
    
            var creditAmountParameter = creditAmount.HasValue ?
                new ObjectParameter("CreditAmount", creditAmount) :
                new ObjectParameter("CreditAmount", typeof(decimal));
    
            var debitAccountIDParameter = debitAccountID.HasValue ?
                new ObjectParameter("DebitAccountID", debitAccountID) :
                new ObjectParameter("DebitAccountID", typeof(int));
    
            var debitAccountCodeParameter = debitAccountCode != null ?
                new ObjectParameter("DebitAccountCode", debitAccountCode) :
                new ObjectParameter("DebitAccountCode", typeof(string));
    
            var debitAmountParameter = debitAmount.HasValue ?
                new ObjectParameter("DebitAmount", debitAmount) :
                new ObjectParameter("DebitAmount", typeof(decimal));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var interCompanyIDParameter = interCompanyID.HasValue ?
                new ObjectParameter("InterCompanyID", interCompanyID) :
                new ObjectParameter("InterCompanyID", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var journalLocationIDParameter = journalLocationID.HasValue ?
                new ObjectParameter("JournalLocationID", journalLocationID) :
                new ObjectParameter("JournalLocationID", typeof(int));
    
            var localCurrencyIDParameter = localCurrencyID.HasValue ?
                new ObjectParameter("LocalCurrencyID", localCurrencyID) :
                new ObjectParameter("LocalCurrencyID", typeof(int));
    
            var localCurrencyParameter = localCurrency != null ?
                new ObjectParameter("LocalCurrency", localCurrency) :
                new ObjectParameter("LocalCurrency", typeof(string));
    
            var debitCurrencyIDParameter = debitCurrencyID.HasValue ?
                new ObjectParameter("DebitCurrencyID", debitCurrencyID) :
                new ObjectParameter("DebitCurrencyID", typeof(int));
    
            var debitCurrencyParameter = debitCurrency != null ?
                new ObjectParameter("DebitCurrency", debitCurrency) :
                new ObjectParameter("DebitCurrency", typeof(string));
    
            var creditCurrencyIDParameter = creditCurrencyID.HasValue ?
                new ObjectParameter("CreditCurrencyID", creditCurrencyID) :
                new ObjectParameter("CreditCurrencyID", typeof(int));
    
            var creditCurrencyParameter = creditCurrency != null ?
                new ObjectParameter("CreditCurrency", creditCurrency) :
                new ObjectParameter("CreditCurrency", typeof(string));
    
            var debitExchangeRateParameter = debitExchangeRate.HasValue ?
                new ObjectParameter("DebitExchangeRate", debitExchangeRate) :
                new ObjectParameter("DebitExchangeRate", typeof(decimal));
    
            var creditExchangeRateParameter = creditExchangeRate.HasValue ?
                new ObjectParameter("CreditExchangeRate", creditExchangeRate) :
                new ObjectParameter("CreditExchangeRate", typeof(decimal));
    
            var localDebitAmountParameter = localDebitAmount.HasValue ?
                new ObjectParameter("LocalDebitAmount", localDebitAmount) :
                new ObjectParameter("LocalDebitAmount", typeof(decimal));
    
            var localCreditAmountParameter = localCreditAmount.HasValue ?
                new ObjectParameter("LocalCreditAmount", localCreditAmount) :
                new ObjectParameter("LocalCreditAmount", typeof(decimal));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateJournalTrans", journalIDParameter, creditAccountIDParameter, creditAccountCodeParameter, creditAmountParameter, debitAccountIDParameter, debitAccountCodeParameter, debitAmountParameter, departmentIDParameter, employeeIDParameter, interCompanyIDParameter, projectIDParameter, remarksParameter, journalLocationIDParameter, localCurrencyIDParameter, localCurrencyParameter, debitCurrencyIDParameter, debitCurrencyParameter, creditCurrencyIDParameter, creditCurrencyParameter, debitExchangeRateParameter, creditExchangeRateParameter, localDebitAmountParameter, localCreditAmountParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetJournalTransDetails_Result> SpGetJournalTransDetails(Nullable<int> iD, Nullable<int> finYEAR, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYEARParameter = finYEAR.HasValue ?
                new ObjectParameter("FinYEAR", finYEAR) :
                new ObjectParameter("FinYEAR", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetJournalTransDetails_Result>("SpGetJournalTransDetails", iDParameter, finYEARParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreatePaymentV3(string voucherNO, Nullable<System.DateTime> voucherDate, Nullable<int> accountHeadID, Nullable<int> paymentTypeID, string bankName, string referenceNo, Nullable<decimal> paidAmount, string description, string type, Nullable<bool> isSettled, Nullable<decimal> settledAmount, Nullable<int> transactionID, Nullable<int> accountID, Nullable<int> currencyID, Nullable<bool> isDraft, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter paymentID, Nullable<int> receiverBankID, string checqueDate, string bankInstrumentNumber, Nullable<decimal> bankCharges, string receiverBankName, string currencyCode, Nullable<int> localCurrencyID, string localCurrencyCode, Nullable<decimal> currencyExchangeRate, Nullable<decimal> localNetAmt)
        {
            var voucherNOParameter = voucherNO != null ?
                new ObjectParameter("VoucherNO", voucherNO) :
                new ObjectParameter("VoucherNO", typeof(string));
    
            var voucherDateParameter = voucherDate.HasValue ?
                new ObjectParameter("VoucherDate", voucherDate) :
                new ObjectParameter("VoucherDate", typeof(System.DateTime));
    
            var accountHeadIDParameter = accountHeadID.HasValue ?
                new ObjectParameter("AccountHeadID", accountHeadID) :
                new ObjectParameter("AccountHeadID", typeof(int));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(int));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var referenceNoParameter = referenceNo != null ?
                new ObjectParameter("ReferenceNo", referenceNo) :
                new ObjectParameter("ReferenceNo", typeof(string));
    
            var paidAmountParameter = paidAmount.HasValue ?
                new ObjectParameter("PaidAmount", paidAmount) :
                new ObjectParameter("PaidAmount", typeof(decimal));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var isSettledParameter = isSettled.HasValue ?
                new ObjectParameter("IsSettled", isSettled) :
                new ObjectParameter("IsSettled", typeof(bool));
    
            var settledAmountParameter = settledAmount.HasValue ?
                new ObjectParameter("SettledAmount", settledAmount) :
                new ObjectParameter("SettledAmount", typeof(decimal));
    
            var transactionIDParameter = transactionID.HasValue ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var receiverBankIDParameter = receiverBankID.HasValue ?
                new ObjectParameter("ReceiverBankID", receiverBankID) :
                new ObjectParameter("ReceiverBankID", typeof(int));
    
            var checqueDateParameter = checqueDate != null ?
                new ObjectParameter("ChecqueDate", checqueDate) :
                new ObjectParameter("ChecqueDate", typeof(string));
    
            var bankInstrumentNumberParameter = bankInstrumentNumber != null ?
                new ObjectParameter("BankInstrumentNumber", bankInstrumentNumber) :
                new ObjectParameter("BankInstrumentNumber", typeof(string));
    
            var bankChargesParameter = bankCharges.HasValue ?
                new ObjectParameter("BankCharges", bankCharges) :
                new ObjectParameter("BankCharges", typeof(decimal));
    
            var receiverBankNameParameter = receiverBankName != null ?
                new ObjectParameter("ReceiverBankName", receiverBankName) :
                new ObjectParameter("ReceiverBankName", typeof(string));
    
            var currencyCodeParameter = currencyCode != null ?
                new ObjectParameter("CurrencyCode", currencyCode) :
                new ObjectParameter("CurrencyCode", typeof(string));
    
            var localCurrencyIDParameter = localCurrencyID.HasValue ?
                new ObjectParameter("LocalCurrencyID", localCurrencyID) :
                new ObjectParameter("LocalCurrencyID", typeof(int));
    
            var localCurrencyCodeParameter = localCurrencyCode != null ?
                new ObjectParameter("LocalCurrencyCode", localCurrencyCode) :
                new ObjectParameter("LocalCurrencyCode", typeof(string));
    
            var currencyExchangeRateParameter = currencyExchangeRate.HasValue ?
                new ObjectParameter("CurrencyExchangeRate", currencyExchangeRate) :
                new ObjectParameter("CurrencyExchangeRate", typeof(decimal));
    
            var localNetAmtParameter = localNetAmt.HasValue ?
                new ObjectParameter("LocalNetAmt", localNetAmt) :
                new ObjectParameter("LocalNetAmt", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePaymentV3", voucherNOParameter, voucherDateParameter, accountHeadIDParameter, paymentTypeIDParameter, bankNameParameter, referenceNoParameter, paidAmountParameter, descriptionParameter, typeParameter, isSettledParameter, settledAmountParameter, transactionIDParameter, accountIDParameter, currencyIDParameter, isDraftParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, paymentID, receiverBankIDParameter, checqueDateParameter, bankInstrumentNumberParameter, bankChargesParameter, receiverBankNameParameter, currencyCodeParameter, localCurrencyIDParameter, localCurrencyCodeParameter, currencyExchangeRateParameter, localNetAmtParameter);
        }
    
        public virtual ObjectResult<SpGetPaymentVoucherDetailV3_Result> SpGetPaymentVoucherDetailV3(Nullable<int> paymentID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var paymentIDParameter = paymentID.HasValue ?
                new ObjectParameter("PaymentID", paymentID) :
                new ObjectParameter("PaymentID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPaymentVoucherDetailV3_Result>("SpGetPaymentVoucherDetailV3", paymentIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdatePayment(Nullable<int> iD, Nullable<int> paymentTypeID, string bankName, string referenceNo, string description, Nullable<decimal> paidAmount, Nullable<int> currencyID, string currencyCode, Nullable<int> localCurrencyID, string localCurrencyCode, Nullable<decimal> currencyExchangeRate, Nullable<decimal> localNetAmt, Nullable<int> createdUserID, Nullable<bool> isDraft, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter paymentID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(int));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var referenceNoParameter = referenceNo != null ?
                new ObjectParameter("ReferenceNo", referenceNo) :
                new ObjectParameter("ReferenceNo", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var paidAmountParameter = paidAmount.HasValue ?
                new ObjectParameter("PaidAmount", paidAmount) :
                new ObjectParameter("PaidAmount", typeof(decimal));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var currencyCodeParameter = currencyCode != null ?
                new ObjectParameter("CurrencyCode", currencyCode) :
                new ObjectParameter("CurrencyCode", typeof(string));
    
            var localCurrencyIDParameter = localCurrencyID.HasValue ?
                new ObjectParameter("LocalCurrencyID", localCurrencyID) :
                new ObjectParameter("LocalCurrencyID", typeof(int));
    
            var localCurrencyCodeParameter = localCurrencyCode != null ?
                new ObjectParameter("LocalCurrencyCode", localCurrencyCode) :
                new ObjectParameter("LocalCurrencyCode", typeof(string));
    
            var currencyExchangeRateParameter = currencyExchangeRate.HasValue ?
                new ObjectParameter("CurrencyExchangeRate", currencyExchangeRate) :
                new ObjectParameter("CurrencyExchangeRate", typeof(decimal));
    
            var localNetAmtParameter = localNetAmt.HasValue ?
                new ObjectParameter("LocalNetAmt", localNetAmt) :
                new ObjectParameter("LocalNetAmt", typeof(decimal));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var isDraftParameter = isDraft.HasValue ?
                new ObjectParameter("IsDraft", isDraft) :
                new ObjectParameter("IsDraft", typeof(bool));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdatePayment", iDParameter, paymentTypeIDParameter, bankNameParameter, referenceNoParameter, descriptionParameter, paidAmountParameter, currencyIDParameter, currencyCodeParameter, localCurrencyIDParameter, localCurrencyCodeParameter, currencyExchangeRateParameter, localNetAmtParameter, createdUserIDParameter, isDraftParameter, finYearParameter, locationIDParameter, applicationIDParameter, paymentID);
        }
    }
}
