//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccessLayer.DBContext
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ReportsEntities : DbContext
    {
        public ReportsEntities()
            : base("name=ReportsEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<SpChequeReport_Result> SpChequeReport(Nullable<System.DateTime> receiptDateFrom, Nullable<System.DateTime> receiptDateTo, Nullable<int> customerID, string chequeStatus, Nullable<int> location, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var receiptDateFromParameter = receiptDateFrom.HasValue ?
                new ObjectParameter("ReceiptDateFrom", receiptDateFrom) :
                new ObjectParameter("ReceiptDateFrom", typeof(System.DateTime));
    
            var receiptDateToParameter = receiptDateTo.HasValue ?
                new ObjectParameter("ReceiptDateTo", receiptDateTo) :
                new ObjectParameter("ReceiptDateTo", typeof(System.DateTime));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var chequeStatusParameter = chequeStatus != null ?
                new ObjectParameter("ChequeStatus", chequeStatus) :
                new ObjectParameter("ChequeStatus", typeof(string));
    
            var locationParameter = location.HasValue ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpChequeReport_Result>("SpChequeReport", receiptDateFromParameter, receiptDateToParameter, customerIDParameter, chequeStatusParameter, locationParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpCollectionReport_Result> SpCollectionReport(Nullable<System.DateTime> receiptDateFrom, Nullable<System.DateTime> receiptDateTo, Nullable<int> customerID, string chequeStatus, Nullable<int> location, string chequeNo, Nullable<System.DateTime> chqueDate, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var receiptDateFromParameter = receiptDateFrom.HasValue ?
                new ObjectParameter("ReceiptDateFrom", receiptDateFrom) :
                new ObjectParameter("ReceiptDateFrom", typeof(System.DateTime));
    
            var receiptDateToParameter = receiptDateTo.HasValue ?
                new ObjectParameter("ReceiptDateTo", receiptDateTo) :
                new ObjectParameter("ReceiptDateTo", typeof(System.DateTime));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var chequeStatusParameter = chequeStatus != null ?
                new ObjectParameter("ChequeStatus", chequeStatus) :
                new ObjectParameter("ChequeStatus", typeof(string));
    
            var locationParameter = location.HasValue ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(int));
    
            var chequeNoParameter = chequeNo != null ?
                new ObjectParameter("ChequeNo", chequeNo) :
                new ObjectParameter("ChequeNo", typeof(string));
    
            var chqueDateParameter = chqueDate.HasValue ?
                new ObjectParameter("ChqueDate", chqueDate) :
                new ObjectParameter("ChqueDate", typeof(System.DateTime));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpCollectionReport_Result>("SpCollectionReport", receiptDateFromParameter, receiptDateToParameter, customerIDParameter, chequeStatusParameter, locationParameter, chequeNoParameter, chqueDateParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpCounterSalesPrint_Result> SpCounterSalesPrint(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpCounterSalesPrint_Result>("SpCounterSalesPrint", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpCustomerAgeing_Result> SpCustomerAgeing(Nullable<System.DateTime> date, Nullable<int> itemCodeFromID, Nullable<int> itemCodeToID, string itemNameFrom, string itemNameTo, Nullable<int> itemID, Nullable<int> location, Nullable<int> customerCodeFrom, Nullable<int> customerCodeTo, string customerNameFrom, string customerNameTo, Nullable<int> customerID, Nullable<int> invoiceNoFrom, Nullable<int> invoiceNoTo, Nullable<System.DateTime> invoiceDateFrom, Nullable<System.DateTime> invoceDateTo, Nullable<int> ageingBucketID, Nullable<int> userID, Nullable<int> locationID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var itemCodeFromIDParameter = itemCodeFromID.HasValue ?
                new ObjectParameter("ItemCodeFromID", itemCodeFromID) :
                new ObjectParameter("ItemCodeFromID", typeof(int));
    
            var itemCodeToIDParameter = itemCodeToID.HasValue ?
                new ObjectParameter("ItemCodeToID", itemCodeToID) :
                new ObjectParameter("ItemCodeToID", typeof(int));
    
            var itemNameFromParameter = itemNameFrom != null ?
                new ObjectParameter("ItemNameFrom", itemNameFrom) :
                new ObjectParameter("ItemNameFrom", typeof(string));
    
            var itemNameToParameter = itemNameTo != null ?
                new ObjectParameter("ItemNameTo", itemNameTo) :
                new ObjectParameter("ItemNameTo", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var locationParameter = location.HasValue ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(int));
    
            var customerCodeFromParameter = customerCodeFrom.HasValue ?
                new ObjectParameter("CustomerCodeFrom", customerCodeFrom) :
                new ObjectParameter("CustomerCodeFrom", typeof(int));
    
            var customerCodeToParameter = customerCodeTo.HasValue ?
                new ObjectParameter("CustomerCodeTo", customerCodeTo) :
                new ObjectParameter("CustomerCodeTo", typeof(int));
    
            var customerNameFromParameter = customerNameFrom != null ?
                new ObjectParameter("CustomerNameFrom", customerNameFrom) :
                new ObjectParameter("CustomerNameFrom", typeof(string));
    
            var customerNameToParameter = customerNameTo != null ?
                new ObjectParameter("CustomerNameTo", customerNameTo) :
                new ObjectParameter("CustomerNameTo", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var invoiceNoFromParameter = invoiceNoFrom.HasValue ?
                new ObjectParameter("InvoiceNoFrom", invoiceNoFrom) :
                new ObjectParameter("InvoiceNoFrom", typeof(int));
    
            var invoiceNoToParameter = invoiceNoTo.HasValue ?
                new ObjectParameter("InvoiceNoTo", invoiceNoTo) :
                new ObjectParameter("InvoiceNoTo", typeof(int));
    
            var invoiceDateFromParameter = invoiceDateFrom.HasValue ?
                new ObjectParameter("InvoiceDateFrom", invoiceDateFrom) :
                new ObjectParameter("InvoiceDateFrom", typeof(System.DateTime));
    
            var invoceDateToParameter = invoceDateTo.HasValue ?
                new ObjectParameter("InvoceDateTo", invoceDateTo) :
                new ObjectParameter("InvoceDateTo", typeof(System.DateTime));
    
            var ageingBucketIDParameter = ageingBucketID.HasValue ?
                new ObjectParameter("AgeingBucketID", ageingBucketID) :
                new ObjectParameter("AgeingBucketID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpCustomerAgeing_Result>("SpCustomerAgeing", dateParameter, itemCodeFromIDParameter, itemCodeToIDParameter, itemNameFromParameter, itemNameToParameter, itemIDParameter, locationParameter, customerCodeFromParameter, customerCodeToParameter, customerNameFromParameter, customerNameToParameter, customerIDParameter, invoiceNoFromParameter, invoiceNoToParameter, invoiceDateFromParameter, invoceDateToParameter, ageingBucketIDParameter, userIDParameter, locationIDParameter);
        }
    
        public virtual ObjectResult<SpCustomerCreditNotePrint_Result> SpCustomerCreditNotePrint(Nullable<int> creditNoteID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var creditNoteIDParameter = creditNoteID.HasValue ?
                new ObjectParameter("CreditNoteID", creditNoteID) :
                new ObjectParameter("CreditNoteID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpCustomerCreditNotePrint_Result>("SpCustomerCreditNotePrint", creditNoteIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpCustomerDebitAndCreditNote_Result> SpCustomerDebitAndCreditNote(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string type, Nullable<int> fromID, Nullable<int> toID, Nullable<int> customerCodeFrom, Nullable<int> customerCodeTo, Nullable<int> customerID, string refInvoiceNo, Nullable<System.DateTime> refDocDate, Nullable<int> debitCreditLocationID, Nullable<int> departmentID, string employeeFrom, string employeeTo, Nullable<int> employeeID, Nullable<int> interCompanyID, Nullable<int> projectID, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var fromIDParameter = fromID.HasValue ?
                new ObjectParameter("FromID", fromID) :
                new ObjectParameter("FromID", typeof(int));
    
            var toIDParameter = toID.HasValue ?
                new ObjectParameter("ToID", toID) :
                new ObjectParameter("ToID", typeof(int));
    
            var customerCodeFromParameter = customerCodeFrom.HasValue ?
                new ObjectParameter("CustomerCodeFrom", customerCodeFrom) :
                new ObjectParameter("CustomerCodeFrom", typeof(int));
    
            var customerCodeToParameter = customerCodeTo.HasValue ?
                new ObjectParameter("CustomerCodeTo", customerCodeTo) :
                new ObjectParameter("CustomerCodeTo", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var refInvoiceNoParameter = refInvoiceNo != null ?
                new ObjectParameter("RefInvoiceNo", refInvoiceNo) :
                new ObjectParameter("RefInvoiceNo", typeof(string));
    
            var refDocDateParameter = refDocDate.HasValue ?
                new ObjectParameter("RefDocDate", refDocDate) :
                new ObjectParameter("RefDocDate", typeof(System.DateTime));
    
            var debitCreditLocationIDParameter = debitCreditLocationID.HasValue ?
                new ObjectParameter("DebitCreditLocationID", debitCreditLocationID) :
                new ObjectParameter("DebitCreditLocationID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var employeeFromParameter = employeeFrom != null ?
                new ObjectParameter("EmployeeFrom", employeeFrom) :
                new ObjectParameter("EmployeeFrom", typeof(string));
    
            var employeeToParameter = employeeTo != null ?
                new ObjectParameter("EmployeeTo", employeeTo) :
                new ObjectParameter("EmployeeTo", typeof(string));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var interCompanyIDParameter = interCompanyID.HasValue ?
                new ObjectParameter("InterCompanyID", interCompanyID) :
                new ObjectParameter("InterCompanyID", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpCustomerDebitAndCreditNote_Result>("SpCustomerDebitAndCreditNote", fromDateParameter, toDateParameter, typeParameter, fromIDParameter, toIDParameter, customerCodeFromParameter, customerCodeToParameter, customerIDParameter, refInvoiceNoParameter, refDocDateParameter, debitCreditLocationIDParameter, departmentIDParameter, employeeFromParameter, employeeToParameter, employeeIDParameter, interCompanyIDParameter, projectIDParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpCustomerDebitNotePrint_Result> SpCustomerDebitNotePrint(Nullable<int> debitNoteID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var debitNoteIDParameter = debitNoteID.HasValue ?
                new ObjectParameter("DebitNoteID", debitNoteID) :
                new ObjectParameter("DebitNoteID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpCustomerDebitNotePrint_Result>("SpCustomerDebitNotePrint", debitNoteIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpCustomerHistory_Result> SpCustomerHistory(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> customerCodeFromID, Nullable<int> customerCodeToID, Nullable<int> customerID, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var customerCodeFromIDParameter = customerCodeFromID.HasValue ?
                new ObjectParameter("CustomerCodeFromID", customerCodeFromID) :
                new ObjectParameter("CustomerCodeFromID", typeof(int));
    
            var customerCodeToIDParameter = customerCodeToID.HasValue ?
                new ObjectParameter("CustomerCodeToID", customerCodeToID) :
                new ObjectParameter("CustomerCodeToID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpCustomerHistory_Result>("SpCustomerHistory", fromDateParameter, toDateParameter, customerCodeFromIDParameter, customerCodeToIDParameter, customerIDParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<string> SpGetAgeingBuckets()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SpGetAgeingBuckets");
        }
    
        public virtual ObjectResult<SpGetBatchType_Result> SpGetBatchType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetBatchType_Result>("SpGetBatchType");
        }
    
        public virtual ObjectResult<SpGetFSOForIncentiveTarget_Result> SpGetFSOForIncentiveTarget()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetFSOForIncentiveTarget_Result>("SpGetFSOForIncentiveTarget");
        }
    
        public virtual ObjectResult<SpGetGstRateByID_Result> SpGetGstRateByID(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetGstRateByID_Result>("SpGetGstRateByID", iDParameter);
        }
    
        public virtual ObjectResult<SpGetIssueTemplateItems_Result> SpGetIssueTemplateItems(string category, Nullable<int> warehouseID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetIssueTemplateItems_Result>("SpGetIssueTemplateItems", categoryParameter, warehouseIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetItemForPriceList_Result> SpGetItemForPriceList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetItemForPriceList_Result>("SpGetItemForPriceList");
        }
    
        public virtual ObjectResult<SpGetItemForSalesBudget_Result> SpGetItemForSalesBudget(Nullable<int> branchID)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetItemForSalesBudget_Result>("SpGetItemForSalesBudget", branchIDParameter);
        }
    
        public virtual ObjectResult<SpGetItemForStockAdjustment_Result> SpGetItemForStockAdjustment(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetItemForStockAdjustment_Result>("SpGetItemForStockAdjustment", finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetItemForTransportPermitTemp_Result> SpGetItemForTransportPermitTemp(Nullable<int> stockIssueNoFrom, Nullable<int> stockIssueNoTo, Nullable<int> salesInvoiceNoFrom, Nullable<int> salesInvoiceNoTo, string reportType)
        {
            var stockIssueNoFromParameter = stockIssueNoFrom.HasValue ?
                new ObjectParameter("StockIssueNoFrom", stockIssueNoFrom) :
                new ObjectParameter("StockIssueNoFrom", typeof(int));
    
            var stockIssueNoToParameter = stockIssueNoTo.HasValue ?
                new ObjectParameter("StockIssueNoTo", stockIssueNoTo) :
                new ObjectParameter("StockIssueNoTo", typeof(int));
    
            var salesInvoiceNoFromParameter = salesInvoiceNoFrom.HasValue ?
                new ObjectParameter("SalesInvoiceNoFrom", salesInvoiceNoFrom) :
                new ObjectParameter("SalesInvoiceNoFrom", typeof(int));
    
            var salesInvoiceNoToParameter = salesInvoiceNoTo.HasValue ?
                new ObjectParameter("SalesInvoiceNoTo", salesInvoiceNoTo) :
                new ObjectParameter("SalesInvoiceNoTo", typeof(int));
    
            var reportTypeParameter = reportType != null ?
                new ObjectParameter("ReportType", reportType) :
                new ObjectParameter("ReportType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetItemForTransportPermitTemp_Result>("SpGetItemForTransportPermitTemp", stockIssueNoFromParameter, stockIssueNoToParameter, salesInvoiceNoFromParameter, salesInvoiceNoToParameter, reportTypeParameter);
        }
    
        public virtual ObjectResult<SpGetLocationWiseCustomerList_Result> SpGetLocationWiseCustomerList(Nullable<int> customerLocationID)
        {
            var customerLocationIDParameter = customerLocationID.HasValue ?
                new ObjectParameter("CustomerLocationID", customerLocationID) :
                new ObjectParameter("CustomerLocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetLocationWiseCustomerList_Result>("SpGetLocationWiseCustomerList", customerLocationIDParameter);
        }
    
        public virtual ObjectResult<SpGetRequisitionTemplateItems_Result> SpGetRequisitionTemplateItems(string category, Nullable<int> warehouseID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetRequisitionTemplateItems_Result>("SpGetRequisitionTemplateItems", categoryParameter, warehouseIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetSupplierAgeing_Result> SpGetSupplierAgeing(Nullable<System.DateTime> date, Nullable<System.DateTime> invoiceDateFrom, Nullable<System.DateTime> invoiceDateTo, Nullable<System.DateTime> transDateFrom, Nullable<System.DateTime> transDateTo, string supplierFrom, string supplierTo, Nullable<int> supplierID, string supplierInvoiceNO, Nullable<int> invoiceTransNoFromID, Nullable<int> invoiceTransNoToID, Nullable<int> outstandingDays, string balancePayableOnly, Nullable<int> agingBucketID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> appliationID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var invoiceDateFromParameter = invoiceDateFrom.HasValue ?
                new ObjectParameter("InvoiceDateFrom", invoiceDateFrom) :
                new ObjectParameter("InvoiceDateFrom", typeof(System.DateTime));
    
            var invoiceDateToParameter = invoiceDateTo.HasValue ?
                new ObjectParameter("InvoiceDateTo", invoiceDateTo) :
                new ObjectParameter("InvoiceDateTo", typeof(System.DateTime));
    
            var transDateFromParameter = transDateFrom.HasValue ?
                new ObjectParameter("TransDateFrom", transDateFrom) :
                new ObjectParameter("TransDateFrom", typeof(System.DateTime));
    
            var transDateToParameter = transDateTo.HasValue ?
                new ObjectParameter("TransDateTo", transDateTo) :
                new ObjectParameter("TransDateTo", typeof(System.DateTime));
    
            var supplierFromParameter = supplierFrom != null ?
                new ObjectParameter("SupplierFrom", supplierFrom) :
                new ObjectParameter("SupplierFrom", typeof(string));
    
            var supplierToParameter = supplierTo != null ?
                new ObjectParameter("SupplierTo", supplierTo) :
                new ObjectParameter("SupplierTo", typeof(string));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var supplierInvoiceNOParameter = supplierInvoiceNO != null ?
                new ObjectParameter("SupplierInvoiceNO", supplierInvoiceNO) :
                new ObjectParameter("SupplierInvoiceNO", typeof(string));
    
            var invoiceTransNoFromIDParameter = invoiceTransNoFromID.HasValue ?
                new ObjectParameter("InvoiceTransNoFromID", invoiceTransNoFromID) :
                new ObjectParameter("InvoiceTransNoFromID", typeof(int));
    
            var invoiceTransNoToIDParameter = invoiceTransNoToID.HasValue ?
                new ObjectParameter("InvoiceTransNoToID", invoiceTransNoToID) :
                new ObjectParameter("InvoiceTransNoToID", typeof(int));
    
            var outstandingDaysParameter = outstandingDays.HasValue ?
                new ObjectParameter("OutstandingDays", outstandingDays) :
                new ObjectParameter("OutstandingDays", typeof(int));
    
            var balancePayableOnlyParameter = balancePayableOnly != null ?
                new ObjectParameter("BalancePayableOnly", balancePayableOnly) :
                new ObjectParameter("BalancePayableOnly", typeof(string));
    
            var agingBucketIDParameter = agingBucketID.HasValue ?
                new ObjectParameter("AgingBucketID", agingBucketID) :
                new ObjectParameter("AgingBucketID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var appliationIDParameter = appliationID.HasValue ?
                new ObjectParameter("AppliationID", appliationID) :
                new ObjectParameter("AppliationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSupplierAgeing_Result>("SpGetSupplierAgeing", dateParameter, invoiceDateFromParameter, invoiceDateToParameter, transDateFromParameter, transDateToParameter, supplierFromParameter, supplierToParameter, supplierIDParameter, supplierInvoiceNOParameter, invoiceTransNoFromIDParameter, invoiceTransNoToIDParameter, outstandingDaysParameter, balancePayableOnlyParameter, agingBucketIDParameter, finYearParameter, locationIDParameter, appliationIDParameter);
        }
    
        public virtual ObjectResult<SpGetSupplierAgeingorg_Result> SpGetSupplierAgeingorg(Nullable<System.DateTime> date, Nullable<System.DateTime> invoiceDateFrom, Nullable<System.DateTime> invoiceDateTo, Nullable<System.DateTime> transDateFrom, Nullable<System.DateTime> transDateTo, string supplierFrom, string supplierTo, Nullable<int> supplierID, Nullable<int> supplierInvoiceNOID, Nullable<int> invoiceTransNoFromID, Nullable<int> invoiceTransNoToID, Nullable<int> outstandingDays, string balancePayableOnly, string agingBucket, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> appliationID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var invoiceDateFromParameter = invoiceDateFrom.HasValue ?
                new ObjectParameter("InvoiceDateFrom", invoiceDateFrom) :
                new ObjectParameter("InvoiceDateFrom", typeof(System.DateTime));
    
            var invoiceDateToParameter = invoiceDateTo.HasValue ?
                new ObjectParameter("InvoiceDateTo", invoiceDateTo) :
                new ObjectParameter("InvoiceDateTo", typeof(System.DateTime));
    
            var transDateFromParameter = transDateFrom.HasValue ?
                new ObjectParameter("TransDateFrom", transDateFrom) :
                new ObjectParameter("TransDateFrom", typeof(System.DateTime));
    
            var transDateToParameter = transDateTo.HasValue ?
                new ObjectParameter("TransDateTo", transDateTo) :
                new ObjectParameter("TransDateTo", typeof(System.DateTime));
    
            var supplierFromParameter = supplierFrom != null ?
                new ObjectParameter("SupplierFrom", supplierFrom) :
                new ObjectParameter("SupplierFrom", typeof(string));
    
            var supplierToParameter = supplierTo != null ?
                new ObjectParameter("SupplierTo", supplierTo) :
                new ObjectParameter("SupplierTo", typeof(string));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var supplierInvoiceNOIDParameter = supplierInvoiceNOID.HasValue ?
                new ObjectParameter("SupplierInvoiceNOID", supplierInvoiceNOID) :
                new ObjectParameter("SupplierInvoiceNOID", typeof(int));
    
            var invoiceTransNoFromIDParameter = invoiceTransNoFromID.HasValue ?
                new ObjectParameter("InvoiceTransNoFromID", invoiceTransNoFromID) :
                new ObjectParameter("InvoiceTransNoFromID", typeof(int));
    
            var invoiceTransNoToIDParameter = invoiceTransNoToID.HasValue ?
                new ObjectParameter("InvoiceTransNoToID", invoiceTransNoToID) :
                new ObjectParameter("InvoiceTransNoToID", typeof(int));
    
            var outstandingDaysParameter = outstandingDays.HasValue ?
                new ObjectParameter("OutstandingDays", outstandingDays) :
                new ObjectParameter("OutstandingDays", typeof(int));
    
            var balancePayableOnlyParameter = balancePayableOnly != null ?
                new ObjectParameter("BalancePayableOnly", balancePayableOnly) :
                new ObjectParameter("BalancePayableOnly", typeof(string));
    
            var agingBucketParameter = agingBucket != null ?
                new ObjectParameter("AgingBucket", agingBucket) :
                new ObjectParameter("AgingBucket", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var appliationIDParameter = appliationID.HasValue ?
                new ObjectParameter("AppliationID", appliationID) :
                new ObjectParameter("AppliationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSupplierAgeingorg_Result>("SpGetSupplierAgeingorg", dateParameter, invoiceDateFromParameter, invoiceDateToParameter, transDateFromParameter, transDateToParameter, supplierFromParameter, supplierToParameter, supplierIDParameter, supplierInvoiceNOIDParameter, invoiceTransNoFromIDParameter, invoiceTransNoToIDParameter, outstandingDaysParameter, balancePayableOnlyParameter, agingBucketParameter, finYearParameter, locationIDParameter, appliationIDParameter);
        }
    
        public virtual ObjectResult<SpGetTransactionType_Result> SpGetTransactionType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetTransactionType_Result>("SpGetTransactionType");
        }
    
        public virtual ObjectResult<SpInvoiceStatus_Result> SpInvoiceStatus(Nullable<int> invoiceNoIDFrom, Nullable<int> invoiceNoIDTo, Nullable<System.DateTime> invoiceDateFrom, Nullable<System.DateTime> invoiceDateTo, Nullable<int> receiptNoIDFrom, Nullable<int> receiptNoIDTo, Nullable<System.DateTime> receiptDateFrom, Nullable<System.DateTime> receiptDateTo, Nullable<int> customerCodeIDFrom, Nullable<int> customerCodeIDTo, string customerNameRangeFrom, string customerNameRangeTo, Nullable<int> customerID, Nullable<int> location, string itemType, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var invoiceNoIDFromParameter = invoiceNoIDFrom.HasValue ?
                new ObjectParameter("InvoiceNoIDFrom", invoiceNoIDFrom) :
                new ObjectParameter("InvoiceNoIDFrom", typeof(int));
    
            var invoiceNoIDToParameter = invoiceNoIDTo.HasValue ?
                new ObjectParameter("InvoiceNoIDTo", invoiceNoIDTo) :
                new ObjectParameter("InvoiceNoIDTo", typeof(int));
    
            var invoiceDateFromParameter = invoiceDateFrom.HasValue ?
                new ObjectParameter("InvoiceDateFrom", invoiceDateFrom) :
                new ObjectParameter("InvoiceDateFrom", typeof(System.DateTime));
    
            var invoiceDateToParameter = invoiceDateTo.HasValue ?
                new ObjectParameter("InvoiceDateTo", invoiceDateTo) :
                new ObjectParameter("InvoiceDateTo", typeof(System.DateTime));
    
            var receiptNoIDFromParameter = receiptNoIDFrom.HasValue ?
                new ObjectParameter("ReceiptNoIDFrom", receiptNoIDFrom) :
                new ObjectParameter("ReceiptNoIDFrom", typeof(int));
    
            var receiptNoIDToParameter = receiptNoIDTo.HasValue ?
                new ObjectParameter("ReceiptNoIDTo", receiptNoIDTo) :
                new ObjectParameter("ReceiptNoIDTo", typeof(int));
    
            var receiptDateFromParameter = receiptDateFrom.HasValue ?
                new ObjectParameter("ReceiptDateFrom", receiptDateFrom) :
                new ObjectParameter("ReceiptDateFrom", typeof(System.DateTime));
    
            var receiptDateToParameter = receiptDateTo.HasValue ?
                new ObjectParameter("ReceiptDateTo", receiptDateTo) :
                new ObjectParameter("ReceiptDateTo", typeof(System.DateTime));
    
            var customerCodeIDFromParameter = customerCodeIDFrom.HasValue ?
                new ObjectParameter("CustomerCodeIDFrom", customerCodeIDFrom) :
                new ObjectParameter("CustomerCodeIDFrom", typeof(int));
    
            var customerCodeIDToParameter = customerCodeIDTo.HasValue ?
                new ObjectParameter("CustomerCodeIDTo", customerCodeIDTo) :
                new ObjectParameter("CustomerCodeIDTo", typeof(int));
    
            var customerNameRangeFromParameter = customerNameRangeFrom != null ?
                new ObjectParameter("CustomerNameRangeFrom", customerNameRangeFrom) :
                new ObjectParameter("CustomerNameRangeFrom", typeof(string));
    
            var customerNameRangeToParameter = customerNameRangeTo != null ?
                new ObjectParameter("CustomerNameRangeTo", customerNameRangeTo) :
                new ObjectParameter("CustomerNameRangeTo", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var locationParameter = location.HasValue ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(int));
    
            var itemTypeParameter = itemType != null ?
                new ObjectParameter("ItemType", itemType) :
                new ObjectParameter("ItemType", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpInvoiceStatus_Result>("SpInvoiceStatus", invoiceNoIDFromParameter, invoiceNoIDToParameter, invoiceDateFromParameter, invoiceDateToParameter, receiptNoIDFromParameter, receiptNoIDToParameter, receiptDateFromParameter, receiptDateToParameter, customerCodeIDFromParameter, customerCodeIDToParameter, customerNameRangeFromParameter, customerNameRangeToParameter, customerIDParameter, locationParameter, itemTypeParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpItemMovement_Result> SpItemMovement(Nullable<System.DateTime> requestDateFrom, Nullable<System.DateTime> requestDateTo, Nullable<System.DateTime> deliveredDateFrom, Nullable<System.DateTime> deliveredDateTo, Nullable<int> requestNoFromID, Nullable<int> requestNoToID, Nullable<int> fromLocationID, Nullable<int> toLocationID, Nullable<int> fromPremisesID, Nullable<int> toPremisesID, string itemCategoryFromRange, string itemCategoryToRange, Nullable<int> itemCategoryID, Nullable<int> itemCodeFrom, Nullable<int> itemCodeTo, string itemNameFromRange, string itemNameToRange, Nullable<int> itemID, Nullable<int> batchTypeID, string transactionType, string valueType, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var requestDateFromParameter = requestDateFrom.HasValue ?
                new ObjectParameter("RequestDateFrom", requestDateFrom) :
                new ObjectParameter("RequestDateFrom", typeof(System.DateTime));
    
            var requestDateToParameter = requestDateTo.HasValue ?
                new ObjectParameter("RequestDateTo", requestDateTo) :
                new ObjectParameter("RequestDateTo", typeof(System.DateTime));
    
            var deliveredDateFromParameter = deliveredDateFrom.HasValue ?
                new ObjectParameter("DeliveredDateFrom", deliveredDateFrom) :
                new ObjectParameter("DeliveredDateFrom", typeof(System.DateTime));
    
            var deliveredDateToParameter = deliveredDateTo.HasValue ?
                new ObjectParameter("DeliveredDateTo", deliveredDateTo) :
                new ObjectParameter("DeliveredDateTo", typeof(System.DateTime));
    
            var requestNoFromIDParameter = requestNoFromID.HasValue ?
                new ObjectParameter("RequestNoFromID", requestNoFromID) :
                new ObjectParameter("RequestNoFromID", typeof(int));
    
            var requestNoToIDParameter = requestNoToID.HasValue ?
                new ObjectParameter("RequestNoToID", requestNoToID) :
                new ObjectParameter("RequestNoToID", typeof(int));
    
            var fromLocationIDParameter = fromLocationID.HasValue ?
                new ObjectParameter("FromLocationID", fromLocationID) :
                new ObjectParameter("FromLocationID", typeof(int));
    
            var toLocationIDParameter = toLocationID.HasValue ?
                new ObjectParameter("ToLocationID", toLocationID) :
                new ObjectParameter("ToLocationID", typeof(int));
    
            var fromPremisesIDParameter = fromPremisesID.HasValue ?
                new ObjectParameter("FromPremisesID", fromPremisesID) :
                new ObjectParameter("FromPremisesID", typeof(int));
    
            var toPremisesIDParameter = toPremisesID.HasValue ?
                new ObjectParameter("ToPremisesID", toPremisesID) :
                new ObjectParameter("ToPremisesID", typeof(int));
    
            var itemCategoryFromRangeParameter = itemCategoryFromRange != null ?
                new ObjectParameter("ItemCategoryFromRange", itemCategoryFromRange) :
                new ObjectParameter("ItemCategoryFromRange", typeof(string));
    
            var itemCategoryToRangeParameter = itemCategoryToRange != null ?
                new ObjectParameter("ItemCategoryToRange", itemCategoryToRange) :
                new ObjectParameter("ItemCategoryToRange", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var itemCodeFromParameter = itemCodeFrom.HasValue ?
                new ObjectParameter("ItemCodeFrom", itemCodeFrom) :
                new ObjectParameter("ItemCodeFrom", typeof(int));
    
            var itemCodeToParameter = itemCodeTo.HasValue ?
                new ObjectParameter("ItemCodeTo", itemCodeTo) :
                new ObjectParameter("ItemCodeTo", typeof(int));
    
            var itemNameFromRangeParameter = itemNameFromRange != null ?
                new ObjectParameter("ItemNameFromRange", itemNameFromRange) :
                new ObjectParameter("ItemNameFromRange", typeof(string));
    
            var itemNameToRangeParameter = itemNameToRange != null ?
                new ObjectParameter("ItemNameToRange", itemNameToRange) :
                new ObjectParameter("ItemNameToRange", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var transactionTypeParameter = transactionType != null ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(string));
    
            var valueTypeParameter = valueType != null ?
                new ObjectParameter("ValueType", valueType) :
                new ObjectParameter("ValueType", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpItemMovement_Result>("SpItemMovement", requestDateFromParameter, requestDateToParameter, deliveredDateFromParameter, deliveredDateToParameter, requestNoFromIDParameter, requestNoToIDParameter, fromLocationIDParameter, toLocationIDParameter, fromPremisesIDParameter, toPremisesIDParameter, itemCategoryFromRangeParameter, itemCategoryToRangeParameter, itemCategoryIDParameter, itemCodeFromParameter, itemCodeToParameter, itemNameFromRangeParameter, itemNameToRangeParameter, itemIDParameter, batchTypeIDParameter, transactionTypeParameter, valueTypeParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpItemStatus_Result> SpItemStatus(Nullable<int> requestNoFrom, Nullable<int> requestNoTo, Nullable<System.DateTime> requestDateFrom, Nullable<System.DateTime> requestDateTo, Nullable<System.DateTime> deliveredDateFrom, Nullable<System.DateTime> deliveredDateTo, Nullable<int> fromLocationID, Nullable<int> toLocationID, Nullable<int> fromPremisesID, Nullable<int> toPremisesID, string fromItemCategoryRange, string toItemCategoryRange, Nullable<int> itemCategoryID, Nullable<int> itemCodeFromID, Nullable<int> itemCodeToID, string fromItemNameRange, string toItemNameRange, Nullable<int> itemNameID, Nullable<int> batchTypeID, string status, string valueType, Nullable<int> batchID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var requestNoFromParameter = requestNoFrom.HasValue ?
                new ObjectParameter("RequestNoFrom", requestNoFrom) :
                new ObjectParameter("RequestNoFrom", typeof(int));
    
            var requestNoToParameter = requestNoTo.HasValue ?
                new ObjectParameter("RequestNoTo", requestNoTo) :
                new ObjectParameter("RequestNoTo", typeof(int));
    
            var requestDateFromParameter = requestDateFrom.HasValue ?
                new ObjectParameter("RequestDateFrom", requestDateFrom) :
                new ObjectParameter("RequestDateFrom", typeof(System.DateTime));
    
            var requestDateToParameter = requestDateTo.HasValue ?
                new ObjectParameter("RequestDateTo", requestDateTo) :
                new ObjectParameter("RequestDateTo", typeof(System.DateTime));
    
            var deliveredDateFromParameter = deliveredDateFrom.HasValue ?
                new ObjectParameter("DeliveredDateFrom", deliveredDateFrom) :
                new ObjectParameter("DeliveredDateFrom", typeof(System.DateTime));
    
            var deliveredDateToParameter = deliveredDateTo.HasValue ?
                new ObjectParameter("DeliveredDateTo", deliveredDateTo) :
                new ObjectParameter("DeliveredDateTo", typeof(System.DateTime));
    
            var fromLocationIDParameter = fromLocationID.HasValue ?
                new ObjectParameter("FromLocationID", fromLocationID) :
                new ObjectParameter("FromLocationID", typeof(int));
    
            var toLocationIDParameter = toLocationID.HasValue ?
                new ObjectParameter("ToLocationID", toLocationID) :
                new ObjectParameter("ToLocationID", typeof(int));
    
            var fromPremisesIDParameter = fromPremisesID.HasValue ?
                new ObjectParameter("FromPremisesID", fromPremisesID) :
                new ObjectParameter("FromPremisesID", typeof(int));
    
            var toPremisesIDParameter = toPremisesID.HasValue ?
                new ObjectParameter("ToPremisesID", toPremisesID) :
                new ObjectParameter("ToPremisesID", typeof(int));
    
            var fromItemCategoryRangeParameter = fromItemCategoryRange != null ?
                new ObjectParameter("FromItemCategoryRange", fromItemCategoryRange) :
                new ObjectParameter("FromItemCategoryRange", typeof(string));
    
            var toItemCategoryRangeParameter = toItemCategoryRange != null ?
                new ObjectParameter("ToItemCategoryRange", toItemCategoryRange) :
                new ObjectParameter("ToItemCategoryRange", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var itemCodeFromIDParameter = itemCodeFromID.HasValue ?
                new ObjectParameter("ItemCodeFromID", itemCodeFromID) :
                new ObjectParameter("ItemCodeFromID", typeof(int));
    
            var itemCodeToIDParameter = itemCodeToID.HasValue ?
                new ObjectParameter("ItemCodeToID", itemCodeToID) :
                new ObjectParameter("ItemCodeToID", typeof(int));
    
            var fromItemNameRangeParameter = fromItemNameRange != null ?
                new ObjectParameter("FromItemNameRange", fromItemNameRange) :
                new ObjectParameter("FromItemNameRange", typeof(string));
    
            var toItemNameRangeParameter = toItemNameRange != null ?
                new ObjectParameter("ToItemNameRange", toItemNameRange) :
                new ObjectParameter("ToItemNameRange", typeof(string));
    
            var itemNameIDParameter = itemNameID.HasValue ?
                new ObjectParameter("ItemNameID", itemNameID) :
                new ObjectParameter("ItemNameID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var valueTypeParameter = valueType != null ?
                new ObjectParameter("ValueType", valueType) :
                new ObjectParameter("ValueType", typeof(string));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpItemStatus_Result>("SpItemStatus", requestNoFromParameter, requestNoToParameter, requestDateFromParameter, requestDateToParameter, deliveredDateFromParameter, deliveredDateToParameter, fromLocationIDParameter, toLocationIDParameter, fromPremisesIDParameter, toPremisesIDParameter, fromItemCategoryRangeParameter, toItemCategoryRangeParameter, itemCategoryIDParameter, itemCodeFromIDParameter, itemCodeToIDParameter, fromItemNameRangeParameter, toItemNameRangeParameter, itemNameIDParameter, batchTypeIDParameter, statusParameter, valueTypeParameter, batchIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpItemwisePurchaseReport_Result> SpItemwisePurchaseReport(Nullable<int> purchaseOrderNOFromID, Nullable<int> purchaseOrderNoToID, Nullable<int> gRNNoFromID, Nullable<int> gRNNoToID, Nullable<System.DateTime> requestDateFrom, Nullable<System.DateTime> requestDateTo, Nullable<int> locationFromID, Nullable<int> locationToID, Nullable<int> premisesFromID, Nullable<int> premisesToID, string fromItemCategoryRange, string toItemCategoryRange, Nullable<int> itemCategoryID, Nullable<int> itemCodeFromID, Nullable<int> itemCodeToID, string fromItemNameRange, string toItemNameRange, Nullable<int> itemID, Nullable<int> finYear, Nullable<int> applicationID, Nullable<int> locatioID)
        {
            var purchaseOrderNOFromIDParameter = purchaseOrderNOFromID.HasValue ?
                new ObjectParameter("purchaseOrderNOFromID", purchaseOrderNOFromID) :
                new ObjectParameter("purchaseOrderNOFromID", typeof(int));
    
            var purchaseOrderNoToIDParameter = purchaseOrderNoToID.HasValue ?
                new ObjectParameter("PurchaseOrderNoToID", purchaseOrderNoToID) :
                new ObjectParameter("PurchaseOrderNoToID", typeof(int));
    
            var gRNNoFromIDParameter = gRNNoFromID.HasValue ?
                new ObjectParameter("GRNNoFromID", gRNNoFromID) :
                new ObjectParameter("GRNNoFromID", typeof(int));
    
            var gRNNoToIDParameter = gRNNoToID.HasValue ?
                new ObjectParameter("GRNNoToID", gRNNoToID) :
                new ObjectParameter("GRNNoToID", typeof(int));
    
            var requestDateFromParameter = requestDateFrom.HasValue ?
                new ObjectParameter("RequestDateFrom", requestDateFrom) :
                new ObjectParameter("RequestDateFrom", typeof(System.DateTime));
    
            var requestDateToParameter = requestDateTo.HasValue ?
                new ObjectParameter("RequestDateTo", requestDateTo) :
                new ObjectParameter("RequestDateTo", typeof(System.DateTime));
    
            var locationFromIDParameter = locationFromID.HasValue ?
                new ObjectParameter("LocationFromID", locationFromID) :
                new ObjectParameter("LocationFromID", typeof(int));
    
            var locationToIDParameter = locationToID.HasValue ?
                new ObjectParameter("LocationToID", locationToID) :
                new ObjectParameter("LocationToID", typeof(int));
    
            var premisesFromIDParameter = premisesFromID.HasValue ?
                new ObjectParameter("PremisesFromID", premisesFromID) :
                new ObjectParameter("PremisesFromID", typeof(int));
    
            var premisesToIDParameter = premisesToID.HasValue ?
                new ObjectParameter("PremisesToID", premisesToID) :
                new ObjectParameter("PremisesToID", typeof(int));
    
            var fromItemCategoryRangeParameter = fromItemCategoryRange != null ?
                new ObjectParameter("FromItemCategoryRange", fromItemCategoryRange) :
                new ObjectParameter("FromItemCategoryRange", typeof(string));
    
            var toItemCategoryRangeParameter = toItemCategoryRange != null ?
                new ObjectParameter("ToItemCategoryRange", toItemCategoryRange) :
                new ObjectParameter("ToItemCategoryRange", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var itemCodeFromIDParameter = itemCodeFromID.HasValue ?
                new ObjectParameter("ItemCodeFromID", itemCodeFromID) :
                new ObjectParameter("ItemCodeFromID", typeof(int));
    
            var itemCodeToIDParameter = itemCodeToID.HasValue ?
                new ObjectParameter("ItemCodeToID", itemCodeToID) :
                new ObjectParameter("ItemCodeToID", typeof(int));
    
            var fromItemNameRangeParameter = fromItemNameRange != null ?
                new ObjectParameter("FromItemNameRange", fromItemNameRange) :
                new ObjectParameter("FromItemNameRange", typeof(string));
    
            var toItemNameRangeParameter = toItemNameRange != null ?
                new ObjectParameter("ToItemNameRange", toItemNameRange) :
                new ObjectParameter("ToItemNameRange", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locatioIDParameter = locatioID.HasValue ?
                new ObjectParameter("LocatioID", locatioID) :
                new ObjectParameter("LocatioID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpItemwisePurchaseReport_Result>("SpItemwisePurchaseReport", purchaseOrderNOFromIDParameter, purchaseOrderNoToIDParameter, gRNNoFromIDParameter, gRNNoToIDParameter, requestDateFromParameter, requestDateToParameter, locationFromIDParameter, locationToIDParameter, premisesFromIDParameter, premisesToIDParameter, fromItemCategoryRangeParameter, toItemCategoryRangeParameter, itemCategoryIDParameter, itemCodeFromIDParameter, itemCodeToIDParameter, fromItemNameRangeParameter, toItemNameRangeParameter, itemIDParameter, finYearParameter, applicationIDParameter, locatioIDParameter);
        }
    
        public virtual ObjectResult<SpJounalVoucher_Result> SpJounalVoucher(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> documentNoFromID, Nullable<int> documentNoToID, Nullable<int> accountCodeFromId, Nullable<int> accountCodeToId, string accountNameFromRange, string accountNameToRange, Nullable<int> accountNameId, Nullable<int> departmentId, string employeeNoFromRange, string employeeNoTo, Nullable<int> employeeId, string interCompanyFrom, string interCompanyTo, Nullable<int> interCompanyId, Nullable<int> projectId, Nullable<int> sLAStatusId, Nullable<int> journalLocationID, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var documentNoFromIDParameter = documentNoFromID.HasValue ?
                new ObjectParameter("DocumentNoFromID", documentNoFromID) :
                new ObjectParameter("DocumentNoFromID", typeof(int));
    
            var documentNoToIDParameter = documentNoToID.HasValue ?
                new ObjectParameter("DocumentNoToID", documentNoToID) :
                new ObjectParameter("DocumentNoToID", typeof(int));
    
            var accountCodeFromIdParameter = accountCodeFromId.HasValue ?
                new ObjectParameter("AccountCodeFromId", accountCodeFromId) :
                new ObjectParameter("AccountCodeFromId", typeof(int));
    
            var accountCodeToIdParameter = accountCodeToId.HasValue ?
                new ObjectParameter("AccountCodeToId", accountCodeToId) :
                new ObjectParameter("AccountCodeToId", typeof(int));
    
            var accountNameFromRangeParameter = accountNameFromRange != null ?
                new ObjectParameter("AccountNameFromRange", accountNameFromRange) :
                new ObjectParameter("AccountNameFromRange", typeof(string));
    
            var accountNameToRangeParameter = accountNameToRange != null ?
                new ObjectParameter("AccountNameToRange", accountNameToRange) :
                new ObjectParameter("AccountNameToRange", typeof(string));
    
            var accountNameIdParameter = accountNameId.HasValue ?
                new ObjectParameter("AccountNameId", accountNameId) :
                new ObjectParameter("AccountNameId", typeof(int));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var employeeNoFromRangeParameter = employeeNoFromRange != null ?
                new ObjectParameter("EmployeeNoFromRange", employeeNoFromRange) :
                new ObjectParameter("EmployeeNoFromRange", typeof(string));
    
            var employeeNoToParameter = employeeNoTo != null ?
                new ObjectParameter("EmployeeNoTo", employeeNoTo) :
                new ObjectParameter("EmployeeNoTo", typeof(string));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var interCompanyFromParameter = interCompanyFrom != null ?
                new ObjectParameter("InterCompanyFrom", interCompanyFrom) :
                new ObjectParameter("InterCompanyFrom", typeof(string));
    
            var interCompanyToParameter = interCompanyTo != null ?
                new ObjectParameter("InterCompanyTo", interCompanyTo) :
                new ObjectParameter("InterCompanyTo", typeof(string));
    
            var interCompanyIdParameter = interCompanyId.HasValue ?
                new ObjectParameter("InterCompanyId", interCompanyId) :
                new ObjectParameter("InterCompanyId", typeof(int));
    
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(int));
    
            var sLAStatusIdParameter = sLAStatusId.HasValue ?
                new ObjectParameter("SLAStatusId", sLAStatusId) :
                new ObjectParameter("SLAStatusId", typeof(int));
    
            var journalLocationIDParameter = journalLocationID.HasValue ?
                new ObjectParameter("JournalLocationID", journalLocationID) :
                new ObjectParameter("JournalLocationID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpJounalVoucher_Result>("SpJounalVoucher", fromDateParameter, toDateParameter, documentNoFromIDParameter, documentNoToIDParameter, accountCodeFromIdParameter, accountCodeToIdParameter, accountNameFromRangeParameter, accountNameToRangeParameter, accountNameIdParameter, departmentIdParameter, employeeNoFromRangeParameter, employeeNoToParameter, employeeIdParameter, interCompanyFromParameter, interCompanyToParameter, interCompanyIdParameter, projectIdParameter, sLAStatusIdParameter, journalLocationIDParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpPackingSlipPrint_Result> SpPackingSlipPrint(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpPackingSlipPrint_Result>("SpPackingSlipPrint", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpProformaInvoicePickList_Result> SpProformaInvoicePickList(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpProformaInvoicePickList_Result>("SpProformaInvoicePickList", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpReceiptVoucher_Result> SpReceiptVoucher(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> customerCodeID, Nullable<int> customerID, Nullable<int> location, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var customerCodeIDParameter = customerCodeID.HasValue ?
                new ObjectParameter("CustomerCodeID", customerCodeID) :
                new ObjectParameter("CustomerCodeID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var locationParameter = location.HasValue ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpReceiptVoucher_Result>("SpReceiptVoucher", fromDateParameter, toDateParameter, customerCodeIDParameter, customerIDParameter, locationParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptAccountLedger_Result> SpRptAccountLedger(string reportType, Nullable<int> groups, Nullable<int> accountId, Nullable<System.DateTime> fromDT, Nullable<System.DateTime> toDT, string docType, string documentNo, string transType, Nullable<int> accountCodeFrom, Nullable<int> accountCodeTo, string accountNameFromRange, string accountNameToRange, Nullable<int> location, Nullable<int> departmentID, Nullable<int> employeeID, Nullable<int> interCompanyID, Nullable<int> projectID, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var reportTypeParameter = reportType != null ?
                new ObjectParameter("ReportType", reportType) :
                new ObjectParameter("ReportType", typeof(string));
    
            var groupsParameter = groups.HasValue ?
                new ObjectParameter("Groups", groups) :
                new ObjectParameter("Groups", typeof(int));
    
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(int));
    
            var fromDTParameter = fromDT.HasValue ?
                new ObjectParameter("FromDT", fromDT) :
                new ObjectParameter("FromDT", typeof(System.DateTime));
    
            var toDTParameter = toDT.HasValue ?
                new ObjectParameter("ToDT", toDT) :
                new ObjectParameter("ToDT", typeof(System.DateTime));
    
            var docTypeParameter = docType != null ?
                new ObjectParameter("DocType", docType) :
                new ObjectParameter("DocType", typeof(string));
    
            var documentNoParameter = documentNo != null ?
                new ObjectParameter("DocumentNo", documentNo) :
                new ObjectParameter("DocumentNo", typeof(string));
    
            var transTypeParameter = transType != null ?
                new ObjectParameter("TransType", transType) :
                new ObjectParameter("TransType", typeof(string));
    
            var accountCodeFromParameter = accountCodeFrom.HasValue ?
                new ObjectParameter("AccountCodeFrom", accountCodeFrom) :
                new ObjectParameter("AccountCodeFrom", typeof(int));
    
            var accountCodeToParameter = accountCodeTo.HasValue ?
                new ObjectParameter("AccountCodeTo", accountCodeTo) :
                new ObjectParameter("AccountCodeTo", typeof(int));
    
            var accountNameFromRangeParameter = accountNameFromRange != null ?
                new ObjectParameter("AccountNameFromRange", accountNameFromRange) :
                new ObjectParameter("AccountNameFromRange", typeof(string));
    
            var accountNameToRangeParameter = accountNameToRange != null ?
                new ObjectParameter("AccountNameToRange", accountNameToRange) :
                new ObjectParameter("AccountNameToRange", typeof(string));
    
            var locationParameter = location.HasValue ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var interCompanyIDParameter = interCompanyID.HasValue ?
                new ObjectParameter("InterCompanyID", interCompanyID) :
                new ObjectParameter("InterCompanyID", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptAccountLedger_Result>("SpRptAccountLedger", reportTypeParameter, groupsParameter, accountIdParameter, fromDTParameter, toDTParameter, docTypeParameter, documentNoParameter, transTypeParameter, accountCodeFromParameter, accountCodeToParameter, accountNameFromRangeParameter, accountNameToRangeParameter, locationParameter, departmentIDParameter, employeeIDParameter, interCompanyIDParameter, projectIDParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptAdvancePayment_Result> SpRptAdvancePayment(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string type, Nullable<int> advanceNoFromID, Nullable<int> advanceNoToID, Nullable<int> supplierID, Nullable<int> employeeID, string supplierFrom, string supplierTo, Nullable<int> paymentTypeID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var advanceNoFromIDParameter = advanceNoFromID.HasValue ?
                new ObjectParameter("AdvanceNoFromID", advanceNoFromID) :
                new ObjectParameter("AdvanceNoFromID", typeof(int));
    
            var advanceNoToIDParameter = advanceNoToID.HasValue ?
                new ObjectParameter("AdvanceNoToID", advanceNoToID) :
                new ObjectParameter("AdvanceNoToID", typeof(int));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var supplierFromParameter = supplierFrom != null ?
                new ObjectParameter("SupplierFrom", supplierFrom) :
                new ObjectParameter("SupplierFrom", typeof(string));
    
            var supplierToParameter = supplierTo != null ?
                new ObjectParameter("SupplierTo", supplierTo) :
                new ObjectParameter("SupplierTo", typeof(string));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptAdvancePayment_Result>("SpRptAdvancePayment", fromDateParameter, toDateParameter, typeParameter, advanceNoFromIDParameter, advanceNoToIDParameter, supplierIDParameter, employeeIDParameter, supplierFromParameter, supplierToParameter, paymentTypeIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptAdvanceRequest_Result> SpRptAdvanceRequest(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> employeeID, Nullable<int> location, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var locationParameter = location.HasValue ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptAdvanceRequest_Result>("SpRptAdvanceRequest", fromDateParameter, toDateParameter, employeeIDParameter, locationParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptAdvanceReturn_Result> SpRptAdvanceReturn(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string type, Nullable<int> supplierID, Nullable<int> employeeID, string supplierFromRange, string supplierToRange, string employeeFromRange, string employeeToRange, Nullable<int> advanceFromID, Nullable<int> advanceToID, Nullable<int> advanceReturnFromID, Nullable<int> advanceReturnToID, string status, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var supplierFromRangeParameter = supplierFromRange != null ?
                new ObjectParameter("SupplierFromRange", supplierFromRange) :
                new ObjectParameter("SupplierFromRange", typeof(string));
    
            var supplierToRangeParameter = supplierToRange != null ?
                new ObjectParameter("SupplierToRange", supplierToRange) :
                new ObjectParameter("SupplierToRange", typeof(string));
    
            var employeeFromRangeParameter = employeeFromRange != null ?
                new ObjectParameter("EmployeeFromRange", employeeFromRange) :
                new ObjectParameter("EmployeeFromRange", typeof(string));
    
            var employeeToRangeParameter = employeeToRange != null ?
                new ObjectParameter("EmployeeToRange", employeeToRange) :
                new ObjectParameter("EmployeeToRange", typeof(string));
    
            var advanceFromIDParameter = advanceFromID.HasValue ?
                new ObjectParameter("AdvanceFromID", advanceFromID) :
                new ObjectParameter("AdvanceFromID", typeof(int));
    
            var advanceToIDParameter = advanceToID.HasValue ?
                new ObjectParameter("AdvanceToID", advanceToID) :
                new ObjectParameter("AdvanceToID", typeof(int));
    
            var advanceReturnFromIDParameter = advanceReturnFromID.HasValue ?
                new ObjectParameter("AdvanceReturnFromID", advanceReturnFromID) :
                new ObjectParameter("AdvanceReturnFromID", typeof(int));
    
            var advanceReturnToIDParameter = advanceReturnToID.HasValue ?
                new ObjectParameter("AdvanceReturnToID", advanceReturnToID) :
                new ObjectParameter("AdvanceReturnToID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptAdvanceReturn_Result>("SpRptAdvanceReturn", fromDateParameter, toDateParameter, typeParameter, supplierIDParameter, employeeIDParameter, supplierFromRangeParameter, supplierToRangeParameter, employeeFromRangeParameter, employeeToRangeParameter, advanceFromIDParameter, advanceToIDParameter, advanceReturnFromIDParameter, advanceReturnToIDParameter, statusParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptAdvanceReturnSummary_Result> SpRptAdvanceReturnSummary(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string type, Nullable<int> supplierID, Nullable<int> employeeID, string supplierFromRange, string supplierToRange, string employeeFromRange, string employeeToRange, Nullable<int> advanceFromID, Nullable<int> advanceToID, Nullable<int> advanceReturnFromID, Nullable<int> advanceReturnToID, string status, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var supplierFromRangeParameter = supplierFromRange != null ?
                new ObjectParameter("SupplierFromRange", supplierFromRange) :
                new ObjectParameter("SupplierFromRange", typeof(string));
    
            var supplierToRangeParameter = supplierToRange != null ?
                new ObjectParameter("SupplierToRange", supplierToRange) :
                new ObjectParameter("SupplierToRange", typeof(string));
    
            var employeeFromRangeParameter = employeeFromRange != null ?
                new ObjectParameter("EmployeeFromRange", employeeFromRange) :
                new ObjectParameter("EmployeeFromRange", typeof(string));
    
            var employeeToRangeParameter = employeeToRange != null ?
                new ObjectParameter("EmployeeToRange", employeeToRange) :
                new ObjectParameter("EmployeeToRange", typeof(string));
    
            var advanceFromIDParameter = advanceFromID.HasValue ?
                new ObjectParameter("AdvanceFromID", advanceFromID) :
                new ObjectParameter("AdvanceFromID", typeof(int));
    
            var advanceToIDParameter = advanceToID.HasValue ?
                new ObjectParameter("AdvanceToID", advanceToID) :
                new ObjectParameter("AdvanceToID", typeof(int));
    
            var advanceReturnFromIDParameter = advanceReturnFromID.HasValue ?
                new ObjectParameter("AdvanceReturnFromID", advanceReturnFromID) :
                new ObjectParameter("AdvanceReturnFromID", typeof(int));
    
            var advanceReturnToIDParameter = advanceReturnToID.HasValue ?
                new ObjectParameter("AdvanceReturnToID", advanceReturnToID) :
                new ObjectParameter("AdvanceReturnToID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptAdvanceReturnSummary_Result>("SpRptAdvanceReturnSummary", fromDateParameter, toDateParameter, typeParameter, supplierIDParameter, employeeIDParameter, supplierFromRangeParameter, supplierToRangeParameter, employeeFromRangeParameter, employeeToRangeParameter, advanceFromIDParameter, advanceToIDParameter, advanceReturnFromIDParameter, advanceReturnToIDParameter, statusParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptArrivingInventoryLevels_Result> SpRptArrivingInventoryLevels(string xMLParams)
        {
            var xMLParamsParameter = xMLParams != null ?
                new ObjectParameter("XMLParams", xMLParams) :
                new ObjectParameter("XMLParams", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptArrivingInventoryLevels_Result>("SpRptArrivingInventoryLevels", xMLParamsParameter);
        }
    
        public virtual ObjectResult<SpRptBatchwiseProductionPacking_Result> SpRptBatchwiseProductionPacking(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> itemID, Nullable<int> salesCategoryID, Nullable<int> batchID, Nullable<int> batchTypeID, Nullable<int> filterLocationID, Nullable<int> premisis, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var salesCategoryIDParameter = salesCategoryID.HasValue ?
                new ObjectParameter("SalesCategoryID", salesCategoryID) :
                new ObjectParameter("SalesCategoryID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var filterLocationIDParameter = filterLocationID.HasValue ?
                new ObjectParameter("FilterLocationID", filterLocationID) :
                new ObjectParameter("FilterLocationID", typeof(int));
    
            var premisisParameter = premisis.HasValue ?
                new ObjectParameter("Premisis", premisis) :
                new ObjectParameter("Premisis", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptBatchwiseProductionPacking_Result>("SpRptBatchwiseProductionPacking", fromDateParameter, toDateParameter, itemIDParameter, salesCategoryIDParameter, batchIDParameter, batchTypeIDParameter, filterLocationIDParameter, premisisParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptBedOccupancyRegister_Result> SpRptBedOccupancyRegister(Nullable<int> monthID, Nullable<int> year)
        {
            var monthIDParameter = monthID.HasValue ?
                new ObjectParameter("MonthID", monthID) :
                new ObjectParameter("MonthID", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptBedOccupancyRegister_Result>("SpRptBedOccupancyRegister", monthIDParameter, yearParameter);
        }
    
        public virtual ObjectResult<SpRptCashBankLedger_Result> SpRptCashBankLedger(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> treasuryID, string documentNo, Nullable<int> accountCodeID, Nullable<int> accountID, Nullable<int> location, Nullable<int> paymentMode, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var treasuryIDParameter = treasuryID.HasValue ?
                new ObjectParameter("TreasuryID", treasuryID) :
                new ObjectParameter("TreasuryID", typeof(int));
    
            var documentNoParameter = documentNo != null ?
                new ObjectParameter("DocumentNo", documentNo) :
                new ObjectParameter("DocumentNo", typeof(string));
    
            var accountCodeIDParameter = accountCodeID.HasValue ?
                new ObjectParameter("AccountCodeID", accountCodeID) :
                new ObjectParameter("AccountCodeID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var locationParameter = location.HasValue ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(int));
    
            var paymentModeParameter = paymentMode.HasValue ?
                new ObjectParameter("PaymentMode", paymentMode) :
                new ObjectParameter("PaymentMode", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptCashBankLedger_Result>("SpRptCashBankLedger", fromDateParameter, toDateParameter, treasuryIDParameter, documentNoParameter, accountCodeIDParameter, accountIDParameter, locationParameter, paymentModeParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptChequeDeposited_Result> SpRptChequeDeposited(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> bankID, Nullable<int> bankAccountNoID, Nullable<int> instrumentNoID, string instrumentStatus, Nullable<int> finYear, Nullable<int> locacationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var bankAccountNoIDParameter = bankAccountNoID.HasValue ?
                new ObjectParameter("BankAccountNoID", bankAccountNoID) :
                new ObjectParameter("BankAccountNoID", typeof(int));
    
            var instrumentNoIDParameter = instrumentNoID.HasValue ?
                new ObjectParameter("InstrumentNoID", instrumentNoID) :
                new ObjectParameter("InstrumentNoID", typeof(int));
    
            var instrumentStatusParameter = instrumentStatus != null ?
                new ObjectParameter("InstrumentStatus", instrumentStatus) :
                new ObjectParameter("InstrumentStatus", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locacationIDParameter = locacationID.HasValue ?
                new ObjectParameter("LocacationID", locacationID) :
                new ObjectParameter("LocacationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptChequeDeposited_Result>("SpRptChequeDeposited", fromDateParameter, toDateParameter, bankIDParameter, bankAccountNoIDParameter, instrumentNoIDParameter, instrumentStatusParameter, finYearParameter, locacationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptCostingDetail_Result> SpRptCostingDetail(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> itemID, string batchNo, Nullable<int> itemCategoryID, Nullable<int> costCategoryID, Nullable<int> locationID, Nullable<int> finYear, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchNoParameter = batchNo != null ?
                new ObjectParameter("BatchNo", batchNo) :
                new ObjectParameter("BatchNo", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var costCategoryIDParameter = costCategoryID.HasValue ?
                new ObjectParameter("CostCategoryID", costCategoryID) :
                new ObjectParameter("CostCategoryID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptCostingDetail_Result>("SpRptCostingDetail", fromDateParameter, toDateParameter, itemIDParameter, batchNoParameter, itemCategoryIDParameter, costCategoryIDParameter, locationIDParameter, finYearParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptCostingSummary_Result> SpRptCostingSummary(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> itemID, Nullable<int> locationID, Nullable<int> finYear, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptCostingSummary_Result>("SpRptCostingSummary", fromDateParameter, toDateParameter, itemIDParameter, locationIDParameter, finYearParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptCounterSalesSummary_Result> SpRptCounterSalesSummary(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> doctorID, Nullable<int> patientID, Nullable<int> paymentModeID, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var paymentModeIDParameter = paymentModeID.HasValue ?
                new ObjectParameter("PaymentModeID", paymentModeID) :
                new ObjectParameter("PaymentModeID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptCounterSalesSummary_Result>("SpRptCounterSalesSummary", fromDateParameter, toDateParameter, doctorIDParameter, patientIDParameter, paymentModeIDParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptCustomerDebitAndCreditNote_Result> SpRptCustomerDebitAndCreditNote(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string type, Nullable<int> debitNoteNoFrom, Nullable<int> debitNoteNoTo, Nullable<int> creditNoteNoFrom, Nullable<int> creditNoteNoTo, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var debitNoteNoFromParameter = debitNoteNoFrom.HasValue ?
                new ObjectParameter("DebitNoteNoFrom", debitNoteNoFrom) :
                new ObjectParameter("DebitNoteNoFrom", typeof(int));
    
            var debitNoteNoToParameter = debitNoteNoTo.HasValue ?
                new ObjectParameter("DebitNoteNoTo", debitNoteNoTo) :
                new ObjectParameter("DebitNoteNoTo", typeof(int));
    
            var creditNoteNoFromParameter = creditNoteNoFrom.HasValue ?
                new ObjectParameter("CreditNoteNoFrom", creditNoteNoFrom) :
                new ObjectParameter("CreditNoteNoFrom", typeof(int));
    
            var creditNoteNoToParameter = creditNoteNoTo.HasValue ?
                new ObjectParameter("CreditNoteNoTo", creditNoteNoTo) :
                new ObjectParameter("CreditNoteNoTo", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptCustomerDebitAndCreditNote_Result>("SpRptCustomerDebitAndCreditNote", fromDateParameter, toDateParameter, typeParameter, debitNoteNoFromParameter, debitNoteNoToParameter, creditNoteNoFromParameter, creditNoteNoToParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptCustomerSubLedger_Result> SpRptCustomerSubLedger(Nullable<System.DateTime> fROMDate, Nullable<System.DateTime> toDate, Nullable<int> customerID, Nullable<int> itemLocationID, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicatiONID)
        {
            var fROMDateParameter = fROMDate.HasValue ?
                new ObjectParameter("FROMDate", fROMDate) :
                new ObjectParameter("FROMDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var itemLocationIDParameter = itemLocationID.HasValue ?
                new ObjectParameter("ItemLocationID", itemLocationID) :
                new ObjectParameter("ItemLocationID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicatiONIDParameter = applicatiONID.HasValue ?
                new ObjectParameter("ApplicatiONID", applicatiONID) :
                new ObjectParameter("ApplicatiONID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptCustomerSubLedger_Result>("SpRptCustomerSubLedger", fROMDateParameter, toDateParameter, customerIDParameter, itemLocationIDParameter, userIDParameter, finYearParameter, locationIDParameter, applicatiONIDParameter);
        }
    
        public virtual ObjectResult<SpRptCustomerSubLedgerSummary_Result> SpRptCustomerSubLedgerSummary(Nullable<System.DateTime> fROMDate, Nullable<System.DateTime> toDate, Nullable<int> customerID, Nullable<int> itemLocationID, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicatiONID)
        {
            var fROMDateParameter = fROMDate.HasValue ?
                new ObjectParameter("FROMDate", fROMDate) :
                new ObjectParameter("FROMDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var itemLocationIDParameter = itemLocationID.HasValue ?
                new ObjectParameter("ItemLocationID", itemLocationID) :
                new ObjectParameter("ItemLocationID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicatiONIDParameter = applicatiONID.HasValue ?
                new ObjectParameter("ApplicatiONID", applicatiONID) :
                new ObjectParameter("ApplicatiONID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptCustomerSubLedgerSummary_Result>("SpRptCustomerSubLedgerSummary", fROMDateParameter, toDateParameter, customerIDParameter, itemLocationIDParameter, userIDParameter, finYearParameter, locationIDParameter, applicatiONIDParameter);
        }
    
        public virtual ObjectResult<SpRptDailyConsultationBill_Result> SpRptDailyConsultationBill(string xMLParams)
        {
            var xMLParamsParameter = xMLParams != null ?
                new ObjectParameter("XMLParams", xMLParams) :
                new ObjectParameter("XMLParams", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptDailyConsultationBill_Result>("SpRptDailyConsultationBill", xMLParamsParameter);
        }
    
        public virtual ObjectResult<SpRptDayAndMonthWiseProduction_Result> SpRptDayAndMonthWiseProduction(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string productionGroupFrom, string productionGroupTo, Nullable<int> productionGroupID, Nullable<int> salesCategoryID, Nullable<int> productionCategoryID, Nullable<int> itemID, Nullable<int> batchTypeID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var productionGroupFromParameter = productionGroupFrom != null ?
                new ObjectParameter("ProductionGroupFrom", productionGroupFrom) :
                new ObjectParameter("ProductionGroupFrom", typeof(string));
    
            var productionGroupToParameter = productionGroupTo != null ?
                new ObjectParameter("ProductionGroupTo", productionGroupTo) :
                new ObjectParameter("ProductionGroupTo", typeof(string));
    
            var productionGroupIDParameter = productionGroupID.HasValue ?
                new ObjectParameter("ProductionGroupID", productionGroupID) :
                new ObjectParameter("ProductionGroupID", typeof(int));
    
            var salesCategoryIDParameter = salesCategoryID.HasValue ?
                new ObjectParameter("SalesCategoryID", salesCategoryID) :
                new ObjectParameter("SalesCategoryID", typeof(int));
    
            var productionCategoryIDParameter = productionCategoryID.HasValue ?
                new ObjectParameter("ProductionCategoryID", productionCategoryID) :
                new ObjectParameter("ProductionCategoryID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptDayAndMonthWiseProduction_Result>("SpRptDayAndMonthWiseProduction", fromDateParameter, toDateParameter, productionGroupFromParameter, productionGroupToParameter, productionGroupIDParameter, salesCategoryIDParameter, productionCategoryIDParameter, itemIDParameter, batchTypeIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptDayBook_Result> SpRptDayBook(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> accountID, Nullable<int> transCode, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var transCodeParameter = transCode.HasValue ?
                new ObjectParameter("TransCode", transCode) :
                new ObjectParameter("TransCode", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptDayBook_Result>("SpRptDayBook", fromDateParameter, toDateParameter, accountIDParameter, transCodeParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptDaywiseSales_Result> SpRptDaywiseSales(string xMLParams)
        {
            var xMLParamsParameter = xMLParams != null ?
                new ObjectParameter("XMLParams", xMLParams) :
                new ObjectParameter("XMLParams", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptDaywiseSales_Result>("SpRptDaywiseSales", xMLParamsParameter);
        }
    
        public virtual ObjectResult<SpRptDebitAndCreditNoteDetail_Result> SpRptDebitAndCreditNoteDetail(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string type, Nullable<int> fromID, Nullable<int> toID, Nullable<int> supplierID, Nullable<int> customerCodeFromID, Nullable<int> customerCodeToID, Nullable<int> customerID, string referenceNo, Nullable<System.DateTime> referenceDate, Nullable<int> filterLocationID, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var fromIDParameter = fromID.HasValue ?
                new ObjectParameter("FromID", fromID) :
                new ObjectParameter("FromID", typeof(int));
    
            var toIDParameter = toID.HasValue ?
                new ObjectParameter("ToID", toID) :
                new ObjectParameter("ToID", typeof(int));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var customerCodeFromIDParameter = customerCodeFromID.HasValue ?
                new ObjectParameter("CustomerCodeFromID", customerCodeFromID) :
                new ObjectParameter("CustomerCodeFromID", typeof(int));
    
            var customerCodeToIDParameter = customerCodeToID.HasValue ?
                new ObjectParameter("CustomerCodeToID", customerCodeToID) :
                new ObjectParameter("CustomerCodeToID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var referenceNoParameter = referenceNo != null ?
                new ObjectParameter("ReferenceNo", referenceNo) :
                new ObjectParameter("ReferenceNo", typeof(string));
    
            var referenceDateParameter = referenceDate.HasValue ?
                new ObjectParameter("ReferenceDate", referenceDate) :
                new ObjectParameter("ReferenceDate", typeof(System.DateTime));
    
            var filterLocationIDParameter = filterLocationID.HasValue ?
                new ObjectParameter("FilterLocationID", filterLocationID) :
                new ObjectParameter("FilterLocationID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptDebitAndCreditNoteDetail_Result>("SpRptDebitAndCreditNoteDetail", fromDateParameter, toDateParameter, typeParameter, fromIDParameter, toIDParameter, supplierIDParameter, customerCodeFromIDParameter, customerCodeToIDParameter, customerIDParameter, referenceNoParameter, referenceDateParameter, filterLocationIDParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptDebitAndCreditNoteSummary_Result> SpRptDebitAndCreditNoteSummary(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string type, Nullable<int> fromID, Nullable<int> toID, Nullable<int> supplierID, Nullable<int> customerCodeFromID, Nullable<int> customerCodeToID, Nullable<int> customerID, string referenceNo, Nullable<System.DateTime> referenceDate, Nullable<int> filterLocationID, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var fromIDParameter = fromID.HasValue ?
                new ObjectParameter("FromID", fromID) :
                new ObjectParameter("FromID", typeof(int));
    
            var toIDParameter = toID.HasValue ?
                new ObjectParameter("ToID", toID) :
                new ObjectParameter("ToID", typeof(int));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var customerCodeFromIDParameter = customerCodeFromID.HasValue ?
                new ObjectParameter("CustomerCodeFromID", customerCodeFromID) :
                new ObjectParameter("CustomerCodeFromID", typeof(int));
    
            var customerCodeToIDParameter = customerCodeToID.HasValue ?
                new ObjectParameter("CustomerCodeToID", customerCodeToID) :
                new ObjectParameter("CustomerCodeToID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var referenceNoParameter = referenceNo != null ?
                new ObjectParameter("ReferenceNo", referenceNo) :
                new ObjectParameter("ReferenceNo", typeof(string));
    
            var referenceDateParameter = referenceDate.HasValue ?
                new ObjectParameter("ReferenceDate", referenceDate) :
                new ObjectParameter("ReferenceDate", typeof(System.DateTime));
    
            var filterLocationIDParameter = filterLocationID.HasValue ?
                new ObjectParameter("FilterLocationID", filterLocationID) :
                new ObjectParameter("FilterLocationID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptDebitAndCreditNoteSummary_Result>("SpRptDebitAndCreditNoteSummary", fromDateParameter, toDateParameter, typeParameter, fromIDParameter, toIDParameter, supplierIDParameter, customerCodeFromIDParameter, customerCodeToIDParameter, customerIDParameter, referenceNoParameter, referenceDateParameter, filterLocationIDParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptDoctorWiseDailyConsultationCharge_Result> SpRptDoctorWiseDailyConsultationCharge(string xMLParams)
        {
            var xMLParamsParameter = xMLParams != null ?
                new ObjectParameter("XMLParams", xMLParams) :
                new ObjectParameter("XMLParams", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptDoctorWiseDailyConsultationCharge_Result>("SpRptDoctorWiseDailyConsultationCharge", xMLParamsParameter);
        }
    
        public virtual ObjectResult<SpRptFastMovingItemsMonthlyWise_Result> SpRptFastMovingItemsMonthlyWise(string xMLParams)
        {
            var xMLParamsParameter = xMLParams != null ?
                new ObjectParameter("XMLParams", xMLParams) :
                new ObjectParameter("XMLParams", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptFastMovingItemsMonthlyWise_Result>("SpRptFastMovingItemsMonthlyWise", xMLParamsParameter);
        }
    
        public virtual ObjectResult<SpRptFundTransfer_Result> SpRptFundTransfer(Nullable<int> fromBankNameID, Nullable<int> toBankNameID, string fromBankAccountNoID, string toBankAccountNoID, Nullable<int> fromTranNoID, Nullable<int> toTransNoID, Nullable<System.DateTime> fromTranDate, Nullable<System.DateTime> toTranDate, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromBankNameIDParameter = fromBankNameID.HasValue ?
                new ObjectParameter("FromBankNameID", fromBankNameID) :
                new ObjectParameter("FromBankNameID", typeof(int));
    
            var toBankNameIDParameter = toBankNameID.HasValue ?
                new ObjectParameter("ToBankNameID", toBankNameID) :
                new ObjectParameter("ToBankNameID", typeof(int));
    
            var fromBankAccountNoIDParameter = fromBankAccountNoID != null ?
                new ObjectParameter("FromBankAccountNoID", fromBankAccountNoID) :
                new ObjectParameter("FromBankAccountNoID", typeof(string));
    
            var toBankAccountNoIDParameter = toBankAccountNoID != null ?
                new ObjectParameter("ToBankAccountNoID", toBankAccountNoID) :
                new ObjectParameter("ToBankAccountNoID", typeof(string));
    
            var fromTranNoIDParameter = fromTranNoID.HasValue ?
                new ObjectParameter("FromTranNoID", fromTranNoID) :
                new ObjectParameter("FromTranNoID", typeof(int));
    
            var toTransNoIDParameter = toTransNoID.HasValue ?
                new ObjectParameter("ToTransNoID", toTransNoID) :
                new ObjectParameter("ToTransNoID", typeof(int));
    
            var fromTranDateParameter = fromTranDate.HasValue ?
                new ObjectParameter("FromTranDate", fromTranDate) :
                new ObjectParameter("FromTranDate", typeof(System.DateTime));
    
            var toTranDateParameter = toTranDate.HasValue ?
                new ObjectParameter("ToTranDate", toTranDate) :
                new ObjectParameter("ToTranDate", typeof(System.DateTime));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptFundTransfer_Result>("SpRptFundTransfer", fromBankNameIDParameter, toBankNameIDParameter, fromBankAccountNoIDParameter, toBankAccountNoIDParameter, fromTranNoIDParameter, toTransNoIDParameter, fromTranDateParameter, toTranDateParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptGetEmployeeDailySalesDetails_Result> SpRptGetEmployeeDailySalesDetails(string xMLParams)
        {
            var xMLParamsParameter = xMLParams != null ?
                new ObjectParameter("XMLParams", xMLParams) :
                new ObjectParameter("XMLParams", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptGetEmployeeDailySalesDetails_Result>("SpRptGetEmployeeDailySalesDetails", xMLParamsParameter);
        }
    
        public virtual ObjectResult<SpRptGetEmployeeFreeMedicineDetails_Result> SpRptGetEmployeeFreeMedicineDetails(Nullable<int> employeeID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptGetEmployeeFreeMedicineDetails_Result>("SpRptGetEmployeeFreeMedicineDetails", employeeIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<SpRptGetExpiringAndExpiredItems_Result> SpRptGetExpiringAndExpiredItems(string xMLParams)
        {
            var xMLParamsParameter = xMLParams != null ?
                new ObjectParameter("XMLParams", xMLParams) :
                new ObjectParameter("XMLParams", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptGetExpiringAndExpiredItems_Result>("SpRptGetExpiringAndExpiredItems", xMLParamsParameter);
        }
    
        public virtual ObjectResult<SpRptGetFastMovingItems_Result> SpRptGetFastMovingItems(string xMLParams)
        {
            var xMLParamsParameter = xMLParams != null ?
                new ObjectParameter("XMLParams", xMLParams) :
                new ObjectParameter("XMLParams", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptGetFastMovingItems_Result>("SpRptGetFastMovingItems", xMLParamsParameter);
        }
    
        public virtual ObjectResult<SpRptGetNonMovableItems_Result> SpRptGetNonMovableItems(string xMLParams)
        {
            var xMLParamsParameter = xMLParams != null ?
                new ObjectParameter("XMLParams", xMLParams) :
                new ObjectParameter("XMLParams", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptGetNonMovableItems_Result>("SpRptGetNonMovableItems", xMLParamsParameter);
        }
    
        public virtual ObjectResult<SpRptGetProfitOfSales_Result> SpRptGetProfitOfSales(string xMLParams)
        {
            var xMLParamsParameter = xMLParams != null ?
                new ObjectParameter("XMLParams", xMLParams) :
                new ObjectParameter("XMLParams", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptGetProfitOfSales_Result>("SpRptGetProfitOfSales", xMLParamsParameter);
        }
    
        public virtual ObjectResult<spRptGetSalesReturnDetails_Result> spRptGetSalesReturnDetails(Nullable<int> customerID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRptGetSalesReturnDetails_Result>("spRptGetSalesReturnDetails", customerIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<SpRptGRNAndSRN_Result> SpRptGRNAndSRN(Nullable<System.DateTime> fROMDate, Nullable<System.DateTime> toDate, string type, Nullable<int> rNFROMID, Nullable<int> rNToID, Nullable<int> itemCategoryID, string fROMItemNameRange, string toItemNameRange, Nullable<int> pONumberFROMID, Nullable<int> pONumberToID, Nullable<System.DateTime> pODateFROM, Nullable<System.DateTime> pODateTo, Nullable<int> itemID, Nullable<int> supplierID, string invoiceNo, string userFROMRange, string userToRange, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fROMDateParameter = fROMDate.HasValue ?
                new ObjectParameter("FROMDate", fROMDate) :
                new ObjectParameter("FROMDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var rNFROMIDParameter = rNFROMID.HasValue ?
                new ObjectParameter("RNFROMID", rNFROMID) :
                new ObjectParameter("RNFROMID", typeof(int));
    
            var rNToIDParameter = rNToID.HasValue ?
                new ObjectParameter("RNToID", rNToID) :
                new ObjectParameter("RNToID", typeof(int));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var fROMItemNameRangeParameter = fROMItemNameRange != null ?
                new ObjectParameter("FROMItemNameRange", fROMItemNameRange) :
                new ObjectParameter("FROMItemNameRange", typeof(string));
    
            var toItemNameRangeParameter = toItemNameRange != null ?
                new ObjectParameter("ToItemNameRange", toItemNameRange) :
                new ObjectParameter("ToItemNameRange", typeof(string));
    
            var pONumberFROMIDParameter = pONumberFROMID.HasValue ?
                new ObjectParameter("PONumberFROMID", pONumberFROMID) :
                new ObjectParameter("PONumberFROMID", typeof(int));
    
            var pONumberToIDParameter = pONumberToID.HasValue ?
                new ObjectParameter("PONumberToID", pONumberToID) :
                new ObjectParameter("PONumberToID", typeof(int));
    
            var pODateFROMParameter = pODateFROM.HasValue ?
                new ObjectParameter("PODateFROM", pODateFROM) :
                new ObjectParameter("PODateFROM", typeof(System.DateTime));
    
            var pODateToParameter = pODateTo.HasValue ?
                new ObjectParameter("PODateTo", pODateTo) :
                new ObjectParameter("PODateTo", typeof(System.DateTime));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(string));
    
            var userFROMRangeParameter = userFROMRange != null ?
                new ObjectParameter("UserFROMRange", userFROMRange) :
                new ObjectParameter("UserFROMRange", typeof(string));
    
            var userToRangeParameter = userToRange != null ?
                new ObjectParameter("UserToRange", userToRange) :
                new ObjectParameter("UserToRange", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptGRNAndSRN_Result>("SpRptGRNAndSRN", fROMDateParameter, toDateParameter, typeParameter, rNFROMIDParameter, rNToIDParameter, itemCategoryIDParameter, fROMItemNameRangeParameter, toItemNameRangeParameter, pONumberFROMIDParameter, pONumberToIDParameter, pODateFROMParameter, pODateToParameter, itemIDParameter, supplierIDParameter, invoiceNoParameter, userFROMRangeParameter, userToRangeParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptGSTInvoicewiseSummary_Result> SpRptGSTInvoicewiseSummary(Nullable<System.DateTime> invoiceDateFrom, Nullable<System.DateTime> invoiceDateTo, Nullable<int> location, Nullable<int> supplierTaxSubCategoryID, Nullable<int> supplierID, Nullable<decimal> gSTRateFrom, Nullable<decimal> gSTRateTo, Nullable<int> supplierGSTNoID, string iGST, Nullable<int> userID, Nullable<int> finYear, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var invoiceDateFromParameter = invoiceDateFrom.HasValue ?
                new ObjectParameter("InvoiceDateFrom", invoiceDateFrom) :
                new ObjectParameter("InvoiceDateFrom", typeof(System.DateTime));
    
            var invoiceDateToParameter = invoiceDateTo.HasValue ?
                new ObjectParameter("InvoiceDateTo", invoiceDateTo) :
                new ObjectParameter("InvoiceDateTo", typeof(System.DateTime));
    
            var locationParameter = location.HasValue ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(int));
    
            var supplierTaxSubCategoryIDParameter = supplierTaxSubCategoryID.HasValue ?
                new ObjectParameter("SupplierTaxSubCategoryID", supplierTaxSubCategoryID) :
                new ObjectParameter("SupplierTaxSubCategoryID", typeof(int));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var gSTRateFromParameter = gSTRateFrom.HasValue ?
                new ObjectParameter("GSTRateFrom", gSTRateFrom) :
                new ObjectParameter("GSTRateFrom", typeof(decimal));
    
            var gSTRateToParameter = gSTRateTo.HasValue ?
                new ObjectParameter("GSTRateTo", gSTRateTo) :
                new ObjectParameter("GSTRateTo", typeof(decimal));
    
            var supplierGSTNoIDParameter = supplierGSTNoID.HasValue ?
                new ObjectParameter("SupplierGSTNoID", supplierGSTNoID) :
                new ObjectParameter("SupplierGSTNoID", typeof(int));
    
            var iGSTParameter = iGST != null ?
                new ObjectParameter("IGST", iGST) :
                new ObjectParameter("IGST", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptGSTInvoicewiseSummary_Result>("SpRptGSTInvoicewiseSummary", invoiceDateFromParameter, invoiceDateToParameter, locationParameter, supplierTaxSubCategoryIDParameter, supplierIDParameter, gSTRateFromParameter, gSTRateToParameter, supplierGSTNoIDParameter, iGSTParameter, userIDParameter, finYearParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual ObjectResult<SpRptGSTItemwiseSummary_Result> SpRptGSTItemwiseSummary(Nullable<System.DateTime> invoiceDateFrom, Nullable<System.DateTime> invoiceDateTo, Nullable<int> location, Nullable<int> supplierTaxSubCategoryID, Nullable<int> supplierID, Nullable<int> itemCategoryID, Nullable<int> itemID, Nullable<decimal> gSTRateFrom, Nullable<decimal> gSTRateTo, Nullable<int> supplierGSTNoID, string iGST, Nullable<int> userID, Nullable<int> finYear, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var invoiceDateFromParameter = invoiceDateFrom.HasValue ?
                new ObjectParameter("InvoiceDateFrom", invoiceDateFrom) :
                new ObjectParameter("InvoiceDateFrom", typeof(System.DateTime));
    
            var invoiceDateToParameter = invoiceDateTo.HasValue ?
                new ObjectParameter("InvoiceDateTo", invoiceDateTo) :
                new ObjectParameter("InvoiceDateTo", typeof(System.DateTime));
    
            var locationParameter = location.HasValue ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(int));
    
            var supplierTaxSubCategoryIDParameter = supplierTaxSubCategoryID.HasValue ?
                new ObjectParameter("SupplierTaxSubCategoryID", supplierTaxSubCategoryID) :
                new ObjectParameter("SupplierTaxSubCategoryID", typeof(int));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var gSTRateFromParameter = gSTRateFrom.HasValue ?
                new ObjectParameter("GSTRateFrom", gSTRateFrom) :
                new ObjectParameter("GSTRateFrom", typeof(decimal));
    
            var gSTRateToParameter = gSTRateTo.HasValue ?
                new ObjectParameter("GSTRateTo", gSTRateTo) :
                new ObjectParameter("GSTRateTo", typeof(decimal));
    
            var supplierGSTNoIDParameter = supplierGSTNoID.HasValue ?
                new ObjectParameter("SupplierGSTNoID", supplierGSTNoID) :
                new ObjectParameter("SupplierGSTNoID", typeof(int));
    
            var iGSTParameter = iGST != null ?
                new ObjectParameter("IGST", iGST) :
                new ObjectParameter("IGST", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptGSTItemwiseSummary_Result>("SpRptGSTItemwiseSummary", invoiceDateFromParameter, invoiceDateToParameter, locationParameter, supplierTaxSubCategoryIDParameter, supplierIDParameter, itemCategoryIDParameter, itemIDParameter, gSTRateFromParameter, gSTRateToParameter, supplierGSTNoIDParameter, iGSTParameter, userIDParameter, finYearParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual ObjectResult<SpRptGSTItemwiseSummaryTill01052020_Result> SpRptGSTItemwiseSummaryTill01052020(Nullable<System.DateTime> invoiceDateFrom, Nullable<System.DateTime> invoiceDateTo, Nullable<System.DateTime> qCDateFrom, Nullable<System.DateTime> qCDateTo, Nullable<System.DateTime> gRNDateFrom, Nullable<System.DateTime> gRNDateTo, Nullable<int> supplierTaxSubCategoryID, string fromSupplierRange, string toSupplierRange, Nullable<int> supplierID, string fromItemCategoryRange, string toItemCategoryRange, Nullable<int> itemCategoryID, string fromItemNameRange, string toItemNameRange, Nullable<int> itemID, Nullable<int> qCNOFromID, Nullable<int> qCNOToID, Nullable<int> gRNNoFromID, Nullable<int> gRNNoToID, Nullable<decimal> gSTRateFrom, Nullable<decimal> gSTRateTo, Nullable<int> supplierGSTNoID, string iGST, Nullable<int> finYear, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var invoiceDateFromParameter = invoiceDateFrom.HasValue ?
                new ObjectParameter("InvoiceDateFrom", invoiceDateFrom) :
                new ObjectParameter("InvoiceDateFrom", typeof(System.DateTime));
    
            var invoiceDateToParameter = invoiceDateTo.HasValue ?
                new ObjectParameter("InvoiceDateTo", invoiceDateTo) :
                new ObjectParameter("InvoiceDateTo", typeof(System.DateTime));
    
            var qCDateFromParameter = qCDateFrom.HasValue ?
                new ObjectParameter("QCDateFrom", qCDateFrom) :
                new ObjectParameter("QCDateFrom", typeof(System.DateTime));
    
            var qCDateToParameter = qCDateTo.HasValue ?
                new ObjectParameter("QCDateTo", qCDateTo) :
                new ObjectParameter("QCDateTo", typeof(System.DateTime));
    
            var gRNDateFromParameter = gRNDateFrom.HasValue ?
                new ObjectParameter("GRNDateFrom", gRNDateFrom) :
                new ObjectParameter("GRNDateFrom", typeof(System.DateTime));
    
            var gRNDateToParameter = gRNDateTo.HasValue ?
                new ObjectParameter("GRNDateTo", gRNDateTo) :
                new ObjectParameter("GRNDateTo", typeof(System.DateTime));
    
            var supplierTaxSubCategoryIDParameter = supplierTaxSubCategoryID.HasValue ?
                new ObjectParameter("SupplierTaxSubCategoryID", supplierTaxSubCategoryID) :
                new ObjectParameter("SupplierTaxSubCategoryID", typeof(int));
    
            var fromSupplierRangeParameter = fromSupplierRange != null ?
                new ObjectParameter("FromSupplierRange", fromSupplierRange) :
                new ObjectParameter("FromSupplierRange", typeof(string));
    
            var toSupplierRangeParameter = toSupplierRange != null ?
                new ObjectParameter("ToSupplierRange", toSupplierRange) :
                new ObjectParameter("ToSupplierRange", typeof(string));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var fromItemCategoryRangeParameter = fromItemCategoryRange != null ?
                new ObjectParameter("FromItemCategoryRange", fromItemCategoryRange) :
                new ObjectParameter("FromItemCategoryRange", typeof(string));
    
            var toItemCategoryRangeParameter = toItemCategoryRange != null ?
                new ObjectParameter("ToItemCategoryRange", toItemCategoryRange) :
                new ObjectParameter("ToItemCategoryRange", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var fromItemNameRangeParameter = fromItemNameRange != null ?
                new ObjectParameter("FromItemNameRange", fromItemNameRange) :
                new ObjectParameter("FromItemNameRange", typeof(string));
    
            var toItemNameRangeParameter = toItemNameRange != null ?
                new ObjectParameter("ToItemNameRange", toItemNameRange) :
                new ObjectParameter("ToItemNameRange", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var qCNOFromIDParameter = qCNOFromID.HasValue ?
                new ObjectParameter("QCNOFromID", qCNOFromID) :
                new ObjectParameter("QCNOFromID", typeof(int));
    
            var qCNOToIDParameter = qCNOToID.HasValue ?
                new ObjectParameter("QCNOToID", qCNOToID) :
                new ObjectParameter("QCNOToID", typeof(int));
    
            var gRNNoFromIDParameter = gRNNoFromID.HasValue ?
                new ObjectParameter("GRNNoFromID", gRNNoFromID) :
                new ObjectParameter("GRNNoFromID", typeof(int));
    
            var gRNNoToIDParameter = gRNNoToID.HasValue ?
                new ObjectParameter("GRNNoToID", gRNNoToID) :
                new ObjectParameter("GRNNoToID", typeof(int));
    
            var gSTRateFromParameter = gSTRateFrom.HasValue ?
                new ObjectParameter("GSTRateFrom", gSTRateFrom) :
                new ObjectParameter("GSTRateFrom", typeof(decimal));
    
            var gSTRateToParameter = gSTRateTo.HasValue ?
                new ObjectParameter("GSTRateTo", gSTRateTo) :
                new ObjectParameter("GSTRateTo", typeof(decimal));
    
            var supplierGSTNoIDParameter = supplierGSTNoID.HasValue ?
                new ObjectParameter("SupplierGSTNoID", supplierGSTNoID) :
                new ObjectParameter("SupplierGSTNoID", typeof(int));
    
            var iGSTParameter = iGST != null ?
                new ObjectParameter("IGST", iGST) :
                new ObjectParameter("IGST", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptGSTItemwiseSummaryTill01052020_Result>("SpRptGSTItemwiseSummaryTill01052020", invoiceDateFromParameter, invoiceDateToParameter, qCDateFromParameter, qCDateToParameter, gRNDateFromParameter, gRNDateToParameter, supplierTaxSubCategoryIDParameter, fromSupplierRangeParameter, toSupplierRangeParameter, supplierIDParameter, fromItemCategoryRangeParameter, toItemCategoryRangeParameter, itemCategoryIDParameter, fromItemNameRangeParameter, toItemNameRangeParameter, itemIDParameter, qCNOFromIDParameter, qCNOToIDParameter, gRNNoFromIDParameter, gRNNoToIDParameter, gSTRateFromParameter, gSTRateToParameter, supplierGSTNoIDParameter, iGSTParameter, finYearParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual ObjectResult<SpRptGSTOutputSummary_Result> SpRptGSTOutputSummary(string xMLParams)
        {
            var xMLParamsParameter = xMLParams != null ?
                new ObjectParameter("XMLParams", xMLParams) :
                new ObjectParameter("XMLParams", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptGSTOutputSummary_Result>("SpRptGSTOutputSummary", xMLParamsParameter);
        }
    
        public virtual ObjectResult<SpRptIncentiveReport_Result> SpRptIncentiveReport(string partyType, Nullable<int> durationID, Nullable<int> timePeriodID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var partyTypeParameter = partyType != null ?
                new ObjectParameter("PartyType", partyType) :
                new ObjectParameter("PartyType", typeof(string));
    
            var durationIDParameter = durationID.HasValue ?
                new ObjectParameter("DurationID", durationID) :
                new ObjectParameter("DurationID", typeof(int));
    
            var timePeriodIDParameter = timePeriodID.HasValue ?
                new ObjectParameter("TimePeriodID", timePeriodID) :
                new ObjectParameter("TimePeriodID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptIncentiveReport_Result>("SpRptIncentiveReport", partyTypeParameter, durationIDParameter, timePeriodIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptIPRegister_Result> SpRptIPRegister(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptIPRegister_Result>("SpRptIPRegister", fromDateParameter, toDateParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptItem_Result> SpRptItem(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptItem_Result>("SpRptItem", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptItemMovement_Result> SpRptItemMovement(Nullable<System.DateTime> requestDateFrom, Nullable<System.DateTime> requestDateTo, Nullable<System.DateTime> deliveredDateFrom, Nullable<System.DateTime> deliveredDateTo, Nullable<int> requestNoFromID, Nullable<int> requestNoToID, Nullable<int> fromLocationID, Nullable<int> toLocationID, Nullable<int> fromPremisesID, Nullable<int> toPremisesID, string itemCategoryFromRange, string itemCategoryToRange, Nullable<int> itemCategoryID, Nullable<int> itemCodeFrom, Nullable<int> itemCodeTo, string itemNameFromRange, string itemNameToRange, Nullable<int> itemID, Nullable<int> batchTypeID, string transactionType, string valueType, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var requestDateFromParameter = requestDateFrom.HasValue ?
                new ObjectParameter("RequestDateFrom", requestDateFrom) :
                new ObjectParameter("RequestDateFrom", typeof(System.DateTime));
    
            var requestDateToParameter = requestDateTo.HasValue ?
                new ObjectParameter("RequestDateTo", requestDateTo) :
                new ObjectParameter("RequestDateTo", typeof(System.DateTime));
    
            var deliveredDateFromParameter = deliveredDateFrom.HasValue ?
                new ObjectParameter("DeliveredDateFrom", deliveredDateFrom) :
                new ObjectParameter("DeliveredDateFrom", typeof(System.DateTime));
    
            var deliveredDateToParameter = deliveredDateTo.HasValue ?
                new ObjectParameter("DeliveredDateTo", deliveredDateTo) :
                new ObjectParameter("DeliveredDateTo", typeof(System.DateTime));
    
            var requestNoFromIDParameter = requestNoFromID.HasValue ?
                new ObjectParameter("RequestNoFromID", requestNoFromID) :
                new ObjectParameter("RequestNoFromID", typeof(int));
    
            var requestNoToIDParameter = requestNoToID.HasValue ?
                new ObjectParameter("RequestNoToID", requestNoToID) :
                new ObjectParameter("RequestNoToID", typeof(int));
    
            var fromLocationIDParameter = fromLocationID.HasValue ?
                new ObjectParameter("FromLocationID", fromLocationID) :
                new ObjectParameter("FromLocationID", typeof(int));
    
            var toLocationIDParameter = toLocationID.HasValue ?
                new ObjectParameter("ToLocationID", toLocationID) :
                new ObjectParameter("ToLocationID", typeof(int));
    
            var fromPremisesIDParameter = fromPremisesID.HasValue ?
                new ObjectParameter("FromPremisesID", fromPremisesID) :
                new ObjectParameter("FromPremisesID", typeof(int));
    
            var toPremisesIDParameter = toPremisesID.HasValue ?
                new ObjectParameter("ToPremisesID", toPremisesID) :
                new ObjectParameter("ToPremisesID", typeof(int));
    
            var itemCategoryFromRangeParameter = itemCategoryFromRange != null ?
                new ObjectParameter("ItemCategoryFromRange", itemCategoryFromRange) :
                new ObjectParameter("ItemCategoryFromRange", typeof(string));
    
            var itemCategoryToRangeParameter = itemCategoryToRange != null ?
                new ObjectParameter("ItemCategoryToRange", itemCategoryToRange) :
                new ObjectParameter("ItemCategoryToRange", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var itemCodeFromParameter = itemCodeFrom.HasValue ?
                new ObjectParameter("ItemCodeFrom", itemCodeFrom) :
                new ObjectParameter("ItemCodeFrom", typeof(int));
    
            var itemCodeToParameter = itemCodeTo.HasValue ?
                new ObjectParameter("ItemCodeTo", itemCodeTo) :
                new ObjectParameter("ItemCodeTo", typeof(int));
    
            var itemNameFromRangeParameter = itemNameFromRange != null ?
                new ObjectParameter("ItemNameFromRange", itemNameFromRange) :
                new ObjectParameter("ItemNameFromRange", typeof(string));
    
            var itemNameToRangeParameter = itemNameToRange != null ?
                new ObjectParameter("ItemNameToRange", itemNameToRange) :
                new ObjectParameter("ItemNameToRange", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var transactionTypeParameter = transactionType != null ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(string));
    
            var valueTypeParameter = valueType != null ?
                new ObjectParameter("ValueType", valueType) :
                new ObjectParameter("ValueType", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptItemMovement_Result>("SpRptItemMovement", requestDateFromParameter, requestDateToParameter, deliveredDateFromParameter, deliveredDateToParameter, requestNoFromIDParameter, requestNoToIDParameter, fromLocationIDParameter, toLocationIDParameter, fromPremisesIDParameter, toPremisesIDParameter, itemCategoryFromRangeParameter, itemCategoryToRangeParameter, itemCategoryIDParameter, itemCodeFromParameter, itemCodeToParameter, itemNameFromRangeParameter, itemNameToRangeParameter, itemIDParameter, batchTypeIDParameter, transactionTypeParameter, valueTypeParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptItemSubLedger_Result> SpRptItemSubLedger(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> itemID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptItemSubLedger_Result>("SpRptItemSubLedger", fromDateParameter, toDateParameter, itemIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptItemwiseProductionInput_Result> SpRptItemwiseProductionInput(Nullable<int> requestNoFromID, Nullable<int> requestNoToID, Nullable<System.DateTime> requestDateFrom, Nullable<System.DateTime> requestDateTo, Nullable<System.DateTime> deliveredDateFrom, Nullable<System.DateTime> deliveredDateTo, Nullable<int> locationFromID, Nullable<int> locationToID, Nullable<int> premisesFromID, Nullable<int> premisesToID, string categoryRangeFrom, string categoryRangeTo, Nullable<int> categoryID, Nullable<int> itemCodeIDFrom, Nullable<int> itemCodeIDTo, string itemNameRangeFrom, string itemNameRangeTo, Nullable<int> itemNameID, Nullable<int> batchTypeID, string statusFrom, string statusTo, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var requestNoFromIDParameter = requestNoFromID.HasValue ?
                new ObjectParameter("RequestNoFromID", requestNoFromID) :
                new ObjectParameter("RequestNoFromID", typeof(int));
    
            var requestNoToIDParameter = requestNoToID.HasValue ?
                new ObjectParameter("RequestNoToID", requestNoToID) :
                new ObjectParameter("RequestNoToID", typeof(int));
    
            var requestDateFromParameter = requestDateFrom.HasValue ?
                new ObjectParameter("RequestDateFrom", requestDateFrom) :
                new ObjectParameter("RequestDateFrom", typeof(System.DateTime));
    
            var requestDateToParameter = requestDateTo.HasValue ?
                new ObjectParameter("RequestDateTo", requestDateTo) :
                new ObjectParameter("RequestDateTo", typeof(System.DateTime));
    
            var deliveredDateFromParameter = deliveredDateFrom.HasValue ?
                new ObjectParameter("DeliveredDateFrom", deliveredDateFrom) :
                new ObjectParameter("DeliveredDateFrom", typeof(System.DateTime));
    
            var deliveredDateToParameter = deliveredDateTo.HasValue ?
                new ObjectParameter("DeliveredDateTo", deliveredDateTo) :
                new ObjectParameter("DeliveredDateTo", typeof(System.DateTime));
    
            var locationFromIDParameter = locationFromID.HasValue ?
                new ObjectParameter("LocationFromID", locationFromID) :
                new ObjectParameter("LocationFromID", typeof(int));
    
            var locationToIDParameter = locationToID.HasValue ?
                new ObjectParameter("LocationToID", locationToID) :
                new ObjectParameter("LocationToID", typeof(int));
    
            var premisesFromIDParameter = premisesFromID.HasValue ?
                new ObjectParameter("PremisesFromID", premisesFromID) :
                new ObjectParameter("PremisesFromID", typeof(int));
    
            var premisesToIDParameter = premisesToID.HasValue ?
                new ObjectParameter("PremisesToID", premisesToID) :
                new ObjectParameter("PremisesToID", typeof(int));
    
            var categoryRangeFromParameter = categoryRangeFrom != null ?
                new ObjectParameter("CategoryRangeFrom", categoryRangeFrom) :
                new ObjectParameter("CategoryRangeFrom", typeof(string));
    
            var categoryRangeToParameter = categoryRangeTo != null ?
                new ObjectParameter("CategoryRangeTo", categoryRangeTo) :
                new ObjectParameter("CategoryRangeTo", typeof(string));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var itemCodeIDFromParameter = itemCodeIDFrom.HasValue ?
                new ObjectParameter("ItemCodeIDFrom", itemCodeIDFrom) :
                new ObjectParameter("ItemCodeIDFrom", typeof(int));
    
            var itemCodeIDToParameter = itemCodeIDTo.HasValue ?
                new ObjectParameter("ItemCodeIDTo", itemCodeIDTo) :
                new ObjectParameter("ItemCodeIDTo", typeof(int));
    
            var itemNameRangeFromParameter = itemNameRangeFrom != null ?
                new ObjectParameter("ItemNameRangeFrom", itemNameRangeFrom) :
                new ObjectParameter("ItemNameRangeFrom", typeof(string));
    
            var itemNameRangeToParameter = itemNameRangeTo != null ?
                new ObjectParameter("ItemNameRangeTo", itemNameRangeTo) :
                new ObjectParameter("ItemNameRangeTo", typeof(string));
    
            var itemNameIDParameter = itemNameID.HasValue ?
                new ObjectParameter("ItemNameID", itemNameID) :
                new ObjectParameter("ItemNameID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var statusFromParameter = statusFrom != null ?
                new ObjectParameter("StatusFrom", statusFrom) :
                new ObjectParameter("StatusFrom", typeof(string));
    
            var statusToParameter = statusTo != null ?
                new ObjectParameter("StatusTo", statusTo) :
                new ObjectParameter("StatusTo", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptItemwiseProductionInput_Result>("SpRptItemwiseProductionInput", requestNoFromIDParameter, requestNoToIDParameter, requestDateFromParameter, requestDateToParameter, deliveredDateFromParameter, deliveredDateToParameter, locationFromIDParameter, locationToIDParameter, premisesFromIDParameter, premisesToIDParameter, categoryRangeFromParameter, categoryRangeToParameter, categoryIDParameter, itemCodeIDFromParameter, itemCodeIDToParameter, itemNameRangeFromParameter, itemNameRangeToParameter, itemNameIDParameter, batchTypeIDParameter, statusFromParameter, statusToParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptItemwiseProductionOutput_Result> SpRptItemwiseProductionOutput(Nullable<int> requestNoFromID, Nullable<int> requestNoToID, Nullable<System.DateTime> requestDateFrom, Nullable<System.DateTime> requestDateTo, Nullable<System.DateTime> deliveredDateFrom, Nullable<System.DateTime> deliveredDateTo, Nullable<int> locationFromID, Nullable<int> locationToID, Nullable<int> premisesFromID, Nullable<int> premisesToID, string categoryRangeFrom, string categoryRangeTo, Nullable<int> categoryID, Nullable<int> itemCodeIDFrom, Nullable<int> itemCodeIDTo, string itemNameRangeFrom, string itemNameRangeTo, Nullable<int> itemNameID, Nullable<int> batchTypeID, string statusFrom, string statusTo, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var requestNoFromIDParameter = requestNoFromID.HasValue ?
                new ObjectParameter("RequestNoFromID", requestNoFromID) :
                new ObjectParameter("RequestNoFromID", typeof(int));
    
            var requestNoToIDParameter = requestNoToID.HasValue ?
                new ObjectParameter("RequestNoToID", requestNoToID) :
                new ObjectParameter("RequestNoToID", typeof(int));
    
            var requestDateFromParameter = requestDateFrom.HasValue ?
                new ObjectParameter("RequestDateFrom", requestDateFrom) :
                new ObjectParameter("RequestDateFrom", typeof(System.DateTime));
    
            var requestDateToParameter = requestDateTo.HasValue ?
                new ObjectParameter("RequestDateTo", requestDateTo) :
                new ObjectParameter("RequestDateTo", typeof(System.DateTime));
    
            var deliveredDateFromParameter = deliveredDateFrom.HasValue ?
                new ObjectParameter("DeliveredDateFrom", deliveredDateFrom) :
                new ObjectParameter("DeliveredDateFrom", typeof(System.DateTime));
    
            var deliveredDateToParameter = deliveredDateTo.HasValue ?
                new ObjectParameter("DeliveredDateTo", deliveredDateTo) :
                new ObjectParameter("DeliveredDateTo", typeof(System.DateTime));
    
            var locationFromIDParameter = locationFromID.HasValue ?
                new ObjectParameter("LocationFromID", locationFromID) :
                new ObjectParameter("LocationFromID", typeof(int));
    
            var locationToIDParameter = locationToID.HasValue ?
                new ObjectParameter("LocationToID", locationToID) :
                new ObjectParameter("LocationToID", typeof(int));
    
            var premisesFromIDParameter = premisesFromID.HasValue ?
                new ObjectParameter("PremisesFromID", premisesFromID) :
                new ObjectParameter("PremisesFromID", typeof(int));
    
            var premisesToIDParameter = premisesToID.HasValue ?
                new ObjectParameter("PremisesToID", premisesToID) :
                new ObjectParameter("PremisesToID", typeof(int));
    
            var categoryRangeFromParameter = categoryRangeFrom != null ?
                new ObjectParameter("CategoryRangeFrom", categoryRangeFrom) :
                new ObjectParameter("CategoryRangeFrom", typeof(string));
    
            var categoryRangeToParameter = categoryRangeTo != null ?
                new ObjectParameter("CategoryRangeTo", categoryRangeTo) :
                new ObjectParameter("CategoryRangeTo", typeof(string));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var itemCodeIDFromParameter = itemCodeIDFrom.HasValue ?
                new ObjectParameter("ItemCodeIDFrom", itemCodeIDFrom) :
                new ObjectParameter("ItemCodeIDFrom", typeof(int));
    
            var itemCodeIDToParameter = itemCodeIDTo.HasValue ?
                new ObjectParameter("ItemCodeIDTo", itemCodeIDTo) :
                new ObjectParameter("ItemCodeIDTo", typeof(int));
    
            var itemNameRangeFromParameter = itemNameRangeFrom != null ?
                new ObjectParameter("ItemNameRangeFrom", itemNameRangeFrom) :
                new ObjectParameter("ItemNameRangeFrom", typeof(string));
    
            var itemNameRangeToParameter = itemNameRangeTo != null ?
                new ObjectParameter("ItemNameRangeTo", itemNameRangeTo) :
                new ObjectParameter("ItemNameRangeTo", typeof(string));
    
            var itemNameIDParameter = itemNameID.HasValue ?
                new ObjectParameter("ItemNameID", itemNameID) :
                new ObjectParameter("ItemNameID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var statusFromParameter = statusFrom != null ?
                new ObjectParameter("StatusFrom", statusFrom) :
                new ObjectParameter("StatusFrom", typeof(string));
    
            var statusToParameter = statusTo != null ?
                new ObjectParameter("StatusTo", statusTo) :
                new ObjectParameter("StatusTo", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptItemwiseProductionOutput_Result>("SpRptItemwiseProductionOutput", requestNoFromIDParameter, requestNoToIDParameter, requestDateFromParameter, requestDateToParameter, deliveredDateFromParameter, deliveredDateToParameter, locationFromIDParameter, locationToIDParameter, premisesFromIDParameter, premisesToIDParameter, categoryRangeFromParameter, categoryRangeToParameter, categoryIDParameter, itemCodeIDFromParameter, itemCodeIDToParameter, itemNameRangeFromParameter, itemNameRangeToParameter, itemNameIDParameter, batchTypeIDParameter, statusFromParameter, statusToParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptMaterialPurification_Result> SpRptMaterialPurification(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> receiptDateFrom, Nullable<System.DateTime> receiptDateTo, Nullable<int> issueNoID, Nullable<int> receiptNoID, Nullable<int> supplierID, Nullable<int> issueItemCodeID, Nullable<int> issueItemID, Nullable<int> receiptItemCodeID, Nullable<int> receiptItemID, Nullable<int> processID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var receiptDateFromParameter = receiptDateFrom.HasValue ?
                new ObjectParameter("ReceiptDateFrom", receiptDateFrom) :
                new ObjectParameter("ReceiptDateFrom", typeof(System.DateTime));
    
            var receiptDateToParameter = receiptDateTo.HasValue ?
                new ObjectParameter("ReceiptDateTo", receiptDateTo) :
                new ObjectParameter("ReceiptDateTo", typeof(System.DateTime));
    
            var issueNoIDParameter = issueNoID.HasValue ?
                new ObjectParameter("IssueNoID", issueNoID) :
                new ObjectParameter("IssueNoID", typeof(int));
    
            var receiptNoIDParameter = receiptNoID.HasValue ?
                new ObjectParameter("ReceiptNoID", receiptNoID) :
                new ObjectParameter("ReceiptNoID", typeof(int));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var issueItemCodeIDParameter = issueItemCodeID.HasValue ?
                new ObjectParameter("IssueItemCodeID", issueItemCodeID) :
                new ObjectParameter("IssueItemCodeID", typeof(int));
    
            var issueItemIDParameter = issueItemID.HasValue ?
                new ObjectParameter("IssueItemID", issueItemID) :
                new ObjectParameter("IssueItemID", typeof(int));
    
            var receiptItemCodeIDParameter = receiptItemCodeID.HasValue ?
                new ObjectParameter("ReceiptItemCodeID", receiptItemCodeID) :
                new ObjectParameter("ReceiptItemCodeID", typeof(int));
    
            var receiptItemIDParameter = receiptItemID.HasValue ?
                new ObjectParameter("ReceiptItemID", receiptItemID) :
                new ObjectParameter("ReceiptItemID", typeof(int));
    
            var processIDParameter = processID.HasValue ?
                new ObjectParameter("ProcessID", processID) :
                new ObjectParameter("ProcessID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptMaterialPurification_Result>("SpRptMaterialPurification", fromDateParameter, toDateParameter, receiptDateFromParameter, receiptDateToParameter, issueNoIDParameter, receiptNoIDParameter, supplierIDParameter, issueItemCodeIDParameter, issueItemIDParameter, receiptItemCodeIDParameter, receiptItemIDParameter, processIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptMilkPurchase_Result> SpRptMilkPurchase(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> supplierID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptMilkPurchase_Result>("SpRptMilkPurchase", fromDateParameter, toDateParameter, supplierIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptOPRegister_Result> SpRptOPRegister(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptOPRegister_Result>("SpRptOPRegister", fromDateParameter, toDateParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptPackingWorkInProgress_Result> SpRptPackingWorkInProgress(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> productionGroupID, Nullable<int> batchID, Nullable<int> itemCategoryID, Nullable<int> salesCategoryID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var productionGroupIDParameter = productionGroupID.HasValue ?
                new ObjectParameter("ProductionGroupID", productionGroupID) :
                new ObjectParameter("ProductionGroupID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var salesCategoryIDParameter = salesCategoryID.HasValue ?
                new ObjectParameter("SalesCategoryID", salesCategoryID) :
                new ObjectParameter("SalesCategoryID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptPackingWorkInProgress_Result>("SpRptPackingWorkInProgress", fromDateParameter, toDateParameter, productionGroupIDParameter, batchIDParameter, itemCategoryIDParameter, salesCategoryIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptPaymentVoucherSummary_Result> SpRptPaymentVoucherSummary(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> location, string supplierFromRange, string supplierToRange, Nullable<int> supplierID, string bankDetails, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var locationParameter = location.HasValue ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(int));
    
            var supplierFromRangeParameter = supplierFromRange != null ?
                new ObjectParameter("SupplierFromRange", supplierFromRange) :
                new ObjectParameter("SupplierFromRange", typeof(string));
    
            var supplierToRangeParameter = supplierToRange != null ?
                new ObjectParameter("SupplierToRange", supplierToRange) :
                new ObjectParameter("SupplierToRange", typeof(string));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var bankDetailsParameter = bankDetails != null ?
                new ObjectParameter("BankDetails", bankDetails) :
                new ObjectParameter("BankDetails", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptPaymentVoucherSummary_Result>("SpRptPaymentVoucherSummary", fromDateParameter, toDateParameter, locationParameter, supplierFromRangeParameter, supplierToRangeParameter, supplierIDParameter, bankDetailsParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptProductionByBatchDetail_Result> SpRptProductionByBatchDetail(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> pSBatchDateFrom, Nullable<System.DateTime> pSBatchDateTo, string pSBatchNoFrom, string pSBatchNoTo, string outputItemNameRangeFrom, string outputItemNameRangeTo, Nullable<int> itemCodeIDFrom, Nullable<int> itemCodeIDTo, Nullable<int> outputItemNameID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var pSBatchDateFromParameter = pSBatchDateFrom.HasValue ?
                new ObjectParameter("PSBatchDateFrom", pSBatchDateFrom) :
                new ObjectParameter("PSBatchDateFrom", typeof(System.DateTime));
    
            var pSBatchDateToParameter = pSBatchDateTo.HasValue ?
                new ObjectParameter("PSBatchDateTo", pSBatchDateTo) :
                new ObjectParameter("PSBatchDateTo", typeof(System.DateTime));
    
            var pSBatchNoFromParameter = pSBatchNoFrom != null ?
                new ObjectParameter("PSBatchNoFrom", pSBatchNoFrom) :
                new ObjectParameter("PSBatchNoFrom", typeof(string));
    
            var pSBatchNoToParameter = pSBatchNoTo != null ?
                new ObjectParameter("PSBatchNoTo", pSBatchNoTo) :
                new ObjectParameter("PSBatchNoTo", typeof(string));
    
            var outputItemNameRangeFromParameter = outputItemNameRangeFrom != null ?
                new ObjectParameter("OutputItemNameRangeFrom", outputItemNameRangeFrom) :
                new ObjectParameter("OutputItemNameRangeFrom", typeof(string));
    
            var outputItemNameRangeToParameter = outputItemNameRangeTo != null ?
                new ObjectParameter("OutputItemNameRangeTo", outputItemNameRangeTo) :
                new ObjectParameter("OutputItemNameRangeTo", typeof(string));
    
            var itemCodeIDFromParameter = itemCodeIDFrom.HasValue ?
                new ObjectParameter("ItemCodeIDFrom", itemCodeIDFrom) :
                new ObjectParameter("ItemCodeIDFrom", typeof(int));
    
            var itemCodeIDToParameter = itemCodeIDTo.HasValue ?
                new ObjectParameter("ItemCodeIDTo", itemCodeIDTo) :
                new ObjectParameter("ItemCodeIDTo", typeof(int));
    
            var outputItemNameIDParameter = outputItemNameID.HasValue ?
                new ObjectParameter("OutputItemNameID", outputItemNameID) :
                new ObjectParameter("OutputItemNameID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptProductionByBatchDetail_Result>("SpRptProductionByBatchDetail", fromDateParameter, toDateParameter, pSBatchDateFromParameter, pSBatchDateToParameter, pSBatchNoFromParameter, pSBatchNoToParameter, outputItemNameRangeFromParameter, outputItemNameRangeToParameter, itemCodeIDFromParameter, itemCodeIDToParameter, outputItemNameIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptProductionByCategoryDetail_Result> SpRptProductionByCategoryDetail(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> pSBatchDateFrom, Nullable<System.DateTime> pSBatchDateTo, string pSBatchNoFrom, string pSBatchNoTo, string outputItemNameRangeFrom, string outputItemNameRangeTo, Nullable<int> itemCodeIDFrom, Nullable<int> itemCodeIDTo, Nullable<int> outputItemNameID, Nullable<int> categoryFromID, Nullable<int> categoryToID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var pSBatchDateFromParameter = pSBatchDateFrom.HasValue ?
                new ObjectParameter("PSBatchDateFrom", pSBatchDateFrom) :
                new ObjectParameter("PSBatchDateFrom", typeof(System.DateTime));
    
            var pSBatchDateToParameter = pSBatchDateTo.HasValue ?
                new ObjectParameter("PSBatchDateTo", pSBatchDateTo) :
                new ObjectParameter("PSBatchDateTo", typeof(System.DateTime));
    
            var pSBatchNoFromParameter = pSBatchNoFrom != null ?
                new ObjectParameter("PSBatchNoFrom", pSBatchNoFrom) :
                new ObjectParameter("PSBatchNoFrom", typeof(string));
    
            var pSBatchNoToParameter = pSBatchNoTo != null ?
                new ObjectParameter("PSBatchNoTo", pSBatchNoTo) :
                new ObjectParameter("PSBatchNoTo", typeof(string));
    
            var outputItemNameRangeFromParameter = outputItemNameRangeFrom != null ?
                new ObjectParameter("OutputItemNameRangeFrom", outputItemNameRangeFrom) :
                new ObjectParameter("OutputItemNameRangeFrom", typeof(string));
    
            var outputItemNameRangeToParameter = outputItemNameRangeTo != null ?
                new ObjectParameter("OutputItemNameRangeTo", outputItemNameRangeTo) :
                new ObjectParameter("OutputItemNameRangeTo", typeof(string));
    
            var itemCodeIDFromParameter = itemCodeIDFrom.HasValue ?
                new ObjectParameter("ItemCodeIDFrom", itemCodeIDFrom) :
                new ObjectParameter("ItemCodeIDFrom", typeof(int));
    
            var itemCodeIDToParameter = itemCodeIDTo.HasValue ?
                new ObjectParameter("ItemCodeIDTo", itemCodeIDTo) :
                new ObjectParameter("ItemCodeIDTo", typeof(int));
    
            var outputItemNameIDParameter = outputItemNameID.HasValue ?
                new ObjectParameter("OutputItemNameID", outputItemNameID) :
                new ObjectParameter("OutputItemNameID", typeof(int));
    
            var categoryFromIDParameter = categoryFromID.HasValue ?
                new ObjectParameter("CategoryFromID", categoryFromID) :
                new ObjectParameter("CategoryFromID", typeof(int));
    
            var categoryToIDParameter = categoryToID.HasValue ?
                new ObjectParameter("CategoryToID", categoryToID) :
                new ObjectParameter("CategoryToID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptProductionByCategoryDetail_Result>("SpRptProductionByCategoryDetail", fromDateParameter, toDateParameter, pSBatchDateFromParameter, pSBatchDateToParameter, pSBatchNoFromParameter, pSBatchNoToParameter, outputItemNameRangeFromParameter, outputItemNameRangeToParameter, itemCodeIDFromParameter, itemCodeIDToParameter, outputItemNameIDParameter, categoryFromIDParameter, categoryToIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptProductionByItemDetail_Result> SpRptProductionByItemDetail(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> pSBatchDateFrom, Nullable<System.DateTime> pSBatchDateTo, string outputItemNameRangeFrom, string outputItemNameRangeTo, Nullable<int> itemCodeIDFrom, Nullable<int> itemCodeIDTo, Nullable<int> outputItemNameID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var pSBatchDateFromParameter = pSBatchDateFrom.HasValue ?
                new ObjectParameter("PSBatchDateFrom", pSBatchDateFrom) :
                new ObjectParameter("PSBatchDateFrom", typeof(System.DateTime));
    
            var pSBatchDateToParameter = pSBatchDateTo.HasValue ?
                new ObjectParameter("PSBatchDateTo", pSBatchDateTo) :
                new ObjectParameter("PSBatchDateTo", typeof(System.DateTime));
    
            var outputItemNameRangeFromParameter = outputItemNameRangeFrom != null ?
                new ObjectParameter("OutputItemNameRangeFrom", outputItemNameRangeFrom) :
                new ObjectParameter("OutputItemNameRangeFrom", typeof(string));
    
            var outputItemNameRangeToParameter = outputItemNameRangeTo != null ?
                new ObjectParameter("OutputItemNameRangeTo", outputItemNameRangeTo) :
                new ObjectParameter("OutputItemNameRangeTo", typeof(string));
    
            var itemCodeIDFromParameter = itemCodeIDFrom.HasValue ?
                new ObjectParameter("ItemCodeIDFrom", itemCodeIDFrom) :
                new ObjectParameter("ItemCodeIDFrom", typeof(int));
    
            var itemCodeIDToParameter = itemCodeIDTo.HasValue ?
                new ObjectParameter("ItemCodeIDTo", itemCodeIDTo) :
                new ObjectParameter("ItemCodeIDTo", typeof(int));
    
            var outputItemNameIDParameter = outputItemNameID.HasValue ?
                new ObjectParameter("OutputItemNameID", outputItemNameID) :
                new ObjectParameter("OutputItemNameID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptProductionByItemDetail_Result>("SpRptProductionByItemDetail", fromDateParameter, toDateParameter, pSBatchDateFromParameter, pSBatchDateToParameter, outputItemNameRangeFromParameter, outputItemNameRangeToParameter, itemCodeIDFromParameter, itemCodeIDToParameter, outputItemNameIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptProductionByItemSummary_Result> SpRptProductionByItemSummary(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> pSBatchDateFrom, Nullable<System.DateTime> pSBatchDateTo, string outputItemNameRangeFrom, string outputItemNameRangeTo, Nullable<int> itemCodeIDFrom, Nullable<int> itemCodeIDTo, Nullable<int> outputItemNameID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var pSBatchDateFromParameter = pSBatchDateFrom.HasValue ?
                new ObjectParameter("PSBatchDateFrom", pSBatchDateFrom) :
                new ObjectParameter("PSBatchDateFrom", typeof(System.DateTime));
    
            var pSBatchDateToParameter = pSBatchDateTo.HasValue ?
                new ObjectParameter("PSBatchDateTo", pSBatchDateTo) :
                new ObjectParameter("PSBatchDateTo", typeof(System.DateTime));
    
            var outputItemNameRangeFromParameter = outputItemNameRangeFrom != null ?
                new ObjectParameter("OutputItemNameRangeFrom", outputItemNameRangeFrom) :
                new ObjectParameter("OutputItemNameRangeFrom", typeof(string));
    
            var outputItemNameRangeToParameter = outputItemNameRangeTo != null ?
                new ObjectParameter("OutputItemNameRangeTo", outputItemNameRangeTo) :
                new ObjectParameter("OutputItemNameRangeTo", typeof(string));
    
            var itemCodeIDFromParameter = itemCodeIDFrom.HasValue ?
                new ObjectParameter("ItemCodeIDFrom", itemCodeIDFrom) :
                new ObjectParameter("ItemCodeIDFrom", typeof(int));
    
            var itemCodeIDToParameter = itemCodeIDTo.HasValue ?
                new ObjectParameter("ItemCodeIDTo", itemCodeIDTo) :
                new ObjectParameter("ItemCodeIDTo", typeof(int));
    
            var outputItemNameIDParameter = outputItemNameID.HasValue ?
                new ObjectParameter("OutputItemNameID", outputItemNameID) :
                new ObjectParameter("OutputItemNameID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptProductionByItemSummary_Result>("SpRptProductionByItemSummary", fromDateParameter, toDateParameter, pSBatchDateFromParameter, pSBatchDateToParameter, outputItemNameRangeFromParameter, outputItemNameRangeToParameter, itemCodeIDFromParameter, itemCodeIDToParameter, outputItemNameIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptProductionDefinition_Result> SpRptProductionDefinition(string reportType, Nullable<int> productionGroupID, Nullable<decimal> standardBatchSize, Nullable<decimal> actualBatchSize, Nullable<int> batchTypeID, Nullable<decimal> packSize, Nullable<decimal> qty, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> itemID)
        {
            var reportTypeParameter = reportType != null ?
                new ObjectParameter("ReportType", reportType) :
                new ObjectParameter("ReportType", typeof(string));
    
            var productionGroupIDParameter = productionGroupID.HasValue ?
                new ObjectParameter("ProductionGroupID", productionGroupID) :
                new ObjectParameter("ProductionGroupID", typeof(int));
    
            var standardBatchSizeParameter = standardBatchSize.HasValue ?
                new ObjectParameter("StandardBatchSize", standardBatchSize) :
                new ObjectParameter("StandardBatchSize", typeof(decimal));
    
            var actualBatchSizeParameter = actualBatchSize.HasValue ?
                new ObjectParameter("ActualBatchSize", actualBatchSize) :
                new ObjectParameter("ActualBatchSize", typeof(decimal));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var packSizeParameter = packSize.HasValue ?
                new ObjectParameter("PackSize", packSize) :
                new ObjectParameter("PackSize", typeof(decimal));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(decimal));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptProductionDefinition_Result>("SpRptProductionDefinition", reportTypeParameter, productionGroupIDParameter, standardBatchSizeParameter, actualBatchSizeParameter, batchTypeIDParameter, packSizeParameter, qtyParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, itemIDParameter);
        }
    
        public virtual ObjectResult<SpRptProductionInputByBatchSummary_Result> SpRptProductionInputByBatchSummary(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string rateValue, Nullable<System.DateTime> pSBatchDateFrom, Nullable<System.DateTime> pSBatchDateTo, string pSBatchNoFrom, string pSBatchNoTo, string inputItemNameRangeFrom, string inputItemNameRangeTo, Nullable<int> itemCodeIDFrom, Nullable<int> itemCodeIDTo, Nullable<int> inputItemNameID, string batchStatusFrom, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var rateValueParameter = rateValue != null ?
                new ObjectParameter("RateValue", rateValue) :
                new ObjectParameter("RateValue", typeof(string));
    
            var pSBatchDateFromParameter = pSBatchDateFrom.HasValue ?
                new ObjectParameter("PSBatchDateFrom", pSBatchDateFrom) :
                new ObjectParameter("PSBatchDateFrom", typeof(System.DateTime));
    
            var pSBatchDateToParameter = pSBatchDateTo.HasValue ?
                new ObjectParameter("PSBatchDateTo", pSBatchDateTo) :
                new ObjectParameter("PSBatchDateTo", typeof(System.DateTime));
    
            var pSBatchNoFromParameter = pSBatchNoFrom != null ?
                new ObjectParameter("PSBatchNoFrom", pSBatchNoFrom) :
                new ObjectParameter("PSBatchNoFrom", typeof(string));
    
            var pSBatchNoToParameter = pSBatchNoTo != null ?
                new ObjectParameter("PSBatchNoTo", pSBatchNoTo) :
                new ObjectParameter("PSBatchNoTo", typeof(string));
    
            var inputItemNameRangeFromParameter = inputItemNameRangeFrom != null ?
                new ObjectParameter("InputItemNameRangeFrom", inputItemNameRangeFrom) :
                new ObjectParameter("InputItemNameRangeFrom", typeof(string));
    
            var inputItemNameRangeToParameter = inputItemNameRangeTo != null ?
                new ObjectParameter("InputItemNameRangeTo", inputItemNameRangeTo) :
                new ObjectParameter("InputItemNameRangeTo", typeof(string));
    
            var itemCodeIDFromParameter = itemCodeIDFrom.HasValue ?
                new ObjectParameter("ItemCodeIDFrom", itemCodeIDFrom) :
                new ObjectParameter("ItemCodeIDFrom", typeof(int));
    
            var itemCodeIDToParameter = itemCodeIDTo.HasValue ?
                new ObjectParameter("ItemCodeIDTo", itemCodeIDTo) :
                new ObjectParameter("ItemCodeIDTo", typeof(int));
    
            var inputItemNameIDParameter = inputItemNameID.HasValue ?
                new ObjectParameter("InputItemNameID", inputItemNameID) :
                new ObjectParameter("InputItemNameID", typeof(int));
    
            var batchStatusFromParameter = batchStatusFrom != null ?
                new ObjectParameter("BatchStatusFrom", batchStatusFrom) :
                new ObjectParameter("BatchStatusFrom", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptProductionInputByBatchSummary_Result>("SpRptProductionInputByBatchSummary", fromDateParameter, toDateParameter, rateValueParameter, pSBatchDateFromParameter, pSBatchDateToParameter, pSBatchNoFromParameter, pSBatchNoToParameter, inputItemNameRangeFromParameter, inputItemNameRangeToParameter, itemCodeIDFromParameter, itemCodeIDToParameter, inputItemNameIDParameter, batchStatusFromParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptProductionInputByItemSummary_Result> SpRptProductionInputByItemSummary(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> pSBatchDateFrom, Nullable<System.DateTime> pSBatchDateTo, string inputItemNameRangeFrom, string inputItemNameRangeTo, Nullable<int> itemCodeIDFrom, Nullable<int> itemCodeIDTo, Nullable<int> inputItemNameID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var pSBatchDateFromParameter = pSBatchDateFrom.HasValue ?
                new ObjectParameter("PSBatchDateFrom", pSBatchDateFrom) :
                new ObjectParameter("PSBatchDateFrom", typeof(System.DateTime));
    
            var pSBatchDateToParameter = pSBatchDateTo.HasValue ?
                new ObjectParameter("PSBatchDateTo", pSBatchDateTo) :
                new ObjectParameter("PSBatchDateTo", typeof(System.DateTime));
    
            var inputItemNameRangeFromParameter = inputItemNameRangeFrom != null ?
                new ObjectParameter("InputItemNameRangeFrom", inputItemNameRangeFrom) :
                new ObjectParameter("InputItemNameRangeFrom", typeof(string));
    
            var inputItemNameRangeToParameter = inputItemNameRangeTo != null ?
                new ObjectParameter("InputItemNameRangeTo", inputItemNameRangeTo) :
                new ObjectParameter("InputItemNameRangeTo", typeof(string));
    
            var itemCodeIDFromParameter = itemCodeIDFrom.HasValue ?
                new ObjectParameter("ItemCodeIDFrom", itemCodeIDFrom) :
                new ObjectParameter("ItemCodeIDFrom", typeof(int));
    
            var itemCodeIDToParameter = itemCodeIDTo.HasValue ?
                new ObjectParameter("ItemCodeIDTo", itemCodeIDTo) :
                new ObjectParameter("ItemCodeIDTo", typeof(int));
    
            var inputItemNameIDParameter = inputItemNameID.HasValue ?
                new ObjectParameter("InputItemNameID", inputItemNameID) :
                new ObjectParameter("InputItemNameID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptProductionInputByItemSummary_Result>("SpRptProductionInputByItemSummary", fromDateParameter, toDateParameter, pSBatchDateFromParameter, pSBatchDateToParameter, inputItemNameRangeFromParameter, inputItemNameRangeToParameter, itemCodeIDFromParameter, itemCodeIDToParameter, inputItemNameIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptProductionMaterialWhereUsed_Result> SpRptProductionMaterialWhereUsed(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string outputItemNameRangeFrom, string outputItemNameRangeTo, Nullable<int> itemCodeIDFrom, Nullable<int> itemCodeIDTo, Nullable<int> outputItemNameID, Nullable<int> inputItemNameID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var outputItemNameRangeFromParameter = outputItemNameRangeFrom != null ?
                new ObjectParameter("OutputItemNameRangeFrom", outputItemNameRangeFrom) :
                new ObjectParameter("OutputItemNameRangeFrom", typeof(string));
    
            var outputItemNameRangeToParameter = outputItemNameRangeTo != null ?
                new ObjectParameter("OutputItemNameRangeTo", outputItemNameRangeTo) :
                new ObjectParameter("OutputItemNameRangeTo", typeof(string));
    
            var itemCodeIDFromParameter = itemCodeIDFrom.HasValue ?
                new ObjectParameter("ItemCodeIDFrom", itemCodeIDFrom) :
                new ObjectParameter("ItemCodeIDFrom", typeof(int));
    
            var itemCodeIDToParameter = itemCodeIDTo.HasValue ?
                new ObjectParameter("ItemCodeIDTo", itemCodeIDTo) :
                new ObjectParameter("ItemCodeIDTo", typeof(int));
    
            var outputItemNameIDParameter = outputItemNameID.HasValue ?
                new ObjectParameter("OutputItemNameID", outputItemNameID) :
                new ObjectParameter("OutputItemNameID", typeof(int));
    
            var inputItemNameIDParameter = inputItemNameID.HasValue ?
                new ObjectParameter("InputItemNameID", inputItemNameID) :
                new ObjectParameter("InputItemNameID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptProductionMaterialWhereUsed_Result>("SpRptProductionMaterialWhereUsed", fromDateParameter, toDateParameter, outputItemNameRangeFromParameter, outputItemNameRangeToParameter, itemCodeIDFromParameter, itemCodeIDToParameter, outputItemNameIDParameter, inputItemNameIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptProductionOutputAnalysis_Result> SpRptProductionOutputAnalysis(Nullable<System.DateTime> productionFromDate, Nullable<System.DateTime> productionToDate, Nullable<System.DateTime> packingFromDate, Nullable<System.DateTime> packingToDate, Nullable<int> productionGroupID, string batch, string status, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var productionFromDateParameter = productionFromDate.HasValue ?
                new ObjectParameter("ProductionFromDate", productionFromDate) :
                new ObjectParameter("ProductionFromDate", typeof(System.DateTime));
    
            var productionToDateParameter = productionToDate.HasValue ?
                new ObjectParameter("ProductionToDate", productionToDate) :
                new ObjectParameter("ProductionToDate", typeof(System.DateTime));
    
            var packingFromDateParameter = packingFromDate.HasValue ?
                new ObjectParameter("PackingFromDate", packingFromDate) :
                new ObjectParameter("PackingFromDate", typeof(System.DateTime));
    
            var packingToDateParameter = packingToDate.HasValue ?
                new ObjectParameter("PackingToDate", packingToDate) :
                new ObjectParameter("PackingToDate", typeof(System.DateTime));
    
            var productionGroupIDParameter = productionGroupID.HasValue ?
                new ObjectParameter("ProductionGroupID", productionGroupID) :
                new ObjectParameter("ProductionGroupID", typeof(int));
    
            var batchParameter = batch != null ?
                new ObjectParameter("Batch", batch) :
                new ObjectParameter("Batch", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptProductionOutputAnalysis_Result>("SpRptProductionOutputAnalysis", productionFromDateParameter, productionToDateParameter, packingFromDateParameter, packingToDateParameter, productionGroupIDParameter, batchParameter, statusParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptProductionReportByBatchSummary_Result> SpRptProductionReportByBatchSummary(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string rateValue, Nullable<System.DateTime> pSBatchDateFrom, Nullable<System.DateTime> pSBatchDateTo, string pSBatchNoFrom, string pSBatchNoTo, string outputItemNameRangeFrom, string outputItemNameRangeTo, Nullable<int> itemCodeIDFrom, Nullable<int> itemCodeIDTo, Nullable<int> outputItemNameID, string batchStatusFrom, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var rateValueParameter = rateValue != null ?
                new ObjectParameter("RateValue", rateValue) :
                new ObjectParameter("RateValue", typeof(string));
    
            var pSBatchDateFromParameter = pSBatchDateFrom.HasValue ?
                new ObjectParameter("PSBatchDateFrom", pSBatchDateFrom) :
                new ObjectParameter("PSBatchDateFrom", typeof(System.DateTime));
    
            var pSBatchDateToParameter = pSBatchDateTo.HasValue ?
                new ObjectParameter("PSBatchDateTo", pSBatchDateTo) :
                new ObjectParameter("PSBatchDateTo", typeof(System.DateTime));
    
            var pSBatchNoFromParameter = pSBatchNoFrom != null ?
                new ObjectParameter("PSBatchNoFrom", pSBatchNoFrom) :
                new ObjectParameter("PSBatchNoFrom", typeof(string));
    
            var pSBatchNoToParameter = pSBatchNoTo != null ?
                new ObjectParameter("PSBatchNoTo", pSBatchNoTo) :
                new ObjectParameter("PSBatchNoTo", typeof(string));
    
            var outputItemNameRangeFromParameter = outputItemNameRangeFrom != null ?
                new ObjectParameter("OutputItemNameRangeFrom", outputItemNameRangeFrom) :
                new ObjectParameter("OutputItemNameRangeFrom", typeof(string));
    
            var outputItemNameRangeToParameter = outputItemNameRangeTo != null ?
                new ObjectParameter("OutputItemNameRangeTo", outputItemNameRangeTo) :
                new ObjectParameter("OutputItemNameRangeTo", typeof(string));
    
            var itemCodeIDFromParameter = itemCodeIDFrom.HasValue ?
                new ObjectParameter("ItemCodeIDFrom", itemCodeIDFrom) :
                new ObjectParameter("ItemCodeIDFrom", typeof(int));
    
            var itemCodeIDToParameter = itemCodeIDTo.HasValue ?
                new ObjectParameter("ItemCodeIDTo", itemCodeIDTo) :
                new ObjectParameter("ItemCodeIDTo", typeof(int));
    
            var outputItemNameIDParameter = outputItemNameID.HasValue ?
                new ObjectParameter("OutputItemNameID", outputItemNameID) :
                new ObjectParameter("OutputItemNameID", typeof(int));
    
            var batchStatusFromParameter = batchStatusFrom != null ?
                new ObjectParameter("BatchStatusFrom", batchStatusFrom) :
                new ObjectParameter("BatchStatusFrom", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptProductionReportByBatchSummary_Result>("SpRptProductionReportByBatchSummary", fromDateParameter, toDateParameter, rateValueParameter, pSBatchDateFromParameter, pSBatchDateToParameter, pSBatchNoFromParameter, pSBatchNoToParameter, outputItemNameRangeFromParameter, outputItemNameRangeToParameter, itemCodeIDFromParameter, itemCodeIDToParameter, outputItemNameIDParameter, batchStatusFromParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptProductionSchedule_Result> SpRptProductionSchedule(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> pSTransNoFromID, Nullable<int> pSTransNoToID, Nullable<System.DateTime> pSBatchDateFrom, Nullable<System.DateTime> pSBatchDateTo, Nullable<int> pSBatchNoFromID, Nullable<int> pSBatchNoToID, Nullable<int> itemCodeIDFrom, Nullable<int> itemCodeIDTo, string outputItemNameRangeFrom, string outputItemNameRangeTo, Nullable<int> outputItemNameID, Nullable<int> productionGroupID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var pSTransNoFromIDParameter = pSTransNoFromID.HasValue ?
                new ObjectParameter("PSTransNoFromID", pSTransNoFromID) :
                new ObjectParameter("PSTransNoFromID", typeof(int));
    
            var pSTransNoToIDParameter = pSTransNoToID.HasValue ?
                new ObjectParameter("PSTransNoToID", pSTransNoToID) :
                new ObjectParameter("PSTransNoToID", typeof(int));
    
            var pSBatchDateFromParameter = pSBatchDateFrom.HasValue ?
                new ObjectParameter("PSBatchDateFrom", pSBatchDateFrom) :
                new ObjectParameter("PSBatchDateFrom", typeof(System.DateTime));
    
            var pSBatchDateToParameter = pSBatchDateTo.HasValue ?
                new ObjectParameter("PSBatchDateTo", pSBatchDateTo) :
                new ObjectParameter("PSBatchDateTo", typeof(System.DateTime));
    
            var pSBatchNoFromIDParameter = pSBatchNoFromID.HasValue ?
                new ObjectParameter("PSBatchNoFromID", pSBatchNoFromID) :
                new ObjectParameter("PSBatchNoFromID", typeof(int));
    
            var pSBatchNoToIDParameter = pSBatchNoToID.HasValue ?
                new ObjectParameter("PSBatchNoToID", pSBatchNoToID) :
                new ObjectParameter("PSBatchNoToID", typeof(int));
    
            var itemCodeIDFromParameter = itemCodeIDFrom.HasValue ?
                new ObjectParameter("ItemCodeIDFrom", itemCodeIDFrom) :
                new ObjectParameter("ItemCodeIDFrom", typeof(int));
    
            var itemCodeIDToParameter = itemCodeIDTo.HasValue ?
                new ObjectParameter("ItemCodeIDTo", itemCodeIDTo) :
                new ObjectParameter("ItemCodeIDTo", typeof(int));
    
            var outputItemNameRangeFromParameter = outputItemNameRangeFrom != null ?
                new ObjectParameter("OutputItemNameRangeFrom", outputItemNameRangeFrom) :
                new ObjectParameter("OutputItemNameRangeFrom", typeof(string));
    
            var outputItemNameRangeToParameter = outputItemNameRangeTo != null ?
                new ObjectParameter("OutputItemNameRangeTo", outputItemNameRangeTo) :
                new ObjectParameter("OutputItemNameRangeTo", typeof(string));
    
            var outputItemNameIDParameter = outputItemNameID.HasValue ?
                new ObjectParameter("OutputItemNameID", outputItemNameID) :
                new ObjectParameter("OutputItemNameID", typeof(int));
    
            var productionGroupIDParameter = productionGroupID.HasValue ?
                new ObjectParameter("ProductionGroupID", productionGroupID) :
                new ObjectParameter("ProductionGroupID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptProductionSchedule_Result>("SpRptProductionSchedule", fromDateParameter, toDateParameter, pSTransNoFromIDParameter, pSTransNoToIDParameter, pSBatchDateFromParameter, pSBatchDateToParameter, pSBatchNoFromIDParameter, pSBatchNoToIDParameter, itemCodeIDFromParameter, itemCodeIDToParameter, outputItemNameRangeFromParameter, outputItemNameRangeToParameter, outputItemNameIDParameter, productionGroupIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptProductionScheduleStatus_Result> SpRptProductionScheduleStatus(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> scheduleNoFrom, Nullable<int> scheduleNoTo, Nullable<int> productionGroupID, Nullable<int> batchNoFrom, Nullable<int> batchNoTo, Nullable<int> itemCodeFrom, Nullable<int> itemCodeTo, string itemFromRange, string itemToRange, Nullable<int> itemID, Nullable<int> stockIssueNoFrom, Nullable<int> stockIssueNoTo, Nullable<int> stockReceiptNoFrom, Nullable<int> stockReceiptNoTo, Nullable<int> productionIssueNoFrom, Nullable<int> productionIssueNoTo, string status, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var scheduleNoFromParameter = scheduleNoFrom.HasValue ?
                new ObjectParameter("ScheduleNoFrom", scheduleNoFrom) :
                new ObjectParameter("ScheduleNoFrom", typeof(int));
    
            var scheduleNoToParameter = scheduleNoTo.HasValue ?
                new ObjectParameter("ScheduleNoTo", scheduleNoTo) :
                new ObjectParameter("ScheduleNoTo", typeof(int));
    
            var productionGroupIDParameter = productionGroupID.HasValue ?
                new ObjectParameter("ProductionGroupID", productionGroupID) :
                new ObjectParameter("ProductionGroupID", typeof(int));
    
            var batchNoFromParameter = batchNoFrom.HasValue ?
                new ObjectParameter("BatchNoFrom", batchNoFrom) :
                new ObjectParameter("BatchNoFrom", typeof(int));
    
            var batchNoToParameter = batchNoTo.HasValue ?
                new ObjectParameter("BatchNoTo", batchNoTo) :
                new ObjectParameter("BatchNoTo", typeof(int));
    
            var itemCodeFromParameter = itemCodeFrom.HasValue ?
                new ObjectParameter("ItemCodeFrom", itemCodeFrom) :
                new ObjectParameter("ItemCodeFrom", typeof(int));
    
            var itemCodeToParameter = itemCodeTo.HasValue ?
                new ObjectParameter("ItemCodeTo", itemCodeTo) :
                new ObjectParameter("ItemCodeTo", typeof(int));
    
            var itemFromRangeParameter = itemFromRange != null ?
                new ObjectParameter("ItemFromRange", itemFromRange) :
                new ObjectParameter("ItemFromRange", typeof(string));
    
            var itemToRangeParameter = itemToRange != null ?
                new ObjectParameter("ItemToRange", itemToRange) :
                new ObjectParameter("ItemToRange", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var stockIssueNoFromParameter = stockIssueNoFrom.HasValue ?
                new ObjectParameter("StockIssueNoFrom", stockIssueNoFrom) :
                new ObjectParameter("StockIssueNoFrom", typeof(int));
    
            var stockIssueNoToParameter = stockIssueNoTo.HasValue ?
                new ObjectParameter("StockIssueNoTo", stockIssueNoTo) :
                new ObjectParameter("StockIssueNoTo", typeof(int));
    
            var stockReceiptNoFromParameter = stockReceiptNoFrom.HasValue ?
                new ObjectParameter("StockReceiptNoFrom", stockReceiptNoFrom) :
                new ObjectParameter("StockReceiptNoFrom", typeof(int));
    
            var stockReceiptNoToParameter = stockReceiptNoTo.HasValue ?
                new ObjectParameter("StockReceiptNoTo", stockReceiptNoTo) :
                new ObjectParameter("StockReceiptNoTo", typeof(int));
    
            var productionIssueNoFromParameter = productionIssueNoFrom.HasValue ?
                new ObjectParameter("ProductionIssueNoFrom", productionIssueNoFrom) :
                new ObjectParameter("ProductionIssueNoFrom", typeof(int));
    
            var productionIssueNoToParameter = productionIssueNoTo.HasValue ?
                new ObjectParameter("ProductionIssueNoTo", productionIssueNoTo) :
                new ObjectParameter("ProductionIssueNoTo", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptProductionScheduleStatus_Result>("SpRptProductionScheduleStatus", fromDateParameter, toDateParameter, scheduleNoFromParameter, scheduleNoToParameter, productionGroupIDParameter, batchNoFromParameter, batchNoToParameter, itemCodeFromParameter, itemCodeToParameter, itemFromRangeParameter, itemToRangeParameter, itemIDParameter, stockIssueNoFromParameter, stockIssueNoToParameter, stockReceiptNoFromParameter, stockReceiptNoToParameter, productionIssueNoFromParameter, productionIssueNoToParameter, statusParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptProductionStdCostComponent_Result> SpRptProductionStdCostComponent(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string outputItemNameRangeFrom, string outputItemNameRangeTo, Nullable<int> itemCodeIDFrom, Nullable<int> itemCodeIDTo, Nullable<int> outputItemNameID, Nullable<int> categoryFromID, Nullable<int> categoryToID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var outputItemNameRangeFromParameter = outputItemNameRangeFrom != null ?
                new ObjectParameter("OutputItemNameRangeFrom", outputItemNameRangeFrom) :
                new ObjectParameter("OutputItemNameRangeFrom", typeof(string));
    
            var outputItemNameRangeToParameter = outputItemNameRangeTo != null ?
                new ObjectParameter("OutputItemNameRangeTo", outputItemNameRangeTo) :
                new ObjectParameter("OutputItemNameRangeTo", typeof(string));
    
            var itemCodeIDFromParameter = itemCodeIDFrom.HasValue ?
                new ObjectParameter("ItemCodeIDFrom", itemCodeIDFrom) :
                new ObjectParameter("ItemCodeIDFrom", typeof(int));
    
            var itemCodeIDToParameter = itemCodeIDTo.HasValue ?
                new ObjectParameter("ItemCodeIDTo", itemCodeIDTo) :
                new ObjectParameter("ItemCodeIDTo", typeof(int));
    
            var outputItemNameIDParameter = outputItemNameID.HasValue ?
                new ObjectParameter("OutputItemNameID", outputItemNameID) :
                new ObjectParameter("OutputItemNameID", typeof(int));
    
            var categoryFromIDParameter = categoryFromID.HasValue ?
                new ObjectParameter("CategoryFromID", categoryFromID) :
                new ObjectParameter("CategoryFromID", typeof(int));
    
            var categoryToIDParameter = categoryToID.HasValue ?
                new ObjectParameter("CategoryToID", categoryToID) :
                new ObjectParameter("CategoryToID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptProductionStdCostComponent_Result>("SpRptProductionStdCostComponent", fromDateParameter, toDateParameter, outputItemNameRangeFromParameter, outputItemNameRangeToParameter, itemCodeIDFromParameter, itemCodeIDToParameter, outputItemNameIDParameter, categoryFromIDParameter, categoryToIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptProductionStdCostEndItemSummary_Result> SpRptProductionStdCostEndItemSummary(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string outputItemNameRangeFrom, string outputItemNameRangeTo, Nullable<int> itemCodeIDFrom, Nullable<int> itemCodeIDTo, Nullable<int> outputItemNameID, Nullable<int> categoryFromID, Nullable<int> categoryToID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var outputItemNameRangeFromParameter = outputItemNameRangeFrom != null ?
                new ObjectParameter("OutputItemNameRangeFrom", outputItemNameRangeFrom) :
                new ObjectParameter("OutputItemNameRangeFrom", typeof(string));
    
            var outputItemNameRangeToParameter = outputItemNameRangeTo != null ?
                new ObjectParameter("OutputItemNameRangeTo", outputItemNameRangeTo) :
                new ObjectParameter("OutputItemNameRangeTo", typeof(string));
    
            var itemCodeIDFromParameter = itemCodeIDFrom.HasValue ?
                new ObjectParameter("ItemCodeIDFrom", itemCodeIDFrom) :
                new ObjectParameter("ItemCodeIDFrom", typeof(int));
    
            var itemCodeIDToParameter = itemCodeIDTo.HasValue ?
                new ObjectParameter("ItemCodeIDTo", itemCodeIDTo) :
                new ObjectParameter("ItemCodeIDTo", typeof(int));
    
            var outputItemNameIDParameter = outputItemNameID.HasValue ?
                new ObjectParameter("OutputItemNameID", outputItemNameID) :
                new ObjectParameter("OutputItemNameID", typeof(int));
    
            var categoryFromIDParameter = categoryFromID.HasValue ?
                new ObjectParameter("CategoryFromID", categoryFromID) :
                new ObjectParameter("CategoryFromID", typeof(int));
    
            var categoryToIDParameter = categoryToID.HasValue ?
                new ObjectParameter("CategoryToID", categoryToID) :
                new ObjectParameter("CategoryToID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptProductionStdCostEndItemSummary_Result>("SpRptProductionStdCostEndItemSummary", fromDateParameter, toDateParameter, outputItemNameRangeFromParameter, outputItemNameRangeToParameter, itemCodeIDFromParameter, itemCodeIDToParameter, outputItemNameIDParameter, categoryFromIDParameter, categoryToIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptProductionStdCostPurchaseItemSummary_Result> SpRptProductionStdCostPurchaseItemSummary(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string inputItemNameRangeFrom, string inputItemNameRangeTo, Nullable<int> itemCodeIDFrom, Nullable<int> itemCodeIDTo, Nullable<int> inputItemNameID, Nullable<int> categoryFromID, Nullable<int> categoryToID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var inputItemNameRangeFromParameter = inputItemNameRangeFrom != null ?
                new ObjectParameter("InputItemNameRangeFrom", inputItemNameRangeFrom) :
                new ObjectParameter("InputItemNameRangeFrom", typeof(string));
    
            var inputItemNameRangeToParameter = inputItemNameRangeTo != null ?
                new ObjectParameter("InputItemNameRangeTo", inputItemNameRangeTo) :
                new ObjectParameter("InputItemNameRangeTo", typeof(string));
    
            var itemCodeIDFromParameter = itemCodeIDFrom.HasValue ?
                new ObjectParameter("ItemCodeIDFrom", itemCodeIDFrom) :
                new ObjectParameter("ItemCodeIDFrom", typeof(int));
    
            var itemCodeIDToParameter = itemCodeIDTo.HasValue ?
                new ObjectParameter("ItemCodeIDTo", itemCodeIDTo) :
                new ObjectParameter("ItemCodeIDTo", typeof(int));
    
            var inputItemNameIDParameter = inputItemNameID.HasValue ?
                new ObjectParameter("InputItemNameID", inputItemNameID) :
                new ObjectParameter("InputItemNameID", typeof(int));
    
            var categoryFromIDParameter = categoryFromID.HasValue ?
                new ObjectParameter("CategoryFromID", categoryFromID) :
                new ObjectParameter("CategoryFromID", typeof(int));
    
            var categoryToIDParameter = categoryToID.HasValue ?
                new ObjectParameter("CategoryToID", categoryToID) :
                new ObjectParameter("CategoryToID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptProductionStdCostPurchaseItemSummary_Result>("SpRptProductionStdCostPurchaseItemSummary", fromDateParameter, toDateParameter, inputItemNameRangeFromParameter, inputItemNameRangeToParameter, itemCodeIDFromParameter, itemCodeIDToParameter, inputItemNameIDParameter, categoryFromIDParameter, categoryToIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptProductionTimeUtilisationByItem_Result> SpRptProductionTimeUtilisationByItem(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> pSBatchDateFrom, Nullable<System.DateTime> pSBatchDateTo, string pSBatchNoFrom, string pSBatchNoTo, Nullable<int> itemCodeIDFrom, Nullable<int> itemCodeIDTo, string outputItemNameRangeFrom, string outputItemNameRangeTo, Nullable<int> outputItemNameID, Nullable<int> categoryFromID, Nullable<int> categoryToID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var pSBatchDateFromParameter = pSBatchDateFrom.HasValue ?
                new ObjectParameter("PSBatchDateFrom", pSBatchDateFrom) :
                new ObjectParameter("PSBatchDateFrom", typeof(System.DateTime));
    
            var pSBatchDateToParameter = pSBatchDateTo.HasValue ?
                new ObjectParameter("PSBatchDateTo", pSBatchDateTo) :
                new ObjectParameter("PSBatchDateTo", typeof(System.DateTime));
    
            var pSBatchNoFromParameter = pSBatchNoFrom != null ?
                new ObjectParameter("PSBatchNoFrom", pSBatchNoFrom) :
                new ObjectParameter("PSBatchNoFrom", typeof(string));
    
            var pSBatchNoToParameter = pSBatchNoTo != null ?
                new ObjectParameter("PSBatchNoTo", pSBatchNoTo) :
                new ObjectParameter("PSBatchNoTo", typeof(string));
    
            var itemCodeIDFromParameter = itemCodeIDFrom.HasValue ?
                new ObjectParameter("ItemCodeIDFrom", itemCodeIDFrom) :
                new ObjectParameter("ItemCodeIDFrom", typeof(int));
    
            var itemCodeIDToParameter = itemCodeIDTo.HasValue ?
                new ObjectParameter("ItemCodeIDTo", itemCodeIDTo) :
                new ObjectParameter("ItemCodeIDTo", typeof(int));
    
            var outputItemNameRangeFromParameter = outputItemNameRangeFrom != null ?
                new ObjectParameter("OutputItemNameRangeFrom", outputItemNameRangeFrom) :
                new ObjectParameter("OutputItemNameRangeFrom", typeof(string));
    
            var outputItemNameRangeToParameter = outputItemNameRangeTo != null ?
                new ObjectParameter("OutputItemNameRangeTo", outputItemNameRangeTo) :
                new ObjectParameter("OutputItemNameRangeTo", typeof(string));
    
            var outputItemNameIDParameter = outputItemNameID.HasValue ?
                new ObjectParameter("OutputItemNameID", outputItemNameID) :
                new ObjectParameter("OutputItemNameID", typeof(int));
    
            var categoryFromIDParameter = categoryFromID.HasValue ?
                new ObjectParameter("CategoryFromID", categoryFromID) :
                new ObjectParameter("CategoryFromID", typeof(int));
    
            var categoryToIDParameter = categoryToID.HasValue ?
                new ObjectParameter("CategoryToID", categoryToID) :
                new ObjectParameter("CategoryToID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptProductionTimeUtilisationByItem_Result>("SpRptProductionTimeUtilisationByItem", fromDateParameter, toDateParameter, pSBatchDateFromParameter, pSBatchDateToParameter, pSBatchNoFromParameter, pSBatchNoToParameter, itemCodeIDFromParameter, itemCodeIDToParameter, outputItemNameRangeFromParameter, outputItemNameRangeToParameter, outputItemNameIDParameter, categoryFromIDParameter, categoryToIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptProductionWorkInProgress_Result> SpRptProductionWorkInProgress(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> productionGroupID, Nullable<int> batchID, Nullable<int> itemCategoryID, Nullable<int> salesCategoryID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var productionGroupIDParameter = productionGroupID.HasValue ?
                new ObjectParameter("ProductionGroupID", productionGroupID) :
                new ObjectParameter("ProductionGroupID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var salesCategoryIDParameter = salesCategoryID.HasValue ?
                new ObjectParameter("SalesCategoryID", salesCategoryID) :
                new ObjectParameter("SalesCategoryID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptProductionWorkInProgress_Result>("SpRptProductionWorkInProgress", fromDateParameter, toDateParameter, productionGroupIDParameter, batchIDParameter, itemCategoryIDParameter, salesCategoryIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptProfitabilityOnTheBasisOfPurchase_Result> SpRptProfitabilityOnTheBasisOfPurchase(string xMLParams)
        {
            var xMLParamsParameter = xMLParams != null ?
                new ObjectParameter("XMLParams", xMLParams) :
                new ObjectParameter("XMLParams", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptProfitabilityOnTheBasisOfPurchase_Result>("SpRptProfitabilityOnTheBasisOfPurchase", xMLParamsParameter);
        }
    
        public virtual ObjectResult<SpRptPurchaseItemQCDetails_Result> SpRptPurchaseItemQCDetails(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string type, string status, Nullable<int> qcNoFrom, Nullable<int> qcNoTo, string itemNameFrom, string itemNameTo, Nullable<int> itemID, Nullable<int> pONOFrom, Nullable<int> pONOTo, Nullable<System.DateTime> pODateFrom, Nullable<System.DateTime> pODateTo, Nullable<System.DateTime> gRNFromDate, Nullable<System.DateTime> gRNToDate, Nullable<int> gRNNoFrom, Nullable<int> gRNNoTo, string userFromRange, string userToRange, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var qcNoFromParameter = qcNoFrom.HasValue ?
                new ObjectParameter("QcNoFrom", qcNoFrom) :
                new ObjectParameter("QcNoFrom", typeof(int));
    
            var qcNoToParameter = qcNoTo.HasValue ?
                new ObjectParameter("QcNoTo", qcNoTo) :
                new ObjectParameter("QcNoTo", typeof(int));
    
            var itemNameFromParameter = itemNameFrom != null ?
                new ObjectParameter("ItemNameFrom", itemNameFrom) :
                new ObjectParameter("ItemNameFrom", typeof(string));
    
            var itemNameToParameter = itemNameTo != null ?
                new ObjectParameter("ItemNameTo", itemNameTo) :
                new ObjectParameter("ItemNameTo", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var pONOFromParameter = pONOFrom.HasValue ?
                new ObjectParameter("PONOFrom", pONOFrom) :
                new ObjectParameter("PONOFrom", typeof(int));
    
            var pONOToParameter = pONOTo.HasValue ?
                new ObjectParameter("PONOTo", pONOTo) :
                new ObjectParameter("PONOTo", typeof(int));
    
            var pODateFromParameter = pODateFrom.HasValue ?
                new ObjectParameter("PODateFrom", pODateFrom) :
                new ObjectParameter("PODateFrom", typeof(System.DateTime));
    
            var pODateToParameter = pODateTo.HasValue ?
                new ObjectParameter("PODateTo", pODateTo) :
                new ObjectParameter("PODateTo", typeof(System.DateTime));
    
            var gRNFromDateParameter = gRNFromDate.HasValue ?
                new ObjectParameter("GRNFromDate", gRNFromDate) :
                new ObjectParameter("GRNFromDate", typeof(System.DateTime));
    
            var gRNToDateParameter = gRNToDate.HasValue ?
                new ObjectParameter("GRNToDate", gRNToDate) :
                new ObjectParameter("GRNToDate", typeof(System.DateTime));
    
            var gRNNoFromParameter = gRNNoFrom.HasValue ?
                new ObjectParameter("GRNNoFrom", gRNNoFrom) :
                new ObjectParameter("GRNNoFrom", typeof(int));
    
            var gRNNoToParameter = gRNNoTo.HasValue ?
                new ObjectParameter("GRNNoTo", gRNNoTo) :
                new ObjectParameter("GRNNoTo", typeof(int));
    
            var userFromRangeParameter = userFromRange != null ?
                new ObjectParameter("UserFromRange", userFromRange) :
                new ObjectParameter("UserFromRange", typeof(string));
    
            var userToRangeParameter = userToRange != null ?
                new ObjectParameter("UserToRange", userToRange) :
                new ObjectParameter("UserToRange", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptPurchaseItemQCDetails_Result>("SpRptPurchaseItemQCDetails", fromDateParameter, toDateParameter, typeParameter, statusParameter, qcNoFromParameter, qcNoToParameter, itemNameFromParameter, itemNameToParameter, itemIDParameter, pONOFromParameter, pONOToParameter, pODateFromParameter, pODateToParameter, gRNFromDateParameter, gRNToDateParameter, gRNNoFromParameter, gRNNoToParameter, userFromRangeParameter, userToRangeParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptPurchaseOrder_Result> SpRptPurchaseOrder(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string type, Nullable<int> pONOFrom, Nullable<int> pONOTo, Nullable<int> pRNOFrom, Nullable<int> pRNOTo, string supplierFromRange, string supplierToRange, Nullable<int> supplierID, Nullable<int> itemCategoryID, string itemFromRange, string itemToRange, Nullable<int> itemID, Nullable<System.DateTime> pRDateFrom, Nullable<System.DateTime> pRDateTo, Nullable<System.DateTime> pODateFrom, Nullable<System.DateTime> pODateTo, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var pONOFromParameter = pONOFrom.HasValue ?
                new ObjectParameter("PONOFrom", pONOFrom) :
                new ObjectParameter("PONOFrom", typeof(int));
    
            var pONOToParameter = pONOTo.HasValue ?
                new ObjectParameter("PONOTo", pONOTo) :
                new ObjectParameter("PONOTo", typeof(int));
    
            var pRNOFromParameter = pRNOFrom.HasValue ?
                new ObjectParameter("PRNOFrom", pRNOFrom) :
                new ObjectParameter("PRNOFrom", typeof(int));
    
            var pRNOToParameter = pRNOTo.HasValue ?
                new ObjectParameter("PRNOTo", pRNOTo) :
                new ObjectParameter("PRNOTo", typeof(int));
    
            var supplierFromRangeParameter = supplierFromRange != null ?
                new ObjectParameter("SupplierFromRange", supplierFromRange) :
                new ObjectParameter("SupplierFromRange", typeof(string));
    
            var supplierToRangeParameter = supplierToRange != null ?
                new ObjectParameter("SupplierToRange", supplierToRange) :
                new ObjectParameter("SupplierToRange", typeof(string));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var itemFromRangeParameter = itemFromRange != null ?
                new ObjectParameter("ItemFromRange", itemFromRange) :
                new ObjectParameter("ItemFromRange", typeof(string));
    
            var itemToRangeParameter = itemToRange != null ?
                new ObjectParameter("ItemToRange", itemToRange) :
                new ObjectParameter("ItemToRange", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var pRDateFromParameter = pRDateFrom.HasValue ?
                new ObjectParameter("PRDateFrom", pRDateFrom) :
                new ObjectParameter("PRDateFrom", typeof(System.DateTime));
    
            var pRDateToParameter = pRDateTo.HasValue ?
                new ObjectParameter("PRDateTo", pRDateTo) :
                new ObjectParameter("PRDateTo", typeof(System.DateTime));
    
            var pODateFromParameter = pODateFrom.HasValue ?
                new ObjectParameter("PODateFrom", pODateFrom) :
                new ObjectParameter("PODateFrom", typeof(System.DateTime));
    
            var pODateToParameter = pODateTo.HasValue ?
                new ObjectParameter("PODateTo", pODateTo) :
                new ObjectParameter("PODateTo", typeof(System.DateTime));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptPurchaseOrder_Result>("SpRptPurchaseOrder", fromDateParameter, toDateParameter, typeParameter, pONOFromParameter, pONOToParameter, pRNOFromParameter, pRNOToParameter, supplierFromRangeParameter, supplierToRangeParameter, supplierIDParameter, itemCategoryIDParameter, itemFromRangeParameter, itemToRangeParameter, itemIDParameter, pRDateFromParameter, pRDateToParameter, pODateFromParameter, pODateToParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptPurchaseOrderStatus_Result> SpRptPurchaseOrderStatus(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> pONOFrom, Nullable<int> pONOTo, Nullable<int> location, Nullable<int> supplierID, Nullable<int> itemID, string status, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var pONOFromParameter = pONOFrom.HasValue ?
                new ObjectParameter("PONOFrom", pONOFrom) :
                new ObjectParameter("PONOFrom", typeof(int));
    
            var pONOToParameter = pONOTo.HasValue ?
                new ObjectParameter("PONOTo", pONOTo) :
                new ObjectParameter("PONOTo", typeof(int));
    
            var locationParameter = location.HasValue ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(int));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptPurchaseOrderStatus_Result>("SpRptPurchaseOrderStatus", fromDateParameter, toDateParameter, pONOFromParameter, pONOToParameter, locationParameter, supplierIDParameter, itemIDParameter, statusParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptPurchaseProfitability_Result> SpRptPurchaseProfitability(string xMLParams)
        {
            var xMLParamsParameter = xMLParams != null ?
                new ObjectParameter("XMLParams", xMLParams) :
                new ObjectParameter("XMLParams", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptPurchaseProfitability_Result>("SpRptPurchaseProfitability", xMLParamsParameter);
        }
    
        public virtual ObjectResult<SpRptPurchaseRequisition_Result> SpRptPurchaseRequisition(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string type, Nullable<int> pRNOFrom, Nullable<int> pRNOTo, string toDepartmentFromRange, string toDepartmentToRange, Nullable<int> toDepartmentID, string itemCategoryFromRange, string itemCategoryToRange, Nullable<int> itemCategoryID, string itemFromRange, string itemToRange, string userFromRange, string userToRange, Nullable<int> itemID, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var pRNOFromParameter = pRNOFrom.HasValue ?
                new ObjectParameter("PRNOFrom", pRNOFrom) :
                new ObjectParameter("PRNOFrom", typeof(int));
    
            var pRNOToParameter = pRNOTo.HasValue ?
                new ObjectParameter("PRNOTo", pRNOTo) :
                new ObjectParameter("PRNOTo", typeof(int));
    
            var toDepartmentFromRangeParameter = toDepartmentFromRange != null ?
                new ObjectParameter("ToDepartmentFromRange", toDepartmentFromRange) :
                new ObjectParameter("ToDepartmentFromRange", typeof(string));
    
            var toDepartmentToRangeParameter = toDepartmentToRange != null ?
                new ObjectParameter("ToDepartmentToRange", toDepartmentToRange) :
                new ObjectParameter("ToDepartmentToRange", typeof(string));
    
            var toDepartmentIDParameter = toDepartmentID.HasValue ?
                new ObjectParameter("ToDepartmentID", toDepartmentID) :
                new ObjectParameter("ToDepartmentID", typeof(int));
    
            var itemCategoryFromRangeParameter = itemCategoryFromRange != null ?
                new ObjectParameter("ItemCategoryFromRange", itemCategoryFromRange) :
                new ObjectParameter("ItemCategoryFromRange", typeof(string));
    
            var itemCategoryToRangeParameter = itemCategoryToRange != null ?
                new ObjectParameter("ItemCategoryToRange", itemCategoryToRange) :
                new ObjectParameter("ItemCategoryToRange", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var itemFromRangeParameter = itemFromRange != null ?
                new ObjectParameter("ItemFromRange", itemFromRange) :
                new ObjectParameter("ItemFromRange", typeof(string));
    
            var itemToRangeParameter = itemToRange != null ?
                new ObjectParameter("ItemToRange", itemToRange) :
                new ObjectParameter("ItemToRange", typeof(string));
    
            var userFromRangeParameter = userFromRange != null ?
                new ObjectParameter("UserFromRange", userFromRange) :
                new ObjectParameter("UserFromRange", typeof(string));
    
            var userToRangeParameter = userToRange != null ?
                new ObjectParameter("UserToRange", userToRange) :
                new ObjectParameter("UserToRange", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptPurchaseRequisition_Result>("SpRptPurchaseRequisition", fromDateParameter, toDateParameter, typeParameter, pRNOFromParameter, pRNOToParameter, toDepartmentFromRangeParameter, toDepartmentToRangeParameter, toDepartmentIDParameter, itemCategoryFromRangeParameter, itemCategoryToRangeParameter, itemCategoryIDParameter, itemFromRangeParameter, itemToRangeParameter, userFromRangeParameter, userToRangeParameter, itemIDParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptPurchaseReturn_Result> SpRptPurchaseReturn(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> purchaseRetunNoFromId, Nullable<int> purchaseRetunNoTOId, Nullable<int> supplierID, Nullable<int> itemID, Nullable<int> gRNNOFromID, Nullable<int> gRNNOToID, Nullable<int> qCNOFromID, Nullable<int> qCNOToID, string supplierFromRange, string supplierToRange, string itemFromRange, string itemToRange, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var purchaseRetunNoFromIdParameter = purchaseRetunNoFromId.HasValue ?
                new ObjectParameter("purchaseRetunNoFromId", purchaseRetunNoFromId) :
                new ObjectParameter("purchaseRetunNoFromId", typeof(int));
    
            var purchaseRetunNoTOIdParameter = purchaseRetunNoTOId.HasValue ?
                new ObjectParameter("purchaseRetunNoTOId", purchaseRetunNoTOId) :
                new ObjectParameter("purchaseRetunNoTOId", typeof(int));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var gRNNOFromIDParameter = gRNNOFromID.HasValue ?
                new ObjectParameter("GRNNOFromID", gRNNOFromID) :
                new ObjectParameter("GRNNOFromID", typeof(int));
    
            var gRNNOToIDParameter = gRNNOToID.HasValue ?
                new ObjectParameter("GRNNOToID", gRNNOToID) :
                new ObjectParameter("GRNNOToID", typeof(int));
    
            var qCNOFromIDParameter = qCNOFromID.HasValue ?
                new ObjectParameter("QCNOFromID", qCNOFromID) :
                new ObjectParameter("QCNOFromID", typeof(int));
    
            var qCNOToIDParameter = qCNOToID.HasValue ?
                new ObjectParameter("QCNOToID", qCNOToID) :
                new ObjectParameter("QCNOToID", typeof(int));
    
            var supplierFromRangeParameter = supplierFromRange != null ?
                new ObjectParameter("SupplierFromRange", supplierFromRange) :
                new ObjectParameter("SupplierFromRange", typeof(string));
    
            var supplierToRangeParameter = supplierToRange != null ?
                new ObjectParameter("SupplierToRange", supplierToRange) :
                new ObjectParameter("SupplierToRange", typeof(string));
    
            var itemFromRangeParameter = itemFromRange != null ?
                new ObjectParameter("ItemFromRange", itemFromRange) :
                new ObjectParameter("ItemFromRange", typeof(string));
    
            var itemToRangeParameter = itemToRange != null ?
                new ObjectParameter("ItemToRange", itemToRange) :
                new ObjectParameter("ItemToRange", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptPurchaseReturn_Result>("SpRptPurchaseReturn", fromDateParameter, toDateParameter, purchaseRetunNoFromIdParameter, purchaseRetunNoTOIdParameter, supplierIDParameter, itemIDParameter, gRNNOFromIDParameter, gRNNOToIDParameter, qCNOFromIDParameter, qCNOToIDParameter, supplierFromRangeParameter, supplierToRangeParameter, itemFromRangeParameter, itemToRangeParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptPurchasesHistory_Result> SpRptPurchasesHistory(Nullable<System.DateTime> purchaseFromDate, Nullable<System.DateTime> purchaseToDate, Nullable<System.DateTime> invoiceDateFrom, Nullable<System.DateTime> invoiceDateTo, string supplierFromRange, string supplierToRange, Nullable<int> supplierID, string documentNoFromRange, string documentNoToRange, string itemType, Nullable<int> documentNoID, Nullable<int> transFromID, Nullable<int> transToID, string itemFromRange, string itemToRange, Nullable<int> itemID, string itemCategoryFromRange, string itemCategoryToRange, Nullable<int> categoryID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var purchaseFromDateParameter = purchaseFromDate.HasValue ?
                new ObjectParameter("PurchaseFromDate", purchaseFromDate) :
                new ObjectParameter("PurchaseFromDate", typeof(System.DateTime));
    
            var purchaseToDateParameter = purchaseToDate.HasValue ?
                new ObjectParameter("PurchaseToDate", purchaseToDate) :
                new ObjectParameter("PurchaseToDate", typeof(System.DateTime));
    
            var invoiceDateFromParameter = invoiceDateFrom.HasValue ?
                new ObjectParameter("InvoiceDateFrom", invoiceDateFrom) :
                new ObjectParameter("InvoiceDateFrom", typeof(System.DateTime));
    
            var invoiceDateToParameter = invoiceDateTo.HasValue ?
                new ObjectParameter("InvoiceDateTo", invoiceDateTo) :
                new ObjectParameter("InvoiceDateTo", typeof(System.DateTime));
    
            var supplierFromRangeParameter = supplierFromRange != null ?
                new ObjectParameter("SupplierFromRange", supplierFromRange) :
                new ObjectParameter("SupplierFromRange", typeof(string));
    
            var supplierToRangeParameter = supplierToRange != null ?
                new ObjectParameter("SupplierToRange", supplierToRange) :
                new ObjectParameter("SupplierToRange", typeof(string));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var documentNoFromRangeParameter = documentNoFromRange != null ?
                new ObjectParameter("DocumentNoFromRange", documentNoFromRange) :
                new ObjectParameter("DocumentNoFromRange", typeof(string));
    
            var documentNoToRangeParameter = documentNoToRange != null ?
                new ObjectParameter("DocumentNoToRange", documentNoToRange) :
                new ObjectParameter("DocumentNoToRange", typeof(string));
    
            var itemTypeParameter = itemType != null ?
                new ObjectParameter("ItemType", itemType) :
                new ObjectParameter("ItemType", typeof(string));
    
            var documentNoIDParameter = documentNoID.HasValue ?
                new ObjectParameter("DocumentNoID", documentNoID) :
                new ObjectParameter("DocumentNoID", typeof(int));
    
            var transFromIDParameter = transFromID.HasValue ?
                new ObjectParameter("TransFromID", transFromID) :
                new ObjectParameter("TransFromID", typeof(int));
    
            var transToIDParameter = transToID.HasValue ?
                new ObjectParameter("TransToID", transToID) :
                new ObjectParameter("TransToID", typeof(int));
    
            var itemFromRangeParameter = itemFromRange != null ?
                new ObjectParameter("ItemFromRange", itemFromRange) :
                new ObjectParameter("ItemFromRange", typeof(string));
    
            var itemToRangeParameter = itemToRange != null ?
                new ObjectParameter("ItemToRange", itemToRange) :
                new ObjectParameter("ItemToRange", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemCategoryFromRangeParameter = itemCategoryFromRange != null ?
                new ObjectParameter("ItemCategoryFromRange", itemCategoryFromRange) :
                new ObjectParameter("ItemCategoryFromRange", typeof(string));
    
            var itemCategoryToRangeParameter = itemCategoryToRange != null ?
                new ObjectParameter("ItemCategoryToRange", itemCategoryToRange) :
                new ObjectParameter("ItemCategoryToRange", typeof(string));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptPurchasesHistory_Result>("SpRptPurchasesHistory", purchaseFromDateParameter, purchaseToDateParameter, invoiceDateFromParameter, invoiceDateToParameter, supplierFromRangeParameter, supplierToRangeParameter, supplierIDParameter, documentNoFromRangeParameter, documentNoToRangeParameter, itemTypeParameter, documentNoIDParameter, transFromIDParameter, transToIDParameter, itemFromRangeParameter, itemToRangeParameter, itemIDParameter, itemCategoryFromRangeParameter, itemCategoryToRangeParameter, categoryIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptQCSummary_Result> SpRptQCSummary(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptQCSummary_Result>("SpRptQCSummary", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<SpRptQCTestForStockItems_Result> SpRptQCTestForStockItems(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string type, string status, Nullable<int> qcNoFrom, Nullable<int> qcNoTo, string itemNameFrom, string itemNameTo, Nullable<int> itemID, Nullable<int> pONOFrom, Nullable<int> pONOTo, Nullable<System.DateTime> pODateFrom, Nullable<System.DateTime> pODateTo, Nullable<System.DateTime> gRNFromDate, Nullable<System.DateTime> gRNToDate, Nullable<int> gRNNoFrom, Nullable<int> gRNNoTo, string userFromRange, string userToRange, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var qcNoFromParameter = qcNoFrom.HasValue ?
                new ObjectParameter("QcNoFrom", qcNoFrom) :
                new ObjectParameter("QcNoFrom", typeof(int));
    
            var qcNoToParameter = qcNoTo.HasValue ?
                new ObjectParameter("QcNoTo", qcNoTo) :
                new ObjectParameter("QcNoTo", typeof(int));
    
            var itemNameFromParameter = itemNameFrom != null ?
                new ObjectParameter("ItemNameFrom", itemNameFrom) :
                new ObjectParameter("ItemNameFrom", typeof(string));
    
            var itemNameToParameter = itemNameTo != null ?
                new ObjectParameter("ItemNameTo", itemNameTo) :
                new ObjectParameter("ItemNameTo", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var pONOFromParameter = pONOFrom.HasValue ?
                new ObjectParameter("PONOFrom", pONOFrom) :
                new ObjectParameter("PONOFrom", typeof(int));
    
            var pONOToParameter = pONOTo.HasValue ?
                new ObjectParameter("PONOTo", pONOTo) :
                new ObjectParameter("PONOTo", typeof(int));
    
            var pODateFromParameter = pODateFrom.HasValue ?
                new ObjectParameter("PODateFrom", pODateFrom) :
                new ObjectParameter("PODateFrom", typeof(System.DateTime));
    
            var pODateToParameter = pODateTo.HasValue ?
                new ObjectParameter("PODateTo", pODateTo) :
                new ObjectParameter("PODateTo", typeof(System.DateTime));
    
            var gRNFromDateParameter = gRNFromDate.HasValue ?
                new ObjectParameter("GRNFromDate", gRNFromDate) :
                new ObjectParameter("GRNFromDate", typeof(System.DateTime));
    
            var gRNToDateParameter = gRNToDate.HasValue ?
                new ObjectParameter("GRNToDate", gRNToDate) :
                new ObjectParameter("GRNToDate", typeof(System.DateTime));
    
            var gRNNoFromParameter = gRNNoFrom.HasValue ?
                new ObjectParameter("GRNNoFrom", gRNNoFrom) :
                new ObjectParameter("GRNNoFrom", typeof(int));
    
            var gRNNoToParameter = gRNNoTo.HasValue ?
                new ObjectParameter("GRNNoTo", gRNNoTo) :
                new ObjectParameter("GRNNoTo", typeof(int));
    
            var userFromRangeParameter = userFromRange != null ?
                new ObjectParameter("UserFromRange", userFromRange) :
                new ObjectParameter("UserFromRange", typeof(string));
    
            var userToRangeParameter = userToRange != null ?
                new ObjectParameter("UserToRange", userToRange) :
                new ObjectParameter("UserToRange", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptQCTestForStockItems_Result>("SpRptQCTestForStockItems", fromDateParameter, toDateParameter, typeParameter, statusParameter, qcNoFromParameter, qcNoToParameter, itemNameFromParameter, itemNameToParameter, itemIDParameter, pONOFromParameter, pONOToParameter, pODateFromParameter, pODateToParameter, gRNFromDateParameter, gRNToDateParameter, gRNNoFromParameter, gRNNoToParameter, userFromRangeParameter, userToRangeParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptQCWorkInProgress_Result> SpRptQCWorkInProgress(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> productionGroupID, Nullable<int> batchID, Nullable<int> itemCategoryID, Nullable<int> salesCategoryID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var productionGroupIDParameter = productionGroupID.HasValue ?
                new ObjectParameter("ProductionGroupID", productionGroupID) :
                new ObjectParameter("ProductionGroupID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var salesCategoryIDParameter = salesCategoryID.HasValue ?
                new ObjectParameter("SalesCategoryID", salesCategoryID) :
                new ObjectParameter("SalesCategoryID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptQCWorkInProgress_Result>("SpRptQCWorkInProgress", fromDateParameter, toDateParameter, productionGroupIDParameter, batchIDParameter, itemCategoryIDParameter, salesCategoryIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptSaleOrder_Result> SpRptSaleOrder(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string itemCategoryFrom, string itemCategoryTo, Nullable<int> itemCategoryID, Nullable<int> itemCodeFrom, Nullable<int> itemCodeTo, string itemFromRange, string itemToRange, Nullable<int> itemID, Nullable<int> location, Nullable<int> customerCodeFrom, Nullable<int> customerCodeTo, string customerFromRange, string customerToRange, Nullable<int> customerID, Nullable<int> salesOrderNoFrom, Nullable<int> salesOrderNoTo, string status, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var itemCategoryFromParameter = itemCategoryFrom != null ?
                new ObjectParameter("ItemCategoryFrom", itemCategoryFrom) :
                new ObjectParameter("ItemCategoryFrom", typeof(string));
    
            var itemCategoryToParameter = itemCategoryTo != null ?
                new ObjectParameter("ItemCategoryTo", itemCategoryTo) :
                new ObjectParameter("ItemCategoryTo", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var itemCodeFromParameter = itemCodeFrom.HasValue ?
                new ObjectParameter("ItemCodeFrom", itemCodeFrom) :
                new ObjectParameter("ItemCodeFrom", typeof(int));
    
            var itemCodeToParameter = itemCodeTo.HasValue ?
                new ObjectParameter("ItemCodeTo", itemCodeTo) :
                new ObjectParameter("ItemCodeTo", typeof(int));
    
            var itemFromRangeParameter = itemFromRange != null ?
                new ObjectParameter("ItemFromRange", itemFromRange) :
                new ObjectParameter("ItemFromRange", typeof(string));
    
            var itemToRangeParameter = itemToRange != null ?
                new ObjectParameter("ItemToRange", itemToRange) :
                new ObjectParameter("ItemToRange", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var locationParameter = location.HasValue ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(int));
    
            var customerCodeFromParameter = customerCodeFrom.HasValue ?
                new ObjectParameter("CustomerCodeFrom", customerCodeFrom) :
                new ObjectParameter("CustomerCodeFrom", typeof(int));
    
            var customerCodeToParameter = customerCodeTo.HasValue ?
                new ObjectParameter("CustomerCodeTo", customerCodeTo) :
                new ObjectParameter("CustomerCodeTo", typeof(int));
    
            var customerFromRangeParameter = customerFromRange != null ?
                new ObjectParameter("CustomerFromRange", customerFromRange) :
                new ObjectParameter("CustomerFromRange", typeof(string));
    
            var customerToRangeParameter = customerToRange != null ?
                new ObjectParameter("CustomerToRange", customerToRange) :
                new ObjectParameter("CustomerToRange", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var salesOrderNoFromParameter = salesOrderNoFrom.HasValue ?
                new ObjectParameter("SalesOrderNoFrom", salesOrderNoFrom) :
                new ObjectParameter("SalesOrderNoFrom", typeof(int));
    
            var salesOrderNoToParameter = salesOrderNoTo.HasValue ?
                new ObjectParameter("SalesOrderNoTo", salesOrderNoTo) :
                new ObjectParameter("SalesOrderNoTo", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptSaleOrder_Result>("SpRptSaleOrder", fromDateParameter, toDateParameter, itemCategoryFromParameter, itemCategoryToParameter, itemCategoryIDParameter, itemCodeFromParameter, itemCodeToParameter, itemFromRangeParameter, itemToRangeParameter, itemIDParameter, locationParameter, customerCodeFromParameter, customerCodeToParameter, customerFromRangeParameter, customerToRangeParameter, customerIDParameter, salesOrderNoFromParameter, salesOrderNoToParameter, statusParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptSalesAndMarginByBranch_Result> SpRptSalesAndMarginByBranch(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> salesNoFromID, Nullable<int> salesNoToID, string customerNameRangeFrom, string customerNameRangeTo, Nullable<int> customerCodeIDFrom, Nullable<int> customerCodeIDTo, Nullable<int> customerNameID, Nullable<int> location, string categoryRangeFrom, string categoryRangeTo, Nullable<int> categoryID, Nullable<int> itemCodeIDFrom, Nullable<int> itemCodeIDTo, string itemNameRangeFrom, string itemNameRangeTo, Nullable<int> itemNameID, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var salesNoFromIDParameter = salesNoFromID.HasValue ?
                new ObjectParameter("SalesNoFromID", salesNoFromID) :
                new ObjectParameter("SalesNoFromID", typeof(int));
    
            var salesNoToIDParameter = salesNoToID.HasValue ?
                new ObjectParameter("SalesNoToID", salesNoToID) :
                new ObjectParameter("SalesNoToID", typeof(int));
    
            var customerNameRangeFromParameter = customerNameRangeFrom != null ?
                new ObjectParameter("CustomerNameRangeFrom", customerNameRangeFrom) :
                new ObjectParameter("CustomerNameRangeFrom", typeof(string));
    
            var customerNameRangeToParameter = customerNameRangeTo != null ?
                new ObjectParameter("CustomerNameRangeTo", customerNameRangeTo) :
                new ObjectParameter("CustomerNameRangeTo", typeof(string));
    
            var customerCodeIDFromParameter = customerCodeIDFrom.HasValue ?
                new ObjectParameter("CustomerCodeIDFrom", customerCodeIDFrom) :
                new ObjectParameter("CustomerCodeIDFrom", typeof(int));
    
            var customerCodeIDToParameter = customerCodeIDTo.HasValue ?
                new ObjectParameter("CustomerCodeIDTo", customerCodeIDTo) :
                new ObjectParameter("CustomerCodeIDTo", typeof(int));
    
            var customerNameIDParameter = customerNameID.HasValue ?
                new ObjectParameter("CustomerNameID", customerNameID) :
                new ObjectParameter("CustomerNameID", typeof(int));
    
            var locationParameter = location.HasValue ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(int));
    
            var categoryRangeFromParameter = categoryRangeFrom != null ?
                new ObjectParameter("CategoryRangeFrom", categoryRangeFrom) :
                new ObjectParameter("CategoryRangeFrom", typeof(string));
    
            var categoryRangeToParameter = categoryRangeTo != null ?
                new ObjectParameter("CategoryRangeTo", categoryRangeTo) :
                new ObjectParameter("CategoryRangeTo", typeof(string));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var itemCodeIDFromParameter = itemCodeIDFrom.HasValue ?
                new ObjectParameter("ItemCodeIDFrom", itemCodeIDFrom) :
                new ObjectParameter("ItemCodeIDFrom", typeof(int));
    
            var itemCodeIDToParameter = itemCodeIDTo.HasValue ?
                new ObjectParameter("ItemCodeIDTo", itemCodeIDTo) :
                new ObjectParameter("ItemCodeIDTo", typeof(int));
    
            var itemNameRangeFromParameter = itemNameRangeFrom != null ?
                new ObjectParameter("ItemNameRangeFrom", itemNameRangeFrom) :
                new ObjectParameter("ItemNameRangeFrom", typeof(string));
    
            var itemNameRangeToParameter = itemNameRangeTo != null ?
                new ObjectParameter("ItemNameRangeTo", itemNameRangeTo) :
                new ObjectParameter("ItemNameRangeTo", typeof(string));
    
            var itemNameIDParameter = itemNameID.HasValue ?
                new ObjectParameter("ItemNameID", itemNameID) :
                new ObjectParameter("ItemNameID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptSalesAndMarginByBranch_Result>("SpRptSalesAndMarginByBranch", fromDateParameter, toDateParameter, salesNoFromIDParameter, salesNoToIDParameter, customerNameRangeFromParameter, customerNameRangeToParameter, customerCodeIDFromParameter, customerCodeIDToParameter, customerNameIDParameter, locationParameter, categoryRangeFromParameter, categoryRangeToParameter, categoryIDParameter, itemCodeIDFromParameter, itemCodeIDToParameter, itemNameRangeFromParameter, itemNameRangeToParameter, itemNameIDParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptSalesByBranch_Result> SpRptSalesByBranch(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> itemID, Nullable<int> itemCategoryID, Nullable<int> salesCategoryID, Nullable<int> customerCategoryID, Nullable<int> branchLocationID, string itemType, Nullable<int> batchTypeID, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var salesCategoryIDParameter = salesCategoryID.HasValue ?
                new ObjectParameter("SalesCategoryID", salesCategoryID) :
                new ObjectParameter("SalesCategoryID", typeof(int));
    
            var customerCategoryIDParameter = customerCategoryID.HasValue ?
                new ObjectParameter("CustomerCategoryID", customerCategoryID) :
                new ObjectParameter("CustomerCategoryID", typeof(int));
    
            var branchLocationIDParameter = branchLocationID.HasValue ?
                new ObjectParameter("BranchLocationID", branchLocationID) :
                new ObjectParameter("BranchLocationID", typeof(int));
    
            var itemTypeParameter = itemType != null ?
                new ObjectParameter("ItemType", itemType) :
                new ObjectParameter("ItemType", typeof(string));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptSalesByBranch_Result>("SpRptSalesByBranch", fromDateParameter, toDateParameter, itemIDParameter, itemCategoryIDParameter, salesCategoryIDParameter, customerCategoryIDParameter, branchLocationIDParameter, itemTypeParameter, batchTypeIDParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptSalesByBranchSummary_Result> SpRptSalesByBranchSummary(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> itemID, Nullable<int> itemCategoryID, Nullable<int> salesCategoryID, Nullable<int> customerCategoryID, Nullable<int> branchLocationID, Nullable<int> batchTypeID, string itemType, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var salesCategoryIDParameter = salesCategoryID.HasValue ?
                new ObjectParameter("SalesCategoryID", salesCategoryID) :
                new ObjectParameter("SalesCategoryID", typeof(int));
    
            var customerCategoryIDParameter = customerCategoryID.HasValue ?
                new ObjectParameter("CustomerCategoryID", customerCategoryID) :
                new ObjectParameter("CustomerCategoryID", typeof(int));
    
            var branchLocationIDParameter = branchLocationID.HasValue ?
                new ObjectParameter("BranchLocationID", branchLocationID) :
                new ObjectParameter("BranchLocationID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var itemTypeParameter = itemType != null ?
                new ObjectParameter("ItemType", itemType) :
                new ObjectParameter("ItemType", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptSalesByBranchSummary_Result>("SpRptSalesByBranchSummary", fromDateParameter, toDateParameter, itemIDParameter, itemCategoryIDParameter, salesCategoryIDParameter, customerCategoryIDParameter, branchLocationIDParameter, batchTypeIDParameter, itemTypeParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptSalesByCategory_Result> SpRptSalesByCategory(Nullable<int> iD, Nullable<int> categoryID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptSalesByCategory_Result>("SpRptSalesByCategory", iDParameter, categoryIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptSalesByCustomer_Result> SpRptSalesByCustomer(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> invoiceNoFrom, Nullable<int> invoiceNoTo, Nullable<int> customerCodeFrom, Nullable<int> customerCodeTo, string customerFromRange, string customerToRange, Nullable<int> customerID, Nullable<int> customerCategoryID, Nullable<int> itemCodeFromID, Nullable<int> itemCodeToID, string itemFromRange, string itemToRange, Nullable<int> itemID, Nullable<int> salesCategoryID, Nullable<int> itemCategoryID, Nullable<int> batchTypeID, Nullable<int> customerLocationID, string itemType, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var invoiceNoFromParameter = invoiceNoFrom.HasValue ?
                new ObjectParameter("InvoiceNoFrom", invoiceNoFrom) :
                new ObjectParameter("InvoiceNoFrom", typeof(int));
    
            var invoiceNoToParameter = invoiceNoTo.HasValue ?
                new ObjectParameter("InvoiceNoTo", invoiceNoTo) :
                new ObjectParameter("InvoiceNoTo", typeof(int));
    
            var customerCodeFromParameter = customerCodeFrom.HasValue ?
                new ObjectParameter("CustomerCodeFrom", customerCodeFrom) :
                new ObjectParameter("CustomerCodeFrom", typeof(int));
    
            var customerCodeToParameter = customerCodeTo.HasValue ?
                new ObjectParameter("CustomerCodeTo", customerCodeTo) :
                new ObjectParameter("CustomerCodeTo", typeof(int));
    
            var customerFromRangeParameter = customerFromRange != null ?
                new ObjectParameter("CustomerFromRange", customerFromRange) :
                new ObjectParameter("CustomerFromRange", typeof(string));
    
            var customerToRangeParameter = customerToRange != null ?
                new ObjectParameter("CustomerToRange", customerToRange) :
                new ObjectParameter("CustomerToRange", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customerCategoryIDParameter = customerCategoryID.HasValue ?
                new ObjectParameter("CustomerCategoryID", customerCategoryID) :
                new ObjectParameter("CustomerCategoryID", typeof(int));
    
            var itemCodeFromIDParameter = itemCodeFromID.HasValue ?
                new ObjectParameter("ItemCodeFromID", itemCodeFromID) :
                new ObjectParameter("ItemCodeFromID", typeof(int));
    
            var itemCodeToIDParameter = itemCodeToID.HasValue ?
                new ObjectParameter("ItemCodeToID", itemCodeToID) :
                new ObjectParameter("ItemCodeToID", typeof(int));
    
            var itemFromRangeParameter = itemFromRange != null ?
                new ObjectParameter("ItemFromRange", itemFromRange) :
                new ObjectParameter("ItemFromRange", typeof(string));
    
            var itemToRangeParameter = itemToRange != null ?
                new ObjectParameter("ItemToRange", itemToRange) :
                new ObjectParameter("ItemToRange", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var salesCategoryIDParameter = salesCategoryID.HasValue ?
                new ObjectParameter("SalesCategoryID", salesCategoryID) :
                new ObjectParameter("SalesCategoryID", typeof(int));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var customerLocationIDParameter = customerLocationID.HasValue ?
                new ObjectParameter("CustomerLocationID", customerLocationID) :
                new ObjectParameter("CustomerLocationID", typeof(int));
    
            var itemTypeParameter = itemType != null ?
                new ObjectParameter("ItemType", itemType) :
                new ObjectParameter("ItemType", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptSalesByCustomer_Result>("SpRptSalesByCustomer", fromDateParameter, toDateParameter, invoiceNoFromParameter, invoiceNoToParameter, customerCodeFromParameter, customerCodeToParameter, customerFromRangeParameter, customerToRangeParameter, customerIDParameter, customerCategoryIDParameter, itemCodeFromIDParameter, itemCodeToIDParameter, itemFromRangeParameter, itemToRangeParameter, itemIDParameter, salesCategoryIDParameter, itemCategoryIDParameter, batchTypeIDParameter, customerLocationIDParameter, itemTypeParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptSalesByCustomerSummary_Result> SpRptSalesByCustomerSummary(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> invoiceNoFrom, Nullable<int> invoiceNoTo, Nullable<int> customerCodeFrom, Nullable<int> customerCodeTo, string customerFromRange, string customerToRange, Nullable<int> customerID, Nullable<int> customerCategoryID, Nullable<int> itemCodeFromID, Nullable<int> itemCodeToID, string itemFromRange, string itemToRange, Nullable<int> itemID, Nullable<int> salesCategoryID, Nullable<int> itemCategoryID, Nullable<int> batchTypeID, Nullable<int> customerLocationID, string itemType, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var invoiceNoFromParameter = invoiceNoFrom.HasValue ?
                new ObjectParameter("InvoiceNoFrom", invoiceNoFrom) :
                new ObjectParameter("InvoiceNoFrom", typeof(int));
    
            var invoiceNoToParameter = invoiceNoTo.HasValue ?
                new ObjectParameter("InvoiceNoTo", invoiceNoTo) :
                new ObjectParameter("InvoiceNoTo", typeof(int));
    
            var customerCodeFromParameter = customerCodeFrom.HasValue ?
                new ObjectParameter("CustomerCodeFrom", customerCodeFrom) :
                new ObjectParameter("CustomerCodeFrom", typeof(int));
    
            var customerCodeToParameter = customerCodeTo.HasValue ?
                new ObjectParameter("CustomerCodeTo", customerCodeTo) :
                new ObjectParameter("CustomerCodeTo", typeof(int));
    
            var customerFromRangeParameter = customerFromRange != null ?
                new ObjectParameter("CustomerFromRange", customerFromRange) :
                new ObjectParameter("CustomerFromRange", typeof(string));
    
            var customerToRangeParameter = customerToRange != null ?
                new ObjectParameter("CustomerToRange", customerToRange) :
                new ObjectParameter("CustomerToRange", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customerCategoryIDParameter = customerCategoryID.HasValue ?
                new ObjectParameter("CustomerCategoryID", customerCategoryID) :
                new ObjectParameter("CustomerCategoryID", typeof(int));
    
            var itemCodeFromIDParameter = itemCodeFromID.HasValue ?
                new ObjectParameter("ItemCodeFromID", itemCodeFromID) :
                new ObjectParameter("ItemCodeFromID", typeof(int));
    
            var itemCodeToIDParameter = itemCodeToID.HasValue ?
                new ObjectParameter("ItemCodeToID", itemCodeToID) :
                new ObjectParameter("ItemCodeToID", typeof(int));
    
            var itemFromRangeParameter = itemFromRange != null ?
                new ObjectParameter("ItemFromRange", itemFromRange) :
                new ObjectParameter("ItemFromRange", typeof(string));
    
            var itemToRangeParameter = itemToRange != null ?
                new ObjectParameter("ItemToRange", itemToRange) :
                new ObjectParameter("ItemToRange", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var salesCategoryIDParameter = salesCategoryID.HasValue ?
                new ObjectParameter("SalesCategoryID", salesCategoryID) :
                new ObjectParameter("SalesCategoryID", typeof(int));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var customerLocationIDParameter = customerLocationID.HasValue ?
                new ObjectParameter("CustomerLocationID", customerLocationID) :
                new ObjectParameter("CustomerLocationID", typeof(int));
    
            var itemTypeParameter = itemType != null ?
                new ObjectParameter("ItemType", itemType) :
                new ObjectParameter("ItemType", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptSalesByCustomerSummary_Result>("SpRptSalesByCustomerSummary", fromDateParameter, toDateParameter, invoiceNoFromParameter, invoiceNoToParameter, customerCodeFromParameter, customerCodeToParameter, customerFromRangeParameter, customerToRangeParameter, customerIDParameter, customerCategoryIDParameter, itemCodeFromIDParameter, itemCodeToIDParameter, itemFromRangeParameter, itemToRangeParameter, itemIDParameter, salesCategoryIDParameter, itemCategoryIDParameter, batchTypeIDParameter, customerLocationIDParameter, itemTypeParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptSalesByFSO_Result> SpRptSalesByFSO(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> fSOID, Nullable<int> salesIncentiveCategoryID, Nullable<int> invoiceNoFrom, Nullable<int> invoiceNoTo, Nullable<int> customerCodeFrom, Nullable<int> customerCodeTo, string customerFromRange, string customerToRange, Nullable<int> customerID, Nullable<int> customerCategoryID, Nullable<int> salesCategoryID, Nullable<int> location, Nullable<int> batchTypeID, string itemType, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var fSOIDParameter = fSOID.HasValue ?
                new ObjectParameter("FSOID", fSOID) :
                new ObjectParameter("FSOID", typeof(int));
    
            var salesIncentiveCategoryIDParameter = salesIncentiveCategoryID.HasValue ?
                new ObjectParameter("SalesIncentiveCategoryID", salesIncentiveCategoryID) :
                new ObjectParameter("SalesIncentiveCategoryID", typeof(int));
    
            var invoiceNoFromParameter = invoiceNoFrom.HasValue ?
                new ObjectParameter("InvoiceNoFrom", invoiceNoFrom) :
                new ObjectParameter("InvoiceNoFrom", typeof(int));
    
            var invoiceNoToParameter = invoiceNoTo.HasValue ?
                new ObjectParameter("InvoiceNoTo", invoiceNoTo) :
                new ObjectParameter("InvoiceNoTo", typeof(int));
    
            var customerCodeFromParameter = customerCodeFrom.HasValue ?
                new ObjectParameter("CustomerCodeFrom", customerCodeFrom) :
                new ObjectParameter("CustomerCodeFrom", typeof(int));
    
            var customerCodeToParameter = customerCodeTo.HasValue ?
                new ObjectParameter("CustomerCodeTo", customerCodeTo) :
                new ObjectParameter("CustomerCodeTo", typeof(int));
    
            var customerFromRangeParameter = customerFromRange != null ?
                new ObjectParameter("CustomerFromRange", customerFromRange) :
                new ObjectParameter("CustomerFromRange", typeof(string));
    
            var customerToRangeParameter = customerToRange != null ?
                new ObjectParameter("CustomerToRange", customerToRange) :
                new ObjectParameter("CustomerToRange", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customerCategoryIDParameter = customerCategoryID.HasValue ?
                new ObjectParameter("CustomerCategoryID", customerCategoryID) :
                new ObjectParameter("CustomerCategoryID", typeof(int));
    
            var salesCategoryIDParameter = salesCategoryID.HasValue ?
                new ObjectParameter("SalesCategoryID", salesCategoryID) :
                new ObjectParameter("SalesCategoryID", typeof(int));
    
            var locationParameter = location.HasValue ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var itemTypeParameter = itemType != null ?
                new ObjectParameter("ItemType", itemType) :
                new ObjectParameter("ItemType", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptSalesByFSO_Result>("SpRptSalesByFSO", fromDateParameter, toDateParameter, fSOIDParameter, salesIncentiveCategoryIDParameter, invoiceNoFromParameter, invoiceNoToParameter, customerCodeFromParameter, customerCodeToParameter, customerFromRangeParameter, customerToRangeParameter, customerIDParameter, customerCategoryIDParameter, salesCategoryIDParameter, locationParameter, batchTypeIDParameter, itemTypeParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptSalesByItem_Result> SpRptSalesByItem(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> salesCategoryID, Nullable<int> itemCategoryID, Nullable<int> itemLocationID, Nullable<int> itemCodeFromID, Nullable<int> itemCodeToID, string itemFromRange, string itemToRange, Nullable<int> itemID, Nullable<int> batchTypeID, string itemType, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var salesCategoryIDParameter = salesCategoryID.HasValue ?
                new ObjectParameter("SalesCategoryID", salesCategoryID) :
                new ObjectParameter("SalesCategoryID", typeof(int));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var itemLocationIDParameter = itemLocationID.HasValue ?
                new ObjectParameter("ItemLocationID", itemLocationID) :
                new ObjectParameter("ItemLocationID", typeof(int));
    
            var itemCodeFromIDParameter = itemCodeFromID.HasValue ?
                new ObjectParameter("ItemCodeFromID", itemCodeFromID) :
                new ObjectParameter("ItemCodeFromID", typeof(int));
    
            var itemCodeToIDParameter = itemCodeToID.HasValue ?
                new ObjectParameter("ItemCodeToID", itemCodeToID) :
                new ObjectParameter("ItemCodeToID", typeof(int));
    
            var itemFromRangeParameter = itemFromRange != null ?
                new ObjectParameter("ItemFromRange", itemFromRange) :
                new ObjectParameter("ItemFromRange", typeof(string));
    
            var itemToRangeParameter = itemToRange != null ?
                new ObjectParameter("ItemToRange", itemToRange) :
                new ObjectParameter("ItemToRange", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var itemTypeParameter = itemType != null ?
                new ObjectParameter("ItemType", itemType) :
                new ObjectParameter("ItemType", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptSalesByItem_Result>("SpRptSalesByItem", fromDateParameter, toDateParameter, salesCategoryIDParameter, itemCategoryIDParameter, itemLocationIDParameter, itemCodeFromIDParameter, itemCodeToIDParameter, itemFromRangeParameter, itemToRangeParameter, itemIDParameter, batchTypeIDParameter, itemTypeParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptSalesGSTR_Result> SpRptSalesGSTR(string xMLParam)
        {
            var xMLParamParameter = xMLParam != null ?
                new ObjectParameter("XMLParam", xMLParam) :
                new ObjectParameter("XMLParam", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptSalesGSTR_Result>("SpRptSalesGSTR", xMLParamParameter);
        }
    
        public virtual ObjectResult<SpRptSalesGSTReport_Result> SpRptSalesGSTReport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptSalesGSTReport_Result>("SpRptSalesGSTReport");
        }
    
        public virtual ObjectResult<SpRptSalesGSTRHSN_Result> SpRptSalesGSTRHSN(string xMLParam)
        {
            var xMLParamParameter = xMLParam != null ?
                new ObjectParameter("XMLParam", xMLParam) :
                new ObjectParameter("XMLParam", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptSalesGSTRHSN_Result>("SpRptSalesGSTRHSN", xMLParamParameter);
        }
    
        public virtual ObjectResult<SpRptSalesInvoicePrint_Result> SpRptSalesInvoicePrint(Nullable<int> salesID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var salesIDParameter = salesID.HasValue ?
                new ObjectParameter("SalesID", salesID) :
                new ObjectParameter("SalesID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptSalesInvoicePrint_Result>("SpRptSalesInvoicePrint", salesIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptSalesInvoicePrintGSTDetails_Result> SpRptSalesInvoicePrintGSTDetails(string invoiceType, Nullable<int> invoiceID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var invoiceTypeParameter = invoiceType != null ?
                new ObjectParameter("InvoiceType", invoiceType) :
                new ObjectParameter("InvoiceType", typeof(string));
    
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptSalesInvoicePrintGSTDetails_Result>("SpRptSalesInvoicePrintGSTDetails", invoiceTypeParameter, invoiceIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptSalesOrder_Result> SpRptSalesOrder(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> salesOrderNoFrom, Nullable<int> salesOrderNoTo, Nullable<int> customerCodeFrom, Nullable<int> customerCodeTo, string customerFromRange, string customerToRange, Nullable<int> customerID, Nullable<int> locations, Nullable<int> itemCategoryID, Nullable<int> itemCodeFrom, Nullable<int> itemCodeTo, Nullable<int> itemID, string status, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var salesOrderNoFromParameter = salesOrderNoFrom.HasValue ?
                new ObjectParameter("SalesOrderNoFrom", salesOrderNoFrom) :
                new ObjectParameter("SalesOrderNoFrom", typeof(int));
    
            var salesOrderNoToParameter = salesOrderNoTo.HasValue ?
                new ObjectParameter("SalesOrderNoTo", salesOrderNoTo) :
                new ObjectParameter("SalesOrderNoTo", typeof(int));
    
            var customerCodeFromParameter = customerCodeFrom.HasValue ?
                new ObjectParameter("CustomerCodeFrom", customerCodeFrom) :
                new ObjectParameter("CustomerCodeFrom", typeof(int));
    
            var customerCodeToParameter = customerCodeTo.HasValue ?
                new ObjectParameter("CustomerCodeTo", customerCodeTo) :
                new ObjectParameter("CustomerCodeTo", typeof(int));
    
            var customerFromRangeParameter = customerFromRange != null ?
                new ObjectParameter("CustomerFromRange", customerFromRange) :
                new ObjectParameter("CustomerFromRange", typeof(string));
    
            var customerToRangeParameter = customerToRange != null ?
                new ObjectParameter("CustomerToRange", customerToRange) :
                new ObjectParameter("CustomerToRange", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var locationsParameter = locations.HasValue ?
                new ObjectParameter("Locations", locations) :
                new ObjectParameter("Locations", typeof(int));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var itemCodeFromParameter = itemCodeFrom.HasValue ?
                new ObjectParameter("ItemCodeFrom", itemCodeFrom) :
                new ObjectParameter("ItemCodeFrom", typeof(int));
    
            var itemCodeToParameter = itemCodeTo.HasValue ?
                new ObjectParameter("ItemCodeTo", itemCodeTo) :
                new ObjectParameter("ItemCodeTo", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptSalesOrder_Result>("SpRptSalesOrder", fromDateParameter, toDateParameter, salesOrderNoFromParameter, salesOrderNoToParameter, customerCodeFromParameter, customerCodeToParameter, customerFromRangeParameter, customerToRangeParameter, customerIDParameter, locationsParameter, itemCategoryIDParameter, itemCodeFromParameter, itemCodeToParameter, itemIDParameter, statusParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptSalesOrderDetail_Result> SpRptSalesOrderDetail(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> salesOrderNoFrom, Nullable<int> salesOrderNoTo, Nullable<int> customerCodeFrom, Nullable<int> customerCodeTo, string customerFromRange, string customerToRange, Nullable<int> customerID, Nullable<int> location, Nullable<int> itemCategoryID, Nullable<int> itemCodeFrom, Nullable<int> itemCodeTo, Nullable<int> itemID, string status, string type, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var salesOrderNoFromParameter = salesOrderNoFrom.HasValue ?
                new ObjectParameter("SalesOrderNoFrom", salesOrderNoFrom) :
                new ObjectParameter("SalesOrderNoFrom", typeof(int));
    
            var salesOrderNoToParameter = salesOrderNoTo.HasValue ?
                new ObjectParameter("SalesOrderNoTo", salesOrderNoTo) :
                new ObjectParameter("SalesOrderNoTo", typeof(int));
    
            var customerCodeFromParameter = customerCodeFrom.HasValue ?
                new ObjectParameter("CustomerCodeFrom", customerCodeFrom) :
                new ObjectParameter("CustomerCodeFrom", typeof(int));
    
            var customerCodeToParameter = customerCodeTo.HasValue ?
                new ObjectParameter("CustomerCodeTo", customerCodeTo) :
                new ObjectParameter("CustomerCodeTo", typeof(int));
    
            var customerFromRangeParameter = customerFromRange != null ?
                new ObjectParameter("CustomerFromRange", customerFromRange) :
                new ObjectParameter("CustomerFromRange", typeof(string));
    
            var customerToRangeParameter = customerToRange != null ?
                new ObjectParameter("CustomerToRange", customerToRange) :
                new ObjectParameter("CustomerToRange", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var locationParameter = location.HasValue ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(int));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var itemCodeFromParameter = itemCodeFrom.HasValue ?
                new ObjectParameter("ItemCodeFrom", itemCodeFrom) :
                new ObjectParameter("ItemCodeFrom", typeof(int));
    
            var itemCodeToParameter = itemCodeTo.HasValue ?
                new ObjectParameter("ItemCodeTo", itemCodeTo) :
                new ObjectParameter("ItemCodeTo", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptSalesOrderDetail_Result>("SpRptSalesOrderDetail", fromDateParameter, toDateParameter, salesOrderNoFromParameter, salesOrderNoToParameter, customerCodeFromParameter, customerCodeToParameter, customerFromRangeParameter, customerToRangeParameter, customerIDParameter, locationParameter, itemCategoryIDParameter, itemCodeFromParameter, itemCodeToParameter, itemIDParameter, statusParameter, typeParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptSalesOrderSummary_Result> SpRptSalesOrderSummary(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> itemCategoryID, Nullable<int> location, Nullable<int> customerCodeFrom, Nullable<int> customerCodeTo, string customerFromRange, string customerToRange, Nullable<int> customerID, Nullable<int> salesOrderNoFrom, Nullable<int> salesOrderNoTo, string status, string type, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var locationParameter = location.HasValue ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(int));
    
            var customerCodeFromParameter = customerCodeFrom.HasValue ?
                new ObjectParameter("CustomerCodeFrom", customerCodeFrom) :
                new ObjectParameter("CustomerCodeFrom", typeof(int));
    
            var customerCodeToParameter = customerCodeTo.HasValue ?
                new ObjectParameter("CustomerCodeTo", customerCodeTo) :
                new ObjectParameter("CustomerCodeTo", typeof(int));
    
            var customerFromRangeParameter = customerFromRange != null ?
                new ObjectParameter("CustomerFromRange", customerFromRange) :
                new ObjectParameter("CustomerFromRange", typeof(string));
    
            var customerToRangeParameter = customerToRange != null ?
                new ObjectParameter("CustomerToRange", customerToRange) :
                new ObjectParameter("CustomerToRange", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var salesOrderNoFromParameter = salesOrderNoFrom.HasValue ?
                new ObjectParameter("SalesOrderNoFrom", salesOrderNoFrom) :
                new ObjectParameter("SalesOrderNoFrom", typeof(int));
    
            var salesOrderNoToParameter = salesOrderNoTo.HasValue ?
                new ObjectParameter("SalesOrderNoTo", salesOrderNoTo) :
                new ObjectParameter("SalesOrderNoTo", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptSalesOrderSummary_Result>("SpRptSalesOrderSummary", fromDateParameter, toDateParameter, itemCategoryIDParameter, locationParameter, customerCodeFromParameter, customerCodeToParameter, customerFromRangeParameter, customerToRangeParameter, customerIDParameter, salesOrderNoFromParameter, salesOrderNoToParameter, statusParameter, typeParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptSalesOutputGSTReport_Result> SpRptSalesOutputGSTReport(Nullable<System.DateTime> invoiceDateFrom, Nullable<System.DateTime> invoiceDateTo, Nullable<int> locations, Nullable<int> customerTaxCategoryID, string fromCustomerRange, string toCustomerRange, Nullable<int> customerID, Nullable<int> itemCategoryID, Nullable<int> salesCategoryID, string fromItemRange, string toItemRange, Nullable<int> itemID, Nullable<int> invoiceNoFromID, Nullable<int> invoiceNoToID, Nullable<int> customerGSTNoID, Nullable<decimal> gSTRateFrom, Nullable<decimal> gSTRateTo, string iGST, string itemType, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var invoiceDateFromParameter = invoiceDateFrom.HasValue ?
                new ObjectParameter("InvoiceDateFrom", invoiceDateFrom) :
                new ObjectParameter("InvoiceDateFrom", typeof(System.DateTime));
    
            var invoiceDateToParameter = invoiceDateTo.HasValue ?
                new ObjectParameter("InvoiceDateTo", invoiceDateTo) :
                new ObjectParameter("InvoiceDateTo", typeof(System.DateTime));
    
            var locationsParameter = locations.HasValue ?
                new ObjectParameter("Locations", locations) :
                new ObjectParameter("Locations", typeof(int));
    
            var customerTaxCategoryIDParameter = customerTaxCategoryID.HasValue ?
                new ObjectParameter("CustomerTaxCategoryID", customerTaxCategoryID) :
                new ObjectParameter("CustomerTaxCategoryID", typeof(int));
    
            var fromCustomerRangeParameter = fromCustomerRange != null ?
                new ObjectParameter("FromCustomerRange", fromCustomerRange) :
                new ObjectParameter("FromCustomerRange", typeof(string));
    
            var toCustomerRangeParameter = toCustomerRange != null ?
                new ObjectParameter("ToCustomerRange", toCustomerRange) :
                new ObjectParameter("ToCustomerRange", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var salesCategoryIDParameter = salesCategoryID.HasValue ?
                new ObjectParameter("SalesCategoryID", salesCategoryID) :
                new ObjectParameter("SalesCategoryID", typeof(int));
    
            var fromItemRangeParameter = fromItemRange != null ?
                new ObjectParameter("FromItemRange", fromItemRange) :
                new ObjectParameter("FromItemRange", typeof(string));
    
            var toItemRangeParameter = toItemRange != null ?
                new ObjectParameter("ToItemRange", toItemRange) :
                new ObjectParameter("ToItemRange", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var invoiceNoFromIDParameter = invoiceNoFromID.HasValue ?
                new ObjectParameter("InvoiceNoFromID", invoiceNoFromID) :
                new ObjectParameter("InvoiceNoFromID", typeof(int));
    
            var invoiceNoToIDParameter = invoiceNoToID.HasValue ?
                new ObjectParameter("InvoiceNoToID", invoiceNoToID) :
                new ObjectParameter("InvoiceNoToID", typeof(int));
    
            var customerGSTNoIDParameter = customerGSTNoID.HasValue ?
                new ObjectParameter("CustomerGSTNoID", customerGSTNoID) :
                new ObjectParameter("CustomerGSTNoID", typeof(int));
    
            var gSTRateFromParameter = gSTRateFrom.HasValue ?
                new ObjectParameter("GSTRateFrom", gSTRateFrom) :
                new ObjectParameter("GSTRateFrom", typeof(decimal));
    
            var gSTRateToParameter = gSTRateTo.HasValue ?
                new ObjectParameter("GSTRateTo", gSTRateTo) :
                new ObjectParameter("GSTRateTo", typeof(decimal));
    
            var iGSTParameter = iGST != null ?
                new ObjectParameter("IGST", iGST) :
                new ObjectParameter("IGST", typeof(string));
    
            var itemTypeParameter = itemType != null ?
                new ObjectParameter("ItemType", itemType) :
                new ObjectParameter("ItemType", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptSalesOutputGSTReport_Result>("SpRptSalesOutputGSTReport", invoiceDateFromParameter, invoiceDateToParameter, locationsParameter, customerTaxCategoryIDParameter, fromCustomerRangeParameter, toCustomerRangeParameter, customerIDParameter, itemCategoryIDParameter, salesCategoryIDParameter, fromItemRangeParameter, toItemRangeParameter, itemIDParameter, invoiceNoFromIDParameter, invoiceNoToIDParameter, customerGSTNoIDParameter, gSTRateFromParameter, gSTRateToParameter, iGSTParameter, itemTypeParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptSalesReturnDetail_Result> SpRptSalesReturnDetail(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> location, Nullable<int> invoiceNoFromID, Nullable<int> invoiceNoToID, Nullable<int> customerID, string itemType, Nullable<int> itemCategoryID, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var locationParameter = location.HasValue ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(int));
    
            var invoiceNoFromIDParameter = invoiceNoFromID.HasValue ?
                new ObjectParameter("InvoiceNoFromID", invoiceNoFromID) :
                new ObjectParameter("InvoiceNoFromID", typeof(int));
    
            var invoiceNoToIDParameter = invoiceNoToID.HasValue ?
                new ObjectParameter("InvoiceNoToID", invoiceNoToID) :
                new ObjectParameter("InvoiceNoToID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var itemTypeParameter = itemType != null ?
                new ObjectParameter("ItemType", itemType) :
                new ObjectParameter("ItemType", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptSalesReturnDetail_Result>("SpRptSalesReturnDetail", fromDateParameter, toDateParameter, locationParameter, invoiceNoFromIDParameter, invoiceNoToIDParameter, customerIDParameter, itemTypeParameter, itemCategoryIDParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptSalesReturnGSTR_Result> SpRptSalesReturnGSTR(string xMLParam)
        {
            var xMLParamParameter = xMLParam != null ?
                new ObjectParameter("XMLParam", xMLParam) :
                new ObjectParameter("XMLParam", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptSalesReturnGSTR_Result>("SpRptSalesReturnGSTR", xMLParamParameter);
        }
    
        public virtual ObjectResult<SpRptSalesReturnGSTReport_Result> SpRptSalesReturnGSTReport(Nullable<System.DateTime> invoiceDateFrom, Nullable<System.DateTime> invoiceDateTo, Nullable<int> locations, Nullable<int> customerTaxCategoryID, string fromCustomerRange, string toCustomerRange, Nullable<int> customerID, Nullable<int> itemCategoryID, Nullable<int> salesCategoryID, string fromItemRange, string toItemRange, Nullable<int> itemID, Nullable<int> invoiceNoFromID, Nullable<int> invoiceNoToID, Nullable<int> customerGSTNoID, Nullable<decimal> gSTRateFrom, Nullable<decimal> gSTRateTo, string transactionType, string iGST, Nullable<int> userID, Nullable<int> finYear, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var invoiceDateFromParameter = invoiceDateFrom.HasValue ?
                new ObjectParameter("InvoiceDateFrom", invoiceDateFrom) :
                new ObjectParameter("InvoiceDateFrom", typeof(System.DateTime));
    
            var invoiceDateToParameter = invoiceDateTo.HasValue ?
                new ObjectParameter("InvoiceDateTo", invoiceDateTo) :
                new ObjectParameter("InvoiceDateTo", typeof(System.DateTime));
    
            var locationsParameter = locations.HasValue ?
                new ObjectParameter("Locations", locations) :
                new ObjectParameter("Locations", typeof(int));
    
            var customerTaxCategoryIDParameter = customerTaxCategoryID.HasValue ?
                new ObjectParameter("CustomerTaxCategoryID", customerTaxCategoryID) :
                new ObjectParameter("CustomerTaxCategoryID", typeof(int));
    
            var fromCustomerRangeParameter = fromCustomerRange != null ?
                new ObjectParameter("FromCustomerRange", fromCustomerRange) :
                new ObjectParameter("FromCustomerRange", typeof(string));
    
            var toCustomerRangeParameter = toCustomerRange != null ?
                new ObjectParameter("ToCustomerRange", toCustomerRange) :
                new ObjectParameter("ToCustomerRange", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var salesCategoryIDParameter = salesCategoryID.HasValue ?
                new ObjectParameter("SalesCategoryID", salesCategoryID) :
                new ObjectParameter("SalesCategoryID", typeof(int));
    
            var fromItemRangeParameter = fromItemRange != null ?
                new ObjectParameter("FromItemRange", fromItemRange) :
                new ObjectParameter("FromItemRange", typeof(string));
    
            var toItemRangeParameter = toItemRange != null ?
                new ObjectParameter("ToItemRange", toItemRange) :
                new ObjectParameter("ToItemRange", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var invoiceNoFromIDParameter = invoiceNoFromID.HasValue ?
                new ObjectParameter("InvoiceNoFromID", invoiceNoFromID) :
                new ObjectParameter("InvoiceNoFromID", typeof(int));
    
            var invoiceNoToIDParameter = invoiceNoToID.HasValue ?
                new ObjectParameter("InvoiceNoToID", invoiceNoToID) :
                new ObjectParameter("InvoiceNoToID", typeof(int));
    
            var customerGSTNoIDParameter = customerGSTNoID.HasValue ?
                new ObjectParameter("CustomerGSTNoID", customerGSTNoID) :
                new ObjectParameter("CustomerGSTNoID", typeof(int));
    
            var gSTRateFromParameter = gSTRateFrom.HasValue ?
                new ObjectParameter("GSTRateFrom", gSTRateFrom) :
                new ObjectParameter("GSTRateFrom", typeof(decimal));
    
            var gSTRateToParameter = gSTRateTo.HasValue ?
                new ObjectParameter("GSTRateTo", gSTRateTo) :
                new ObjectParameter("GSTRateTo", typeof(decimal));
    
            var transactionTypeParameter = transactionType != null ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(string));
    
            var iGSTParameter = iGST != null ?
                new ObjectParameter("IGST", iGST) :
                new ObjectParameter("IGST", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptSalesReturnGSTReport_Result>("SpRptSalesReturnGSTReport", invoiceDateFromParameter, invoiceDateToParameter, locationsParameter, customerTaxCategoryIDParameter, fromCustomerRangeParameter, toCustomerRangeParameter, customerIDParameter, itemCategoryIDParameter, salesCategoryIDParameter, fromItemRangeParameter, toItemRangeParameter, itemIDParameter, invoiceNoFromIDParameter, invoiceNoToIDParameter, customerGSTNoIDParameter, gSTRateFromParameter, gSTRateToParameter, transactionTypeParameter, iGSTParameter, userIDParameter, finYearParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual ObjectResult<SpRptSalesReturnGSTSummary_Result> SpRptSalesReturnGSTSummary(Nullable<System.DateTime> invoiceDateFrom, Nullable<System.DateTime> invoiceDateTo, Nullable<int> locations, Nullable<int> customerTaxCategoryID, string fromCustomerRange, string toCustomerRange, Nullable<int> customerID, Nullable<int> invoiceNoFromID, Nullable<int> invoiceNoToID, Nullable<int> customerGSTNoID, Nullable<decimal> gSTRateFrom, Nullable<decimal> gSTRateTo, string transactionType, string iGST, Nullable<int> userID, Nullable<int> finYear, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var invoiceDateFromParameter = invoiceDateFrom.HasValue ?
                new ObjectParameter("InvoiceDateFrom", invoiceDateFrom) :
                new ObjectParameter("InvoiceDateFrom", typeof(System.DateTime));
    
            var invoiceDateToParameter = invoiceDateTo.HasValue ?
                new ObjectParameter("InvoiceDateTo", invoiceDateTo) :
                new ObjectParameter("InvoiceDateTo", typeof(System.DateTime));
    
            var locationsParameter = locations.HasValue ?
                new ObjectParameter("Locations", locations) :
                new ObjectParameter("Locations", typeof(int));
    
            var customerTaxCategoryIDParameter = customerTaxCategoryID.HasValue ?
                new ObjectParameter("CustomerTaxCategoryID", customerTaxCategoryID) :
                new ObjectParameter("CustomerTaxCategoryID", typeof(int));
    
            var fromCustomerRangeParameter = fromCustomerRange != null ?
                new ObjectParameter("FromCustomerRange", fromCustomerRange) :
                new ObjectParameter("FromCustomerRange", typeof(string));
    
            var toCustomerRangeParameter = toCustomerRange != null ?
                new ObjectParameter("ToCustomerRange", toCustomerRange) :
                new ObjectParameter("ToCustomerRange", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var invoiceNoFromIDParameter = invoiceNoFromID.HasValue ?
                new ObjectParameter("InvoiceNoFromID", invoiceNoFromID) :
                new ObjectParameter("InvoiceNoFromID", typeof(int));
    
            var invoiceNoToIDParameter = invoiceNoToID.HasValue ?
                new ObjectParameter("InvoiceNoToID", invoiceNoToID) :
                new ObjectParameter("InvoiceNoToID", typeof(int));
    
            var customerGSTNoIDParameter = customerGSTNoID.HasValue ?
                new ObjectParameter("CustomerGSTNoID", customerGSTNoID) :
                new ObjectParameter("CustomerGSTNoID", typeof(int));
    
            var gSTRateFromParameter = gSTRateFrom.HasValue ?
                new ObjectParameter("GSTRateFrom", gSTRateFrom) :
                new ObjectParameter("GSTRateFrom", typeof(decimal));
    
            var gSTRateToParameter = gSTRateTo.HasValue ?
                new ObjectParameter("GSTRateTo", gSTRateTo) :
                new ObjectParameter("GSTRateTo", typeof(decimal));
    
            var transactionTypeParameter = transactionType != null ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(string));
    
            var iGSTParameter = iGST != null ?
                new ObjectParameter("IGST", iGST) :
                new ObjectParameter("IGST", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptSalesReturnGSTSummary_Result>("SpRptSalesReturnGSTSummary", invoiceDateFromParameter, invoiceDateToParameter, locationsParameter, customerTaxCategoryIDParameter, fromCustomerRangeParameter, toCustomerRangeParameter, customerIDParameter, invoiceNoFromIDParameter, invoiceNoToIDParameter, customerGSTNoIDParameter, gSTRateFromParameter, gSTRateToParameter, transactionTypeParameter, iGSTParameter, userIDParameter, finYearParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual ObjectResult<SpRptSalesReturnSummary_Result> SpRptSalesReturnSummary(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> location, Nullable<int> customerID, Nullable<int> invoiceNoFromID, Nullable<int> invoiceNoToID, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var locationParameter = location.HasValue ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var invoiceNoFromIDParameter = invoiceNoFromID.HasValue ?
                new ObjectParameter("InvoiceNoFromID", invoiceNoFromID) :
                new ObjectParameter("InvoiceNoFromID", typeof(int));
    
            var invoiceNoToIDParameter = invoiceNoToID.HasValue ?
                new ObjectParameter("InvoiceNoToID", invoiceNoToID) :
                new ObjectParameter("InvoiceNoToID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptSalesReturnSummary_Result>("SpRptSalesReturnSummary", fromDateParameter, toDateParameter, locationParameter, customerIDParameter, invoiceNoFromIDParameter, invoiceNoToIDParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptShortageInTransfer_Result> SpRptShortageInTransfer(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> locationFrom, Nullable<int> locationTo, Nullable<int> itemID, Nullable<int> salesCategoryID, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var locationFromParameter = locationFrom.HasValue ?
                new ObjectParameter("LocationFrom", locationFrom) :
                new ObjectParameter("LocationFrom", typeof(int));
    
            var locationToParameter = locationTo.HasValue ?
                new ObjectParameter("LocationTo", locationTo) :
                new ObjectParameter("LocationTo", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var salesCategoryIDParameter = salesCategoryID.HasValue ?
                new ObjectParameter("SalesCategoryID", salesCategoryID) :
                new ObjectParameter("SalesCategoryID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptShortageInTransfer_Result>("SpRptShortageInTransfer", fromDateParameter, toDateParameter, locationFromParameter, locationToParameter, itemIDParameter, salesCategoryIDParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptShortDelivery_Result> SpRptShortDelivery(Nullable<System.DateTime> sODateFrom, Nullable<System.DateTime> sODateTo, Nullable<int> locations, Nullable<int> itemID, Nullable<int> salesCategoryID, Nullable<int> itemCategoryID, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var sODateFromParameter = sODateFrom.HasValue ?
                new ObjectParameter("SODateFrom", sODateFrom) :
                new ObjectParameter("SODateFrom", typeof(System.DateTime));
    
            var sODateToParameter = sODateTo.HasValue ?
                new ObjectParameter("SODateTo", sODateTo) :
                new ObjectParameter("SODateTo", typeof(System.DateTime));
    
            var locationsParameter = locations.HasValue ?
                new ObjectParameter("Locations", locations) :
                new ObjectParameter("Locations", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var salesCategoryIDParameter = salesCategoryID.HasValue ?
                new ObjectParameter("SalesCategoryID", salesCategoryID) :
                new ObjectParameter("SalesCategoryID", typeof(int));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptShortDelivery_Result>("SpRptShortDelivery", sODateFromParameter, sODateToParameter, locationsParameter, itemIDParameter, salesCategoryIDParameter, itemCategoryIDParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptStockExpiry_Result> SpRptStockExpiry(Nullable<System.DateTime> toDate, Nullable<int> location, Nullable<int> premiseID, Nullable<int> itemCodeID, Nullable<int> itemID, Nullable<int> batchTypeID, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var locationParameter = location.HasValue ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(int));
    
            var premiseIDParameter = premiseID.HasValue ?
                new ObjectParameter("PremiseID", premiseID) :
                new ObjectParameter("PremiseID", typeof(int));
    
            var itemCodeIDParameter = itemCodeID.HasValue ?
                new ObjectParameter("ItemCodeID", itemCodeID) :
                new ObjectParameter("ItemCodeID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptStockExpiry_Result>("SpRptStockExpiry", toDateParameter, locationParameter, premiseIDParameter, itemCodeIDParameter, itemIDParameter, batchTypeIDParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptStockLedger_Result> SpRptStockLedger(Nullable<System.DateTime> stockDate, Nullable<int> locationID, Nullable<int> premisesID, string itemCategoryFrom, string itemCategoryTo, Nullable<int> itemCategoryID, Nullable<int> itemCodeFrom, Nullable<int> itemCodeTo, string itemFrom, string itemTo, Nullable<int> itemID, Nullable<int> batchTypeID, string valueType)
        {
            var stockDateParameter = stockDate.HasValue ?
                new ObjectParameter("StockDate", stockDate) :
                new ObjectParameter("StockDate", typeof(System.DateTime));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var premisesIDParameter = premisesID.HasValue ?
                new ObjectParameter("PremisesID", premisesID) :
                new ObjectParameter("PremisesID", typeof(int));
    
            var itemCategoryFromParameter = itemCategoryFrom != null ?
                new ObjectParameter("ItemCategoryFrom", itemCategoryFrom) :
                new ObjectParameter("ItemCategoryFrom", typeof(string));
    
            var itemCategoryToParameter = itemCategoryTo != null ?
                new ObjectParameter("ItemCategoryTo", itemCategoryTo) :
                new ObjectParameter("ItemCategoryTo", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var itemCodeFromParameter = itemCodeFrom.HasValue ?
                new ObjectParameter("ItemCodeFrom", itemCodeFrom) :
                new ObjectParameter("ItemCodeFrom", typeof(int));
    
            var itemCodeToParameter = itemCodeTo.HasValue ?
                new ObjectParameter("ItemCodeTo", itemCodeTo) :
                new ObjectParameter("ItemCodeTo", typeof(int));
    
            var itemFromParameter = itemFrom != null ?
                new ObjectParameter("ItemFrom", itemFrom) :
                new ObjectParameter("ItemFrom", typeof(string));
    
            var itemToParameter = itemTo != null ?
                new ObjectParameter("ItemTo", itemTo) :
                new ObjectParameter("ItemTo", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var valueTypeParameter = valueType != null ?
                new ObjectParameter("ValueType", valueType) :
                new ObjectParameter("ValueType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptStockLedger_Result>("SpRptStockLedger", stockDateParameter, locationIDParameter, premisesIDParameter, itemCategoryFromParameter, itemCategoryToParameter, itemCategoryIDParameter, itemCodeFromParameter, itemCodeToParameter, itemFromParameter, itemToParameter, itemIDParameter, batchTypeIDParameter, valueTypeParameter);
        }
    
        public virtual ObjectResult<SpRptStockLedgerByDate_Result> SpRptStockLedgerByDate(Nullable<System.DateTime> stockDate, Nullable<int> fromLocationID, Nullable<int> toLocationID, Nullable<int> fromPremisesID, Nullable<int> toPremisesID, string itemCategoryFromRange, string itemCategoryToRange, Nullable<int> itemCategoryID, Nullable<int> itemCodeFrom, Nullable<int> itemCodeTo, string itemFrom, string itemTo, Nullable<int> itemID, Nullable<int> batchTypeID, string valueType)
        {
            var stockDateParameter = stockDate.HasValue ?
                new ObjectParameter("StockDate", stockDate) :
                new ObjectParameter("StockDate", typeof(System.DateTime));
    
            var fromLocationIDParameter = fromLocationID.HasValue ?
                new ObjectParameter("FromLocationID", fromLocationID) :
                new ObjectParameter("FromLocationID", typeof(int));
    
            var toLocationIDParameter = toLocationID.HasValue ?
                new ObjectParameter("ToLocationID", toLocationID) :
                new ObjectParameter("ToLocationID", typeof(int));
    
            var fromPremisesIDParameter = fromPremisesID.HasValue ?
                new ObjectParameter("FromPremisesID", fromPremisesID) :
                new ObjectParameter("FromPremisesID", typeof(int));
    
            var toPremisesIDParameter = toPremisesID.HasValue ?
                new ObjectParameter("ToPremisesID", toPremisesID) :
                new ObjectParameter("ToPremisesID", typeof(int));
    
            var itemCategoryFromRangeParameter = itemCategoryFromRange != null ?
                new ObjectParameter("ItemCategoryFromRange", itemCategoryFromRange) :
                new ObjectParameter("ItemCategoryFromRange", typeof(string));
    
            var itemCategoryToRangeParameter = itemCategoryToRange != null ?
                new ObjectParameter("ItemCategoryToRange", itemCategoryToRange) :
                new ObjectParameter("ItemCategoryToRange", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var itemCodeFromParameter = itemCodeFrom.HasValue ?
                new ObjectParameter("ItemCodeFrom", itemCodeFrom) :
                new ObjectParameter("ItemCodeFrom", typeof(int));
    
            var itemCodeToParameter = itemCodeTo.HasValue ?
                new ObjectParameter("ItemCodeTo", itemCodeTo) :
                new ObjectParameter("ItemCodeTo", typeof(int));
    
            var itemFromParameter = itemFrom != null ?
                new ObjectParameter("ItemFrom", itemFrom) :
                new ObjectParameter("ItemFrom", typeof(string));
    
            var itemToParameter = itemTo != null ?
                new ObjectParameter("ItemTo", itemTo) :
                new ObjectParameter("ItemTo", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var valueTypeParameter = valueType != null ?
                new ObjectParameter("ValueType", valueType) :
                new ObjectParameter("ValueType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptStockLedgerByDate_Result>("SpRptStockLedgerByDate", stockDateParameter, fromLocationIDParameter, toLocationIDParameter, fromPremisesIDParameter, toPremisesIDParameter, itemCategoryFromRangeParameter, itemCategoryToRangeParameter, itemCategoryIDParameter, itemCodeFromParameter, itemCodeToParameter, itemFromParameter, itemToParameter, itemIDParameter, batchTypeIDParameter, valueTypeParameter);
        }
    
        public virtual ObjectResult<SpRptStockLedgerSummary_Result> SpRptStockLedgerSummary(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> locationID, Nullable<int> itemCategoryID, Nullable<int> salesCategoryID, Nullable<int> itemID, Nullable<int> batchID, Nullable<int> premisesID, string valueType, Nullable<int> finYear, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var salesCategoryIDParameter = salesCategoryID.HasValue ?
                new ObjectParameter("SalesCategoryID", salesCategoryID) :
                new ObjectParameter("SalesCategoryID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var premisesIDParameter = premisesID.HasValue ?
                new ObjectParameter("PremisesID", premisesID) :
                new ObjectParameter("PremisesID", typeof(int));
    
            var valueTypeParameter = valueType != null ?
                new ObjectParameter("ValueType", valueType) :
                new ObjectParameter("ValueType", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptStockLedgerSummary_Result>("SpRptStockLedgerSummary", fromDateParameter, toDateParameter, locationIDParameter, itemCategoryIDParameter, salesCategoryIDParameter, itemIDParameter, batchIDParameter, premisesIDParameter, valueTypeParameter, finYearParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptStockTransfer_Result> SpRptStockTransfer(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> requestNoFrom, Nullable<int> requestNoTo, Nullable<System.DateTime> issueDateFrom, Nullable<System.DateTime> issueDateTo, Nullable<int> issueNoFrom, Nullable<int> issueNoTo, Nullable<int> locationFrom, Nullable<int> locationTo, Nullable<int> premisesFrom, Nullable<int> premisesTo, Nullable<int> itemCategoryID, Nullable<int> itemCodeFrom, Nullable<int> itemCodeTo, Nullable<int> itemID, string itemFromRange, string itemToRange, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var requestNoFromParameter = requestNoFrom.HasValue ?
                new ObjectParameter("RequestNoFrom", requestNoFrom) :
                new ObjectParameter("RequestNoFrom", typeof(int));
    
            var requestNoToParameter = requestNoTo.HasValue ?
                new ObjectParameter("RequestNoTo", requestNoTo) :
                new ObjectParameter("RequestNoTo", typeof(int));
    
            var issueDateFromParameter = issueDateFrom.HasValue ?
                new ObjectParameter("IssueDateFrom", issueDateFrom) :
                new ObjectParameter("IssueDateFrom", typeof(System.DateTime));
    
            var issueDateToParameter = issueDateTo.HasValue ?
                new ObjectParameter("IssueDateTo", issueDateTo) :
                new ObjectParameter("IssueDateTo", typeof(System.DateTime));
    
            var issueNoFromParameter = issueNoFrom.HasValue ?
                new ObjectParameter("IssueNoFrom", issueNoFrom) :
                new ObjectParameter("IssueNoFrom", typeof(int));
    
            var issueNoToParameter = issueNoTo.HasValue ?
                new ObjectParameter("IssueNoTo", issueNoTo) :
                new ObjectParameter("IssueNoTo", typeof(int));
    
            var locationFromParameter = locationFrom.HasValue ?
                new ObjectParameter("LocationFrom", locationFrom) :
                new ObjectParameter("LocationFrom", typeof(int));
    
            var locationToParameter = locationTo.HasValue ?
                new ObjectParameter("LocationTo", locationTo) :
                new ObjectParameter("LocationTo", typeof(int));
    
            var premisesFromParameter = premisesFrom.HasValue ?
                new ObjectParameter("PremisesFrom", premisesFrom) :
                new ObjectParameter("PremisesFrom", typeof(int));
    
            var premisesToParameter = premisesTo.HasValue ?
                new ObjectParameter("PremisesTo", premisesTo) :
                new ObjectParameter("PremisesTo", typeof(int));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var itemCodeFromParameter = itemCodeFrom.HasValue ?
                new ObjectParameter("ItemCodeFrom", itemCodeFrom) :
                new ObjectParameter("ItemCodeFrom", typeof(int));
    
            var itemCodeToParameter = itemCodeTo.HasValue ?
                new ObjectParameter("ItemCodeTo", itemCodeTo) :
                new ObjectParameter("ItemCodeTo", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemFromRangeParameter = itemFromRange != null ?
                new ObjectParameter("ItemFromRange", itemFromRange) :
                new ObjectParameter("ItemFromRange", typeof(string));
    
            var itemToRangeParameter = itemToRange != null ?
                new ObjectParameter("ItemToRange", itemToRange) :
                new ObjectParameter("ItemToRange", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptStockTransfer_Result>("SpRptStockTransfer", fromDateParameter, toDateParameter, requestNoFromParameter, requestNoToParameter, issueDateFromParameter, issueDateToParameter, issueNoFromParameter, issueNoToParameter, locationFromParameter, locationToParameter, premisesFromParameter, premisesToParameter, itemCategoryIDParameter, itemCodeFromParameter, itemCodeToParameter, itemIDParameter, itemFromRangeParameter, itemToRangeParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptStockTransferByItem_Result> SpRptStockTransferByItem(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> deliveredDateFrom, Nullable<System.DateTime> deliveredDateTo, string transactionType, Nullable<int> requestNoFrom, Nullable<int> requestNoTo, Nullable<int> issueNoFrom, Nullable<int> issueNoTo, Nullable<int> locationFrom, Nullable<int> locationTo, Nullable<int> premisesFrom, Nullable<int> premisesTo, string itemCategoryFromRange, string itemCategoryToRange, Nullable<int> itemCategoryID, Nullable<int> itemCodeFrom, Nullable<int> itemCodeTo, string itemNameFromRange, string itemNameToRange, Nullable<int> itemID, Nullable<int> batchTypeID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var deliveredDateFromParameter = deliveredDateFrom.HasValue ?
                new ObjectParameter("DeliveredDateFrom", deliveredDateFrom) :
                new ObjectParameter("DeliveredDateFrom", typeof(System.DateTime));
    
            var deliveredDateToParameter = deliveredDateTo.HasValue ?
                new ObjectParameter("DeliveredDateTo", deliveredDateTo) :
                new ObjectParameter("DeliveredDateTo", typeof(System.DateTime));
    
            var transactionTypeParameter = transactionType != null ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(string));
    
            var requestNoFromParameter = requestNoFrom.HasValue ?
                new ObjectParameter("RequestNoFrom", requestNoFrom) :
                new ObjectParameter("RequestNoFrom", typeof(int));
    
            var requestNoToParameter = requestNoTo.HasValue ?
                new ObjectParameter("RequestNoTo", requestNoTo) :
                new ObjectParameter("RequestNoTo", typeof(int));
    
            var issueNoFromParameter = issueNoFrom.HasValue ?
                new ObjectParameter("IssueNoFrom", issueNoFrom) :
                new ObjectParameter("IssueNoFrom", typeof(int));
    
            var issueNoToParameter = issueNoTo.HasValue ?
                new ObjectParameter("IssueNoTo", issueNoTo) :
                new ObjectParameter("IssueNoTo", typeof(int));
    
            var locationFromParameter = locationFrom.HasValue ?
                new ObjectParameter("LocationFrom", locationFrom) :
                new ObjectParameter("LocationFrom", typeof(int));
    
            var locationToParameter = locationTo.HasValue ?
                new ObjectParameter("LocationTo", locationTo) :
                new ObjectParameter("LocationTo", typeof(int));
    
            var premisesFromParameter = premisesFrom.HasValue ?
                new ObjectParameter("PremisesFrom", premisesFrom) :
                new ObjectParameter("PremisesFrom", typeof(int));
    
            var premisesToParameter = premisesTo.HasValue ?
                new ObjectParameter("PremisesTo", premisesTo) :
                new ObjectParameter("PremisesTo", typeof(int));
    
            var itemCategoryFromRangeParameter = itemCategoryFromRange != null ?
                new ObjectParameter("ItemCategoryFromRange", itemCategoryFromRange) :
                new ObjectParameter("ItemCategoryFromRange", typeof(string));
    
            var itemCategoryToRangeParameter = itemCategoryToRange != null ?
                new ObjectParameter("ItemCategoryToRange", itemCategoryToRange) :
                new ObjectParameter("ItemCategoryToRange", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var itemCodeFromParameter = itemCodeFrom.HasValue ?
                new ObjectParameter("ItemCodeFrom", itemCodeFrom) :
                new ObjectParameter("ItemCodeFrom", typeof(int));
    
            var itemCodeToParameter = itemCodeTo.HasValue ?
                new ObjectParameter("ItemCodeTo", itemCodeTo) :
                new ObjectParameter("ItemCodeTo", typeof(int));
    
            var itemNameFromRangeParameter = itemNameFromRange != null ?
                new ObjectParameter("ItemNameFromRange", itemNameFromRange) :
                new ObjectParameter("ItemNameFromRange", typeof(string));
    
            var itemNameToRangeParameter = itemNameToRange != null ?
                new ObjectParameter("ItemNameToRange", itemNameToRange) :
                new ObjectParameter("ItemNameToRange", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptStockTransferByItem_Result>("SpRptStockTransferByItem", fromDateParameter, toDateParameter, deliveredDateFromParameter, deliveredDateToParameter, transactionTypeParameter, requestNoFromParameter, requestNoToParameter, issueNoFromParameter, issueNoToParameter, locationFromParameter, locationToParameter, premisesFromParameter, premisesToParameter, itemCategoryFromRangeParameter, itemCategoryToRangeParameter, itemCategoryIDParameter, itemCodeFromParameter, itemCodeToParameter, itemNameFromRangeParameter, itemNameToRangeParameter, itemIDParameter, batchTypeIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptStockTransferByItemBatchNoWise_Result> SpRptStockTransferByItemBatchNoWise(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> deliveredDateFrom, Nullable<System.DateTime> deliveredDateTo, string transactionType, Nullable<int> requestNoFrom, Nullable<int> requestNoTo, Nullable<int> issueNoFrom, Nullable<int> issueNoTo, Nullable<int> locationFrom, Nullable<int> locationTo, Nullable<int> premisesFrom, Nullable<int> premisesTo, string itemCategoryFromRange, string itemCategoryToRange, Nullable<int> itemCategoryID, Nullable<int> itemCodeFrom, Nullable<int> itemCodeTo, string itemNameFromRange, string itemNameToRange, Nullable<int> itemID, Nullable<int> batchTypeID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var deliveredDateFromParameter = deliveredDateFrom.HasValue ?
                new ObjectParameter("DeliveredDateFrom", deliveredDateFrom) :
                new ObjectParameter("DeliveredDateFrom", typeof(System.DateTime));
    
            var deliveredDateToParameter = deliveredDateTo.HasValue ?
                new ObjectParameter("DeliveredDateTo", deliveredDateTo) :
                new ObjectParameter("DeliveredDateTo", typeof(System.DateTime));
    
            var transactionTypeParameter = transactionType != null ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(string));
    
            var requestNoFromParameter = requestNoFrom.HasValue ?
                new ObjectParameter("RequestNoFrom", requestNoFrom) :
                new ObjectParameter("RequestNoFrom", typeof(int));
    
            var requestNoToParameter = requestNoTo.HasValue ?
                new ObjectParameter("RequestNoTo", requestNoTo) :
                new ObjectParameter("RequestNoTo", typeof(int));
    
            var issueNoFromParameter = issueNoFrom.HasValue ?
                new ObjectParameter("IssueNoFrom", issueNoFrom) :
                new ObjectParameter("IssueNoFrom", typeof(int));
    
            var issueNoToParameter = issueNoTo.HasValue ?
                new ObjectParameter("IssueNoTo", issueNoTo) :
                new ObjectParameter("IssueNoTo", typeof(int));
    
            var locationFromParameter = locationFrom.HasValue ?
                new ObjectParameter("LocationFrom", locationFrom) :
                new ObjectParameter("LocationFrom", typeof(int));
    
            var locationToParameter = locationTo.HasValue ?
                new ObjectParameter("LocationTo", locationTo) :
                new ObjectParameter("LocationTo", typeof(int));
    
            var premisesFromParameter = premisesFrom.HasValue ?
                new ObjectParameter("PremisesFrom", premisesFrom) :
                new ObjectParameter("PremisesFrom", typeof(int));
    
            var premisesToParameter = premisesTo.HasValue ?
                new ObjectParameter("PremisesTo", premisesTo) :
                new ObjectParameter("PremisesTo", typeof(int));
    
            var itemCategoryFromRangeParameter = itemCategoryFromRange != null ?
                new ObjectParameter("ItemCategoryFromRange", itemCategoryFromRange) :
                new ObjectParameter("ItemCategoryFromRange", typeof(string));
    
            var itemCategoryToRangeParameter = itemCategoryToRange != null ?
                new ObjectParameter("ItemCategoryToRange", itemCategoryToRange) :
                new ObjectParameter("ItemCategoryToRange", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var itemCodeFromParameter = itemCodeFrom.HasValue ?
                new ObjectParameter("ItemCodeFrom", itemCodeFrom) :
                new ObjectParameter("ItemCodeFrom", typeof(int));
    
            var itemCodeToParameter = itemCodeTo.HasValue ?
                new ObjectParameter("ItemCodeTo", itemCodeTo) :
                new ObjectParameter("ItemCodeTo", typeof(int));
    
            var itemNameFromRangeParameter = itemNameFromRange != null ?
                new ObjectParameter("ItemNameFromRange", itemNameFromRange) :
                new ObjectParameter("ItemNameFromRange", typeof(string));
    
            var itemNameToRangeParameter = itemNameToRange != null ?
                new ObjectParameter("ItemNameToRange", itemNameToRange) :
                new ObjectParameter("ItemNameToRange", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptStockTransferByItemBatchNoWise_Result>("SpRptStockTransferByItemBatchNoWise", fromDateParameter, toDateParameter, deliveredDateFromParameter, deliveredDateToParameter, transactionTypeParameter, requestNoFromParameter, requestNoToParameter, issueNoFromParameter, issueNoToParameter, locationFromParameter, locationToParameter, premisesFromParameter, premisesToParameter, itemCategoryFromRangeParameter, itemCategoryToRangeParameter, itemCategoryIDParameter, itemCodeFromParameter, itemCodeToParameter, itemNameFromRangeParameter, itemNameToRangeParameter, itemIDParameter, batchTypeIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptStockTransferIssueGST_Result> SpRptStockTransferIssueGST(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> issueNoFromID, Nullable<int> issueNoToID, Nullable<int> fromLocationID, Nullable<int> toLocationID, Nullable<int> itemCategoryID, Nullable<int> salesCategoryID, Nullable<int> itemID, Nullable<int> batchID, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var issueNoFromIDParameter = issueNoFromID.HasValue ?
                new ObjectParameter("IssueNoFromID", issueNoFromID) :
                new ObjectParameter("IssueNoFromID", typeof(int));
    
            var issueNoToIDParameter = issueNoToID.HasValue ?
                new ObjectParameter("IssueNoToID", issueNoToID) :
                new ObjectParameter("IssueNoToID", typeof(int));
    
            var fromLocationIDParameter = fromLocationID.HasValue ?
                new ObjectParameter("FromLocationID", fromLocationID) :
                new ObjectParameter("FromLocationID", typeof(int));
    
            var toLocationIDParameter = toLocationID.HasValue ?
                new ObjectParameter("ToLocationID", toLocationID) :
                new ObjectParameter("ToLocationID", typeof(int));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var salesCategoryIDParameter = salesCategoryID.HasValue ?
                new ObjectParameter("SalesCategoryID", salesCategoryID) :
                new ObjectParameter("SalesCategoryID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptStockTransferIssueGST_Result>("SpRptStockTransferIssueGST", fromDateParameter, toDateParameter, issueNoFromIDParameter, issueNoToIDParameter, fromLocationIDParameter, toLocationIDParameter, itemCategoryIDParameter, salesCategoryIDParameter, itemIDParameter, batchIDParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptStockTransferReceiptGST_Result> SpRptStockTransferReceiptGST(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> receiptNoFromID, Nullable<int> receiptNoToID, Nullable<int> fromLocationID, Nullable<int> toLocationID, Nullable<int> itemCategoryID, Nullable<int> salesCategoryID, Nullable<int> itemID, Nullable<int> batchID, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var receiptNoFromIDParameter = receiptNoFromID.HasValue ?
                new ObjectParameter("ReceiptNoFromID", receiptNoFromID) :
                new ObjectParameter("ReceiptNoFromID", typeof(int));
    
            var receiptNoToIDParameter = receiptNoToID.HasValue ?
                new ObjectParameter("ReceiptNoToID", receiptNoToID) :
                new ObjectParameter("ReceiptNoToID", typeof(int));
    
            var fromLocationIDParameter = fromLocationID.HasValue ?
                new ObjectParameter("FromLocationID", fromLocationID) :
                new ObjectParameter("FromLocationID", typeof(int));
    
            var toLocationIDParameter = toLocationID.HasValue ?
                new ObjectParameter("ToLocationID", toLocationID) :
                new ObjectParameter("ToLocationID", typeof(int));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var salesCategoryIDParameter = salesCategoryID.HasValue ?
                new ObjectParameter("SalesCategoryID", salesCategoryID) :
                new ObjectParameter("SalesCategoryID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptStockTransferReceiptGST_Result>("SpRptStockTransferReceiptGST", fromDateParameter, toDateParameter, receiptNoFromIDParameter, receiptNoToIDParameter, fromLocationIDParameter, toLocationIDParameter, itemCategoryIDParameter, salesCategoryIDParameter, itemIDParameter, batchIDParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptStockTransferSummary_Result> SpRptStockTransferSummary(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> requestNoFrom, Nullable<int> requestNoTo, Nullable<System.DateTime> issueDateFrom, Nullable<System.DateTime> issueDateTo, Nullable<int> issueNoFrom, Nullable<int> issueNoTo, Nullable<int> locationFrom, Nullable<int> locationTo, Nullable<int> premisesFrom, Nullable<int> premisesTo, Nullable<int> itemCategoryID, Nullable<int> itemCodeFrom, Nullable<int> itemCodeTo, Nullable<int> itemID, string itemFromRange, string itemToRange, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var requestNoFromParameter = requestNoFrom.HasValue ?
                new ObjectParameter("RequestNoFrom", requestNoFrom) :
                new ObjectParameter("RequestNoFrom", typeof(int));
    
            var requestNoToParameter = requestNoTo.HasValue ?
                new ObjectParameter("RequestNoTo", requestNoTo) :
                new ObjectParameter("RequestNoTo", typeof(int));
    
            var issueDateFromParameter = issueDateFrom.HasValue ?
                new ObjectParameter("IssueDateFrom", issueDateFrom) :
                new ObjectParameter("IssueDateFrom", typeof(System.DateTime));
    
            var issueDateToParameter = issueDateTo.HasValue ?
                new ObjectParameter("IssueDateTo", issueDateTo) :
                new ObjectParameter("IssueDateTo", typeof(System.DateTime));
    
            var issueNoFromParameter = issueNoFrom.HasValue ?
                new ObjectParameter("IssueNoFrom", issueNoFrom) :
                new ObjectParameter("IssueNoFrom", typeof(int));
    
            var issueNoToParameter = issueNoTo.HasValue ?
                new ObjectParameter("IssueNoTo", issueNoTo) :
                new ObjectParameter("IssueNoTo", typeof(int));
    
            var locationFromParameter = locationFrom.HasValue ?
                new ObjectParameter("LocationFrom", locationFrom) :
                new ObjectParameter("LocationFrom", typeof(int));
    
            var locationToParameter = locationTo.HasValue ?
                new ObjectParameter("LocationTo", locationTo) :
                new ObjectParameter("LocationTo", typeof(int));
    
            var premisesFromParameter = premisesFrom.HasValue ?
                new ObjectParameter("PremisesFrom", premisesFrom) :
                new ObjectParameter("PremisesFrom", typeof(int));
    
            var premisesToParameter = premisesTo.HasValue ?
                new ObjectParameter("PremisesTo", premisesTo) :
                new ObjectParameter("PremisesTo", typeof(int));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var itemCodeFromParameter = itemCodeFrom.HasValue ?
                new ObjectParameter("ItemCodeFrom", itemCodeFrom) :
                new ObjectParameter("ItemCodeFrom", typeof(int));
    
            var itemCodeToParameter = itemCodeTo.HasValue ?
                new ObjectParameter("ItemCodeTo", itemCodeTo) :
                new ObjectParameter("ItemCodeTo", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemFromRangeParameter = itemFromRange != null ?
                new ObjectParameter("ItemFromRange", itemFromRange) :
                new ObjectParameter("ItemFromRange", typeof(string));
    
            var itemToRangeParameter = itemToRange != null ?
                new ObjectParameter("ItemToRange", itemToRange) :
                new ObjectParameter("ItemToRange", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptStockTransferSummary_Result>("SpRptStockTransferSummary", fromDateParameter, toDateParameter, requestNoFromParameter, requestNoToParameter, issueDateFromParameter, issueDateToParameter, issueNoFromParameter, issueNoToParameter, locationFromParameter, locationToParameter, premisesFromParameter, premisesToParameter, itemCategoryIDParameter, itemCodeFromParameter, itemCodeToParameter, itemIDParameter, itemFromRangeParameter, itemToRangeParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptStockTrsansferByDateSummary_Result> SpRptStockTrsansferByDateSummary(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> requestNoFrom, Nullable<int> requestNoTo, Nullable<System.DateTime> issueDateFrom, Nullable<System.DateTime> issueDateTo, Nullable<int> issueNoFrom, Nullable<int> issueNoTo, Nullable<int> locationFrom, Nullable<int> locationTo, Nullable<int> premisesFrom, Nullable<int> premisesTo, Nullable<int> itemCategoryID, Nullable<int> itemCodeFrom, Nullable<int> itemCodeTo, Nullable<int> itemID, string itemFromRange, string itemToRange, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var requestNoFromParameter = requestNoFrom.HasValue ?
                new ObjectParameter("RequestNoFrom", requestNoFrom) :
                new ObjectParameter("RequestNoFrom", typeof(int));
    
            var requestNoToParameter = requestNoTo.HasValue ?
                new ObjectParameter("RequestNoTo", requestNoTo) :
                new ObjectParameter("RequestNoTo", typeof(int));
    
            var issueDateFromParameter = issueDateFrom.HasValue ?
                new ObjectParameter("IssueDateFrom", issueDateFrom) :
                new ObjectParameter("IssueDateFrom", typeof(System.DateTime));
    
            var issueDateToParameter = issueDateTo.HasValue ?
                new ObjectParameter("IssueDateTo", issueDateTo) :
                new ObjectParameter("IssueDateTo", typeof(System.DateTime));
    
            var issueNoFromParameter = issueNoFrom.HasValue ?
                new ObjectParameter("IssueNoFrom", issueNoFrom) :
                new ObjectParameter("IssueNoFrom", typeof(int));
    
            var issueNoToParameter = issueNoTo.HasValue ?
                new ObjectParameter("IssueNoTo", issueNoTo) :
                new ObjectParameter("IssueNoTo", typeof(int));
    
            var locationFromParameter = locationFrom.HasValue ?
                new ObjectParameter("LocationFrom", locationFrom) :
                new ObjectParameter("LocationFrom", typeof(int));
    
            var locationToParameter = locationTo.HasValue ?
                new ObjectParameter("LocationTo", locationTo) :
                new ObjectParameter("LocationTo", typeof(int));
    
            var premisesFromParameter = premisesFrom.HasValue ?
                new ObjectParameter("PremisesFrom", premisesFrom) :
                new ObjectParameter("PremisesFrom", typeof(int));
    
            var premisesToParameter = premisesTo.HasValue ?
                new ObjectParameter("PremisesTo", premisesTo) :
                new ObjectParameter("PremisesTo", typeof(int));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var itemCodeFromParameter = itemCodeFrom.HasValue ?
                new ObjectParameter("ItemCodeFrom", itemCodeFrom) :
                new ObjectParameter("ItemCodeFrom", typeof(int));
    
            var itemCodeToParameter = itemCodeTo.HasValue ?
                new ObjectParameter("ItemCodeTo", itemCodeTo) :
                new ObjectParameter("ItemCodeTo", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemFromRangeParameter = itemFromRange != null ?
                new ObjectParameter("ItemFromRange", itemFromRange) :
                new ObjectParameter("ItemFromRange", typeof(string));
    
            var itemToRangeParameter = itemToRange != null ?
                new ObjectParameter("ItemToRange", itemToRange) :
                new ObjectParameter("ItemToRange", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptStockTrsansferByDateSummary_Result>("SpRptStockTrsansferByDateSummary", fromDateParameter, toDateParameter, requestNoFromParameter, requestNoToParameter, issueDateFromParameter, issueDateToParameter, issueNoFromParameter, issueNoToParameter, locationFromParameter, locationToParameter, premisesFromParameter, premisesToParameter, itemCategoryIDParameter, itemCodeFromParameter, itemCodeToParameter, itemIDParameter, itemFromRangeParameter, itemToRangeParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptSupplierDebitNote_Result> SpRptSupplierDebitNote(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string type, Nullable<int> fromID, Nullable<int> toID, Nullable<int> supplierID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var fromIDParameter = fromID.HasValue ?
                new ObjectParameter("FromID", fromID) :
                new ObjectParameter("FromID", typeof(int));
    
            var toIDParameter = toID.HasValue ?
                new ObjectParameter("ToID", toID) :
                new ObjectParameter("ToID", typeof(int));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptSupplierDebitNote_Result>("SpRptSupplierDebitNote", fromDateParameter, toDateParameter, typeParameter, fromIDParameter, toIDParameter, supplierIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptSupplierInvoicesBalancePayableNoHistory_Result> SpRptSupplierInvoicesBalancePayableNoHistory(Nullable<System.DateTime> purchaseFromDate, Nullable<System.DateTime> purchaseToDate, Nullable<System.DateTime> invoiceDateFrom, Nullable<System.DateTime> invoiceDateTo, string supplierFromRange, string supplierToRange, Nullable<int> supplierID, string documentNoFromRange, string documentNoToRange, string itemType, string documentNoID, Nullable<int> transFromID, Nullable<int> transToID, Nullable<int> outStANDingDays, string balancePayable, string status, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var purchaseFromDateParameter = purchaseFromDate.HasValue ?
                new ObjectParameter("PurchaseFromDate", purchaseFromDate) :
                new ObjectParameter("PurchaseFromDate", typeof(System.DateTime));
    
            var purchaseToDateParameter = purchaseToDate.HasValue ?
                new ObjectParameter("PurchaseToDate", purchaseToDate) :
                new ObjectParameter("PurchaseToDate", typeof(System.DateTime));
    
            var invoiceDateFromParameter = invoiceDateFrom.HasValue ?
                new ObjectParameter("InvoiceDateFrom", invoiceDateFrom) :
                new ObjectParameter("InvoiceDateFrom", typeof(System.DateTime));
    
            var invoiceDateToParameter = invoiceDateTo.HasValue ?
                new ObjectParameter("InvoiceDateTo", invoiceDateTo) :
                new ObjectParameter("InvoiceDateTo", typeof(System.DateTime));
    
            var supplierFromRangeParameter = supplierFromRange != null ?
                new ObjectParameter("SupplierFromRange", supplierFromRange) :
                new ObjectParameter("SupplierFromRange", typeof(string));
    
            var supplierToRangeParameter = supplierToRange != null ?
                new ObjectParameter("SupplierToRange", supplierToRange) :
                new ObjectParameter("SupplierToRange", typeof(string));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var documentNoFromRangeParameter = documentNoFromRange != null ?
                new ObjectParameter("DocumentNoFromRange", documentNoFromRange) :
                new ObjectParameter("DocumentNoFromRange", typeof(string));
    
            var documentNoToRangeParameter = documentNoToRange != null ?
                new ObjectParameter("DocumentNoToRange", documentNoToRange) :
                new ObjectParameter("DocumentNoToRange", typeof(string));
    
            var itemTypeParameter = itemType != null ?
                new ObjectParameter("ItemType", itemType) :
                new ObjectParameter("ItemType", typeof(string));
    
            var documentNoIDParameter = documentNoID != null ?
                new ObjectParameter("DocumentNoID", documentNoID) :
                new ObjectParameter("DocumentNoID", typeof(string));
    
            var transFromIDParameter = transFromID.HasValue ?
                new ObjectParameter("TransFromID", transFromID) :
                new ObjectParameter("TransFromID", typeof(int));
    
            var transToIDParameter = transToID.HasValue ?
                new ObjectParameter("TransToID", transToID) :
                new ObjectParameter("TransToID", typeof(int));
    
            var outStANDingDaysParameter = outStANDingDays.HasValue ?
                new ObjectParameter("OutStANDingDays", outStANDingDays) :
                new ObjectParameter("OutStANDingDays", typeof(int));
    
            var balancePayableParameter = balancePayable != null ?
                new ObjectParameter("BalancePayable", balancePayable) :
                new ObjectParameter("BalancePayable", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptSupplierInvoicesBalancePayableNoHistory_Result>("SpRptSupplierInvoicesBalancePayableNoHistory", purchaseFromDateParameter, purchaseToDateParameter, invoiceDateFromParameter, invoiceDateToParameter, supplierFromRangeParameter, supplierToRangeParameter, supplierIDParameter, documentNoFromRangeParameter, documentNoToRangeParameter, itemTypeParameter, documentNoIDParameter, transFromIDParameter, transToIDParameter, outStANDingDaysParameter, balancePayableParameter, statusParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptSupplierInvoicesBalancePayableYesHistory_Result> SpRptSupplierInvoicesBalancePayableYesHistory(Nullable<System.DateTime> purchaseFromDate, Nullable<System.DateTime> purchaseToDate, Nullable<System.DateTime> invoiceDateFrom, Nullable<System.DateTime> invoiceDateTo, string supplierFromRange, string supplierToRange, Nullable<int> supplierID, string documentNoFromRange, string documentNoToRange, string itemType, string documentNoID, Nullable<int> transFromID, Nullable<int> transToID, Nullable<int> outStANDingDays, string balancePayable, string status, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var purchaseFromDateParameter = purchaseFromDate.HasValue ?
                new ObjectParameter("PurchaseFromDate", purchaseFromDate) :
                new ObjectParameter("PurchaseFromDate", typeof(System.DateTime));
    
            var purchaseToDateParameter = purchaseToDate.HasValue ?
                new ObjectParameter("PurchaseToDate", purchaseToDate) :
                new ObjectParameter("PurchaseToDate", typeof(System.DateTime));
    
            var invoiceDateFromParameter = invoiceDateFrom.HasValue ?
                new ObjectParameter("InvoiceDateFrom", invoiceDateFrom) :
                new ObjectParameter("InvoiceDateFrom", typeof(System.DateTime));
    
            var invoiceDateToParameter = invoiceDateTo.HasValue ?
                new ObjectParameter("InvoiceDateTo", invoiceDateTo) :
                new ObjectParameter("InvoiceDateTo", typeof(System.DateTime));
    
            var supplierFromRangeParameter = supplierFromRange != null ?
                new ObjectParameter("SupplierFromRange", supplierFromRange) :
                new ObjectParameter("SupplierFromRange", typeof(string));
    
            var supplierToRangeParameter = supplierToRange != null ?
                new ObjectParameter("SupplierToRange", supplierToRange) :
                new ObjectParameter("SupplierToRange", typeof(string));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var documentNoFromRangeParameter = documentNoFromRange != null ?
                new ObjectParameter("DocumentNoFromRange", documentNoFromRange) :
                new ObjectParameter("DocumentNoFromRange", typeof(string));
    
            var documentNoToRangeParameter = documentNoToRange != null ?
                new ObjectParameter("DocumentNoToRange", documentNoToRange) :
                new ObjectParameter("DocumentNoToRange", typeof(string));
    
            var itemTypeParameter = itemType != null ?
                new ObjectParameter("ItemType", itemType) :
                new ObjectParameter("ItemType", typeof(string));
    
            var documentNoIDParameter = documentNoID != null ?
                new ObjectParameter("DocumentNoID", documentNoID) :
                new ObjectParameter("DocumentNoID", typeof(string));
    
            var transFromIDParameter = transFromID.HasValue ?
                new ObjectParameter("TransFromID", transFromID) :
                new ObjectParameter("TransFromID", typeof(int));
    
            var transToIDParameter = transToID.HasValue ?
                new ObjectParameter("TransToID", transToID) :
                new ObjectParameter("TransToID", typeof(int));
    
            var outStANDingDaysParameter = outStANDingDays.HasValue ?
                new ObjectParameter("OutStANDingDays", outStANDingDays) :
                new ObjectParameter("OutStANDingDays", typeof(int));
    
            var balancePayableParameter = balancePayable != null ?
                new ObjectParameter("BalancePayable", balancePayable) :
                new ObjectParameter("BalancePayable", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptSupplierInvoicesBalancePayableYesHistory_Result>("SpRptSupplierInvoicesBalancePayableYesHistory", purchaseFromDateParameter, purchaseToDateParameter, invoiceDateFromParameter, invoiceDateToParameter, supplierFromRangeParameter, supplierToRangeParameter, supplierIDParameter, documentNoFromRangeParameter, documentNoToRangeParameter, itemTypeParameter, documentNoIDParameter, transFromIDParameter, transToIDParameter, outStANDingDaysParameter, balancePayableParameter, statusParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptSupplierInvoicesHistory_Result> SpRptSupplierInvoicesHistory(Nullable<System.DateTime> purchaseFromDate, Nullable<System.DateTime> purchaseToDate, Nullable<System.DateTime> invoiceDateFrom, Nullable<System.DateTime> invoiceDateTo, string supplierFromRange, string supplierToRange, Nullable<int> supplierID, string documentNoFromRange, string documentNoToRange, string itemType, string documentNoID, Nullable<int> transFromID, Nullable<int> transToID, Nullable<int> outStANDingDays, string balancePayable, string status, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var purchaseFromDateParameter = purchaseFromDate.HasValue ?
                new ObjectParameter("PurchaseFromDate", purchaseFromDate) :
                new ObjectParameter("PurchaseFromDate", typeof(System.DateTime));
    
            var purchaseToDateParameter = purchaseToDate.HasValue ?
                new ObjectParameter("PurchaseToDate", purchaseToDate) :
                new ObjectParameter("PurchaseToDate", typeof(System.DateTime));
    
            var invoiceDateFromParameter = invoiceDateFrom.HasValue ?
                new ObjectParameter("InvoiceDateFrom", invoiceDateFrom) :
                new ObjectParameter("InvoiceDateFrom", typeof(System.DateTime));
    
            var invoiceDateToParameter = invoiceDateTo.HasValue ?
                new ObjectParameter("InvoiceDateTo", invoiceDateTo) :
                new ObjectParameter("InvoiceDateTo", typeof(System.DateTime));
    
            var supplierFromRangeParameter = supplierFromRange != null ?
                new ObjectParameter("SupplierFromRange", supplierFromRange) :
                new ObjectParameter("SupplierFromRange", typeof(string));
    
            var supplierToRangeParameter = supplierToRange != null ?
                new ObjectParameter("SupplierToRange", supplierToRange) :
                new ObjectParameter("SupplierToRange", typeof(string));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var documentNoFromRangeParameter = documentNoFromRange != null ?
                new ObjectParameter("DocumentNoFromRange", documentNoFromRange) :
                new ObjectParameter("DocumentNoFromRange", typeof(string));
    
            var documentNoToRangeParameter = documentNoToRange != null ?
                new ObjectParameter("DocumentNoToRange", documentNoToRange) :
                new ObjectParameter("DocumentNoToRange", typeof(string));
    
            var itemTypeParameter = itemType != null ?
                new ObjectParameter("ItemType", itemType) :
                new ObjectParameter("ItemType", typeof(string));
    
            var documentNoIDParameter = documentNoID != null ?
                new ObjectParameter("DocumentNoID", documentNoID) :
                new ObjectParameter("DocumentNoID", typeof(string));
    
            var transFromIDParameter = transFromID.HasValue ?
                new ObjectParameter("TransFromID", transFromID) :
                new ObjectParameter("TransFromID", typeof(int));
    
            var transToIDParameter = transToID.HasValue ?
                new ObjectParameter("TransToID", transToID) :
                new ObjectParameter("TransToID", typeof(int));
    
            var outStANDingDaysParameter = outStANDingDays.HasValue ?
                new ObjectParameter("OutStANDingDays", outStANDingDays) :
                new ObjectParameter("OutStANDingDays", typeof(int));
    
            var balancePayableParameter = balancePayable != null ?
                new ObjectParameter("BalancePayable", balancePayable) :
                new ObjectParameter("BalancePayable", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptSupplierInvoicesHistory_Result>("SpRptSupplierInvoicesHistory", purchaseFromDateParameter, purchaseToDateParameter, invoiceDateFromParameter, invoiceDateToParameter, supplierFromRangeParameter, supplierToRangeParameter, supplierIDParameter, documentNoFromRangeParameter, documentNoToRangeParameter, itemTypeParameter, documentNoIDParameter, transFromIDParameter, transToIDParameter, outStANDingDaysParameter, balancePayableParameter, statusParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptSupplierStockInvoicesHistory_Result> SpRptSupplierStockInvoicesHistory(Nullable<System.DateTime> purchaseFromDate, Nullable<System.DateTime> purchaseToDate, Nullable<System.DateTime> invoiceDateFrom, Nullable<System.DateTime> invoiceDateTo, string supplierFromRange, string supplierToRange, Nullable<int> supplierID, string documentNoFromRange, string documentNoToRange, string documentNoID, Nullable<int> transFromID, Nullable<int> transToID, Nullable<int> outStANDingDays, string balancePayable, string status, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var purchaseFromDateParameter = purchaseFromDate.HasValue ?
                new ObjectParameter("PurchaseFromDate", purchaseFromDate) :
                new ObjectParameter("PurchaseFromDate", typeof(System.DateTime));
    
            var purchaseToDateParameter = purchaseToDate.HasValue ?
                new ObjectParameter("PurchaseToDate", purchaseToDate) :
                new ObjectParameter("PurchaseToDate", typeof(System.DateTime));
    
            var invoiceDateFromParameter = invoiceDateFrom.HasValue ?
                new ObjectParameter("InvoiceDateFrom", invoiceDateFrom) :
                new ObjectParameter("InvoiceDateFrom", typeof(System.DateTime));
    
            var invoiceDateToParameter = invoiceDateTo.HasValue ?
                new ObjectParameter("InvoiceDateTo", invoiceDateTo) :
                new ObjectParameter("InvoiceDateTo", typeof(System.DateTime));
    
            var supplierFromRangeParameter = supplierFromRange != null ?
                new ObjectParameter("SupplierFromRange", supplierFromRange) :
                new ObjectParameter("SupplierFromRange", typeof(string));
    
            var supplierToRangeParameter = supplierToRange != null ?
                new ObjectParameter("SupplierToRange", supplierToRange) :
                new ObjectParameter("SupplierToRange", typeof(string));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var documentNoFromRangeParameter = documentNoFromRange != null ?
                new ObjectParameter("DocumentNoFromRange", documentNoFromRange) :
                new ObjectParameter("DocumentNoFromRange", typeof(string));
    
            var documentNoToRangeParameter = documentNoToRange != null ?
                new ObjectParameter("DocumentNoToRange", documentNoToRange) :
                new ObjectParameter("DocumentNoToRange", typeof(string));
    
            var documentNoIDParameter = documentNoID != null ?
                new ObjectParameter("DocumentNoID", documentNoID) :
                new ObjectParameter("DocumentNoID", typeof(string));
    
            var transFromIDParameter = transFromID.HasValue ?
                new ObjectParameter("TransFromID", transFromID) :
                new ObjectParameter("TransFromID", typeof(int));
    
            var transToIDParameter = transToID.HasValue ?
                new ObjectParameter("TransToID", transToID) :
                new ObjectParameter("TransToID", typeof(int));
    
            var outStANDingDaysParameter = outStANDingDays.HasValue ?
                new ObjectParameter("OutStANDingDays", outStANDingDays) :
                new ObjectParameter("OutStANDingDays", typeof(int));
    
            var balancePayableParameter = balancePayable != null ?
                new ObjectParameter("BalancePayable", balancePayable) :
                new ObjectParameter("BalancePayable", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptSupplierStockInvoicesHistory_Result>("SpRptSupplierStockInvoicesHistory", purchaseFromDateParameter, purchaseToDateParameter, invoiceDateFromParameter, invoiceDateToParameter, supplierFromRangeParameter, supplierToRangeParameter, supplierIDParameter, documentNoFromRangeParameter, documentNoToRangeParameter, documentNoIDParameter, transFromIDParameter, transToIDParameter, outStANDingDaysParameter, balancePayableParameter, statusParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptSupplierSubLedger_Result> SpRptSupplierSubLedger(Nullable<System.DateTime> fROMDate, Nullable<System.DateTime> toDate, Nullable<int> supplierID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicatiONID)
        {
            var fROMDateParameter = fROMDate.HasValue ?
                new ObjectParameter("FROMDate", fROMDate) :
                new ObjectParameter("FROMDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicatiONIDParameter = applicatiONID.HasValue ?
                new ObjectParameter("ApplicatiONID", applicatiONID) :
                new ObjectParameter("ApplicatiONID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptSupplierSubLedger_Result>("SpRptSupplierSubLedger", fROMDateParameter, toDateParameter, supplierIDParameter, finYearParameter, locationIDParameter, applicatiONIDParameter);
        }
    
        public virtual ObjectResult<SpRptSupplierSubLedgerSummary_Result> SpRptSupplierSubLedgerSummary(Nullable<System.DateTime> fROMDate, Nullable<System.DateTime> toDate, Nullable<int> supplierID, Nullable<int> finYear, Nullable<int> locatiONID, Nullable<int> applicatiONID)
        {
            var fROMDateParameter = fROMDate.HasValue ?
                new ObjectParameter("FROMDate", fROMDate) :
                new ObjectParameter("FROMDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locatiONIDParameter = locatiONID.HasValue ?
                new ObjectParameter("LocatiONID", locatiONID) :
                new ObjectParameter("LocatiONID", typeof(int));
    
            var applicatiONIDParameter = applicatiONID.HasValue ?
                new ObjectParameter("ApplicatiONID", applicatiONID) :
                new ObjectParameter("ApplicatiONID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptSupplierSubLedgerSummary_Result>("SpRptSupplierSubLedgerSummary", fROMDateParameter, toDateParameter, supplierIDParameter, finYearParameter, locatiONIDParameter, applicatiONIDParameter);
        }
    
        public virtual ObjectResult<SpRptTargetVSActual_Result> SpRptTargetVSActual(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> itemCodeID, Nullable<int> itemID, Nullable<int> batchTypeID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var itemCodeIDParameter = itemCodeID.HasValue ?
                new ObjectParameter("ItemCodeID", itemCodeID) :
                new ObjectParameter("ItemCodeID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptTargetVSActual_Result>("SpRptTargetVSActual", fromDateParameter, toDateParameter, itemCodeIDParameter, itemIDParameter, batchTypeIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptTDS_Result> SpRptTDS(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> location, string supplierFromRange, string supplierToRange, Nullable<int> supplierID, string transactionNo, Nullable<int> tDSID, Nullable<int> panNoID, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var locationParameter = location.HasValue ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(int));
    
            var supplierFromRangeParameter = supplierFromRange != null ?
                new ObjectParameter("SupplierFromRange", supplierFromRange) :
                new ObjectParameter("SupplierFromRange", typeof(string));
    
            var supplierToRangeParameter = supplierToRange != null ?
                new ObjectParameter("SupplierToRange", supplierToRange) :
                new ObjectParameter("SupplierToRange", typeof(string));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var transactionNoParameter = transactionNo != null ?
                new ObjectParameter("TransactionNo", transactionNo) :
                new ObjectParameter("TransactionNo", typeof(string));
    
            var tDSIDParameter = tDSID.HasValue ?
                new ObjectParameter("TDSID", tDSID) :
                new ObjectParameter("TDSID", typeof(int));
    
            var panNoIDParameter = panNoID.HasValue ?
                new ObjectParameter("PanNoID", panNoID) :
                new ObjectParameter("PanNoID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptTDS_Result>("SpRptTDS", fromDateParameter, toDateParameter, locationParameter, supplierFromRangeParameter, supplierToRangeParameter, supplierIDParameter, transactionNoParameter, tDSIDParameter, panNoIDParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptThreeColumnTrialBalance_Result> SpRptThreeColumnTrialBalance(string xMLParam)
        {
            var xMLParamParameter = xMLParam != null ?
                new ObjectParameter("XMLParam", xMLParam) :
                new ObjectParameter("XMLParam", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptThreeColumnTrialBalance_Result>("SpRptThreeColumnTrialBalance", xMLParamParameter);
        }
    
        public virtual ObjectResult<SpRptTransferQuantity_Result> SpRptTransferQuantity(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> wareHouseFromID, Nullable<int> wareHouseToID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var wareHouseFromIDParameter = wareHouseFromID.HasValue ?
                new ObjectParameter("WareHouseFromID", wareHouseFromID) :
                new ObjectParameter("WareHouseFromID", typeof(int));
    
            var wareHouseToIDParameter = wareHouseToID.HasValue ?
                new ObjectParameter("WareHouseToID", wareHouseToID) :
                new ObjectParameter("WareHouseToID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptTransferQuantity_Result>("SpRptTransferQuantity", fromDateParameter, toDateParameter, wareHouseFromIDParameter, wareHouseToIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptTransportPermit_Result> SpRptTransportPermit(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptTransportPermit_Result>("SpRptTransportPermit", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptTrialBalance_Result> SpRptTrialBalance(Nullable<System.DateTime> asOn, Nullable<int> accountID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var asOnParameter = asOn.HasValue ?
                new ObjectParameter("AsOn", asOn) :
                new ObjectParameter("AsOn", typeof(System.DateTime));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptTrialBalance_Result>("SpRptTrialBalance", asOnParameter, accountIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptTrialBalanceThreeColumn_Result> SpRptTrialBalanceThreeColumn(Nullable<System.DateTime> asOn, Nullable<int> accountCodeID, Nullable<int> accountID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var asOnParameter = asOn.HasValue ?
                new ObjectParameter("AsOn", asOn) :
                new ObjectParameter("AsOn", typeof(System.DateTime));
    
            var accountCodeIDParameter = accountCodeID.HasValue ?
                new ObjectParameter("AccountCodeID", accountCodeID) :
                new ObjectParameter("AccountCodeID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptTrialBalanceThreeColumn_Result>("SpRptTrialBalanceThreeColumn", asOnParameter, accountCodeIDParameter, accountIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptTrialBalanceThreeColumnDetail_Result> SpRptTrialBalanceThreeColumnDetail(Nullable<System.DateTime> asOn, Nullable<int> accountCodeID, Nullable<int> accountID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var asOnParameter = asOn.HasValue ?
                new ObjectParameter("AsOn", asOn) :
                new ObjectParameter("AsOn", typeof(System.DateTime));
    
            var accountCodeIDParameter = accountCodeID.HasValue ?
                new ObjectParameter("AccountCodeID", accountCodeID) :
                new ObjectParameter("AccountCodeID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptTrialBalanceThreeColumnDetail_Result>("SpRptTrialBalanceThreeColumnDetail", asOnParameter, accountCodeIDParameter, accountIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptTurnOverDiscount_Result> SpRptTurnOverDiscount(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> customerID, Nullable<int> finYear, Nullable<int> locatioID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locatioIDParameter = locatioID.HasValue ?
                new ObjectParameter("LocatioID", locatioID) :
                new ObjectParameter("LocatioID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptTurnOverDiscount_Result>("SpRptTurnOverDiscount", fromDateParameter, toDateParameter, customerIDParameter, finYearParameter, locatioIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptTwoColumnTrialBalanceV3_Result> SpRptTwoColumnTrialBalanceV3(string xMLParam)
        {
            var xMLParamParameter = xMLParam != null ?
                new ObjectParameter("XMLParam", xMLParam) :
                new ObjectParameter("XMLParam", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptTwoColumnTrialBalanceV3_Result>("SpRptTwoColumnTrialBalanceV3", xMLParamParameter);
        }
    
        public virtual ObjectResult<SpRptYieldRegister_Result> SpRptYieldRegister(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptYieldRegister_Result>("SpRptYieldRegister", fromDateParameter, toDateParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpSalesOrderPickList_Result> SpSalesOrderPickList(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpSalesOrderPickList_Result>("SpSalesOrderPickList", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpSalesReturnPrint_Result> SpSalesReturnPrint(Nullable<int> salesID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var salesIDParameter = salesID.HasValue ?
                new ObjectParameter("SalesID", salesID) :
                new ObjectParameter("SalesID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpSalesReturnPrint_Result>("SpSalesReturnPrint", salesIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpSLADetails_Result> SpSLADetails(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string transactionNoFrom, string transactionNoTo, string transactionType, string keyValue, string itemAccountCategoryFrom, string itemAccountCategoryTo, string itemAccountCategory, string status, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var transactionNoFromParameter = transactionNoFrom != null ?
                new ObjectParameter("TransactionNoFrom", transactionNoFrom) :
                new ObjectParameter("TransactionNoFrom", typeof(string));
    
            var transactionNoToParameter = transactionNoTo != null ?
                new ObjectParameter("TransactionNoTo", transactionNoTo) :
                new ObjectParameter("TransactionNoTo", typeof(string));
    
            var transactionTypeParameter = transactionType != null ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(string));
    
            var keyValueParameter = keyValue != null ?
                new ObjectParameter("KeyValue", keyValue) :
                new ObjectParameter("KeyValue", typeof(string));
    
            var itemAccountCategoryFromParameter = itemAccountCategoryFrom != null ?
                new ObjectParameter("itemAccountCategoryFrom", itemAccountCategoryFrom) :
                new ObjectParameter("itemAccountCategoryFrom", typeof(string));
    
            var itemAccountCategoryToParameter = itemAccountCategoryTo != null ?
                new ObjectParameter("itemAccountCategoryTo", itemAccountCategoryTo) :
                new ObjectParameter("itemAccountCategoryTo", typeof(string));
    
            var itemAccountCategoryParameter = itemAccountCategory != null ?
                new ObjectParameter("ItemAccountCategory", itemAccountCategory) :
                new ObjectParameter("ItemAccountCategory", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpSLADetails_Result>("SpSLADetails", fromDateParameter, toDateParameter, transactionNoFromParameter, transactionNoToParameter, transactionTypeParameter, keyValueParameter, itemAccountCategoryFromParameter, itemAccountCategoryToParameter, itemAccountCategoryParameter, statusParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpStockAgeing_Result> SpStockAgeing(Nullable<System.DateTime> date, Nullable<int> locationID, Nullable<int> premisesId, Nullable<int> itemCategoryID, Nullable<int> salesCategoryID, Nullable<int> itemCodeFromID, Nullable<int> itemCodeToID, string itemNameFromRange, string itemNameToRange, Nullable<int> itemID, Nullable<int> batchTypeID, Nullable<int> batchID, Nullable<int> agingBucketID, string valueType, string type, Nullable<int> fnYear, Nullable<int> applicationID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var premisesIdParameter = premisesId.HasValue ?
                new ObjectParameter("premisesId", premisesId) :
                new ObjectParameter("premisesId", typeof(int));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var salesCategoryIDParameter = salesCategoryID.HasValue ?
                new ObjectParameter("SalesCategoryID", salesCategoryID) :
                new ObjectParameter("SalesCategoryID", typeof(int));
    
            var itemCodeFromIDParameter = itemCodeFromID.HasValue ?
                new ObjectParameter("ItemCodeFromID", itemCodeFromID) :
                new ObjectParameter("ItemCodeFromID", typeof(int));
    
            var itemCodeToIDParameter = itemCodeToID.HasValue ?
                new ObjectParameter("ItemCodeToID", itemCodeToID) :
                new ObjectParameter("ItemCodeToID", typeof(int));
    
            var itemNameFromRangeParameter = itemNameFromRange != null ?
                new ObjectParameter("ItemNameFromRange", itemNameFromRange) :
                new ObjectParameter("ItemNameFromRange", typeof(string));
    
            var itemNameToRangeParameter = itemNameToRange != null ?
                new ObjectParameter("ItemNameToRange", itemNameToRange) :
                new ObjectParameter("ItemNameToRange", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var agingBucketIDParameter = agingBucketID.HasValue ?
                new ObjectParameter("AgingBucketID", agingBucketID) :
                new ObjectParameter("AgingBucketID", typeof(int));
    
            var valueTypeParameter = valueType != null ?
                new ObjectParameter("ValueType", valueType) :
                new ObjectParameter("ValueType", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var fnYearParameter = fnYear.HasValue ?
                new ObjectParameter("FnYear", fnYear) :
                new ObjectParameter("FnYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpStockAgeing_Result>("SpStockAgeing", dateParameter, locationIDParameter, premisesIdParameter, itemCategoryIDParameter, salesCategoryIDParameter, itemCodeFromIDParameter, itemCodeToIDParameter, itemNameFromRangeParameter, itemNameToRangeParameter, itemIDParameter, batchTypeIDParameter, batchIDParameter, agingBucketIDParameter, valueTypeParameter, typeParameter, fnYearParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpStockIssuePickList_Result> SpStockIssuePickList(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpStockIssuePickList_Result>("SpStockIssuePickList", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptDailyReport_Result> SpRptDailyReport(string xMLParam)
        {
            var xMLParamParameter = xMLParam != null ?
                new ObjectParameter("XMLParam", xMLParam) :
                new ObjectParameter("XMLParam", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptDailyReport_Result>("SpRptDailyReport", xMLParamParameter);
        }
    
        public virtual ObjectResult<SpRptIncomeandExpense_Result> SpRptIncomeandExpense(string xMLParam)
        {
            var xMLParamParameter = xMLParam != null ?
                new ObjectParameter("XMLParam", xMLParam) :
                new ObjectParameter("XMLParam", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptIncomeandExpense_Result>("SpRptIncomeandExpense", xMLParamParameter);
        }
    
        public virtual ObjectResult<SpRptPrivillegeCardSaleDetails_Result> SpRptPrivillegeCardSaleDetails(string xMLParam)
        {
            var xMLParamParameter = xMLParam != null ?
                new ObjectParameter("XMLParam", xMLParam) :
                new ObjectParameter("XMLParam", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptPrivillegeCardSaleDetails_Result>("SpRptPrivillegeCardSaleDetails", xMLParamParameter);
        }
    
        public virtual ObjectResult<SpRptPurchaseInvoiceSupplierWiseSummaryV3_Result> SpRptPurchaseInvoiceSupplierWiseSummaryV3(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string type, string supplierFromRange, string supplierToRange, Nullable<int> supplierID, Nullable<int> invoiceNOFrom, Nullable<int> invoiceNOTo, string supplierInvoiceNo, string invoiceStatus, Nullable<bool> isOverruled, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var supplierFromRangeParameter = supplierFromRange != null ?
                new ObjectParameter("SupplierFromRange", supplierFromRange) :
                new ObjectParameter("SupplierFromRange", typeof(string));
    
            var supplierToRangeParameter = supplierToRange != null ?
                new ObjectParameter("SupplierToRange", supplierToRange) :
                new ObjectParameter("SupplierToRange", typeof(string));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var invoiceNOFromParameter = invoiceNOFrom.HasValue ?
                new ObjectParameter("InvoiceNOFrom", invoiceNOFrom) :
                new ObjectParameter("InvoiceNOFrom", typeof(int));
    
            var invoiceNOToParameter = invoiceNOTo.HasValue ?
                new ObjectParameter("InvoiceNOTo", invoiceNOTo) :
                new ObjectParameter("InvoiceNOTo", typeof(int));
    
            var supplierInvoiceNoParameter = supplierInvoiceNo != null ?
                new ObjectParameter("SupplierInvoiceNo", supplierInvoiceNo) :
                new ObjectParameter("SupplierInvoiceNo", typeof(string));
    
            var invoiceStatusParameter = invoiceStatus != null ?
                new ObjectParameter("InvoiceStatus", invoiceStatus) :
                new ObjectParameter("InvoiceStatus", typeof(string));
    
            var isOverruledParameter = isOverruled.HasValue ?
                new ObjectParameter("IsOverruled", isOverruled) :
                new ObjectParameter("IsOverruled", typeof(bool));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptPurchaseInvoiceSupplierWiseSummaryV3_Result>("SpRptPurchaseInvoiceSupplierWiseSummaryV3", fromDateParameter, toDateParameter, typeParameter, supplierFromRangeParameter, supplierToRangeParameter, supplierIDParameter, invoiceNOFromParameter, invoiceNOToParameter, supplierInvoiceNoParameter, invoiceStatusParameter, isOverruledParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptPurchaseInvoiceV3_Result> SpRptPurchaseInvoiceV3(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string type, string itemCategoryFromRange, string itemCategoryToRange, Nullable<int> itemCategoryID, string itemFromRange, string itemToRange, Nullable<int> itemID, string supplierFromRange, string supplierToRange, Nullable<int> supplierID, Nullable<int> pONOFrom, Nullable<int> pONOTo, Nullable<int> qCNOFrom, Nullable<int> qCNOTo, Nullable<int> gRNNOFrom, Nullable<int> gRNNOTo, Nullable<int> invoiceNOFrom, Nullable<int> invoiceNOTo, string supplierInvoiceNo, string invoiceStatus, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var itemCategoryFromRangeParameter = itemCategoryFromRange != null ?
                new ObjectParameter("ItemCategoryFromRange", itemCategoryFromRange) :
                new ObjectParameter("ItemCategoryFromRange", typeof(string));
    
            var itemCategoryToRangeParameter = itemCategoryToRange != null ?
                new ObjectParameter("ItemCategoryToRange", itemCategoryToRange) :
                new ObjectParameter("ItemCategoryToRange", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var itemFromRangeParameter = itemFromRange != null ?
                new ObjectParameter("ItemFromRange", itemFromRange) :
                new ObjectParameter("ItemFromRange", typeof(string));
    
            var itemToRangeParameter = itemToRange != null ?
                new ObjectParameter("ItemToRange", itemToRange) :
                new ObjectParameter("ItemToRange", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var supplierFromRangeParameter = supplierFromRange != null ?
                new ObjectParameter("SupplierFromRange", supplierFromRange) :
                new ObjectParameter("SupplierFromRange", typeof(string));
    
            var supplierToRangeParameter = supplierToRange != null ?
                new ObjectParameter("SupplierToRange", supplierToRange) :
                new ObjectParameter("SupplierToRange", typeof(string));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var pONOFromParameter = pONOFrom.HasValue ?
                new ObjectParameter("PONOFrom", pONOFrom) :
                new ObjectParameter("PONOFrom", typeof(int));
    
            var pONOToParameter = pONOTo.HasValue ?
                new ObjectParameter("PONOTo", pONOTo) :
                new ObjectParameter("PONOTo", typeof(int));
    
            var qCNOFromParameter = qCNOFrom.HasValue ?
                new ObjectParameter("QCNOFrom", qCNOFrom) :
                new ObjectParameter("QCNOFrom", typeof(int));
    
            var qCNOToParameter = qCNOTo.HasValue ?
                new ObjectParameter("QCNOTo", qCNOTo) :
                new ObjectParameter("QCNOTo", typeof(int));
    
            var gRNNOFromParameter = gRNNOFrom.HasValue ?
                new ObjectParameter("GRNNOFrom", gRNNOFrom) :
                new ObjectParameter("GRNNOFrom", typeof(int));
    
            var gRNNOToParameter = gRNNOTo.HasValue ?
                new ObjectParameter("GRNNOTo", gRNNOTo) :
                new ObjectParameter("GRNNOTo", typeof(int));
    
            var invoiceNOFromParameter = invoiceNOFrom.HasValue ?
                new ObjectParameter("InvoiceNOFrom", invoiceNOFrom) :
                new ObjectParameter("InvoiceNOFrom", typeof(int));
    
            var invoiceNOToParameter = invoiceNOTo.HasValue ?
                new ObjectParameter("InvoiceNOTo", invoiceNOTo) :
                new ObjectParameter("InvoiceNOTo", typeof(int));
    
            var supplierInvoiceNoParameter = supplierInvoiceNo != null ?
                new ObjectParameter("SupplierInvoiceNo", supplierInvoiceNo) :
                new ObjectParameter("SupplierInvoiceNo", typeof(string));
    
            var invoiceStatusParameter = invoiceStatus != null ?
                new ObjectParameter("InvoiceStatus", invoiceStatus) :
                new ObjectParameter("InvoiceStatus", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptPurchaseInvoiceV3_Result>("SpRptPurchaseInvoiceV3", fromDateParameter, toDateParameter, typeParameter, itemCategoryFromRangeParameter, itemCategoryToRangeParameter, itemCategoryIDParameter, itemFromRangeParameter, itemToRangeParameter, itemIDParameter, supplierFromRangeParameter, supplierToRangeParameter, supplierIDParameter, pONOFromParameter, pONOToParameter, qCNOFromParameter, qCNOToParameter, gRNNOFromParameter, gRNNOToParameter, invoiceNOFromParameter, invoiceNOToParameter, supplierInvoiceNoParameter, invoiceStatusParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptPaymentForDoctors_Result> SpRptPaymentForDoctors(string xMLParam)
        {
            var xMLParamParameter = xMLParam != null ?
                new ObjectParameter("XMLParam", xMLParam) :
                new ObjectParameter("XMLParam", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptPaymentForDoctors_Result>("SpRptPaymentForDoctors", xMLParamParameter);
        }
    
        public virtual ObjectResult<SpRptPatientList_Result> SpRptPatientList(string xMLParam)
        {
            var xMLParamParameter = xMLParam != null ?
                new ObjectParameter("XMLParam", xMLParam) :
                new ObjectParameter("XMLParam", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptPatientList_Result>("SpRptPatientList", xMLParamParameter);
        }
    
        public virtual ObjectResult<SpRptStockAdjustmentPending_Result> SpRptStockAdjustmentPending(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> stockAdjustmentLocationID, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var stockAdjustmentLocationIDParameter = stockAdjustmentLocationID.HasValue ?
                new ObjectParameter("StockAdjustmentLocationID", stockAdjustmentLocationID) :
                new ObjectParameter("StockAdjustmentLocationID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptStockAdjustmentPending_Result>("SpRptStockAdjustmentPending", fromDateParameter, toDateParameter, stockAdjustmentLocationIDParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptStockAdjustment_Result> SpRptStockAdjustment(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string stockAdjustmentType, Nullable<int> stockAdjustmentLocationID, Nullable<int> itemCategoryID, Nullable<int> salesCategoryID, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var stockAdjustmentTypeParameter = stockAdjustmentType != null ?
                new ObjectParameter("StockAdjustmentType", stockAdjustmentType) :
                new ObjectParameter("StockAdjustmentType", typeof(string));
    
            var stockAdjustmentLocationIDParameter = stockAdjustmentLocationID.HasValue ?
                new ObjectParameter("StockAdjustmentLocationID", stockAdjustmentLocationID) :
                new ObjectParameter("StockAdjustmentLocationID", typeof(int));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var salesCategoryIDParameter = salesCategoryID.HasValue ?
                new ObjectParameter("SalesCategoryID", salesCategoryID) :
                new ObjectParameter("SalesCategoryID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptStockAdjustment_Result>("SpRptStockAdjustment", fromDateParameter, toDateParameter, stockAdjustmentTypeParameter, stockAdjustmentLocationIDParameter, itemCategoryIDParameter, salesCategoryIDParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptStockLedgerNew_Result> SpRptStockLedgerNew(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> locationID, Nullable<int> itemCategoryID, Nullable<int> salesCategoryID, Nullable<int> itemID, Nullable<int> batchID, Nullable<int> premisesID, string valueType, Nullable<int> finYear, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var salesCategoryIDParameter = salesCategoryID.HasValue ?
                new ObjectParameter("SalesCategoryID", salesCategoryID) :
                new ObjectParameter("SalesCategoryID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var premisesIDParameter = premisesID.HasValue ?
                new ObjectParameter("PremisesID", premisesID) :
                new ObjectParameter("PremisesID", typeof(int));
    
            var valueTypeParameter = valueType != null ?
                new ObjectParameter("ValueType", valueType) :
                new ObjectParameter("ValueType", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptStockLedgerNew_Result>("SpRptStockLedgerNew", fromDateParameter, toDateParameter, locationIDParameter, itemCategoryIDParameter, salesCategoryIDParameter, itemIDParameter, batchIDParameter, premisesIDParameter, valueTypeParameter, finYearParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptStockValuation_Result> SpRptStockValuation(Nullable<System.DateTime> stockDate, Nullable<int> location, Nullable<int> premisesID, Nullable<int> itemCategoryID, Nullable<int> salesCategoryID, Nullable<int> itemCodeID, Nullable<int> itemID, Nullable<int> batchID, Nullable<int> batchTypeID, string valueType, Nullable<bool> isQtyZero, string itemtype, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var stockDateParameter = stockDate.HasValue ?
                new ObjectParameter("StockDate", stockDate) :
                new ObjectParameter("StockDate", typeof(System.DateTime));
    
            var locationParameter = location.HasValue ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(int));
    
            var premisesIDParameter = premisesID.HasValue ?
                new ObjectParameter("PremisesID", premisesID) :
                new ObjectParameter("PremisesID", typeof(int));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var salesCategoryIDParameter = salesCategoryID.HasValue ?
                new ObjectParameter("SalesCategoryID", salesCategoryID) :
                new ObjectParameter("SalesCategoryID", typeof(int));
    
            var itemCodeIDParameter = itemCodeID.HasValue ?
                new ObjectParameter("ItemCodeID", itemCodeID) :
                new ObjectParameter("ItemCodeID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var valueTypeParameter = valueType != null ?
                new ObjectParameter("ValueType", valueType) :
                new ObjectParameter("ValueType", typeof(string));
    
            var isQtyZeroParameter = isQtyZero.HasValue ?
                new ObjectParameter("IsQtyZero", isQtyZero) :
                new ObjectParameter("IsQtyZero", typeof(bool));
    
            var itemtypeParameter = itemtype != null ?
                new ObjectParameter("Itemtype", itemtype) :
                new ObjectParameter("Itemtype", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptStockValuation_Result>("SpRptStockValuation", stockDateParameter, locationParameter, premisesIDParameter, itemCategoryIDParameter, salesCategoryIDParameter, itemCodeIDParameter, itemIDParameter, batchIDParameter, batchTypeIDParameter, valueTypeParameter, isQtyZeroParameter, itemtypeParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptCounterSales_Result> SpRptCounterSales(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> doctorID, Nullable<int> patientID, Nullable<int> paymentModeID, Nullable<int> itemID, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var paymentModeIDParameter = paymentModeID.HasValue ?
                new ObjectParameter("PaymentModeID", paymentModeID) :
                new ObjectParameter("PaymentModeID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptCounterSales_Result>("SpRptCounterSales", fromDateParameter, toDateParameter, doctorIDParameter, patientIDParameter, paymentModeIDParameter, itemIDParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptCostingAndProfitability_Result> SpRptCostingAndProfitability(string xMLParams)
        {
            var xMLParamsParameter = xMLParams != null ?
                new ObjectParameter("XMLParams", xMLParams) :
                new ObjectParameter("XMLParams", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptCostingAndProfitability_Result>("SpRptCostingAndProfitability", xMLParamsParameter);
        }
    
        public virtual ObjectResult<SpStockLedgerItemWiseSummary_Result> SpStockLedgerItemWiseSummary(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> itemID, Nullable<int> batchID, Nullable<int> warehouseID, Nullable<int> locationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpStockLedgerItemWiseSummary_Result>("SpStockLedgerItemWiseSummary", fromDateParameter, toDateParameter, itemIDParameter, batchIDParameter, warehouseIDParameter, locationIDParameter);
        }
    
        public virtual ObjectResult<SpStockLedgerItemWiseDetails_Result> SpStockLedgerItemWiseDetails(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> itemID, Nullable<int> batchID, Nullable<int> warehouseID, Nullable<int> locationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpStockLedgerItemWiseDetails_Result>("SpStockLedgerItemWiseDetails", fromDateParameter, toDateParameter, itemIDParameter, batchIDParameter, warehouseIDParameter, locationIDParameter);
        }
    
        public virtual ObjectResult<SpRptOPConsultationReport_Result> SpRptOPConsultationReport(string xMLParams)
        {
            var xMLParamsParameter = xMLParams != null ?
                new ObjectParameter("XMLParams", xMLParams) :
                new ObjectParameter("XMLParams", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptOPConsultationReport_Result>("SpRptOPConsultationReport", xMLParamsParameter);
        }
    
        public virtual ObjectResult<SpRptRegisterForNoOfPatientsForTheMonth_Result> SpRptRegisterForNoOfPatientsForTheMonth(Nullable<int> monthID, Nullable<int> year)
        {
            var monthIDParameter = monthID.HasValue ?
                new ObjectParameter("MonthID", monthID) :
                new ObjectParameter("MonthID", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptRegisterForNoOfPatientsForTheMonth_Result>("SpRptRegisterForNoOfPatientsForTheMonth", monthIDParameter, yearParameter);
        }
    
        public virtual ObjectResult<SpRptRoomAdmissionMonthWise_Result> SpRptRoomAdmissionMonthWise(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> roomID, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptRoomAdmissionMonthWise_Result>("SpRptRoomAdmissionMonthWise", fromDateParameter, toDateParameter, roomIDParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptTreatmentListMonthwise_Result> SpRptTreatmentListMonthwise(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string type, Nullable<int> treatmentID, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var treatmentIDParameter = treatmentID.HasValue ?
                new ObjectParameter("TreatmentID", treatmentID) :
                new ObjectParameter("TreatmentID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptTreatmentListMonthwise_Result>("SpRptTreatmentListMonthwise", fromDateParameter, toDateParameter, typeParameter, treatmentIDParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptTreatmentScheduleByTherapist_Result> SpRptTreatmentScheduleByTherapist(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> therapistID, Nullable<int> patientID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var therapistIDParameter = therapistID.HasValue ?
                new ObjectParameter("TherapistID", therapistID) :
                new ObjectParameter("TherapistID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptTreatmentScheduleByTherapist_Result>("SpRptTreatmentScheduleByTherapist", fromDateParameter, toDateParameter, therapistIDParameter, patientIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<spGetDoctorWiseMonthlySummary_Result> spGetDoctorWiseMonthlySummary(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> doctorID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetDoctorWiseMonthlySummary_Result>("spGetDoctorWiseMonthlySummary", fromDateParameter, toDateParameter, doctorIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptBilledANDBillableList_Result> SpRptBilledANDBillableList(string type, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> locationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptBilledANDBillableList_Result>("SpRptBilledANDBillableList", typeParameter, fromDateParameter, toDateParameter, locationIDParameter);
        }
    
        public virtual ObjectResult<SpRptCentralIPRegister_Result> SpRptCentralIPRegister(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptCentralIPRegister_Result>("SpRptCentralIPRegister", fromDateParameter, toDateParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptCentralOPRegister_Result> SpRptCentralOPRegister(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptCentralOPRegister_Result>("SpRptCentralOPRegister", fromDateParameter, toDateParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptCentralOPRegisterDetail_Result> SpRptCentralOPRegisterDetail(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> doctorID, Nullable<int> departmentID, string place, Nullable<int> districtID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var placeParameter = place != null ?
                new ObjectParameter("Place", place) :
                new ObjectParameter("Place", typeof(string));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptCentralOPRegisterDetail_Result>("SpRptCentralOPRegisterDetail", fromDateParameter, toDateParameter, doctorIDParameter, departmentIDParameter, placeParameter, districtIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpRptDepartmentIpRegister(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> departmentID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpRptDepartmentIpRegister", fromDateParameter, toDateParameter, departmentIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpRptDepartmentOpRegister(string xMLParams)
        {
            var xMLParamsParameter = xMLParams != null ?
                new ObjectParameter("XMLParams", xMLParams) :
                new ObjectParameter("XMLParams", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpRptDepartmentOpRegister", xMLParamsParameter);
        }
    
        public virtual ObjectResult<SpRptLabBillListMonthwise_Result> SpRptLabBillListMonthwise(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string type, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptLabBillListMonthwise_Result>("SpRptLabBillListMonthwise", fromDateParameter, toDateParameter, typeParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptLabRegister_Result> SpRptLabRegister(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> patientID, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> userID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptLabRegister_Result>("SpRptLabRegister", fromDateParameter, toDateParameter, patientIDParameter, locationIDParameter, applicationIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<SpRptCollectionSummary_Result> SpRptCollectionSummary(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string accountName)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptCollectionSummary_Result>("SpRptCollectionSummary", fromDateParameter, toDateParameter, accountNameParameter);
        }
    
        public virtual int SpRptMedicineIssue(string type, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> patientID, Nullable<int> therapistID, Nullable<int> treatmentRoomID, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var therapistIDParameter = therapistID.HasValue ?
                new ObjectParameter("TherapistID", therapistID) :
                new ObjectParameter("TherapistID", typeof(int));
    
            var treatmentRoomIDParameter = treatmentRoomID.HasValue ?
                new ObjectParameter("TreatmentRoomID", treatmentRoomID) :
                new ObjectParameter("TreatmentRoomID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpRptMedicineIssue", typeParameter, fromDateParameter, toDateParameter, patientIDParameter, therapistIDParameter, treatmentRoomIDParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetOverruledItems_Result> SpGetOverruledItems(Nullable<System.DateTime> transDateFrom, Nullable<System.DateTime> transDateTo, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> appliationID)
        {
            var transDateFromParameter = transDateFrom.HasValue ?
                new ObjectParameter("TransDateFrom", transDateFrom) :
                new ObjectParameter("TransDateFrom", typeof(System.DateTime));
    
            var transDateToParameter = transDateTo.HasValue ?
                new ObjectParameter("TransDateTo", transDateTo) :
                new ObjectParameter("TransDateTo", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var appliationIDParameter = appliationID.HasValue ?
                new ObjectParameter("AppliationID", appliationID) :
                new ObjectParameter("AppliationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetOverruledItems_Result>("SpGetOverruledItems", transDateFromParameter, transDateToParameter, finYearParameter, locationIDParameter, appliationIDParameter);
        }
    
        public virtual ObjectResult<spGetItemListByNonOffer_Result> spGetItemListByNonOffer(Nullable<System.DateTime> transDateFrom, Nullable<System.DateTime> transDateTo, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var transDateFromParameter = transDateFrom.HasValue ?
                new ObjectParameter("TransDateFrom", transDateFrom) :
                new ObjectParameter("TransDateFrom", typeof(System.DateTime));
    
            var transDateToParameter = transDateTo.HasValue ?
                new ObjectParameter("TransDateTo", transDateTo) :
                new ObjectParameter("TransDateTo", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetItemListByNonOffer_Result>("spGetItemListByNonOffer", transDateFromParameter, transDateToParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<spGetItemListByOffer_Result> spGetItemListByOffer(Nullable<System.DateTime> transDateFrom, Nullable<System.DateTime> transDateTo, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var transDateFromParameter = transDateFrom.HasValue ?
                new ObjectParameter("TransDateFrom", transDateFrom) :
                new ObjectParameter("TransDateFrom", typeof(System.DateTime));
    
            var transDateToParameter = transDateTo.HasValue ?
                new ObjectParameter("TransDateTo", transDateTo) :
                new ObjectParameter("TransDateTo", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetItemListByOffer_Result>("spGetItemListByOffer", transDateFromParameter, transDateToParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetScheduleHMedicineSale_Result> SpGetScheduleHMedicineSale(string xMLParams)
        {
            var xMLParamsParameter = xMLParams != null ?
                new ObjectParameter("XMLParams", xMLParams) :
                new ObjectParameter("XMLParams", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetScheduleHMedicineSale_Result>("SpGetScheduleHMedicineSale", xMLParamsParameter);
        }
    
        public virtual ObjectResult<SpGetStockCheckingDetails_Result> SpGetStockCheckingDetails(Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetStockCheckingDetails_Result>("SpGetStockCheckingDetails", finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptCostingAndProfitabilityNewMethod_Result> SpRptCostingAndProfitabilityNewMethod(string xMLParams)
        {
            var xMLParamsParameter = xMLParams != null ?
                new ObjectParameter("XMLParams", xMLParams) :
                new ObjectParameter("XMLParams", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptCostingAndProfitabilityNewMethod_Result>("SpRptCostingAndProfitabilityNewMethod", xMLParamsParameter);
        }
    
        public virtual ObjectResult<SpRptMedicineSchedule_Result> SpRptMedicineSchedule(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> nursingStationID, Nullable<int> patientID, Nullable<int> roomID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var nursingStationIDParameter = nursingStationID.HasValue ?
                new ObjectParameter("NursingStationID", nursingStationID) :
                new ObjectParameter("NursingStationID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptMedicineSchedule_Result>("SpRptMedicineSchedule", fromDateParameter, toDateParameter, nursingStationIDParameter, patientIDParameter, roomIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptTreatment_Result2> SpRptTreatment(string type, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> treatmentID, Nullable<int> treatmentGroupID, Nullable<int> patientID, Nullable<int> treatmentRoomID, Nullable<int> therapistID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var treatmentIDParameter = treatmentID.HasValue ?
                new ObjectParameter("TreatmentID", treatmentID) :
                new ObjectParameter("TreatmentID", typeof(int));
    
            var treatmentGroupIDParameter = treatmentGroupID.HasValue ?
                new ObjectParameter("TreatmentGroupID", treatmentGroupID) :
                new ObjectParameter("TreatmentGroupID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var treatmentRoomIDParameter = treatmentRoomID.HasValue ?
                new ObjectParameter("TreatmentRoomID", treatmentRoomID) :
                new ObjectParameter("TreatmentRoomID", typeof(int));
    
            var therapistIDParameter = therapistID.HasValue ?
                new ObjectParameter("TherapistID", therapistID) :
                new ObjectParameter("TherapistID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptTreatment_Result2>("SpRptTreatment", typeParameter, fromDateParameter, toDateParameter, treatmentIDParameter, treatmentGroupIDParameter, patientIDParameter, treatmentRoomIDParameter, therapistIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptCostValueByStock_Result> SpRptCostValueByStock(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> itemID, Nullable<int> locationID, Nullable<int> userLocationID, Nullable<int> userID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var userLocationIDParameter = userLocationID.HasValue ?
                new ObjectParameter("UserLocationID", userLocationID) :
                new ObjectParameter("UserLocationID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptCostValueByStock_Result>("SpRptCostValueByStock", fromDateParameter, toDateParameter, itemIDParameter, locationIDParameter, userLocationIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<SpRptDebitAndCreditNote_Result> SpRptDebitAndCreditNote(string xMLParam)
        {
            var xMLParamParameter = xMLParam != null ?
                new ObjectParameter("XMLParam", xMLParam) :
                new ObjectParameter("XMLParam", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptDebitAndCreditNote_Result>("SpRptDebitAndCreditNote", xMLParamParameter);
        }
    
        public virtual ObjectResult<SpSalesReturnReport_Result> SpSalesReturnReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpSalesReturnReport_Result>("SpSalesReturnReport", fromDateParameter, toDateParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptSalesOutputGSTReportSummary_Result> SpRptSalesOutputGSTReportSummary(Nullable<System.DateTime> invoiceDateFrom, Nullable<System.DateTime> invoiceDateTo, Nullable<int> locations, Nullable<int> customerTaxCategoryID, string fromCustomerRange, string toCustomerRange, Nullable<int> customerID, Nullable<int> invoiceNoFromID, Nullable<int> invoiceNoToID, Nullable<int> customerGSTNoID, Nullable<decimal> gSTRateFrom, Nullable<decimal> gSTRateTo, string iGST, string itemType, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var invoiceDateFromParameter = invoiceDateFrom.HasValue ?
                new ObjectParameter("InvoiceDateFrom", invoiceDateFrom) :
                new ObjectParameter("InvoiceDateFrom", typeof(System.DateTime));
    
            var invoiceDateToParameter = invoiceDateTo.HasValue ?
                new ObjectParameter("InvoiceDateTo", invoiceDateTo) :
                new ObjectParameter("InvoiceDateTo", typeof(System.DateTime));
    
            var locationsParameter = locations.HasValue ?
                new ObjectParameter("Locations", locations) :
                new ObjectParameter("Locations", typeof(int));
    
            var customerTaxCategoryIDParameter = customerTaxCategoryID.HasValue ?
                new ObjectParameter("CustomerTaxCategoryID", customerTaxCategoryID) :
                new ObjectParameter("CustomerTaxCategoryID", typeof(int));
    
            var fromCustomerRangeParameter = fromCustomerRange != null ?
                new ObjectParameter("FromCustomerRange", fromCustomerRange) :
                new ObjectParameter("FromCustomerRange", typeof(string));
    
            var toCustomerRangeParameter = toCustomerRange != null ?
                new ObjectParameter("ToCustomerRange", toCustomerRange) :
                new ObjectParameter("ToCustomerRange", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var invoiceNoFromIDParameter = invoiceNoFromID.HasValue ?
                new ObjectParameter("InvoiceNoFromID", invoiceNoFromID) :
                new ObjectParameter("InvoiceNoFromID", typeof(int));
    
            var invoiceNoToIDParameter = invoiceNoToID.HasValue ?
                new ObjectParameter("InvoiceNoToID", invoiceNoToID) :
                new ObjectParameter("InvoiceNoToID", typeof(int));
    
            var customerGSTNoIDParameter = customerGSTNoID.HasValue ?
                new ObjectParameter("CustomerGSTNoID", customerGSTNoID) :
                new ObjectParameter("CustomerGSTNoID", typeof(int));
    
            var gSTRateFromParameter = gSTRateFrom.HasValue ?
                new ObjectParameter("GSTRateFrom", gSTRateFrom) :
                new ObjectParameter("GSTRateFrom", typeof(decimal));
    
            var gSTRateToParameter = gSTRateTo.HasValue ?
                new ObjectParameter("GSTRateTo", gSTRateTo) :
                new ObjectParameter("GSTRateTo", typeof(decimal));
    
            var iGSTParameter = iGST != null ?
                new ObjectParameter("IGST", iGST) :
                new ObjectParameter("IGST", typeof(string));
    
            var itemTypeParameter = itemType != null ?
                new ObjectParameter("ItemType", itemType) :
                new ObjectParameter("ItemType", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptSalesOutputGSTReportSummary_Result>("SpRptSalesOutputGSTReportSummary", invoiceDateFromParameter, invoiceDateToParameter, locationsParameter, customerTaxCategoryIDParameter, fromCustomerRangeParameter, toCustomerRangeParameter, customerIDParameter, invoiceNoFromIDParameter, invoiceNoToIDParameter, customerGSTNoIDParameter, gSTRateFromParameter, gSTRateToParameter, iGSTParameter, itemTypeParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptPurchaseInvoiceSupplierWiseSummary_Result> SpRptPurchaseInvoiceSupplierWiseSummary(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string type, string supplierFromRange, string supplierToRange, Nullable<int> supplierID, Nullable<int> invoiceNOFrom, Nullable<int> invoiceNOTo, string supplierInvoiceNo, string invoiceStatus, Nullable<bool> isOverruled, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var supplierFromRangeParameter = supplierFromRange != null ?
                new ObjectParameter("SupplierFromRange", supplierFromRange) :
                new ObjectParameter("SupplierFromRange", typeof(string));
    
            var supplierToRangeParameter = supplierToRange != null ?
                new ObjectParameter("SupplierToRange", supplierToRange) :
                new ObjectParameter("SupplierToRange", typeof(string));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var invoiceNOFromParameter = invoiceNOFrom.HasValue ?
                new ObjectParameter("InvoiceNOFrom", invoiceNOFrom) :
                new ObjectParameter("InvoiceNOFrom", typeof(int));
    
            var invoiceNOToParameter = invoiceNOTo.HasValue ?
                new ObjectParameter("InvoiceNOTo", invoiceNOTo) :
                new ObjectParameter("InvoiceNOTo", typeof(int));
    
            var supplierInvoiceNoParameter = supplierInvoiceNo != null ?
                new ObjectParameter("SupplierInvoiceNo", supplierInvoiceNo) :
                new ObjectParameter("SupplierInvoiceNo", typeof(string));
    
            var invoiceStatusParameter = invoiceStatus != null ?
                new ObjectParameter("InvoiceStatus", invoiceStatus) :
                new ObjectParameter("InvoiceStatus", typeof(string));
    
            var isOverruledParameter = isOverruled.HasValue ?
                new ObjectParameter("IsOverruled", isOverruled) :
                new ObjectParameter("IsOverruled", typeof(bool));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptPurchaseInvoiceSupplierWiseSummary_Result>("SpRptPurchaseInvoiceSupplierWiseSummary", fromDateParameter, toDateParameter, typeParameter, supplierFromRangeParameter, supplierToRangeParameter, supplierIDParameter, invoiceNOFromParameter, invoiceNOToParameter, supplierInvoiceNoParameter, invoiceStatusParameter, isOverruledParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptPurchaseInvoice_Result> SpRptPurchaseInvoice(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string type, string itemCategoryFromRange, string itemCategoryToRange, Nullable<int> itemCategoryID, string itemFromRange, string itemToRange, Nullable<int> itemID, string supplierFromRange, string supplierToRange, Nullable<int> supplierID, Nullable<int> pONOFrom, Nullable<int> pONOTo, Nullable<int> qCNOFrom, Nullable<int> qCNOTo, Nullable<int> gRNNOFrom, Nullable<int> gRNNOTo, Nullable<int> invoiceNOFrom, Nullable<int> invoiceNOTo, string supplierInvoiceNo, string invoiceStatus, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var itemCategoryFromRangeParameter = itemCategoryFromRange != null ?
                new ObjectParameter("ItemCategoryFromRange", itemCategoryFromRange) :
                new ObjectParameter("ItemCategoryFromRange", typeof(string));
    
            var itemCategoryToRangeParameter = itemCategoryToRange != null ?
                new ObjectParameter("ItemCategoryToRange", itemCategoryToRange) :
                new ObjectParameter("ItemCategoryToRange", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var itemFromRangeParameter = itemFromRange != null ?
                new ObjectParameter("ItemFromRange", itemFromRange) :
                new ObjectParameter("ItemFromRange", typeof(string));
    
            var itemToRangeParameter = itemToRange != null ?
                new ObjectParameter("ItemToRange", itemToRange) :
                new ObjectParameter("ItemToRange", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var supplierFromRangeParameter = supplierFromRange != null ?
                new ObjectParameter("SupplierFromRange", supplierFromRange) :
                new ObjectParameter("SupplierFromRange", typeof(string));
    
            var supplierToRangeParameter = supplierToRange != null ?
                new ObjectParameter("SupplierToRange", supplierToRange) :
                new ObjectParameter("SupplierToRange", typeof(string));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var pONOFromParameter = pONOFrom.HasValue ?
                new ObjectParameter("PONOFrom", pONOFrom) :
                new ObjectParameter("PONOFrom", typeof(int));
    
            var pONOToParameter = pONOTo.HasValue ?
                new ObjectParameter("PONOTo", pONOTo) :
                new ObjectParameter("PONOTo", typeof(int));
    
            var qCNOFromParameter = qCNOFrom.HasValue ?
                new ObjectParameter("QCNOFrom", qCNOFrom) :
                new ObjectParameter("QCNOFrom", typeof(int));
    
            var qCNOToParameter = qCNOTo.HasValue ?
                new ObjectParameter("QCNOTo", qCNOTo) :
                new ObjectParameter("QCNOTo", typeof(int));
    
            var gRNNOFromParameter = gRNNOFrom.HasValue ?
                new ObjectParameter("GRNNOFrom", gRNNOFrom) :
                new ObjectParameter("GRNNOFrom", typeof(int));
    
            var gRNNOToParameter = gRNNOTo.HasValue ?
                new ObjectParameter("GRNNOTo", gRNNOTo) :
                new ObjectParameter("GRNNOTo", typeof(int));
    
            var invoiceNOFromParameter = invoiceNOFrom.HasValue ?
                new ObjectParameter("InvoiceNOFrom", invoiceNOFrom) :
                new ObjectParameter("InvoiceNOFrom", typeof(int));
    
            var invoiceNOToParameter = invoiceNOTo.HasValue ?
                new ObjectParameter("InvoiceNOTo", invoiceNOTo) :
                new ObjectParameter("InvoiceNOTo", typeof(int));
    
            var supplierInvoiceNoParameter = supplierInvoiceNo != null ?
                new ObjectParameter("SupplierInvoiceNo", supplierInvoiceNo) :
                new ObjectParameter("SupplierInvoiceNo", typeof(string));
    
            var invoiceStatusParameter = invoiceStatus != null ?
                new ObjectParameter("InvoiceStatus", invoiceStatus) :
                new ObjectParameter("InvoiceStatus", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptPurchaseInvoice_Result>("SpRptPurchaseInvoice", fromDateParameter, toDateParameter, typeParameter, itemCategoryFromRangeParameter, itemCategoryToRangeParameter, itemCategoryIDParameter, itemFromRangeParameter, itemToRangeParameter, itemIDParameter, supplierFromRangeParameter, supplierToRangeParameter, supplierIDParameter, pONOFromParameter, pONOToParameter, qCNOFromParameter, qCNOToParameter, gRNNOFromParameter, gRNNOToParameter, invoiceNOFromParameter, invoiceNOToParameter, supplierInvoiceNoParameter, invoiceStatusParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpRptDailyTotalCollectionReport_Result> SpRptDailyTotalCollectionReport(string xMLParams)
        {
            var xMLParamsParameter = xMLParams != null ?
                new ObjectParameter("XMLParams", xMLParams) :
                new ObjectParameter("XMLParams", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptDailyTotalCollectionReport_Result>("SpRptDailyTotalCollectionReport", xMLParamsParameter);
        }
    
        public virtual ObjectResult<SpRptGeneralLedgerV3_Result> SpRptGeneralLedgerV3(string xMLParam)
        {
            var xMLParamParameter = xMLParam != null ?
                new ObjectParameter("XMLParam", xMLParam) :
                new ObjectParameter("XMLParam", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptGeneralLedgerV3_Result>("SpRptGeneralLedgerV3", xMLParamParameter);
        }
    
        public virtual ObjectResult<SpRptGroupLedger_Result> SpRptGroupLedger(string xMLParam)
        {
            var xMLParamParameter = xMLParam != null ?
                new ObjectParameter("XMLParam", xMLParam) :
                new ObjectParameter("XMLParam", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptGroupLedger_Result>("SpRptGroupLedger", xMLParamParameter);
        }
    
        public virtual ObjectResult<SpRptSalesInvoice_Result> SpRptSalesInvoice(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> location, Nullable<int> batchTypeID, Nullable<int> customerID, Nullable<int> invoiceNoFromID, Nullable<int> invoiceNoToID, Nullable<int> customerStateID, string itemType, string paymentType, Nullable<int> itemCategoryID, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var locationParameter = location.HasValue ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(int));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var invoiceNoFromIDParameter = invoiceNoFromID.HasValue ?
                new ObjectParameter("InvoiceNoFromID", invoiceNoFromID) :
                new ObjectParameter("InvoiceNoFromID", typeof(int));
    
            var invoiceNoToIDParameter = invoiceNoToID.HasValue ?
                new ObjectParameter("InvoiceNoToID", invoiceNoToID) :
                new ObjectParameter("InvoiceNoToID", typeof(int));
    
            var customerStateIDParameter = customerStateID.HasValue ?
                new ObjectParameter("CustomerStateID", customerStateID) :
                new ObjectParameter("CustomerStateID", typeof(int));
    
            var itemTypeParameter = itemType != null ?
                new ObjectParameter("ItemType", itemType) :
                new ObjectParameter("ItemType", typeof(string));
    
            var paymentTypeParameter = paymentType != null ?
                new ObjectParameter("PaymentType", paymentType) :
                new ObjectParameter("PaymentType", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRptSalesInvoice_Result>("SpRptSalesInvoice", fromDateParameter, toDateParameter, locationParameter, batchTypeIDParameter, customerIDParameter, invoiceNoFromIDParameter, invoiceNoToIDParameter, customerStateIDParameter, itemTypeParameter, paymentTypeParameter, itemCategoryIDParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    }
}
