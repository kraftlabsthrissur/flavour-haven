//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccessLayer.DBContext
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AHCMSEntities : DbContext
    {
        public AHCMSEntities()
            : base("name=AHCMSEntities")
        {
            ((IObjectContextAdapter)this).ObjectContext.CommandTimeout = 0;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<SpGetOutPatientListForPopUp_Result> SpGetOutPatientListForPopUp(string codeHint, string nameHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetOutPatientListForPopUp_Result>("SpGetOutPatientListForPopUp", codeHintParameter, nameHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateAppointmentSchedule(Nullable<int> doctorID, Nullable<System.DateTime> fromDate, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter transID, ObjectParameter returnValue)
        {
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateAppointmentSchedule", doctorIDParameter, fromDateParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, transID, returnValue);
        }
    
        public virtual int SpIsDeletableAppointmentSchedule(Nullable<int> doctorID, Nullable<int> patientID, Nullable<System.DateTime> date)
        {
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpIsDeletableAppointmentSchedule", doctorIDParameter, patientIDParameter, dateParameter);
        }
    
        public virtual ObjectResult<SpGetDateForAppointmentSchedule_Result> SpGetDateForAppointmentSchedule()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDateForAppointmentSchedule_Result>("SpGetDateForAppointmentSchedule");
        }
    
        public virtual ObjectResult<SpGetPatientReferedBy_Result> SpGetPatientReferedBy(Nullable<int> applicationID)
        {
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPatientReferedBy_Result>("SpGetPatientReferedBy", applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetDetailedExamination_Result> SpGetDetailedExamination(string type, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDetailedExamination_Result>("SpGetDetailedExamination", typeParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetTreatmentRoomDetails_Result> SpGetTreatmentRoomDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetTreatmentRoomDetails_Result>("SpGetTreatmentRoomDetails");
        }
    
        public virtual ObjectResult<SpGetTherapistList_Result> SpGetTherapistList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetTherapistList_Result>("SpGetTherapistList");
        }
    
        public virtual int SpCreateTreatmentSchedule(Nullable<int> scheduledID, Nullable<System.DateTime> scheduledDate, string startTime, Nullable<int> durationID, Nullable<int> treatmentRoomID, Nullable<int> therapistID, string commaSeparatedScheduleID, ObjectParameter isTherapistExist, ObjectParameter isTreatmentRoomExist, ObjectParameter isPatientExist, ObjectParameter errorMessage)
        {
            var scheduledIDParameter = scheduledID.HasValue ?
                new ObjectParameter("ScheduledID", scheduledID) :
                new ObjectParameter("ScheduledID", typeof(int));
    
            var scheduledDateParameter = scheduledDate.HasValue ?
                new ObjectParameter("ScheduledDate", scheduledDate) :
                new ObjectParameter("ScheduledDate", typeof(System.DateTime));
    
            var startTimeParameter = startTime != null ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(string));
    
            var durationIDParameter = durationID.HasValue ?
                new ObjectParameter("DurationID", durationID) :
                new ObjectParameter("DurationID", typeof(int));
    
            var treatmentRoomIDParameter = treatmentRoomID.HasValue ?
                new ObjectParameter("TreatmentRoomID", treatmentRoomID) :
                new ObjectParameter("TreatmentRoomID", typeof(int));
    
            var therapistIDParameter = therapistID.HasValue ?
                new ObjectParameter("TherapistID", therapistID) :
                new ObjectParameter("TherapistID", typeof(int));
    
            var commaSeparatedScheduleIDParameter = commaSeparatedScheduleID != null ?
                new ObjectParameter("CommaSeparatedScheduleID", commaSeparatedScheduleID) :
                new ObjectParameter("CommaSeparatedScheduleID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateTreatmentSchedule", scheduledIDParameter, scheduledDateParameter, startTimeParameter, durationIDParameter, treatmentRoomIDParameter, therapistIDParameter, commaSeparatedScheduleIDParameter, isTherapistExist, isTreatmentRoomExist, isPatientExist, errorMessage);
        }
    
        public virtual int SpCreateTreatmentScheduleTrans(Nullable<int> transID, Nullable<int> patientID, Nullable<int> treatmentID, Nullable<int> noOfTreatment, Nullable<int> treatmentRoomID, string startTime, Nullable<int> durationID, Nullable<int> therapistID, Nullable<int> doctorID, Nullable<int> patientTreatmentID)
        {
            var transIDParameter = transID.HasValue ?
                new ObjectParameter("TransID", transID) :
                new ObjectParameter("TransID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var treatmentIDParameter = treatmentID.HasValue ?
                new ObjectParameter("TreatmentID", treatmentID) :
                new ObjectParameter("TreatmentID", typeof(int));
    
            var noOfTreatmentParameter = noOfTreatment.HasValue ?
                new ObjectParameter("NoOfTreatment", noOfTreatment) :
                new ObjectParameter("NoOfTreatment", typeof(int));
    
            var treatmentRoomIDParameter = treatmentRoomID.HasValue ?
                new ObjectParameter("TreatmentRoomID", treatmentRoomID) :
                new ObjectParameter("TreatmentRoomID", typeof(int));
    
            var startTimeParameter = startTime != null ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(string));
    
            var durationIDParameter = durationID.HasValue ?
                new ObjectParameter("DurationID", durationID) :
                new ObjectParameter("DurationID", typeof(int));
    
            var therapistIDParameter = therapistID.HasValue ?
                new ObjectParameter("TherapistID", therapistID) :
                new ObjectParameter("TherapistID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var patientTreatmentIDParameter = patientTreatmentID.HasValue ?
                new ObjectParameter("PatientTreatmentID", patientTreatmentID) :
                new ObjectParameter("PatientTreatmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateTreatmentScheduleTrans", transIDParameter, patientIDParameter, treatmentIDParameter, noOfTreatmentParameter, treatmentRoomIDParameter, startTimeParameter, durationIDParameter, therapistIDParameter, doctorIDParameter, patientTreatmentIDParameter);
        }
    
        public virtual ObjectResult<SpGetTreatmentNumberList_Result> SpGetTreatmentNumberList(Nullable<int> applicationID)
        {
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetTreatmentNumberList_Result>("SpGetTreatmentNumberList", applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetTreatmentInstructionList_Result> SpGetTreatmentInstructionList(Nullable<int> applicationID)
        {
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetTreatmentInstructionList_Result>("SpGetTreatmentInstructionList", applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetMedicineTimeList_Result> SpGetMedicineTimeList(string type, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetMedicineTimeList_Result>("SpGetMedicineTimeList", typeParameter, applicationIDParameter);
        }
    
        public virtual int SpCreatePatientMedicinesItems(Nullable<int> transID, Nullable<int> medicineID, Nullable<decimal> quantity, Nullable<int> unitID)
        {
            var transIDParameter = transID.HasValue ?
                new ObjectParameter("TransID", transID) :
                new ObjectParameter("TransID", typeof(int));
    
            var medicineIDParameter = medicineID.HasValue ?
                new ObjectParameter("MedicineID", medicineID) :
                new ObjectParameter("MedicineID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePatientMedicinesItems", transIDParameter, medicineIDParameter, quantityParameter, unitIDParameter);
        }
    
        public virtual ObjectResult<SpGetDropDownDetailsForStatus_Result> SpGetDropDownDetailsForStatus()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDropDownDetailsForStatus_Result>("SpGetDropDownDetailsForStatus");
        }
    
        public virtual int SpCreateTreatmentIssue(Nullable<System.DateTime> date, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter transID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateTreatmentIssue", dateParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, transID);
        }
    
        public virtual int SpCreateTreatmentIssueTrans(Nullable<int> transID, Nullable<int> patientID, Nullable<int> treatmentID, Nullable<int> noOfTreatment, Nullable<int> treatmentRoomID, string startTime, Nullable<int> durationID, Nullable<int> therapistID, Nullable<int> status, string remarks, Nullable<int> treatmentScheduleItemID)
        {
            var transIDParameter = transID.HasValue ?
                new ObjectParameter("TransID", transID) :
                new ObjectParameter("TransID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var treatmentIDParameter = treatmentID.HasValue ?
                new ObjectParameter("TreatmentID", treatmentID) :
                new ObjectParameter("TreatmentID", typeof(int));
    
            var noOfTreatmentParameter = noOfTreatment.HasValue ?
                new ObjectParameter("NoOfTreatment", noOfTreatment) :
                new ObjectParameter("NoOfTreatment", typeof(int));
    
            var treatmentRoomIDParameter = treatmentRoomID.HasValue ?
                new ObjectParameter("TreatmentRoomID", treatmentRoomID) :
                new ObjectParameter("TreatmentRoomID", typeof(int));
    
            var startTimeParameter = startTime != null ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(string));
    
            var durationIDParameter = durationID.HasValue ?
                new ObjectParameter("DurationID", durationID) :
                new ObjectParameter("DurationID", typeof(int));
    
            var therapistIDParameter = therapistID.HasValue ?
                new ObjectParameter("TherapistID", therapistID) :
                new ObjectParameter("TherapistID", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var treatmentScheduleItemIDParameter = treatmentScheduleItemID.HasValue ?
                new ObjectParameter("TreatmentScheduleItemID", treatmentScheduleItemID) :
                new ObjectParameter("TreatmentScheduleItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateTreatmentIssueTrans", transIDParameter, patientIDParameter, treatmentIDParameter, noOfTreatmentParameter, treatmentRoomIDParameter, startTimeParameter, durationIDParameter, therapistIDParameter, statusParameter, remarksParameter, treatmentScheduleItemIDParameter);
        }
    
        public virtual ObjectResult<SpGetPatientTreatmentList_Result> SpGetPatientTreatmentList(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> finYear, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPatientTreatmentList_Result>("SpGetPatientTreatmentList", fromDateParameter, toDateParameter, finYearParameter, applicationIDParameter);
        }
    
        public virtual int SpCreatePatientReports(Nullable<int> appointmentProcessID, Nullable<int> patientID, Nullable<System.DateTime> date, Nullable<int> documentID, string name, string description, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var documentIDParameter = documentID.HasValue ?
                new ObjectParameter("DocumentID", documentID) :
                new ObjectParameter("DocumentID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePatientReports", appointmentProcessIDParameter, patientIDParameter, dateParameter, documentIDParameter, nameParameter, descriptionParameter, createdUserIDParameter, finYearParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual int SpCreateTreatmentIssueTransOne(Nullable<int> transID, Nullable<int> patientID, Nullable<int> treatmentID, Nullable<int> noOfTreatment, Nullable<int> treatmentRoomID, string startTime, Nullable<int> durationID, Nullable<int> therapistID, Nullable<int> statusID, string remarks, Nullable<int> treatmentScheduleItemID, string endTime)
        {
            var transIDParameter = transID.HasValue ?
                new ObjectParameter("TransID", transID) :
                new ObjectParameter("TransID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var treatmentIDParameter = treatmentID.HasValue ?
                new ObjectParameter("TreatmentID", treatmentID) :
                new ObjectParameter("TreatmentID", typeof(int));
    
            var noOfTreatmentParameter = noOfTreatment.HasValue ?
                new ObjectParameter("NoOfTreatment", noOfTreatment) :
                new ObjectParameter("NoOfTreatment", typeof(int));
    
            var treatmentRoomIDParameter = treatmentRoomID.HasValue ?
                new ObjectParameter("TreatmentRoomID", treatmentRoomID) :
                new ObjectParameter("TreatmentRoomID", typeof(int));
    
            var startTimeParameter = startTime != null ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(string));
    
            var durationIDParameter = durationID.HasValue ?
                new ObjectParameter("DurationID", durationID) :
                new ObjectParameter("DurationID", typeof(int));
    
            var therapistIDParameter = therapistID.HasValue ?
                new ObjectParameter("TherapistID", therapistID) :
                new ObjectParameter("TherapistID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var treatmentScheduleItemIDParameter = treatmentScheduleItemID.HasValue ?
                new ObjectParameter("TreatmentScheduleItemID", treatmentScheduleItemID) :
                new ObjectParameter("TreatmentScheduleItemID", typeof(int));
    
            var endTimeParameter = endTime != null ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateTreatmentIssueTransOne", transIDParameter, patientIDParameter, treatmentIDParameter, noOfTreatmentParameter, treatmentRoomIDParameter, startTimeParameter, durationIDParameter, therapistIDParameter, statusIDParameter, remarksParameter, treatmentScheduleItemIDParameter, endTimeParameter);
        }
    
        public virtual ObjectResult<SpGetTreatmentScheduleDetails_Result> SpGetTreatmentScheduleDetails(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetTreatmentScheduleDetails_Result>("SpGetTreatmentScheduleDetails", iDParameter);
        }
    
        public virtual int SpCreatePatientCaseSheet(Nullable<int> appointmentProcessID, Nullable<int> patientID, Nullable<System.DateTime> date, string remark, Nullable<System.DateTime> nextVisitDate, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var nextVisitDateParameter = nextVisitDate.HasValue ?
                new ObjectParameter("NextVisitDate", nextVisitDate) :
                new ObjectParameter("NextVisitDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePatientCaseSheet", appointmentProcessIDParameter, patientIDParameter, dateParameter, remarkParameter, nextVisitDateParameter, createdUserIDParameter, finYearParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual ObjectResult<SpGetMedicineDetailsForPrint_Result> SpGetMedicineDetailsForPrint(Nullable<int> iD, Nullable<System.DateTime> date, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetMedicineDetailsForPrint_Result>("SpGetMedicineDetailsForPrint", iDParameter, dateParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetDurationForTreatmentList_Result> SpGetDurationForTreatmentList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDurationForTreatmentList_Result>("SpGetDurationForTreatmentList");
        }
    
        public virtual ObjectResult<SpGetTreatmentProcessDetails_Result> SpGetTreatmentProcessDetails(Nullable<int> iD, Nullable<int> createdUserID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetTreatmentProcessDetails_Result>("SpGetTreatmentProcessDetails", iDParameter, createdUserIDParameter);
        }
    
        public virtual ObjectResult<SpGetTreatmentListItemByID_Result> SpGetTreatmentListItemByID(Nullable<int> iD, Nullable<int> finYear, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetTreatmentListItemByID_Result>("SpGetTreatmentListItemByID", iDParameter, finYearParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCaseSheetByDate_Result> SpGetCaseSheetByDate(Nullable<int> patientID, Nullable<System.DateTime> date, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCaseSheetByDate_Result>("SpGetCaseSheetByDate", patientIDParameter, dateParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetExaminationHistory_Result> SpGetExaminationHistory(Nullable<int> patientID, Nullable<int> applicationID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetExaminationHistory_Result>("SpGetExaminationHistory", patientIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetAvailableRoomByID_Result> SpGetAvailableRoomByID(Nullable<int> roomTypeID)
        {
            var roomTypeIDParameter = roomTypeID.HasValue ?
                new ObjectParameter("RoomTypeID", roomTypeID) :
                new ObjectParameter("RoomTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAvailableRoomByID_Result>("SpGetAvailableRoomByID", roomTypeIDParameter);
        }
    
        public virtual ObjectResult<SpGetDataForTreatmentIssue_Result> SpGetDataForTreatmentIssue(Nullable<System.DateTime> date, Nullable<int> finYear, Nullable<int> applicationID, Nullable<int> createdUserID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDataForTreatmentIssue_Result>("SpGetDataForTreatmentIssue", dateParameter, finYearParameter, applicationIDParameter, createdUserIDParameter);
        }
    
        public virtual ObjectResult<SpGetRoomDetailsByID_Result> SpGetRoomDetailsByID(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetRoomDetailsByID_Result>("SpGetRoomDetailsByID", iDParameter);
        }
    
        public virtual int SpCreateTreatmentProcess(Nullable<int> treatmentProcessID, Nullable<int> treatmentScheduleID, Nullable<int> appointmentProcessID, Nullable<System.DateTime> date, Nullable<int> patientID, Nullable<int> treatmentID, Nullable<int> treatmentRoomID, Nullable<int> durationID, Nullable<int> therapistID, Nullable<int> treatmentNo, Nullable<int> noOfTreatment, string startTime, string endTime, string remarks, string status, string commaSeparatedScheduleID, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter isTreatmentRoomExist, ObjectParameter isPatientExist, ObjectParameter errorMessage)
        {
            var treatmentProcessIDParameter = treatmentProcessID.HasValue ?
                new ObjectParameter("TreatmentProcessID", treatmentProcessID) :
                new ObjectParameter("TreatmentProcessID", typeof(int));
    
            var treatmentScheduleIDParameter = treatmentScheduleID.HasValue ?
                new ObjectParameter("TreatmentScheduleID", treatmentScheduleID) :
                new ObjectParameter("TreatmentScheduleID", typeof(int));
    
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var treatmentIDParameter = treatmentID.HasValue ?
                new ObjectParameter("TreatmentID", treatmentID) :
                new ObjectParameter("TreatmentID", typeof(int));
    
            var treatmentRoomIDParameter = treatmentRoomID.HasValue ?
                new ObjectParameter("TreatmentRoomID", treatmentRoomID) :
                new ObjectParameter("TreatmentRoomID", typeof(int));
    
            var durationIDParameter = durationID.HasValue ?
                new ObjectParameter("DurationID", durationID) :
                new ObjectParameter("DurationID", typeof(int));
    
            var therapistIDParameter = therapistID.HasValue ?
                new ObjectParameter("TherapistID", therapistID) :
                new ObjectParameter("TherapistID", typeof(int));
    
            var treatmentNoParameter = treatmentNo.HasValue ?
                new ObjectParameter("TreatmentNo", treatmentNo) :
                new ObjectParameter("TreatmentNo", typeof(int));
    
            var noOfTreatmentParameter = noOfTreatment.HasValue ?
                new ObjectParameter("NoOfTreatment", noOfTreatment) :
                new ObjectParameter("NoOfTreatment", typeof(int));
    
            var startTimeParameter = startTime != null ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(string));
    
            var endTimeParameter = endTime != null ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var commaSeparatedScheduleIDParameter = commaSeparatedScheduleID != null ?
                new ObjectParameter("CommaSeparatedScheduleID", commaSeparatedScheduleID) :
                new ObjectParameter("CommaSeparatedScheduleID", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateTreatmentProcess", treatmentProcessIDParameter, treatmentScheduleIDParameter, appointmentProcessIDParameter, dateParameter, patientIDParameter, treatmentIDParameter, treatmentRoomIDParameter, durationIDParameter, therapistIDParameter, treatmentNoParameter, noOfTreatmentParameter, startTimeParameter, endTimeParameter, remarksParameter, statusParameter, commaSeparatedScheduleIDParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, isTreatmentRoomExist, isPatientExist, errorMessage);
        }
    
        public virtual ObjectResult<SpGetTreatmentSchedules_Result> SpGetTreatmentSchedules(string type, Nullable<int> patientID, Nullable<int> appointmentProcessID, Nullable<System.DateTime> date, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetTreatmentSchedules_Result>("SpGetTreatmentSchedules", typeParameter, patientIDParameter, appointmentProcessIDParameter, dateParameter, createdUserIDParameter, finYearParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual int SpCreateInpatient(Nullable<int> appointmentProcessID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> patientID, Nullable<int> doctorID, Nullable<int> roomID, Nullable<int> reservationID, string byStander, string mobile, Nullable<bool> isRoomChange, Nullable<System.DateTime> roomChangeDate, Nullable<int> roomStatusID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var reservationIDParameter = reservationID.HasValue ?
                new ObjectParameter("ReservationID", reservationID) :
                new ObjectParameter("ReservationID", typeof(int));
    
            var byStanderParameter = byStander != null ?
                new ObjectParameter("ByStander", byStander) :
                new ObjectParameter("ByStander", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var isRoomChangeParameter = isRoomChange.HasValue ?
                new ObjectParameter("IsRoomChange", isRoomChange) :
                new ObjectParameter("IsRoomChange", typeof(bool));
    
            var roomChangeDateParameter = roomChangeDate.HasValue ?
                new ObjectParameter("RoomChangeDate", roomChangeDate) :
                new ObjectParameter("RoomChangeDate", typeof(System.DateTime));
    
            var roomStatusIDParameter = roomStatusID.HasValue ?
                new ObjectParameter("RoomStatusID", roomStatusID) :
                new ObjectParameter("RoomStatusID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateInpatient", appointmentProcessIDParameter, fromDateParameter, toDateParameter, patientIDParameter, doctorIDParameter, roomIDParameter, reservationIDParameter, byStanderParameter, mobileParameter, isRoomChangeParameter, roomChangeDateParameter, roomStatusIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetAvailableRooms_Result> SpGetAvailableRooms(Nullable<int> roomTypeID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> patientID)
        {
            var roomTypeIDParameter = roomTypeID.HasValue ?
                new ObjectParameter("RoomTypeID", roomTypeID) :
                new ObjectParameter("RoomTypeID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAvailableRooms_Result>("SpGetAvailableRooms", roomTypeIDParameter, fromDateParameter, toDateParameter, patientIDParameter);
        }
    
        public virtual int SpCreateRoomReservation(Nullable<System.DateTime> date, Nullable<int> patientID, Nullable<int> roomTypeID, Nullable<int> roomID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<decimal> rate, Nullable<System.DateTime> bookedFromDate, Nullable<System.DateTime> bookedToDate, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter reservationID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var roomTypeIDParameter = roomTypeID.HasValue ?
                new ObjectParameter("RoomTypeID", roomTypeID) :
                new ObjectParameter("RoomTypeID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var bookedFromDateParameter = bookedFromDate.HasValue ?
                new ObjectParameter("BookedFromDate", bookedFromDate) :
                new ObjectParameter("BookedFromDate", typeof(System.DateTime));
    
            var bookedToDateParameter = bookedToDate.HasValue ?
                new ObjectParameter("BookedToDate", bookedToDate) :
                new ObjectParameter("BookedToDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateRoomReservation", dateParameter, patientIDParameter, roomTypeIDParameter, roomIDParameter, fromDateParameter, toDateParameter, rateParameter, bookedFromDateParameter, bookedToDateParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, reservationID);
        }
    
        public virtual ObjectResult<SpGetRoomReservationList_Result> SpGetRoomReservationList(string fromDate, string toDate, string patient, string room, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var patientParameter = patient != null ?
                new ObjectParameter("Patient", patient) :
                new ObjectParameter("Patient", typeof(string));
    
            var roomParameter = room != null ?
                new ObjectParameter("Room", room) :
                new ObjectParameter("Room", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetRoomReservationList_Result>("SpGetRoomReservationList", fromDateParameter, toDateParameter, patientParameter, roomParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateRoomReservation(Nullable<int> iD, Nullable<System.DateTime> date, Nullable<int> patientID, Nullable<int> roomTypeID, Nullable<int> roomID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<decimal> rate, Nullable<System.DateTime> bookedFromDate, Nullable<System.DateTime> bookedToDate, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var roomTypeIDParameter = roomTypeID.HasValue ?
                new ObjectParameter("RoomTypeID", roomTypeID) :
                new ObjectParameter("RoomTypeID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var bookedFromDateParameter = bookedFromDate.HasValue ?
                new ObjectParameter("BookedFromDate", bookedFromDate) :
                new ObjectParameter("BookedFromDate", typeof(System.DateTime));
    
            var bookedToDateParameter = bookedToDate.HasValue ?
                new ObjectParameter("BookedToDate", bookedToDate) :
                new ObjectParameter("BookedToDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateRoomReservation", iDParameter, dateParameter, patientIDParameter, roomTypeIDParameter, roomIDParameter, fromDateParameter, toDateParameter, rateParameter, bookedFromDateParameter, bookedToDateParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetAdmitDateByID_Result> SpGetAdmitDateByID(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAdmitDateByID_Result>("SpGetAdmitDateByID", iDParameter);
        }
    
        public virtual int SpCreatePatientDiagnosis(Nullable<int> appointmentProcessID, Nullable<int> patientID, Nullable<System.DateTime> date, Nullable<int> iD, string name, string description, Nullable<int> value, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePatientDiagnosis", appointmentProcessIDParameter, patientIDParameter, dateParameter, iDParameter, nameParameter, descriptionParameter, valueParameter, createdUserIDParameter, finYearParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual int SpCreateIPExamination(Nullable<int> iPID, Nullable<int> patientID, Nullable<System.DateTime> date, Nullable<int> iD, string name, string description, Nullable<int> value, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateIPExamination", iPIDParameter, patientIDParameter, dateParameter, iDParameter, nameParameter, descriptionParameter, valueParameter, createdUserIDParameter, finYearParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual int SpDeleteAllDataByID(Nullable<int> iPID, Nullable<int> patientID, Nullable<int> finYear, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpDeleteAllDataByID", iPIDParameter, patientIDParameter, finYearParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual int SpCreateIPPatientMedicinesItems(Nullable<int> transID, Nullable<int> medicineID, Nullable<decimal> quantity, Nullable<int> unitID)
        {
            var transIDParameter = transID.HasValue ?
                new ObjectParameter("TransID", transID) :
                new ObjectParameter("TransID", typeof(int));
    
            var medicineIDParameter = medicineID.HasValue ?
                new ObjectParameter("MedicineID", medicineID) :
                new ObjectParameter("MedicineID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateIPPatientMedicinesItems", transIDParameter, medicineIDParameter, quantityParameter, unitIDParameter);
        }
    
        public virtual ObjectResult<SpGetVitalChartByDate_Result> SpGetVitalChartByDate(Nullable<int> patientID, Nullable<System.DateTime> date)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetVitalChartByDate_Result>("SpGetVitalChartByDate", patientIDParameter, dateParameter);
        }
    
        public virtual ObjectResult<SpGetMedicineDetailsByID_Result> SpGetMedicineDetailsByID(Nullable<int> dischargeSummaryID, Nullable<int> patientID, Nullable<int> iPID, Nullable<int> locationID, Nullable<int> appliationID)
        {
            var dischargeSummaryIDParameter = dischargeSummaryID.HasValue ?
                new ObjectParameter("DischargeSummaryID", dischargeSummaryID) :
                new ObjectParameter("DischargeSummaryID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var appliationIDParameter = appliationID.HasValue ?
                new ObjectParameter("AppliationID", appliationID) :
                new ObjectParameter("AppliationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetMedicineDetailsByID_Result>("SpGetMedicineDetailsByID", dischargeSummaryIDParameter, patientIDParameter, iPIDParameter, locationIDParameter, appliationIDParameter);
        }
    
        public virtual ObjectResult<SpGetTreatmentScheduleList_Result> SpGetTreatmentScheduleList(string type, string dateHint, string startTimeHint, string endTimeHint, string treatmentHint, string patientHint, string doctorHint, string therapistHint, string treatmentRoomHint, string statusHint, string medicinesHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var dateHintParameter = dateHint != null ?
                new ObjectParameter("DateHint", dateHint) :
                new ObjectParameter("DateHint", typeof(string));
    
            var startTimeHintParameter = startTimeHint != null ?
                new ObjectParameter("StartTimeHint", startTimeHint) :
                new ObjectParameter("StartTimeHint", typeof(string));
    
            var endTimeHintParameter = endTimeHint != null ?
                new ObjectParameter("EndTimeHint", endTimeHint) :
                new ObjectParameter("EndTimeHint", typeof(string));
    
            var treatmentHintParameter = treatmentHint != null ?
                new ObjectParameter("TreatmentHint", treatmentHint) :
                new ObjectParameter("TreatmentHint", typeof(string));
    
            var patientHintParameter = patientHint != null ?
                new ObjectParameter("PatientHint", patientHint) :
                new ObjectParameter("PatientHint", typeof(string));
    
            var doctorHintParameter = doctorHint != null ?
                new ObjectParameter("DoctorHint", doctorHint) :
                new ObjectParameter("DoctorHint", typeof(string));
    
            var therapistHintParameter = therapistHint != null ?
                new ObjectParameter("TherapistHint", therapistHint) :
                new ObjectParameter("TherapistHint", typeof(string));
    
            var treatmentRoomHintParameter = treatmentRoomHint != null ?
                new ObjectParameter("TreatmentRoomHint", treatmentRoomHint) :
                new ObjectParameter("TreatmentRoomHint", typeof(string));
    
            var statusHintParameter = statusHint != null ?
                new ObjectParameter("StatusHint", statusHint) :
                new ObjectParameter("StatusHint", typeof(string));
    
            var medicinesHintParameter = medicinesHint != null ?
                new ObjectParameter("MedicinesHint", medicinesHint) :
                new ObjectParameter("MedicinesHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetTreatmentScheduleList_Result>("SpGetTreatmentScheduleList", typeParameter, dateHintParameter, startTimeHintParameter, endTimeHintParameter, treatmentHintParameter, patientHintParameter, doctorHintParameter, therapistHintParameter, treatmentRoomHintParameter, statusHintParameter, medicinesHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetIPTreatmentListByID_Result> SpGetIPTreatmentListByID(Nullable<int> patientID, Nullable<int> iPID, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetIPTreatmentListByID_Result>("SpGetIPTreatmentListByID", patientIDParameter, iPIDParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateIPPatientReports(Nullable<int> iPID, Nullable<int> patientID, Nullable<System.DateTime> date, Nullable<int> documentID, string name, string description, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var documentIDParameter = documentID.HasValue ?
                new ObjectParameter("DocumentID", documentID) :
                new ObjectParameter("DocumentID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateIPPatientReports", iPIDParameter, patientIDParameter, dateParameter, documentIDParameter, nameParameter, descriptionParameter, createdUserIDParameter, finYearParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual ObjectResult<SpGetAllocatedRoom_Result> SpGetAllocatedRoom(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAllocatedRoom_Result>("SpGetAllocatedRoom", iDParameter);
        }
    
        public virtual ObjectResult<SpGetRoomByID_Result> SpGetRoomByID(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetRoomByID_Result>("SpGetRoomByID", iDParameter);
        }
    
        public virtual int SpCreateUsedTreatmentMedicines(Nullable<int> treatmentScheduleID, Nullable<int> itemID, Nullable<int> unitID, Nullable<decimal> qty, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter isStok)
        {
            var treatmentScheduleIDParameter = treatmentScheduleID.HasValue ?
                new ObjectParameter("TreatmentScheduleID", treatmentScheduleID) :
                new ObjectParameter("TreatmentScheduleID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(decimal));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateUsedTreatmentMedicines", treatmentScheduleIDParameter, itemIDParameter, unitIDParameter, qtyParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, isStok);
        }
    
        public virtual ObjectResult<SpGetPatientsReferedToIP_Result> SpGetPatientsReferedToIP(string transNoHint, string patientNameHint, string doctorNameHint, string admissionDateHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var transNoHintParameter = transNoHint != null ?
                new ObjectParameter("TransNoHint", transNoHint) :
                new ObjectParameter("TransNoHint", typeof(string));
    
            var patientNameHintParameter = patientNameHint != null ?
                new ObjectParameter("PatientNameHint", patientNameHint) :
                new ObjectParameter("PatientNameHint", typeof(string));
    
            var doctorNameHintParameter = doctorNameHint != null ?
                new ObjectParameter("DoctorNameHint", doctorNameHint) :
                new ObjectParameter("DoctorNameHint", typeof(string));
    
            var admissionDateHintParameter = admissionDateHint != null ?
                new ObjectParameter("AdmissionDateHint", admissionDateHint) :
                new ObjectParameter("AdmissionDateHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPatientsReferedToIP_Result>("SpGetPatientsReferedToIP", transNoHintParameter, patientNameHintParameter, doctorNameHintParameter, admissionDateHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetMedicineListByID_Result> SpGetMedicineListByID(Nullable<int> iD, Nullable<int> finYear, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetMedicineListByID_Result>("SpGetMedicineListByID", iDParameter, finYearParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetTreatmentMedicinesByScheduleID_Result> SpGetTreatmentMedicinesByScheduleID(Nullable<int> treatmentScheduleID, Nullable<int> treatmentProcessID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var treatmentScheduleIDParameter = treatmentScheduleID.HasValue ?
                new ObjectParameter("TreatmentScheduleID", treatmentScheduleID) :
                new ObjectParameter("TreatmentScheduleID", typeof(int));
    
            var treatmentProcessIDParameter = treatmentProcessID.HasValue ?
                new ObjectParameter("TreatmentProcessID", treatmentProcessID) :
                new ObjectParameter("TreatmentProcessID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetTreatmentMedicinesByScheduleID_Result>("SpGetTreatmentMedicinesByScheduleID", treatmentScheduleIDParameter, treatmentProcessIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetIPExaminationDetailsByID_Result> SpGetIPExaminationDetailsByID(Nullable<int> iD, Nullable<int> iPID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetIPExaminationDetailsByID_Result>("SpGetIPExaminationDetailsByID", iDParameter, iPIDParameter, applicationIDParameter);
        }
    
        public virtual int SpDeleteMedicinesByID(Nullable<int> patientID, Nullable<int> appointmentProcessID, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpDeleteMedicinesByID", patientIDParameter, appointmentProcessIDParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual int SpDeleteVitalchartByID(Nullable<int> appointmentProcessID, Nullable<int> patientID, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpDeleteVitalchartByID", appointmentProcessIDParameter, patientIDParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual int SpDeleteReportByID(Nullable<int> patientID, Nullable<int> appointmentProcessID, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpDeleteReportByID", patientIDParameter, appointmentProcessIDParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual int SpDeleteTreatmentByID(Nullable<int> patientID, Nullable<int> appointmentProcessID, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpDeleteTreatmentByID", patientIDParameter, appointmentProcessIDParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual int SpCreateIPMedicineConsumptionChart(Nullable<int> patientID, Nullable<int> appointmentProcessID, Nullable<int> patientmedicinesID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            var patientmedicinesIDParameter = patientmedicinesID.HasValue ?
                new ObjectParameter("PatientmedicinesID", patientmedicinesID) :
                new ObjectParameter("PatientmedicinesID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateIPMedicineConsumptionChart", patientIDParameter, appointmentProcessIDParameter, patientmedicinesIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateIPMedicineConsumptionChart(Nullable<int> patientID, Nullable<int> appointmentProcessID, Nullable<int> patientmedicinesID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            var patientmedicinesIDParameter = patientmedicinesID.HasValue ?
                new ObjectParameter("PatientmedicinesID", patientmedicinesID) :
                new ObjectParameter("PatientmedicinesID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateIPMedicineConsumptionChart", patientIDParameter, appointmentProcessIDParameter, patientmedicinesIDParameter);
        }
    
        public virtual ObjectResult<SpGeMedicinesForConsumption_Result> SpGeMedicinesForConsumption(Nullable<int> patientMedicinesID, Nullable<int> storeID, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var patientMedicinesIDParameter = patientMedicinesID.HasValue ?
                new ObjectParameter("PatientMedicinesID", patientMedicinesID) :
                new ObjectParameter("PatientMedicinesID", typeof(int));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGeMedicinesForConsumption_Result>("SpGeMedicinesForConsumption", patientMedicinesIDParameter, storeIDParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPhysiotherapyAutoComplete_Result> SpGetPhysiotherapyAutoComplete(string hint)
        {
            var hintParameter = hint != null ?
                new ObjectParameter("Hint", hint) :
                new ObjectParameter("Hint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPhysiotherapyAutoComplete_Result>("SpGetPhysiotherapyAutoComplete", hintParameter);
        }
    
        public virtual int SpCreateConsumedIPMedicines(Nullable<int> medicineConsumptionID, Nullable<int> storeID, Nullable<int> itemID, Nullable<int> unitID, Nullable<decimal> qty, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter isStok)
        {
            var medicineConsumptionIDParameter = medicineConsumptionID.HasValue ?
                new ObjectParameter("MedicineConsumptionID", medicineConsumptionID) :
                new ObjectParameter("MedicineConsumptionID", typeof(int));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(decimal));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateConsumedIPMedicines", medicineConsumptionIDParameter, storeIDParameter, itemIDParameter, unitIDParameter, qtyParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, isStok);
        }
    
        public virtual ObjectResult<SpGetXrayItemsAutoComplete_Result> SpGetXrayItemsAutoComplete(string hint)
        {
            var hintParameter = hint != null ?
                new ObjectParameter("Hint", hint) :
                new ObjectParameter("Hint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetXrayItemsAutoComplete_Result>("SpGetXrayItemsAutoComplete", hintParameter);
        }
    
        public virtual int SpUpdateIPMedicineConsumption(Nullable<int> medicineConsumptionID, string actualTime, string status)
        {
            var medicineConsumptionIDParameter = medicineConsumptionID.HasValue ?
                new ObjectParameter("MedicineConsumptionID", medicineConsumptionID) :
                new ObjectParameter("MedicineConsumptionID", typeof(int));
    
            var actualTimeParameter = actualTime != null ?
                new ObjectParameter("ActualTime", actualTime) :
                new ObjectParameter("ActualTime", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateIPMedicineConsumption", medicineConsumptionIDParameter, actualTimeParameter, statusParameter);
        }
    
        public virtual int SpCreatePatientPhysiotherapy(Nullable<System.DateTime> date, Nullable<int> patientID, Nullable<int> iPID, Nullable<int> itemID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePatientPhysiotherapy", dateParameter, patientIDParameter, iPIDParameter, itemIDParameter, startDateParameter, endDateParameter, createdUserIDParameter, finYearParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual ObjectResult<SpGetMedicineConsumptionListForDataTable_Result> SpGetMedicineConsumptionListForDataTable(string type, string dateHint, string timeHint, string roomHint, string doctorHint, string medicinesHint, string patientHint, string statusHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var dateHintParameter = dateHint != null ?
                new ObjectParameter("DateHint", dateHint) :
                new ObjectParameter("DateHint", typeof(string));
    
            var timeHintParameter = timeHint != null ?
                new ObjectParameter("TimeHint", timeHint) :
                new ObjectParameter("TimeHint", typeof(string));
    
            var roomHintParameter = roomHint != null ?
                new ObjectParameter("RoomHint", roomHint) :
                new ObjectParameter("RoomHint", typeof(string));
    
            var doctorHintParameter = doctorHint != null ?
                new ObjectParameter("DoctorHint", doctorHint) :
                new ObjectParameter("DoctorHint", typeof(string));
    
            var medicinesHintParameter = medicinesHint != null ?
                new ObjectParameter("MedicinesHint", medicinesHint) :
                new ObjectParameter("MedicinesHint", typeof(string));
    
            var patientHintParameter = patientHint != null ?
                new ObjectParameter("PatientHint", patientHint) :
                new ObjectParameter("PatientHint", typeof(string));
    
            var statusHintParameter = statusHint != null ?
                new ObjectParameter("StatusHint", statusHint) :
                new ObjectParameter("StatusHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetMedicineConsumptionListForDataTable_Result>("SpGetMedicineConsumptionListForDataTable", typeParameter, dateHintParameter, timeHintParameter, roomHintParameter, doctorHintParameter, medicinesHintParameter, patientHintParameter, statusHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetMedicineItemsForConsumption_Result> SpGetMedicineItemsForConsumption(Nullable<int> patientMedicinesID, Nullable<int> storeID, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var patientMedicinesIDParameter = patientMedicinesID.HasValue ?
                new ObjectParameter("PatientMedicinesID", patientMedicinesID) :
                new ObjectParameter("PatientMedicinesID", typeof(int));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetMedicineItemsForConsumption_Result>("SpGetMedicineItemsForConsumption", patientMedicinesIDParameter, storeIDParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreatePatientRoundsDetails(Nullable<System.DateTime> date, Nullable<int> paientID, Nullable<int> iPID, string remarks, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var paientIDParameter = paientID.HasValue ?
                new ObjectParameter("PaientID", paientID) :
                new ObjectParameter("PaientID", typeof(int));
    
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePatientRoundsDetails", dateParameter, paientIDParameter, iPIDParameter, remarksParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetIPRounds_Result> SpGetIPRounds(Nullable<int> patientID, Nullable<int> iPID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetIPRounds_Result>("SpGetIPRounds", patientIDParameter, iPIDParameter);
        }
    
        public virtual ObjectResult<SpGetMedicinesForConsumption_Result> SpGetMedicinesForConsumption(Nullable<System.DateTime> date, Nullable<int> roomID, string partOfTheDay, Nullable<int> wareHouseID, Nullable<int> createdUserID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var partOfTheDayParameter = partOfTheDay != null ?
                new ObjectParameter("PartOfTheDay", partOfTheDay) :
                new ObjectParameter("PartOfTheDay", typeof(string));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetMedicinesForConsumption_Result>("SpGetMedicinesForConsumption", dateParameter, roomIDParameter, partOfTheDayParameter, wareHouseIDParameter, createdUserIDParameter);
        }
    
        public virtual ObjectResult<SpGetReservationDetailsByID_Result> SpGetReservationDetailsByID(Nullable<int> reservationID, Nullable<int> appointmentProcessID, Nullable<int> applicationID)
        {
            var reservationIDParameter = reservationID.HasValue ?
                new ObjectParameter("ReservationID", reservationID) :
                new ObjectParameter("ReservationID", typeof(int));
    
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetReservationDetailsByID_Result>("SpGetReservationDetailsByID", reservationIDParameter, appointmentProcessIDParameter, applicationIDParameter);
        }
    
        public virtual int SpGetAppointmentProcessID(Nullable<int> patientID, Nullable<int> appointmentScheduleItemID, Nullable<int> locationID, ObjectParameter iD)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var appointmentScheduleItemIDParameter = appointmentScheduleItemID.HasValue ?
                new ObjectParameter("AppointmentScheduleItemID", appointmentScheduleItemID) :
                new ObjectParameter("AppointmentScheduleItemID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetAppointmentProcessID", patientIDParameter, appointmentScheduleItemIDParameter, locationIDParameter, iD);
        }
    
        public virtual int SpUpdatePatientMedicines(Nullable<int> appointmentProcessID, Nullable<int> patientMedicineID, Nullable<System.DateTime> endDate, string eveningTime, Nullable<int> instructionsID, Nullable<bool> isevening, Nullable<bool> isMorning, Nullable<bool> isNight, Nullable<bool> isNoon, string morningTime, string nightTime, string noonTime, Nullable<System.DateTime> startDate, Nullable<int> noofDays, string description, Nullable<bool> isEmptyStomach, Nullable<bool> isAfterFood, Nullable<bool> isBeforeFood, Nullable<int> frequency, Nullable<int> modeOfAdministrationID, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> applicationID, Nullable<int> locationID, ObjectParameter transID)
        {
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            var patientMedicineIDParameter = patientMedicineID.HasValue ?
                new ObjectParameter("PatientMedicineID", patientMedicineID) :
                new ObjectParameter("PatientMedicineID", typeof(int));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var eveningTimeParameter = eveningTime != null ?
                new ObjectParameter("EveningTime", eveningTime) :
                new ObjectParameter("EveningTime", typeof(string));
    
            var instructionsIDParameter = instructionsID.HasValue ?
                new ObjectParameter("InstructionsID", instructionsID) :
                new ObjectParameter("InstructionsID", typeof(int));
    
            var iseveningParameter = isevening.HasValue ?
                new ObjectParameter("Isevening", isevening) :
                new ObjectParameter("Isevening", typeof(bool));
    
            var isMorningParameter = isMorning.HasValue ?
                new ObjectParameter("IsMorning", isMorning) :
                new ObjectParameter("IsMorning", typeof(bool));
    
            var isNightParameter = isNight.HasValue ?
                new ObjectParameter("IsNight", isNight) :
                new ObjectParameter("IsNight", typeof(bool));
    
            var isNoonParameter = isNoon.HasValue ?
                new ObjectParameter("IsNoon", isNoon) :
                new ObjectParameter("IsNoon", typeof(bool));
    
            var morningTimeParameter = morningTime != null ?
                new ObjectParameter("MorningTime", morningTime) :
                new ObjectParameter("MorningTime", typeof(string));
    
            var nightTimeParameter = nightTime != null ?
                new ObjectParameter("NightTime", nightTime) :
                new ObjectParameter("NightTime", typeof(string));
    
            var noonTimeParameter = noonTime != null ?
                new ObjectParameter("NoonTime", noonTime) :
                new ObjectParameter("NoonTime", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var noofDaysParameter = noofDays.HasValue ?
                new ObjectParameter("NoofDays", noofDays) :
                new ObjectParameter("NoofDays", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var isEmptyStomachParameter = isEmptyStomach.HasValue ?
                new ObjectParameter("IsEmptyStomach", isEmptyStomach) :
                new ObjectParameter("IsEmptyStomach", typeof(bool));
    
            var isAfterFoodParameter = isAfterFood.HasValue ?
                new ObjectParameter("IsAfterFood", isAfterFood) :
                new ObjectParameter("IsAfterFood", typeof(bool));
    
            var isBeforeFoodParameter = isBeforeFood.HasValue ?
                new ObjectParameter("IsBeforeFood", isBeforeFood) :
                new ObjectParameter("IsBeforeFood", typeof(bool));
    
            var frequencyParameter = frequency.HasValue ?
                new ObjectParameter("Frequency", frequency) :
                new ObjectParameter("Frequency", typeof(int));
    
            var modeOfAdministrationIDParameter = modeOfAdministrationID.HasValue ?
                new ObjectParameter("ModeOfAdministrationID", modeOfAdministrationID) :
                new ObjectParameter("ModeOfAdministrationID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdatePatientMedicines", appointmentProcessIDParameter, patientMedicineIDParameter, endDateParameter, eveningTimeParameter, instructionsIDParameter, iseveningParameter, isMorningParameter, isNightParameter, isNoonParameter, morningTimeParameter, nightTimeParameter, noonTimeParameter, startDateParameter, noofDaysParameter, descriptionParameter, isEmptyStomachParameter, isAfterFoodParameter, isBeforeFoodParameter, frequencyParameter, modeOfAdministrationIDParameter, createdUserIDParameter, finYearParameter, applicationIDParameter, locationIDParameter, transID);
        }
    
        public virtual int SpCreateRoomChange(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> patientID, Nullable<int> doctorID, Nullable<int> roomID, Nullable<int> roomStatusID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var roomStatusIDParameter = roomStatusID.HasValue ?
                new ObjectParameter("RoomStatusID", roomStatusID) :
                new ObjectParameter("RoomStatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateRoomChange", fromDateParameter, toDateParameter, patientIDParameter, doctorIDParameter, roomIDParameter, roomStatusIDParameter);
        }
    
        public virtual ObjectResult<SpGetAllocatedRoomDetailsByID_Result> SpGetAllocatedRoomDetailsByID(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAllocatedRoomDetailsByID_Result>("SpGetAllocatedRoomDetailsByID", iDParameter);
        }
    
        public virtual ObjectResult<SpGetAllocatedRoomDetailsList_Result> SpGetAllocatedRoomDetailsList(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAllocatedRoomDetailsList_Result>("SpGetAllocatedRoomDetailsList", iDParameter);
        }
    
        public virtual int SpCreateTreatmentScheduleTrans1(Nullable<int> transID, Nullable<int> patientID, Nullable<int> treatmentID, Nullable<int> noOfTreatment, Nullable<int> treatmentRoomID, string startTime, Nullable<int> durationID, Nullable<int> therapistID, Nullable<int> doctorID, Nullable<int> patientTreatmentID)
        {
            var transIDParameter = transID.HasValue ?
                new ObjectParameter("TransID", transID) :
                new ObjectParameter("TransID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var treatmentIDParameter = treatmentID.HasValue ?
                new ObjectParameter("TreatmentID", treatmentID) :
                new ObjectParameter("TreatmentID", typeof(int));
    
            var noOfTreatmentParameter = noOfTreatment.HasValue ?
                new ObjectParameter("NoOfTreatment", noOfTreatment) :
                new ObjectParameter("NoOfTreatment", typeof(int));
    
            var treatmentRoomIDParameter = treatmentRoomID.HasValue ?
                new ObjectParameter("TreatmentRoomID", treatmentRoomID) :
                new ObjectParameter("TreatmentRoomID", typeof(int));
    
            var startTimeParameter = startTime != null ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(string));
    
            var durationIDParameter = durationID.HasValue ?
                new ObjectParameter("DurationID", durationID) :
                new ObjectParameter("DurationID", typeof(int));
    
            var therapistIDParameter = therapistID.HasValue ?
                new ObjectParameter("TherapistID", therapistID) :
                new ObjectParameter("TherapistID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var patientTreatmentIDParameter = patientTreatmentID.HasValue ?
                new ObjectParameter("PatientTreatmentID", patientTreatmentID) :
                new ObjectParameter("PatientTreatmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateTreatmentScheduleTrans1", transIDParameter, patientIDParameter, treatmentIDParameter, noOfTreatmentParameter, treatmentRoomIDParameter, startTimeParameter, durationIDParameter, therapistIDParameter, doctorIDParameter, patientTreatmentIDParameter);
        }
    
        public virtual ObjectResult<SpGetTreatmentProcessList_Result> SpGetTreatmentProcessList(string type, string dateHint, string startTimeHint, string endTimeHint, string treatmentRoomHint, string doctorHint, string medicinesHint, string patientHint, string treatmentHint, string statusHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var dateHintParameter = dateHint != null ?
                new ObjectParameter("DateHint", dateHint) :
                new ObjectParameter("DateHint", typeof(string));
    
            var startTimeHintParameter = startTimeHint != null ?
                new ObjectParameter("StartTimeHint", startTimeHint) :
                new ObjectParameter("StartTimeHint", typeof(string));
    
            var endTimeHintParameter = endTimeHint != null ?
                new ObjectParameter("EndTimeHint", endTimeHint) :
                new ObjectParameter("EndTimeHint", typeof(string));
    
            var treatmentRoomHintParameter = treatmentRoomHint != null ?
                new ObjectParameter("TreatmentRoomHint", treatmentRoomHint) :
                new ObjectParameter("TreatmentRoomHint", typeof(string));
    
            var doctorHintParameter = doctorHint != null ?
                new ObjectParameter("DoctorHint", doctorHint) :
                new ObjectParameter("DoctorHint", typeof(string));
    
            var medicinesHintParameter = medicinesHint != null ?
                new ObjectParameter("MedicinesHint", medicinesHint) :
                new ObjectParameter("MedicinesHint", typeof(string));
    
            var patientHintParameter = patientHint != null ?
                new ObjectParameter("PatientHint", patientHint) :
                new ObjectParameter("PatientHint", typeof(string));
    
            var treatmentHintParameter = treatmentHint != null ?
                new ObjectParameter("TreatmentHint", treatmentHint) :
                new ObjectParameter("TreatmentHint", typeof(string));
    
            var statusHintParameter = statusHint != null ?
                new ObjectParameter("StatusHint", statusHint) :
                new ObjectParameter("StatusHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetTreatmentProcessList_Result>("SpGetTreatmentProcessList", typeParameter, dateHintParameter, startTimeHintParameter, endTimeHintParameter, treatmentRoomHintParameter, doctorHintParameter, medicinesHintParameter, patientHintParameter, treatmentHintParameter, statusHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetTreatmentScheduleDetails1_Result> SpGetTreatmentScheduleDetails1(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetTreatmentScheduleDetails1_Result>("SpGetTreatmentScheduleDetails1", iDParameter);
        }
    
        public virtual ObjectResult<SpGetRoomReservationByID_Result> SpGetRoomReservationByID(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetRoomReservationByID_Result>("SpGetRoomReservationByID", iDParameter);
        }
    
        public virtual int SpCreateRoomBill(Nullable<int> patientID, Nullable<int> iPID, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateRoomBill", patientIDParameter, iPIDParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateLabTest(Nullable<int> iD, Nullable<int> itemID, string observeValue, string status, Nullable<System.DateTime> date, Nullable<int> createdUserID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var observeValueParameter = observeValue != null ?
                new ObjectParameter("ObserveValue", observeValue) :
                new ObjectParameter("ObserveValue", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateLabTest", iDParameter, itemIDParameter, observeValueParameter, statusParameter, dateParameter, createdUserIDParameter);
        }
    
        public virtual int SpDeleteAllLabItemsByID(Nullable<int> oPID, Nullable<int> finYear, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var oPIDParameter = oPID.HasValue ?
                new ObjectParameter("OPID", oPID) :
                new ObjectParameter("OPID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpDeleteAllLabItemsByID", oPIDParameter, finYearParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual ObjectResult<SpGetLabTestResultList_Result> SpGetLabTestResultList(Nullable<int> oPID, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var oPIDParameter = oPID.HasValue ?
                new ObjectParameter("OPID", oPID) :
                new ObjectParameter("OPID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetLabTestResultList_Result>("SpGetLabTestResultList", oPIDParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SpGetCompletedLabTest(Nullable<int> oPID, Nullable<int> applicationID)
        {
            var oPIDParameter = oPID.HasValue ?
                new ObjectParameter("OPID", oPID) :
                new ObjectParameter("OPID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SpGetCompletedLabTest", oPIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetInPatientList_Result> SpGetInPatientList(string patient, string room, string admissionDate, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var patientParameter = patient != null ?
                new ObjectParameter("Patient", patient) :
                new ObjectParameter("Patient", typeof(string));
    
            var roomParameter = room != null ?
                new ObjectParameter("Room", room) :
                new ObjectParameter("Room", typeof(string));
    
            var admissionDateParameter = admissionDate != null ?
                new ObjectParameter("AdmissionDate", admissionDate) :
                new ObjectParameter("AdmissionDate", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetInPatientList_Result>("SpGetInPatientList", patientParameter, roomParameter, admissionDateParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPatientDetailForXray_Result> SpGetPatientDetailForXray(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPatientDetailForXray_Result>("SpGetPatientDetailForXray", iDParameter);
        }
    
        public virtual ObjectResult<SpGetX_rayItems_Result> SpGetX_rayItems(Nullable<int> appointmentProcessID, Nullable<int> applicationID)
        {
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetX_rayItems_Result>("SpGetX_rayItems", appointmentProcessIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateXray(Nullable<int> iD, Nullable<int> itemID, Nullable<int> documentID, string remark, string status, Nullable<System.DateTime> date, Nullable<int> createdUserID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var documentIDParameter = documentID.HasValue ?
                new ObjectParameter("DocumentID", documentID) :
                new ObjectParameter("DocumentID", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateXray", iDParameter, itemIDParameter, documentIDParameter, remarkParameter, statusParameter, dateParameter, createdUserIDParameter);
        }
    
        public virtual int SpDeleteAllXrayItemsByID(Nullable<int> oPID, Nullable<int> finYear, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var oPIDParameter = oPID.HasValue ?
                new ObjectParameter("OPID", oPID) :
                new ObjectParameter("OPID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpDeleteAllXrayItemsByID", oPIDParameter, finYearParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPrescribedXrayTest_Result> SpGetPrescribedXrayTest(Nullable<int> oPID, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var oPIDParameter = oPID.HasValue ?
                new ObjectParameter("OPID", oPID) :
                new ObjectParameter("OPID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPrescribedXrayTest_Result>("SpGetPrescribedXrayTest", oPIDParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual ObjectResult<SpGetXrayResult_Result> SpGetXrayResult(Nullable<int> oPID, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var oPIDParameter = oPID.HasValue ?
                new ObjectParameter("OPID", oPID) :
                new ObjectParameter("OPID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetXrayResult_Result>("SpGetXrayResult", oPIDParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual ObjectResult<SpGetLabTestItems_Result> SpGetLabTestItems(Nullable<int> appointmentProcessID)
        {
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetLabTestItems_Result>("SpGetLabTestItems", appointmentProcessIDParameter);
        }
    
        public virtual ObjectResult<SpGetXrayItems_Result> SpGetXrayItems(Nullable<int> appointmentProcessID, Nullable<int> applicationID)
        {
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetXrayItems_Result>("SpGetXrayItems", appointmentProcessIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateBillType(Nullable<int> billTypeID, string type, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> finYear)
        {
            var billTypeIDParameter = billTypeID.HasValue ?
                new ObjectParameter("BillTypeID", billTypeID) :
                new ObjectParameter("BillTypeID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateBillType", billTypeIDParameter, typeParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter, finYearParameter);
        }
    
        public virtual int SpDeleteAllBillType(Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> finYear)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpDeleteAllBillType", locationIDParameter, applicationIDParameter, finYearParameter);
        }
    
        public virtual ObjectResult<SpGetBillTypeItems_Result> SpGetBillTypeItems(string type, Nullable<int> locationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetBillTypeItems_Result>("SpGetBillTypeItems", typeParameter, locationIDParameter);
        }
    
        public virtual ObjectResult<SpGetLabAndXrayDetails_Result> SpGetLabAndXrayDetails(Nullable<int> patientID, Nullable<int> iPID, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetLabAndXrayDetails_Result>("SpGetLabAndXrayDetails", patientIDParameter, iPIDParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual int SpCreateDischarageSummary(Nullable<int> iPID, string courseInHospital, string conditionAtDischarge, string dietAdvice)
        {
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var courseInHospitalParameter = courseInHospital != null ?
                new ObjectParameter("CourseInHospital", courseInHospital) :
                new ObjectParameter("CourseInHospital", typeof(string));
    
            var conditionAtDischargeParameter = conditionAtDischarge != null ?
                new ObjectParameter("ConditionAtDischarge", conditionAtDischarge) :
                new ObjectParameter("ConditionAtDischarge", typeof(string));
    
            var dietAdviceParameter = dietAdvice != null ?
                new ObjectParameter("DietAdvice", dietAdvice) :
                new ObjectParameter("DietAdvice", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateDischarageSummary", iPIDParameter, courseInHospitalParameter, conditionAtDischargeParameter, dietAdviceParameter);
        }
    
        public virtual ObjectResult<SpGetDischargeMedicineDetailsByID_Result> SpGetDischargeMedicineDetailsByID(Nullable<int> patientID, Nullable<int> iPID, Nullable<int> locationID, Nullable<int> appliationID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var appliationIDParameter = appliationID.HasValue ?
                new ObjectParameter("AppliationID", appliationID) :
                new ObjectParameter("AppliationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDischargeMedicineDetailsByID_Result>("SpGetDischargeMedicineDetailsByID", patientIDParameter, iPIDParameter, locationIDParameter, appliationIDParameter);
        }
    
        public virtual ObjectResult<SpGetDischargeSummaryDetails_Result> SpGetDischargeSummaryDetails(Nullable<int> patientID, Nullable<int> iPID, Nullable<int> locationID, Nullable<int> appliationID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var appliationIDParameter = appliationID.HasValue ?
                new ObjectParameter("AppliationID", appliationID) :
                new ObjectParameter("AppliationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDischargeSummaryDetails_Result>("SpGetDischargeSummaryDetails", patientIDParameter, iPIDParameter, locationIDParameter, appliationIDParameter);
        }
    
        public virtual ObjectResult<SpGetDischargeAdvicedInpatientList_Result> SpGetDischargeAdvicedInpatientList(string patient, string room, string admissionDate, string doctor, string type, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var patientParameter = patient != null ?
                new ObjectParameter("Patient", patient) :
                new ObjectParameter("Patient", typeof(string));
    
            var roomParameter = room != null ?
                new ObjectParameter("Room", room) :
                new ObjectParameter("Room", typeof(string));
    
            var admissionDateParameter = admissionDate != null ?
                new ObjectParameter("AdmissionDate", admissionDate) :
                new ObjectParameter("AdmissionDate", typeof(string));
    
            var doctorParameter = doctor != null ?
                new ObjectParameter("Doctor", doctor) :
                new ObjectParameter("Doctor", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDischargeAdvicedInpatientList_Result>("SpGetDischargeAdvicedInpatientList", patientParameter, roomParameter, admissionDateParameter, doctorParameter, typeParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateInPatient(Nullable<int> iPID, Nullable<bool> isDischargeAdviced, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var isDischargeAdvicedParameter = isDischargeAdviced.HasValue ?
                new ObjectParameter("IsDischargeAdviced", isDischargeAdviced) :
                new ObjectParameter("IsDischargeAdviced", typeof(bool));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateInPatient", iPIDParameter, isDischargeAdvicedParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetDischargedPatientDetailsForPrint_Result> SpGetDischargedPatientDetailsForPrint(Nullable<int> iPID, Nullable<int> applicationID, Nullable<int> locationID, Nullable<int> finYear)
        {
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDischargedPatientDetailsForPrint_Result>("SpGetDischargedPatientDetailsForPrint", iPIDParameter, applicationIDParameter, locationIDParameter, finYearParameter);
        }
    
        public virtual ObjectResult<SpGetDischargeMedicine_Result> SpGetDischargeMedicine(Nullable<int> iPID, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> finYear)
        {
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDischargeMedicine_Result>("SpGetDischargeMedicine", iPIDParameter, locationIDParameter, applicationIDParameter, finYearParameter);
        }
    
        public virtual int SpDischargeByIPID(Nullable<int> iPID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpDischargeByIPID", iPIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetDischargeMedicineList_Result> SpGetDischargeMedicineList(Nullable<int> iPID, Nullable<int> applicationID, Nullable<int> locationID, Nullable<int> finyear)
        {
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var finyearParameter = finyear.HasValue ?
                new ObjectParameter("Finyear", finyear) :
                new ObjectParameter("Finyear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDischargeMedicineList_Result>("SpGetDischargeMedicineList", iPIDParameter, applicationIDParameter, locationIDParameter, finyearParameter);
        }
    
        public virtual ObjectResult<SpGetInternalMedicines_Result> SpGetInternalMedicines(Nullable<int> iPID, Nullable<int> applicationID, Nullable<int> locationID, Nullable<int> finyear)
        {
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var finyearParameter = finyear.HasValue ?
                new ObjectParameter("Finyear", finyear) :
                new ObjectParameter("Finyear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetInternalMedicines_Result>("SpGetInternalMedicines", iPIDParameter, applicationIDParameter, locationIDParameter, finyearParameter);
        }
    
        public virtual int SpIsBillPaid(Nullable<int> iPID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter isBillPaid)
        {
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpIsBillPaid", iPIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, isBillPaid);
        }
    
        public virtual ObjectResult<SpGetTreatmentServices_Result> SpGetTreatmentServices(string type, Nullable<int> locationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetTreatmentServices_Result>("SpGetTreatmentServices", typeParameter, locationIDParameter);
        }
    
        public virtual int SpUpdateDischargeMedicines(Nullable<int> dischargeSummaryID, Nullable<int> patientMedicinesID, Nullable<int> iPID, Nullable<int> patientID, Nullable<System.DateTime> date, Nullable<System.DateTime> endDate, string eveningTime, Nullable<int> instructionsID, Nullable<bool> isevening, Nullable<bool> isMorning, Nullable<bool> isNight, Nullable<bool> isNoon, string morningTime, string nightTime, string noonTime, Nullable<System.DateTime> startDate, Nullable<int> noofDays, string description, Nullable<bool> isEmptyStomach, Nullable<bool> isAfterFood, Nullable<bool> isBeforeFood, Nullable<int> frequency, Nullable<int> modeOfAdministrationID, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var dischargeSummaryIDParameter = dischargeSummaryID.HasValue ?
                new ObjectParameter("DischargeSummaryID", dischargeSummaryID) :
                new ObjectParameter("DischargeSummaryID", typeof(int));
    
            var patientMedicinesIDParameter = patientMedicinesID.HasValue ?
                new ObjectParameter("PatientMedicinesID", patientMedicinesID) :
                new ObjectParameter("PatientMedicinesID", typeof(int));
    
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var eveningTimeParameter = eveningTime != null ?
                new ObjectParameter("EveningTime", eveningTime) :
                new ObjectParameter("EveningTime", typeof(string));
    
            var instructionsIDParameter = instructionsID.HasValue ?
                new ObjectParameter("InstructionsID", instructionsID) :
                new ObjectParameter("InstructionsID", typeof(int));
    
            var iseveningParameter = isevening.HasValue ?
                new ObjectParameter("Isevening", isevening) :
                new ObjectParameter("Isevening", typeof(bool));
    
            var isMorningParameter = isMorning.HasValue ?
                new ObjectParameter("IsMorning", isMorning) :
                new ObjectParameter("IsMorning", typeof(bool));
    
            var isNightParameter = isNight.HasValue ?
                new ObjectParameter("IsNight", isNight) :
                new ObjectParameter("IsNight", typeof(bool));
    
            var isNoonParameter = isNoon.HasValue ?
                new ObjectParameter("IsNoon", isNoon) :
                new ObjectParameter("IsNoon", typeof(bool));
    
            var morningTimeParameter = morningTime != null ?
                new ObjectParameter("MorningTime", morningTime) :
                new ObjectParameter("MorningTime", typeof(string));
    
            var nightTimeParameter = nightTime != null ?
                new ObjectParameter("NightTime", nightTime) :
                new ObjectParameter("NightTime", typeof(string));
    
            var noonTimeParameter = noonTime != null ?
                new ObjectParameter("NoonTime", noonTime) :
                new ObjectParameter("NoonTime", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var noofDaysParameter = noofDays.HasValue ?
                new ObjectParameter("NoofDays", noofDays) :
                new ObjectParameter("NoofDays", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var isEmptyStomachParameter = isEmptyStomach.HasValue ?
                new ObjectParameter("IsEmptyStomach", isEmptyStomach) :
                new ObjectParameter("IsEmptyStomach", typeof(bool));
    
            var isAfterFoodParameter = isAfterFood.HasValue ?
                new ObjectParameter("IsAfterFood", isAfterFood) :
                new ObjectParameter("IsAfterFood", typeof(bool));
    
            var isBeforeFoodParameter = isBeforeFood.HasValue ?
                new ObjectParameter("IsBeforeFood", isBeforeFood) :
                new ObjectParameter("IsBeforeFood", typeof(bool));
    
            var frequencyParameter = frequency.HasValue ?
                new ObjectParameter("Frequency", frequency) :
                new ObjectParameter("Frequency", typeof(int));
    
            var modeOfAdministrationIDParameter = modeOfAdministrationID.HasValue ?
                new ObjectParameter("ModeOfAdministrationID", modeOfAdministrationID) :
                new ObjectParameter("ModeOfAdministrationID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateDischargeMedicines", dischargeSummaryIDParameter, patientMedicinesIDParameter, iPIDParameter, patientIDParameter, dateParameter, endDateParameter, eveningTimeParameter, instructionsIDParameter, iseveningParameter, isMorningParameter, isNightParameter, isNoonParameter, morningTimeParameter, nightTimeParameter, noonTimeParameter, startDateParameter, noofDaysParameter, descriptionParameter, isEmptyStomachParameter, isAfterFoodParameter, isBeforeFoodParameter, frequencyParameter, modeOfAdministrationIDParameter, createdUserIDParameter, finYearParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual int SpIsAppointmentProcessed(Nullable<int> doctorID, Nullable<int> patientID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter isAppointmentProcessed)
        {
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpIsAppointmentProcessed", doctorIDParameter, patientIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, isAppointmentProcessed);
        }
    
        public virtual int SpUpdateIPPatientMedicines(Nullable<int> medicineID, Nullable<int> iPID, Nullable<int> patientID, Nullable<System.DateTime> date, Nullable<System.DateTime> endDate, string eveningTime, Nullable<int> instructionsID, Nullable<bool> isevening, Nullable<bool> isMorning, Nullable<bool> isNight, Nullable<bool> isNoon, string mngTime, string nightTime, string noonTime, Nullable<System.DateTime> startDate, Nullable<int> noofDays, string description, Nullable<bool> isEmptyStomach, Nullable<bool> isAfterFood, Nullable<bool> isBeforeFood, Nullable<int> frequency, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var medicineIDParameter = medicineID.HasValue ?
                new ObjectParameter("MedicineID", medicineID) :
                new ObjectParameter("MedicineID", typeof(int));
    
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var eveningTimeParameter = eveningTime != null ?
                new ObjectParameter("EveningTime", eveningTime) :
                new ObjectParameter("EveningTime", typeof(string));
    
            var instructionsIDParameter = instructionsID.HasValue ?
                new ObjectParameter("InstructionsID", instructionsID) :
                new ObjectParameter("InstructionsID", typeof(int));
    
            var iseveningParameter = isevening.HasValue ?
                new ObjectParameter("Isevening", isevening) :
                new ObjectParameter("Isevening", typeof(bool));
    
            var isMorningParameter = isMorning.HasValue ?
                new ObjectParameter("IsMorning", isMorning) :
                new ObjectParameter("IsMorning", typeof(bool));
    
            var isNightParameter = isNight.HasValue ?
                new ObjectParameter("IsNight", isNight) :
                new ObjectParameter("IsNight", typeof(bool));
    
            var isNoonParameter = isNoon.HasValue ?
                new ObjectParameter("IsNoon", isNoon) :
                new ObjectParameter("IsNoon", typeof(bool));
    
            var mngTimeParameter = mngTime != null ?
                new ObjectParameter("MngTime", mngTime) :
                new ObjectParameter("MngTime", typeof(string));
    
            var nightTimeParameter = nightTime != null ?
                new ObjectParameter("NightTime", nightTime) :
                new ObjectParameter("NightTime", typeof(string));
    
            var noonTimeParameter = noonTime != null ?
                new ObjectParameter("NoonTime", noonTime) :
                new ObjectParameter("NoonTime", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var noofDaysParameter = noofDays.HasValue ?
                new ObjectParameter("NoofDays", noofDays) :
                new ObjectParameter("NoofDays", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var isEmptyStomachParameter = isEmptyStomach.HasValue ?
                new ObjectParameter("IsEmptyStomach", isEmptyStomach) :
                new ObjectParameter("IsEmptyStomach", typeof(bool));
    
            var isAfterFoodParameter = isAfterFood.HasValue ?
                new ObjectParameter("IsAfterFood", isAfterFood) :
                new ObjectParameter("IsAfterFood", typeof(bool));
    
            var isBeforeFoodParameter = isBeforeFood.HasValue ?
                new ObjectParameter("IsBeforeFood", isBeforeFood) :
                new ObjectParameter("IsBeforeFood", typeof(bool));
    
            var frequencyParameter = frequency.HasValue ?
                new ObjectParameter("Frequency", frequency) :
                new ObjectParameter("Frequency", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateIPPatientMedicines", medicineIDParameter, iPIDParameter, patientIDParameter, dateParameter, endDateParameter, eveningTimeParameter, instructionsIDParameter, iseveningParameter, isMorningParameter, isNightParameter, isNoonParameter, mngTimeParameter, nightTimeParameter, noonTimeParameter, startDateParameter, noofDaysParameter, descriptionParameter, isEmptyStomachParameter, isAfterFoodParameter, isBeforeFoodParameter, frequencyParameter, createdUserIDParameter, finYearParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual ObjectResult<SpGetDischargeSummaryDetailsByID_Result> SpGetDischargeSummaryDetailsByID(Nullable<int> iPID)
        {
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDischargeSummaryDetailsByID_Result>("SpGetDischargeSummaryDetailsByID", iPIDParameter);
        }
    
        public virtual ObjectResult<SpGetTreatmentDetailsForPrint_Result> SpGetTreatmentDetailsForPrint(Nullable<int> iPID, Nullable<int> applicationID, Nullable<int> locationID, Nullable<int> finYear)
        {
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetTreatmentDetailsForPrint_Result>("SpGetTreatmentDetailsForPrint", iPIDParameter, applicationIDParameter, locationIDParameter, finYearParameter);
        }
    
        public virtual int SpCreateDischargePatientMedicines(Nullable<int> iPID, Nullable<int> patientID, Nullable<System.DateTime> date, Nullable<System.DateTime> endDate, string eveningTime, Nullable<int> instructionsID, Nullable<bool> isevening, Nullable<bool> isMorning, Nullable<bool> isNight, Nullable<bool> isNoon, string morningTime, string nightTime, string noonTime, Nullable<System.DateTime> startDate, Nullable<int> noofDays, string description, Nullable<bool> isEmptyStomach, Nullable<bool> isAfterFood, Nullable<bool> isBeforeFood, Nullable<int> frequency, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> applicationID, Nullable<int> locationID, ObjectParameter dischargeSummaryMedicineID)
        {
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var eveningTimeParameter = eveningTime != null ?
                new ObjectParameter("EveningTime", eveningTime) :
                new ObjectParameter("EveningTime", typeof(string));
    
            var instructionsIDParameter = instructionsID.HasValue ?
                new ObjectParameter("InstructionsID", instructionsID) :
                new ObjectParameter("InstructionsID", typeof(int));
    
            var iseveningParameter = isevening.HasValue ?
                new ObjectParameter("Isevening", isevening) :
                new ObjectParameter("Isevening", typeof(bool));
    
            var isMorningParameter = isMorning.HasValue ?
                new ObjectParameter("IsMorning", isMorning) :
                new ObjectParameter("IsMorning", typeof(bool));
    
            var isNightParameter = isNight.HasValue ?
                new ObjectParameter("IsNight", isNight) :
                new ObjectParameter("IsNight", typeof(bool));
    
            var isNoonParameter = isNoon.HasValue ?
                new ObjectParameter("IsNoon", isNoon) :
                new ObjectParameter("IsNoon", typeof(bool));
    
            var morningTimeParameter = morningTime != null ?
                new ObjectParameter("MorningTime", morningTime) :
                new ObjectParameter("MorningTime", typeof(string));
    
            var nightTimeParameter = nightTime != null ?
                new ObjectParameter("NightTime", nightTime) :
                new ObjectParameter("NightTime", typeof(string));
    
            var noonTimeParameter = noonTime != null ?
                new ObjectParameter("NoonTime", noonTime) :
                new ObjectParameter("NoonTime", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var noofDaysParameter = noofDays.HasValue ?
                new ObjectParameter("NoofDays", noofDays) :
                new ObjectParameter("NoofDays", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var isEmptyStomachParameter = isEmptyStomach.HasValue ?
                new ObjectParameter("IsEmptyStomach", isEmptyStomach) :
                new ObjectParameter("IsEmptyStomach", typeof(bool));
    
            var isAfterFoodParameter = isAfterFood.HasValue ?
                new ObjectParameter("IsAfterFood", isAfterFood) :
                new ObjectParameter("IsAfterFood", typeof(bool));
    
            var isBeforeFoodParameter = isBeforeFood.HasValue ?
                new ObjectParameter("IsBeforeFood", isBeforeFood) :
                new ObjectParameter("IsBeforeFood", typeof(bool));
    
            var frequencyParameter = frequency.HasValue ?
                new ObjectParameter("Frequency", frequency) :
                new ObjectParameter("Frequency", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateDischargePatientMedicines", iPIDParameter, patientIDParameter, dateParameter, endDateParameter, eveningTimeParameter, instructionsIDParameter, iseveningParameter, isMorningParameter, isNightParameter, isNoonParameter, morningTimeParameter, nightTimeParameter, noonTimeParameter, startDateParameter, noofDaysParameter, descriptionParameter, isEmptyStomachParameter, isAfterFoodParameter, isBeforeFoodParameter, frequencyParameter, createdUserIDParameter, finYearParameter, applicationIDParameter, locationIDParameter, dischargeSummaryMedicineID);
        }
    
        public virtual ObjectResult<SpGetIPPatientList_Result> SpGetIPPatientList(string type, string codeHint, string nameHint, string dateHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> userID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var dateHintParameter = dateHint != null ?
                new ObjectParameter("DateHint", dateHint) :
                new ObjectParameter("DateHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetIPPatientList_Result>("SpGetIPPatientList", typeParameter, codeHintParameter, nameHintParameter, dateHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter, userIDParameter);
        }
    
        public virtual int SpUpdateAppointmentScheduleItems(Nullable<int> appointmentScheduleItemID, Nullable<int> patientID, string time, Nullable<int> tokenNo)
        {
            var appointmentScheduleItemIDParameter = appointmentScheduleItemID.HasValue ?
                new ObjectParameter("AppointmentScheduleItemID", appointmentScheduleItemID) :
                new ObjectParameter("AppointmentScheduleItemID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var timeParameter = time != null ?
                new ObjectParameter("Time", time) :
                new ObjectParameter("Time", typeof(string));
    
            var tokenNoParameter = tokenNo.HasValue ?
                new ObjectParameter("TokenNo", tokenNo) :
                new ObjectParameter("TokenNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateAppointmentScheduleItems", appointmentScheduleItemIDParameter, patientIDParameter, timeParameter, tokenNoParameter);
        }
    
        public virtual int SpCreateIPVitalChart(Nullable<int> iPID, Nullable<int> patientID, Nullable<System.DateTime> date, string bP, string pulse, string temperature, string hR, string rR, string height, string weight, string others, string time, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var bPParameter = bP != null ?
                new ObjectParameter("BP", bP) :
                new ObjectParameter("BP", typeof(string));
    
            var pulseParameter = pulse != null ?
                new ObjectParameter("Pulse", pulse) :
                new ObjectParameter("Pulse", typeof(string));
    
            var temperatureParameter = temperature != null ?
                new ObjectParameter("Temperature", temperature) :
                new ObjectParameter("Temperature", typeof(string));
    
            var hRParameter = hR != null ?
                new ObjectParameter("HR", hR) :
                new ObjectParameter("HR", typeof(string));
    
            var rRParameter = rR != null ?
                new ObjectParameter("RR", rR) :
                new ObjectParameter("RR", typeof(string));
    
            var heightParameter = height != null ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(string));
    
            var weightParameter = weight != null ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(string));
    
            var othersParameter = others != null ?
                new ObjectParameter("Others", others) :
                new ObjectParameter("Others", typeof(string));
    
            var timeParameter = time != null ?
                new ObjectParameter("Time", time) :
                new ObjectParameter("Time", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateIPVitalChart", iPIDParameter, patientIDParameter, dateParameter, bPParameter, pulseParameter, temperatureParameter, hRParameter, rRParameter, heightParameter, weightParameter, othersParameter, timeParameter, createdUserIDParameter, finYearParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual ObjectResult<SpGetInPatientDetailsForOPCaseSheet_Result> SpGetInPatientDetailsForOPCaseSheet(Nullable<int> patientID, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter isInPatient)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetInPatientDetailsForOPCaseSheet_Result>("SpGetInPatientDetailsForOPCaseSheet", patientIDParameter, locationIDParameter, applicationIDParameter, isInPatient);
        }
    
        public virtual int SpIsInPatient(Nullable<int> patientID, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter isInPatient)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpIsInPatient", patientIDParameter, locationIDParameter, applicationIDParameter, isInPatient);
        }
    
        public virtual ObjectResult<SpGetIPVitalChart_Result> SpGetIPVitalChart(Nullable<int> patientID, Nullable<int> iPID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetIPVitalChart_Result>("SpGetIPVitalChart", patientIDParameter, iPIDParameter);
        }
    
        public virtual int SpCreateTreatmentScheduleTrans2(Nullable<int> transID, Nullable<int> patientID, Nullable<int> treatmentID, Nullable<int> noOfTreatment, Nullable<int> treatmentRoomID, string startTime, Nullable<int> durationID, Nullable<int> therapistID, Nullable<int> doctorID, Nullable<int> patientTreatmentID)
        {
            var transIDParameter = transID.HasValue ?
                new ObjectParameter("TransID", transID) :
                new ObjectParameter("TransID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var treatmentIDParameter = treatmentID.HasValue ?
                new ObjectParameter("TreatmentID", treatmentID) :
                new ObjectParameter("TreatmentID", typeof(int));
    
            var noOfTreatmentParameter = noOfTreatment.HasValue ?
                new ObjectParameter("NoOfTreatment", noOfTreatment) :
                new ObjectParameter("NoOfTreatment", typeof(int));
    
            var treatmentRoomIDParameter = treatmentRoomID.HasValue ?
                new ObjectParameter("TreatmentRoomID", treatmentRoomID) :
                new ObjectParameter("TreatmentRoomID", typeof(int));
    
            var startTimeParameter = startTime != null ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(string));
    
            var durationIDParameter = durationID.HasValue ?
                new ObjectParameter("DurationID", durationID) :
                new ObjectParameter("DurationID", typeof(int));
    
            var therapistIDParameter = therapistID.HasValue ?
                new ObjectParameter("TherapistID", therapistID) :
                new ObjectParameter("TherapistID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var patientTreatmentIDParameter = patientTreatmentID.HasValue ?
                new ObjectParameter("PatientTreatmentID", patientTreatmentID) :
                new ObjectParameter("PatientTreatmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateTreatmentScheduleTrans2", transIDParameter, patientIDParameter, treatmentIDParameter, noOfTreatmentParameter, treatmentRoomIDParameter, startTimeParameter, durationIDParameter, therapistIDParameter, doctorIDParameter, patientTreatmentIDParameter);
        }
    
        public virtual ObjectResult<SpGetTreatmentScheduleDetails2_Result> SpGetTreatmentScheduleDetails2(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetTreatmentScheduleDetails2_Result>("SpGetTreatmentScheduleDetails2", iDParameter);
        }
    
        public virtual ObjectResult<SpGetExaminationByDate_Result> SpGetExaminationByDate(Nullable<int> patientID, Nullable<System.DateTime> date)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetExaminationByDate_Result>("SpGetExaminationByDate", patientIDParameter, dateParameter);
        }
    
        public virtual ObjectResult<SpGetAppointmentDateByID_Result> SpGetAppointmentDateByID(Nullable<int> iD, Nullable<int> oPID, Nullable<int> createdUserID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var oPIDParameter = oPID.HasValue ?
                new ObjectParameter("OPID", oPID) :
                new ObjectParameter("OPID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAppointmentDateByID_Result>("SpGetAppointmentDateByID", iDParameter, oPIDParameter, createdUserIDParameter);
        }
    
        public virtual int SpCreateLabTestBillables(Nullable<int> itemID, Nullable<int> patientID, Nullable<int> oPID, Nullable<int> iPID, Nullable<int> patientLabTestsID, Nullable<decimal> rate, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter billablesID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var oPIDParameter = oPID.HasValue ?
                new ObjectParameter("OPID", oPID) :
                new ObjectParameter("OPID", typeof(int));
    
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var patientLabTestsIDParameter = patientLabTestsID.HasValue ?
                new ObjectParameter("PatientLabTestsID", patientLabTestsID) :
                new ObjectParameter("PatientLabTestsID", typeof(int));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateLabTestBillables", itemIDParameter, patientIDParameter, oPIDParameter, iPIDParameter, patientLabTestsIDParameter, rateParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, billablesID);
        }
    
        public virtual int SpCreateLabTestInvoiceTrans(Nullable<int> itemID, Nullable<int> patientID, Nullable<int> oPID, Nullable<int> iPID, Nullable<int> patientLabTestsID, Nullable<decimal> rate, Nullable<int> salesOrderID, Nullable<int> salesInvoiceID, Nullable<int> billablesID, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var oPIDParameter = oPID.HasValue ?
                new ObjectParameter("OPID", oPID) :
                new ObjectParameter("OPID", typeof(int));
    
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var patientLabTestsIDParameter = patientLabTestsID.HasValue ?
                new ObjectParameter("PatientLabTestsID", patientLabTestsID) :
                new ObjectParameter("PatientLabTestsID", typeof(int));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var salesOrderIDParameter = salesOrderID.HasValue ?
                new ObjectParameter("SalesOrderID", salesOrderID) :
                new ObjectParameter("SalesOrderID", typeof(int));
    
            var salesInvoiceIDParameter = salesInvoiceID.HasValue ?
                new ObjectParameter("SalesInvoiceID", salesInvoiceID) :
                new ObjectParameter("SalesInvoiceID", typeof(int));
    
            var billablesIDParameter = billablesID.HasValue ?
                new ObjectParameter("BillablesID", billablesID) :
                new ObjectParameter("BillablesID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateLabTestInvoiceTrans", itemIDParameter, patientIDParameter, oPIDParameter, iPIDParameter, patientLabTestsIDParameter, rateParameter, salesOrderIDParameter, salesInvoiceIDParameter, billablesIDParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetAllLabTestList_Result> SpGetAllLabTestList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAllLabTestList_Result>("SpGetAllLabTestList");
        }
    
        public virtual int SpUpdateSerialNo(string formName, string fieldName, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter serialNo)
        {
            var formNameParameter = formName != null ?
                new ObjectParameter("FormName", formName) :
                new ObjectParameter("FormName", typeof(string));
    
            var fieldNameParameter = fieldName != null ?
                new ObjectParameter("FieldName", fieldName) :
                new ObjectParameter("FieldName", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateSerialNo", formNameParameter, fieldNameParameter, finYearParameter, locationIDParameter, applicationIDParameter, serialNo);
        }
    
        public virtual ObjectResult<SpGetInvoicedLabTestList_Result> SpGetInvoicedLabTestList(string type, string invoiceNo, string invoiceDate, string patient, string doctor, string netAmount, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(string));
    
            var invoiceDateParameter = invoiceDate != null ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(string));
    
            var patientParameter = patient != null ?
                new ObjectParameter("Patient", patient) :
                new ObjectParameter("Patient", typeof(string));
    
            var doctorParameter = doctor != null ?
                new ObjectParameter("Doctor", doctor) :
                new ObjectParameter("Doctor", typeof(string));
    
            var netAmountParameter = netAmount != null ?
                new ObjectParameter("NetAmount", netAmount) :
                new ObjectParameter("NetAmount", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetInvoicedLabTestList_Result>("SpGetInvoicedLabTestList", typeParameter, invoiceNoParameter, invoiceDateParameter, patientParameter, doctorParameter, netAmountParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPatientPriviledgeCardFee_Result> SpGetPatientPriviledgeCardFee(Nullable<int> patientID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPatientPriviledgeCardFee_Result>("SpGetPatientPriviledgeCardFee", patientIDParameter);
        }
    
        public virtual ObjectResult<SpGetPatientPrivilegeCardFeePrintPdf_Result> SpGetPatientPrivilegeCardFeePrintPdf(Nullable<int> iD, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPatientPrivilegeCardFeePrintPdf_Result>("SpGetPatientPrivilegeCardFeePrintPdf", iDParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual ObjectResult<SpGetLabTestItemsDetails_Result> SpGetLabTestItemsDetails(Nullable<int> iD, Nullable<int> patientID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetLabTestItemsDetails_Result>("SpGetLabTestItemsDetails", iDParameter, patientIDParameter);
        }
    
        public virtual ObjectResult<SpGetPrescribedLabtests_Result> SpGetPrescribedLabtests(Nullable<int> oPID)
        {
            var oPIDParameter = oPID.HasValue ?
                new ObjectParameter("OPID", oPID) :
                new ObjectParameter("OPID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPrescribedLabtests_Result>("SpGetPrescribedLabtests", oPIDParameter);
        }
    
        public virtual ObjectResult<SpGetNewPrescribedLabtest_Result> SpGetNewPrescribedLabtest(Nullable<int> oPID)
        {
            var oPIDParameter = oPID.HasValue ?
                new ObjectParameter("OPID", oPID) :
                new ObjectParameter("OPID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetNewPrescribedLabtest_Result>("SpGetNewPrescribedLabtest", oPIDParameter);
        }
    
        public virtual int SpCreateAppointmentCancellation(Nullable<int> appointmentScheduleItemID, Nullable<int> patientID, Nullable<System.DateTime> date, Nullable<int> applicationID, Nullable<int> locationID, Nullable<int> finYear, ObjectParameter isCancelled)
        {
            var appointmentScheduleItemIDParameter = appointmentScheduleItemID.HasValue ?
                new ObjectParameter("AppointmentScheduleItemID", appointmentScheduleItemID) :
                new ObjectParameter("AppointmentScheduleItemID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateAppointmentCancellation", appointmentScheduleItemIDParameter, patientIDParameter, dateParameter, applicationIDParameter, locationIDParameter, finYearParameter, isCancelled);
        }
    
        public virtual int SpGetDoctorWiseTokenNo(Nullable<int> doctorID, Nullable<System.DateTime> date, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> finYear, ObjectParameter tokenNo)
        {
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetDoctorWiseTokenNo", doctorIDParameter, dateParameter, locationIDParameter, applicationIDParameter, finYearParameter, tokenNo);
        }
    
        public virtual ObjectResult<SpGetAllRooms_Result> SpGetAllRooms()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAllRooms_Result>("SpGetAllRooms");
        }
    
        public virtual int SpCreatePatientLabItems(Nullable<System.DateTime> date, Nullable<int> oPID, Nullable<int> iPID, Nullable<int> itemID, Nullable<int> patientID, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var oPIDParameter = oPID.HasValue ?
                new ObjectParameter("OPID", oPID) :
                new ObjectParameter("OPID", typeof(int));
    
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePatientLabItems", dateParameter, oPIDParameter, iPIDParameter, itemIDParameter, patientIDParameter, createdUserIDParameter, finYearParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual ObjectResult<SpGetAppointmentFeeV3_Result> SpGetAppointmentFeeV3(Nullable<int> appointmentScheduleItemID)
        {
            var appointmentScheduleItemIDParameter = appointmentScheduleItemID.HasValue ?
                new ObjectParameter("AppointmentScheduleItemID", appointmentScheduleItemID) :
                new ObjectParameter("AppointmentScheduleItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAppointmentFeeV3_Result>("SpGetAppointmentFeeV3", appointmentScheduleItemIDParameter);
        }
    
        public virtual int SpCreateAppointmentConsultationFee(Nullable<int> appointmentScheduleItemID, Nullable<int> patientID, Nullable<decimal> doctorFee, Nullable<decimal> clinicFee, Nullable<decimal> discountAmount)
        {
            var appointmentScheduleItemIDParameter = appointmentScheduleItemID.HasValue ?
                new ObjectParameter("AppointmentScheduleItemID", appointmentScheduleItemID) :
                new ObjectParameter("AppointmentScheduleItemID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var doctorFeeParameter = doctorFee.HasValue ?
                new ObjectParameter("DoctorFee", doctorFee) :
                new ObjectParameter("DoctorFee", typeof(decimal));
    
            var clinicFeeParameter = clinicFee.HasValue ?
                new ObjectParameter("ClinicFee", clinicFee) :
                new ObjectParameter("ClinicFee", typeof(decimal));
    
            var discountAmountParameter = discountAmount.HasValue ?
                new ObjectParameter("DiscountAmount", discountAmount) :
                new ObjectParameter("DiscountAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateAppointmentConsultationFee", appointmentScheduleItemIDParameter, patientIDParameter, doctorFeeParameter, clinicFeeParameter, discountAmountParameter);
        }
    
        public virtual int SpAddConsultationTypeAndReferencedBy(Nullable<int> appointmentScheduleItemID, Nullable<int> patientID, string type, string referencedBy)
        {
            var appointmentScheduleItemIDParameter = appointmentScheduleItemID.HasValue ?
                new ObjectParameter("AppointmentScheduleItemID", appointmentScheduleItemID) :
                new ObjectParameter("AppointmentScheduleItemID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var referencedByParameter = referencedBy != null ?
                new ObjectParameter("ReferencedBy", referencedBy) :
                new ObjectParameter("ReferencedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpAddConsultationTypeAndReferencedBy", appointmentScheduleItemIDParameter, patientIDParameter, typeParameter, referencedByParameter);
        }
    
        public virtual int SpCreateSalesOrderAndInvoice(string transNo, Nullable<int> patientID, Nullable<decimal> rate, Nullable<int> billablesID, Nullable<int> appointmentScheduleItemID, Nullable<int> paymentModeID, Nullable<int> bankID, string consultationMode, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, string remarks, ObjectParameter salesOrderID, ObjectParameter salesInvoiceID)
        {
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var billablesIDParameter = billablesID.HasValue ?
                new ObjectParameter("BillablesID", billablesID) :
                new ObjectParameter("BillablesID", typeof(int));
    
            var appointmentScheduleItemIDParameter = appointmentScheduleItemID.HasValue ?
                new ObjectParameter("AppointmentScheduleItemID", appointmentScheduleItemID) :
                new ObjectParameter("AppointmentScheduleItemID", typeof(int));
    
            var paymentModeIDParameter = paymentModeID.HasValue ?
                new ObjectParameter("PaymentModeID", paymentModeID) :
                new ObjectParameter("PaymentModeID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var consultationModeParameter = consultationMode != null ?
                new ObjectParameter("ConsultationMode", consultationMode) :
                new ObjectParameter("ConsultationMode", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateSalesOrderAndInvoice", transNoParameter, patientIDParameter, rateParameter, billablesIDParameter, appointmentScheduleItemIDParameter, paymentModeIDParameter, bankIDParameter, consultationModeParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, remarksParameter, salesOrderID, salesInvoiceID);
        }
    
        public virtual int SpDeleteItemsFromAppointmentSchedule(Nullable<int> appointmentScheduleItemID)
        {
            var appointmentScheduleItemIDParameter = appointmentScheduleItemID.HasValue ?
                new ObjectParameter("AppointmentScheduleItemID", appointmentScheduleItemID) :
                new ObjectParameter("AppointmentScheduleItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpDeleteItemsFromAppointmentSchedule", appointmentScheduleItemIDParameter);
        }
    
        public virtual ObjectResult<SpGetPatientDetails_Result> SpGetPatientDetails(Nullable<int> iD, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPatientDetails_Result>("SpGetPatientDetails", iDParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPatientDetailsForPatientCard_Result> SpGetPatientDetailsForPatientCard(Nullable<int> iD, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPatientDetailsForPatientCard_Result>("SpGetPatientDetailsForPatientCard", iDParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPatientDetailsWithImage_Result> SpGetPatientDetailsWithImage(Nullable<int> iD, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPatientDetailsWithImage_Result>("SpGetPatientDetailsWithImage", iDParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual int SpUpdateAppointmentSchedule(Nullable<int> appointmentScheduleItemID, Nullable<int> patientID, Nullable<int> doctorID, Nullable<int> departmentID, Nullable<System.DateTime> date, Nullable<int> createdUserID, Nullable<int> finyear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var appointmentScheduleItemIDParameter = appointmentScheduleItemID.HasValue ?
                new ObjectParameter("AppointmentScheduleItemID", appointmentScheduleItemID) :
                new ObjectParameter("AppointmentScheduleItemID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finyearParameter = finyear.HasValue ?
                new ObjectParameter("Finyear", finyear) :
                new ObjectParameter("Finyear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateAppointmentSchedule", appointmentScheduleItemIDParameter, patientIDParameter, doctorIDParameter, departmentIDParameter, dateParameter, createdUserIDParameter, finyearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetAppointmentScheduleDetailsForPrint_Result> SpGetAppointmentScheduleDetailsForPrint(Nullable<int> iD, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAppointmentScheduleDetailsForPrint_Result>("SpGetAppointmentScheduleDetailsForPrint", iDParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual ObjectResult<SpGetAppointmentScheduleList_Result> SpGetAppointmentScheduleList(string type, string date, string doctorNameHint, string patientCodeHint, string patientHint, string timeHint, string tokenNoHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> createdUserID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var doctorNameHintParameter = doctorNameHint != null ?
                new ObjectParameter("DoctorNameHint", doctorNameHint) :
                new ObjectParameter("DoctorNameHint", typeof(string));
    
            var patientCodeHintParameter = patientCodeHint != null ?
                new ObjectParameter("PatientCodeHint", patientCodeHint) :
                new ObjectParameter("PatientCodeHint", typeof(string));
    
            var patientHintParameter = patientHint != null ?
                new ObjectParameter("PatientHint", patientHint) :
                new ObjectParameter("PatientHint", typeof(string));
    
            var timeHintParameter = timeHint != null ?
                new ObjectParameter("TimeHint", timeHint) :
                new ObjectParameter("TimeHint", typeof(string));
    
            var tokenNoHintParameter = tokenNoHint != null ?
                new ObjectParameter("TokenNoHint", tokenNoHint) :
                new ObjectParameter("TokenNoHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAppointmentScheduleList_Result>("SpGetAppointmentScheduleList", typeParameter, dateParameter, doctorNameHintParameter, patientCodeHintParameter, patientHintParameter, timeHintParameter, tokenNoHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, finYearParameter, locationIDParameter, applicationIDParameter, createdUserIDParameter);
        }
    
        public virtual ObjectResult<SpGetAppointmentSchedule_Result> SpGetAppointmentSchedule(Nullable<int> doctorID, Nullable<System.DateTime> fromDate, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAppointmentSchedule_Result>("SpGetAppointmentSchedule", doctorIDParameter, fromDateParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateAppointmentScheduleItems(Nullable<int> transID, Nullable<int> patientID, string time, Nullable<int> tokenNo, Nullable<int> departmentID)
        {
            var transIDParameter = transID.HasValue ?
                new ObjectParameter("TransID", transID) :
                new ObjectParameter("TransID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var timeParameter = time != null ?
                new ObjectParameter("Time", time) :
                new ObjectParameter("Time", typeof(string));
    
            var tokenNoParameter = tokenNo.HasValue ?
                new ObjectParameter("TokenNo", tokenNo) :
                new ObjectParameter("TokenNo", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateAppointmentScheduleItems", transIDParameter, patientIDParameter, timeParameter, tokenNoParameter, departmentIDParameter);
        }
    
        public virtual int SpCreateSalesOrderAndSalesInvoiceForAppointment(string transNo, Nullable<int> patientID, Nullable<decimal> rate, Nullable<int> itemID, Nullable<int> billablesID, Nullable<int> appointmentScheduleItemID, Nullable<int> paymentModeID, Nullable<int> bankID, string consultationMode, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, string remarks, Nullable<int> salesOrderID, Nullable<int> salesInvoiceID)
        {
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var billablesIDParameter = billablesID.HasValue ?
                new ObjectParameter("BillablesID", billablesID) :
                new ObjectParameter("BillablesID", typeof(int));
    
            var appointmentScheduleItemIDParameter = appointmentScheduleItemID.HasValue ?
                new ObjectParameter("AppointmentScheduleItemID", appointmentScheduleItemID) :
                new ObjectParameter("AppointmentScheduleItemID", typeof(int));
    
            var paymentModeIDParameter = paymentModeID.HasValue ?
                new ObjectParameter("PaymentModeID", paymentModeID) :
                new ObjectParameter("PaymentModeID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var consultationModeParameter = consultationMode != null ?
                new ObjectParameter("ConsultationMode", consultationMode) :
                new ObjectParameter("ConsultationMode", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var salesOrderIDParameter = salesOrderID.HasValue ?
                new ObjectParameter("SalesOrderID", salesOrderID) :
                new ObjectParameter("SalesOrderID", typeof(int));
    
            var salesInvoiceIDParameter = salesInvoiceID.HasValue ?
                new ObjectParameter("SalesInvoiceID", salesInvoiceID) :
                new ObjectParameter("SalesInvoiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateSalesOrderAndSalesInvoiceForAppointment", transNoParameter, patientIDParameter, rateParameter, itemIDParameter, billablesIDParameter, appointmentScheduleItemIDParameter, paymentModeIDParameter, bankIDParameter, consultationModeParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, remarksParameter, salesOrderIDParameter, salesInvoiceIDParameter);
        }
    
        public virtual int SpSaveAppointmentScheduleDirectly(Nullable<int> doctorID, Nullable<System.DateTime> fromDate, Nullable<int> patientID, string time, Nullable<int> tokenNo, Nullable<int> billablesID, Nullable<int> departmentID, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter isConfirmed, ObjectParameter appointmentScheduleItemID)
        {
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var timeParameter = time != null ?
                new ObjectParameter("Time", time) :
                new ObjectParameter("Time", typeof(string));
    
            var tokenNoParameter = tokenNo.HasValue ?
                new ObjectParameter("TokenNo", tokenNo) :
                new ObjectParameter("TokenNo", typeof(int));
    
            var billablesIDParameter = billablesID.HasValue ?
                new ObjectParameter("BillablesID", billablesID) :
                new ObjectParameter("BillablesID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpSaveAppointmentScheduleDirectly", doctorIDParameter, fromDateParameter, patientIDParameter, timeParameter, tokenNoParameter, billablesIDParameter, departmentIDParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, isConfirmed, appointmentScheduleItemID);
        }
    
        public virtual ObjectResult<SpGetAppointmentFee_Result> SpGetAppointmentFee(Nullable<int> appointmentScheduleItemID)
        {
            var appointmentScheduleItemIDParameter = appointmentScheduleItemID.HasValue ?
                new ObjectParameter("AppointmentScheduleItemID", appointmentScheduleItemID) :
                new ObjectParameter("AppointmentScheduleItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAppointmentFee_Result>("SpGetAppointmentFee", appointmentScheduleItemIDParameter);
        }
    
        public virtual int SpCancelPaitentTreatment(Nullable<int> patientTreatmentID, Nullable<int> treatmentID, Nullable<System.DateTime> endDate, Nullable<int> applicationID)
        {
            var patientTreatmentIDParameter = patientTreatmentID.HasValue ?
                new ObjectParameter("PatientTreatmentID", patientTreatmentID) :
                new ObjectParameter("PatientTreatmentID", typeof(int));
    
            var treatmentIDParameter = treatmentID.HasValue ?
                new ObjectParameter("TreatmentID", treatmentID) :
                new ObjectParameter("TreatmentID", typeof(int));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCancelPaitentTreatment", patientTreatmentIDParameter, treatmentIDParameter, endDateParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateBaseLineInformation(Nullable<int> patientID, Nullable<System.DateTime> date, string baseLine, string value, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> applicationID, Nullable<int> locationID, Nullable<int> appointmentProcessID, Nullable<int> iPID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var baseLineParameter = baseLine != null ?
                new ObjectParameter("BaseLine", baseLine) :
                new ObjectParameter("BaseLine", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateBaseLineInformation", patientIDParameter, dateParameter, baseLineParameter, valueParameter, createdUserIDParameter, finYearParameter, applicationIDParameter, locationIDParameter, appointmentProcessIDParameter, iPIDParameter);
        }
    
        public virtual int SpCreateCaseSheet(Nullable<int> patientID, Nullable<System.DateTime> date, string groupName, string value, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> applicationID, Nullable<int> locationID, Nullable<int> appointmentProcessID, Nullable<int> iPID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var groupNameParameter = groupName != null ?
                new ObjectParameter("GroupName", groupName) :
                new ObjectParameter("GroupName", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateCaseSheet", patientIDParameter, dateParameter, groupNameParameter, valueParameter, createdUserIDParameter, finYearParameter, applicationIDParameter, locationIDParameter, appointmentProcessIDParameter, iPIDParameter);
        }
    
        public virtual int SpCreateDashaVidhaPareekhsa(Nullable<int> appointmentProcessID, Nullable<int> patientID, Nullable<System.DateTime> date, string name, string area, string description, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var areaParameter = area != null ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateDashaVidhaPareekhsa", appointmentProcessIDParameter, patientIDParameter, dateParameter, nameParameter, areaParameter, descriptionParameter, createdUserIDParameter, finYearParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual int SpCreateDoctorList(Nullable<int> appointmentProcessID, Nullable<int> doctorID, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateDoctorList", appointmentProcessIDParameter, doctorIDParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreatePatientHistory(Nullable<int> appointmentProcessID, Nullable<int> patientID, Nullable<System.DateTime> date, string remark, Nullable<System.DateTime> nextVisitDate, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var nextVisitDateParameter = nextVisitDate.HasValue ?
                new ObjectParameter("NextVisitDate", nextVisitDate) :
                new ObjectParameter("NextVisitDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePatientHistory", appointmentProcessIDParameter, patientIDParameter, dateParameter, remarkParameter, nextVisitDateParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreatePatientMedicines(Nullable<int> appointmentProcessID, Nullable<int> patientID, Nullable<System.DateTime> date, Nullable<System.DateTime> endDate, Nullable<int> patientMedicineID, string eveningTime, Nullable<int> instructionsID, Nullable<bool> isevening, Nullable<bool> isMorning, Nullable<bool> isNight, Nullable<bool> isNoon, string morningTime, string nightTime, string noonTime, Nullable<System.DateTime> startDate, Nullable<int> noofDays, string description, Nullable<bool> isEmptyStomach, Nullable<bool> isAfterFood, Nullable<bool> isBeforeFood, Nullable<int> frequency, Nullable<int> modeOfAdministrationID, Nullable<bool> isMiddleOfFood, Nullable<bool> isWithFood, Nullable<bool> isMultipleTimes, string medicineInstruction, string quantityInstruction, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> applicationID, Nullable<int> locationID, ObjectParameter transID)
        {
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var patientMedicineIDParameter = patientMedicineID.HasValue ?
                new ObjectParameter("PatientMedicineID", patientMedicineID) :
                new ObjectParameter("PatientMedicineID", typeof(int));
    
            var eveningTimeParameter = eveningTime != null ?
                new ObjectParameter("EveningTime", eveningTime) :
                new ObjectParameter("EveningTime", typeof(string));
    
            var instructionsIDParameter = instructionsID.HasValue ?
                new ObjectParameter("InstructionsID", instructionsID) :
                new ObjectParameter("InstructionsID", typeof(int));
    
            var iseveningParameter = isevening.HasValue ?
                new ObjectParameter("Isevening", isevening) :
                new ObjectParameter("Isevening", typeof(bool));
    
            var isMorningParameter = isMorning.HasValue ?
                new ObjectParameter("IsMorning", isMorning) :
                new ObjectParameter("IsMorning", typeof(bool));
    
            var isNightParameter = isNight.HasValue ?
                new ObjectParameter("IsNight", isNight) :
                new ObjectParameter("IsNight", typeof(bool));
    
            var isNoonParameter = isNoon.HasValue ?
                new ObjectParameter("IsNoon", isNoon) :
                new ObjectParameter("IsNoon", typeof(bool));
    
            var morningTimeParameter = morningTime != null ?
                new ObjectParameter("MorningTime", morningTime) :
                new ObjectParameter("MorningTime", typeof(string));
    
            var nightTimeParameter = nightTime != null ?
                new ObjectParameter("NightTime", nightTime) :
                new ObjectParameter("NightTime", typeof(string));
    
            var noonTimeParameter = noonTime != null ?
                new ObjectParameter("NoonTime", noonTime) :
                new ObjectParameter("NoonTime", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var noofDaysParameter = noofDays.HasValue ?
                new ObjectParameter("NoofDays", noofDays) :
                new ObjectParameter("NoofDays", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var isEmptyStomachParameter = isEmptyStomach.HasValue ?
                new ObjectParameter("IsEmptyStomach", isEmptyStomach) :
                new ObjectParameter("IsEmptyStomach", typeof(bool));
    
            var isAfterFoodParameter = isAfterFood.HasValue ?
                new ObjectParameter("IsAfterFood", isAfterFood) :
                new ObjectParameter("IsAfterFood", typeof(bool));
    
            var isBeforeFoodParameter = isBeforeFood.HasValue ?
                new ObjectParameter("IsBeforeFood", isBeforeFood) :
                new ObjectParameter("IsBeforeFood", typeof(bool));
    
            var frequencyParameter = frequency.HasValue ?
                new ObjectParameter("Frequency", frequency) :
                new ObjectParameter("Frequency", typeof(int));
    
            var modeOfAdministrationIDParameter = modeOfAdministrationID.HasValue ?
                new ObjectParameter("ModeOfAdministrationID", modeOfAdministrationID) :
                new ObjectParameter("ModeOfAdministrationID", typeof(int));
    
            var isMiddleOfFoodParameter = isMiddleOfFood.HasValue ?
                new ObjectParameter("IsMiddleOfFood", isMiddleOfFood) :
                new ObjectParameter("IsMiddleOfFood", typeof(bool));
    
            var isWithFoodParameter = isWithFood.HasValue ?
                new ObjectParameter("IsWithFood", isWithFood) :
                new ObjectParameter("IsWithFood", typeof(bool));
    
            var isMultipleTimesParameter = isMultipleTimes.HasValue ?
                new ObjectParameter("IsMultipleTimes", isMultipleTimes) :
                new ObjectParameter("IsMultipleTimes", typeof(bool));
    
            var medicineInstructionParameter = medicineInstruction != null ?
                new ObjectParameter("MedicineInstruction", medicineInstruction) :
                new ObjectParameter("MedicineInstruction", typeof(string));
    
            var quantityInstructionParameter = quantityInstruction != null ?
                new ObjectParameter("QuantityInstruction", quantityInstruction) :
                new ObjectParameter("QuantityInstruction", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePatientMedicines", appointmentProcessIDParameter, patientIDParameter, dateParameter, endDateParameter, patientMedicineIDParameter, eveningTimeParameter, instructionsIDParameter, iseveningParameter, isMorningParameter, isNightParameter, isNoonParameter, morningTimeParameter, nightTimeParameter, noonTimeParameter, startDateParameter, noofDaysParameter, descriptionParameter, isEmptyStomachParameter, isAfterFoodParameter, isBeforeFoodParameter, frequencyParameter, modeOfAdministrationIDParameter, isMiddleOfFoodParameter, isWithFoodParameter, isMultipleTimesParameter, medicineInstructionParameter, quantityInstructionParameter, createdUserIDParameter, finYearParameter, applicationIDParameter, locationIDParameter, transID);
        }
    
        public virtual int SpCreatePatientReportsv5(Nullable<int> appointmentProcessID, Nullable<int> patientID, Nullable<System.DateTime> date, Nullable<int> documentID, string name, string description, Nullable<bool> isBeforeAdmission, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var documentIDParameter = documentID.HasValue ?
                new ObjectParameter("DocumentID", documentID) :
                new ObjectParameter("DocumentID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var isBeforeAdmissionParameter = isBeforeAdmission.HasValue ?
                new ObjectParameter("IsBeforeAdmission", isBeforeAdmission) :
                new ObjectParameter("IsBeforeAdmission", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePatientReportsv5", appointmentProcessIDParameter, patientIDParameter, dateParameter, documentIDParameter, nameParameter, descriptionParameter, isBeforeAdmissionParameter, createdUserIDParameter, finYearParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual int SpCreatePatientTreatmentMedicines(Nullable<int> transID, Nullable<int> madicineID, Nullable<decimal> standardMedicineQty, Nullable<int> unitID)
        {
            var transIDParameter = transID.HasValue ?
                new ObjectParameter("TransID", transID) :
                new ObjectParameter("TransID", typeof(int));
    
            var madicineIDParameter = madicineID.HasValue ?
                new ObjectParameter("MadicineID", madicineID) :
                new ObjectParameter("MadicineID", typeof(int));
    
            var standardMedicineQtyParameter = standardMedicineQty.HasValue ?
                new ObjectParameter("StandardMedicineQty", standardMedicineQty) :
                new ObjectParameter("StandardMedicineQty", typeof(decimal));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("unitID", unitID) :
                new ObjectParameter("unitID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePatientTreatmentMedicines", transIDParameter, madicineIDParameter, standardMedicineQtyParameter, unitIDParameter);
        }
    
        public virtual int SpCreatePatientTreatments(Nullable<int> appointmentProcessID, Nullable<int> patientID, Nullable<System.DateTime> date, Nullable<int> patientTreatmentID, Nullable<int> treatmentID, Nullable<int> therapistID, Nullable<int> treatmentRoomID, Nullable<int> treatmentNo, string instructions, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<bool> isMorning, string morningTime, Nullable<bool> isNoon, Nullable<bool> isEvening, string noonTime, string eveningTime, Nullable<bool> isNight, string nightTime, Nullable<int> noofDays, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> applicationID, Nullable<int> locationID, ObjectParameter transID)
        {
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var patientTreatmentIDParameter = patientTreatmentID.HasValue ?
                new ObjectParameter("PatientTreatmentID", patientTreatmentID) :
                new ObjectParameter("PatientTreatmentID", typeof(int));
    
            var treatmentIDParameter = treatmentID.HasValue ?
                new ObjectParameter("TreatmentID", treatmentID) :
                new ObjectParameter("TreatmentID", typeof(int));
    
            var therapistIDParameter = therapistID.HasValue ?
                new ObjectParameter("TherapistID", therapistID) :
                new ObjectParameter("TherapistID", typeof(int));
    
            var treatmentRoomIDParameter = treatmentRoomID.HasValue ?
                new ObjectParameter("TreatmentRoomID", treatmentRoomID) :
                new ObjectParameter("TreatmentRoomID", typeof(int));
    
            var treatmentNoParameter = treatmentNo.HasValue ?
                new ObjectParameter("TreatmentNo", treatmentNo) :
                new ObjectParameter("TreatmentNo", typeof(int));
    
            var instructionsParameter = instructions != null ?
                new ObjectParameter("Instructions", instructions) :
                new ObjectParameter("Instructions", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var isMorningParameter = isMorning.HasValue ?
                new ObjectParameter("IsMorning", isMorning) :
                new ObjectParameter("IsMorning", typeof(bool));
    
            var morningTimeParameter = morningTime != null ?
                new ObjectParameter("MorningTime", morningTime) :
                new ObjectParameter("MorningTime", typeof(string));
    
            var isNoonParameter = isNoon.HasValue ?
                new ObjectParameter("IsNoon", isNoon) :
                new ObjectParameter("IsNoon", typeof(bool));
    
            var isEveningParameter = isEvening.HasValue ?
                new ObjectParameter("IsEvening", isEvening) :
                new ObjectParameter("IsEvening", typeof(bool));
    
            var noonTimeParameter = noonTime != null ?
                new ObjectParameter("NoonTime", noonTime) :
                new ObjectParameter("NoonTime", typeof(string));
    
            var eveningTimeParameter = eveningTime != null ?
                new ObjectParameter("EveningTime", eveningTime) :
                new ObjectParameter("EveningTime", typeof(string));
    
            var isNightParameter = isNight.HasValue ?
                new ObjectParameter("IsNight", isNight) :
                new ObjectParameter("IsNight", typeof(bool));
    
            var nightTimeParameter = nightTime != null ?
                new ObjectParameter("NightTime", nightTime) :
                new ObjectParameter("NightTime", typeof(string));
    
            var noofDaysParameter = noofDays.HasValue ?
                new ObjectParameter("NoofDays", noofDays) :
                new ObjectParameter("NoofDays", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePatientTreatments", appointmentProcessIDParameter, patientIDParameter, dateParameter, patientTreatmentIDParameter, treatmentIDParameter, therapistIDParameter, treatmentRoomIDParameter, treatmentNoParameter, instructionsParameter, startDateParameter, endDateParameter, isMorningParameter, morningTimeParameter, isNoonParameter, isEveningParameter, noonTimeParameter, eveningTimeParameter, isNightParameter, nightTimeParameter, noofDaysParameter, createdUserIDParameter, finYearParameter, applicationIDParameter, locationIDParameter, transID);
        }
    
        public virtual int SpCreatePatientXrayDetails(Nullable<System.DateTime> date, Nullable<int> oPID, Nullable<int> iPID, Nullable<int> itemID, Nullable<int> iD, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var oPIDParameter = oPID.HasValue ?
                new ObjectParameter("OPID", oPID) :
                new ObjectParameter("OPID", typeof(int));
    
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePatientXrayDetails", dateParameter, oPIDParameter, iPIDParameter, itemIDParameter, iDParameter, createdUserIDParameter, finYearParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual int SpCreateQuestionnaireForScreening(Nullable<int> patientID, Nullable<int> appointmentProcessID, string question, string answer, Nullable<int> iPID, Nullable<int> createdUserID, Nullable<int> applicationID, Nullable<int> locationID, Nullable<int> finYear)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            var questionParameter = question != null ?
                new ObjectParameter("Question", question) :
                new ObjectParameter("Question", typeof(string));
    
            var answerParameter = answer != null ?
                new ObjectParameter("Answer", answer) :
                new ObjectParameter("Answer", typeof(string));
    
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateQuestionnaireForScreening", patientIDParameter, appointmentProcessIDParameter, questionParameter, answerParameter, iPIDParameter, createdUserIDParameter, applicationIDParameter, locationIDParameter, finYearParameter);
        }
    
        public virtual int SpCreateRogaPareekshaItems(Nullable<int> patientID, Nullable<System.DateTime> date, string groupName, string value, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> applicationID, Nullable<int> locationID, Nullable<int> appointmentProcessID, Nullable<int> iPID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var groupNameParameter = groupName != null ?
                new ObjectParameter("GroupName", groupName) :
                new ObjectParameter("GroupName", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateRogaPareekshaItems", patientIDParameter, dateParameter, groupNameParameter, valueParameter, createdUserIDParameter, finYearParameter, applicationIDParameter, locationIDParameter, appointmentProcessIDParameter, iPIDParameter);
        }
    
        public virtual int SpCreateVitalChartForPatientDiagnosis(Nullable<int> appointmentProcessID, Nullable<int> patientID, Nullable<System.DateTime> date, string bP, string pulse, string temperature, string hR, string rR, string height, string weight, string others, string unit, Nullable<decimal> bMI, string respiratoryRate, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var bPParameter = bP != null ?
                new ObjectParameter("BP", bP) :
                new ObjectParameter("BP", typeof(string));
    
            var pulseParameter = pulse != null ?
                new ObjectParameter("Pulse", pulse) :
                new ObjectParameter("Pulse", typeof(string));
    
            var temperatureParameter = temperature != null ?
                new ObjectParameter("Temperature", temperature) :
                new ObjectParameter("Temperature", typeof(string));
    
            var hRParameter = hR != null ?
                new ObjectParameter("HR", hR) :
                new ObjectParameter("HR", typeof(string));
    
            var rRParameter = rR != null ?
                new ObjectParameter("RR", rR) :
                new ObjectParameter("RR", typeof(string));
    
            var heightParameter = height != null ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(string));
    
            var weightParameter = weight != null ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(string));
    
            var othersParameter = others != null ?
                new ObjectParameter("Others", others) :
                new ObjectParameter("Others", typeof(string));
    
            var unitParameter = unit != null ?
                new ObjectParameter("Unit", unit) :
                new ObjectParameter("Unit", typeof(string));
    
            var bMIParameter = bMI.HasValue ?
                new ObjectParameter("BMI", bMI) :
                new ObjectParameter("BMI", typeof(decimal));
    
            var respiratoryRateParameter = respiratoryRate != null ?
                new ObjectParameter("RespiratoryRate", respiratoryRate) :
                new ObjectParameter("RespiratoryRate", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateVitalChartForPatientDiagnosis", appointmentProcessIDParameter, patientIDParameter, dateParameter, bPParameter, pulseParameter, temperatureParameter, hRParameter, rRParameter, heightParameter, weightParameter, othersParameter, unitParameter, bMIParameter, respiratoryRateParameter, createdUserIDParameter, finYearParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual int SpDeleteAllRogaPareekshaItems(Nullable<int> appointmentProcessID, Nullable<int> patientID, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpDeleteAllRogaPareekshaItems", appointmentProcessIDParameter, patientIDParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual int SpDeleteCaseSheetItemsByID(Nullable<int> appointmentProcessID, Nullable<int> patientID, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpDeleteCaseSheetItemsByID", appointmentProcessIDParameter, patientIDParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual int SpDeleteDashaVidhaPareekhsaByID(Nullable<int> oPID, Nullable<int> iPID, Nullable<int> patientID, Nullable<int> finYear, Nullable<int> applicationID)
        {
            var oPIDParameter = oPID.HasValue ?
                new ObjectParameter("OPID", oPID) :
                new ObjectParameter("OPID", typeof(int));
    
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpDeleteDashaVidhaPareekhsaByID", oPIDParameter, iPIDParameter, patientIDParameter, finYearParameter, applicationIDParameter);
        }
    
        public virtual int SpDeleteQuestionnaireItems(Nullable<int> appointmentProcessID, Nullable<int> patientID, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpDeleteQuestionnaireItems", appointmentProcessIDParameter, patientIDParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual ObjectResult<SpGetAllMedicinesbyProductionGroup_Result> SpGetAllMedicinesbyProductionGroup(Nullable<int> productionGroupID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> appliationID)
        {
            var productionGroupIDParameter = productionGroupID.HasValue ?
                new ObjectParameter("ProductionGroupID", productionGroupID) :
                new ObjectParameter("ProductionGroupID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var appliationIDParameter = appliationID.HasValue ?
                new ObjectParameter("AppliationID", appliationID) :
                new ObjectParameter("AppliationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetAllMedicinesbyProductionGroup_Result>("SpGetAllMedicinesbyProductionGroup", productionGroupIDParameter, finYearParameter, locationIDParameter, appliationIDParameter);
        }
    
        public virtual ObjectResult<SpGetBaseLineInformationDetails_Result> SpGetBaseLineInformationDetails(Nullable<int> iD, Nullable<int> appointmentProcessID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetBaseLineInformationDetails_Result>("SpGetBaseLineInformationDetails", iDParameter, appointmentProcessIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetBaseLineInformationDetailsByID_Result> SpGetBaseLineInformationDetailsByID(Nullable<int> iD, Nullable<int> appointmentProcessID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetBaseLineInformationDetailsByID_Result>("SpGetBaseLineInformationDetailsByID", iDParameter, appointmentProcessIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCaseSheetByID_Result> SpGetCaseSheetByID(Nullable<int> patientID, Nullable<System.DateTime> date, Nullable<int> appointmentProcessID, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCaseSheetByID_Result>("SpGetCaseSheetByID", patientIDParameter, dateParameter, appointmentProcessIDParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetDashaVidhaPareekhsaByID_Result> SpGetDashaVidhaPareekhsaByID(Nullable<int> patientID, Nullable<int> appointmentProcessID, Nullable<int> applicationID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetDashaVidhaPareekhsaByID_Result>("SpGetDashaVidhaPareekhsaByID", patientIDParameter, appointmentProcessIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetExaminationDetailsByID_Result> SpGetExaminationDetailsByID(Nullable<int> iD, Nullable<int> appointmentProcessID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetExaminationDetailsByID_Result>("SpGetExaminationDetailsByID", iDParameter, appointmentProcessIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetExaminationDetailsByIDV2_Result> SpGetExaminationDetailsByIDV2(Nullable<int> iD, Nullable<int> appointmentProcessID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetExaminationDetailsByIDV2_Result>("SpGetExaminationDetailsByIDV2", iDParameter, appointmentProcessIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetExaminations_Result> SpGetExaminations(Nullable<int> patientID, Nullable<System.DateTime> date, Nullable<int> reviewID, Nullable<int> appointProcessID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var reviewIDParameter = reviewID.HasValue ?
                new ObjectParameter("ReviewID", reviewID) :
                new ObjectParameter("ReviewID", typeof(int));
    
            var appointProcessIDParameter = appointProcessID.HasValue ?
                new ObjectParameter("AppointProcessID", appointProcessID) :
                new ObjectParameter("AppointProcessID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetExaminations_Result>("SpGetExaminations", patientIDParameter, dateParameter, reviewIDParameter, appointProcessIDParameter);
        }
    
        public virtual ObjectResult<SpGetHistoryByID_Result> SpGetHistoryByID(Nullable<int> parentID, Nullable<int> oPID, Nullable<int> patientID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var oPIDParameter = oPID.HasValue ?
                new ObjectParameter("OPID", oPID) :
                new ObjectParameter("OPID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetHistoryByID_Result>("SpGetHistoryByID", parentIDParameter, oPIDParameter, patientIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetHistoryListByID_Result> SpGetHistoryListByID(Nullable<int> oPID, Nullable<int> patientID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var oPIDParameter = oPID.HasValue ?
                new ObjectParameter("OPID", oPID) :
                new ObjectParameter("OPID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetHistoryListByID_Result>("SpGetHistoryListByID", oPIDParameter, patientIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetLabTestListItems_Result> SpGetLabTestListItems(string codeHint, string typeHint, string groupHint, string nameHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var typeHintParameter = typeHint != null ?
                new ObjectParameter("TypeHint", typeHint) :
                new ObjectParameter("TypeHint", typeof(string));
    
            var groupHintParameter = groupHint != null ?
                new ObjectParameter("GroupHint", groupHint) :
                new ObjectParameter("GroupHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetLabTestListItems_Result>("SpGetLabTestListItems", codeHintParameter, typeHintParameter, groupHintParameter, nameHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetLatestExaminationDetails_Result> SpGetLatestExaminationDetails(Nullable<int> patientID, Nullable<int> reviewID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var reviewIDParameter = reviewID.HasValue ?
                new ObjectParameter("ReviewID", reviewID) :
                new ObjectParameter("ReviewID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetLatestExaminationDetails_Result>("SpGetLatestExaminationDetails", patientIDParameter, reviewIDParameter);
        }
    
        public virtual ObjectResult<SpGetManagerPatientList_Result> SpGetManagerPatientList(string type, string codeHint, string nameHint, string timeHint, string tokenHint, string dateHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> userID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var timeHintParameter = timeHint != null ?
                new ObjectParameter("TimeHint", timeHint) :
                new ObjectParameter("TimeHint", typeof(string));
    
            var tokenHintParameter = tokenHint != null ?
                new ObjectParameter("TokenHint", tokenHint) :
                new ObjectParameter("TokenHint", typeof(string));
    
            var dateHintParameter = dateHint != null ?
                new ObjectParameter("DateHint", dateHint) :
                new ObjectParameter("DateHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetManagerPatientList_Result>("SpGetManagerPatientList", typeParameter, codeHintParameter, nameHintParameter, timeHintParameter, tokenHintParameter, dateHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<SpGetMedicines_Result> SpGetMedicines(Nullable<int> patientID, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetMedicines_Result>("SpGetMedicines", patientIDParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetMedicinesHistory_Result> SpGetMedicinesHistory(Nullable<int> parentID, Nullable<int> oPID, Nullable<int> iPID, Nullable<int> patientID, string appointmentType, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var oPIDParameter = oPID.HasValue ?
                new ObjectParameter("OPID", oPID) :
                new ObjectParameter("OPID", typeof(int));
    
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var appointmentTypeParameter = appointmentType != null ?
                new ObjectParameter("AppointmentType", appointmentType) :
                new ObjectParameter("AppointmentType", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetMedicinesHistory_Result>("SpGetMedicinesHistory", parentIDParameter, oPIDParameter, iPIDParameter, patientIDParameter, appointmentTypeParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetMedicneListByID_Result> SpGetMedicneListByID(Nullable<int> oPID, Nullable<int> patientID, Nullable<System.DateTime> date, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var oPIDParameter = oPID.HasValue ?
                new ObjectParameter("OPID", oPID) :
                new ObjectParameter("OPID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetMedicneListByID_Result>("SpGetMedicneListByID", oPIDParameter, patientIDParameter, dateParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetOPMedicineDetailsByID_Result> SpGetOPMedicineDetailsByID(Nullable<int> patientID, Nullable<System.DateTime> date, Nullable<int> appointmentProcessID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetOPMedicineDetailsByID_Result>("SpGetOPMedicineDetailsByID", patientIDParameter, dateParameter, appointmentProcessIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetOPMedicinesItemsList_Result> SpGetOPMedicinesItemsList(Nullable<int> patientID, Nullable<System.DateTime> date, Nullable<int> appointmentProcessID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetOPMedicinesItemsList_Result>("SpGetOPMedicinesItemsList", patientIDParameter, dateParameter, appointmentProcessIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPatientDepartmentDetails_Result> SpGetPatientDepartmentDetails(Nullable<int> appointmentScheduleItemID)
        {
            var appointmentScheduleItemIDParameter = appointmentScheduleItemID.HasValue ?
                new ObjectParameter("AppointmentScheduleItemID", appointmentScheduleItemID) :
                new ObjectParameter("AppointmentScheduleItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPatientDepartmentDetails_Result>("SpGetPatientDepartmentDetails", appointmentScheduleItemIDParameter);
        }
    
        public virtual ObjectResult<SpGetPatientDetailsByID_Result> SpGetPatientDetailsByID(Nullable<int> iD, Nullable<int> applicationID, Nullable<int> createdUserID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPatientDetailsByID_Result>("SpGetPatientDetailsByID", iDParameter, applicationIDParameter, createdUserIDParameter);
        }
    
        public virtual ObjectResult<SpGetPatientDetailsListByID_Result> SpGetPatientDetailsListByID(Nullable<int> iD, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPatientDetailsListByID_Result>("SpGetPatientDetailsListByID", iDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPreviousMedicineListByID_Result> SpGetPreviousMedicineListByID(Nullable<int> patientMedicinesID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var patientMedicinesIDParameter = patientMedicinesID.HasValue ?
                new ObjectParameter("PatientMedicinesID", patientMedicinesID) :
                new ObjectParameter("PatientMedicinesID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPreviousMedicineListByID_Result>("SpGetPreviousMedicineListByID", patientMedicinesIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPreviousMedicinesItemsList_Result> SpGetPreviousMedicinesItemsList(Nullable<int> patientMedicinesID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var patientMedicinesIDParameter = patientMedicinesID.HasValue ?
                new ObjectParameter("PatientMedicinesID", patientMedicinesID) :
                new ObjectParameter("PatientMedicinesID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPreviousMedicinesItemsList_Result>("SpGetPreviousMedicinesItemsList", patientMedicinesIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPreviousMedicinesList_Result> SpGetPreviousMedicinesList(Nullable<int> patientMedicinesID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var patientMedicinesIDParameter = patientMedicinesID.HasValue ?
                new ObjectParameter("PatientMedicinesID", patientMedicinesID) :
                new ObjectParameter("PatientMedicinesID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPreviousMedicinesList_Result>("SpGetPreviousMedicinesList", patientMedicinesIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetReferenceDoctorList_Result> SpGetReferenceDoctorList(Nullable<int> patientID, Nullable<System.DateTime> date, Nullable<int> appointmentProcessID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetReferenceDoctorList_Result>("SpGetReferenceDoctorList", patientIDParameter, dateParameter, appointmentProcessIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetReportListByID_Result> SpGetReportListByID(Nullable<int> patientID, Nullable<System.DateTime> date, Nullable<int> appointmentProcessID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetReportListByID_Result>("SpGetReportListByID", patientIDParameter, dateParameter, appointmentProcessIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetReportListByIDv5_Result> SpGetReportListByIDv5(Nullable<int> patientID, Nullable<System.DateTime> date, Nullable<int> appointmentProcessID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetReportListByIDv5_Result>("SpGetReportListByIDv5", patientIDParameter, dateParameter, appointmentProcessIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetRogaNirnayamListItems_Result> SpGetRogaNirnayamListItems(Nullable<int> iD, Nullable<int> appointmentProcessID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetRogaNirnayamListItems_Result>("SpGetRogaNirnayamListItems", iDParameter, appointmentProcessIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetRogaPareekshaList_Result> SpGetRogaPareekshaList(Nullable<int> iD, Nullable<int> appointmentProcessID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetRogaPareekshaList_Result>("SpGetRogaPareekshaList", iDParameter, appointmentProcessIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetRoundsHistory_Result> SpGetRoundsHistory(Nullable<int> parentID, Nullable<int> oPID, Nullable<int> iPID, Nullable<int> patientID, string appointmentType, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var oPIDParameter = oPID.HasValue ?
                new ObjectParameter("OPID", oPID) :
                new ObjectParameter("OPID", typeof(int));
    
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var appointmentTypeParameter = appointmentType != null ?
                new ObjectParameter("AppointmentType", appointmentType) :
                new ObjectParameter("AppointmentType", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetRoundsHistory_Result>("SpGetRoundsHistory", parentIDParameter, oPIDParameter, iPIDParameter, patientIDParameter, appointmentTypeParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetTreatmentDetailsListForPrint_Result> SpGetTreatmentDetailsListForPrint(string transNo, string date, string patient, string doctor, string time, string tokenNo, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> userID)
        {
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var patientParameter = patient != null ?
                new ObjectParameter("Patient", patient) :
                new ObjectParameter("Patient", typeof(string));
    
            var doctorParameter = doctor != null ?
                new ObjectParameter("Doctor", doctor) :
                new ObjectParameter("Doctor", typeof(string));
    
            var timeParameter = time != null ?
                new ObjectParameter("Time", time) :
                new ObjectParameter("Time", typeof(string));
    
            var tokenNoParameter = tokenNo != null ?
                new ObjectParameter("TokenNo", tokenNo) :
                new ObjectParameter("TokenNo", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetTreatmentDetailsListForPrint_Result>("SpGetTreatmentDetailsListForPrint", transNoParameter, dateParameter, patientParameter, doctorParameter, timeParameter, tokenNoParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<SpGetTreatmentHistory_Result> SpGetTreatmentHistory(Nullable<int> parentID, Nullable<int> oPID, Nullable<int> iPID, Nullable<int> patientID, string appointmentType, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var oPIDParameter = oPID.HasValue ?
                new ObjectParameter("OPID", oPID) :
                new ObjectParameter("OPID", typeof(int));
    
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var appointmentTypeParameter = appointmentType != null ?
                new ObjectParameter("AppointmentType", appointmentType) :
                new ObjectParameter("AppointmentType", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetTreatmentHistory_Result>("SpGetTreatmentHistory", parentIDParameter, oPIDParameter, iPIDParameter, patientIDParameter, appointmentTypeParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetTreatmentListByID_Result> SpGetTreatmentListByID(Nullable<int> patientID, Nullable<System.DateTime> date, Nullable<int> appointmentProcessID, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetTreatmentListByID_Result>("SpGetTreatmentListByID", patientIDParameter, dateParameter, appointmentProcessIDParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetTreatmentMedicneListByID_Result> SpGetTreatmentMedicneListByID(Nullable<int> patientID, Nullable<System.DateTime> date, Nullable<int> appointmentProcessID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetTreatmentMedicneListByID_Result>("SpGetTreatmentMedicneListByID", patientIDParameter, dateParameter, appointmentProcessIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetVitalChartByAppointmentProcessID_Result> SpGetVitalChartByAppointmentProcessID(Nullable<int> appointmentProcessID, Nullable<int> patientID, Nullable<System.DateTime> date)
        {
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetVitalChartByAppointmentProcessID_Result>("SpGetVitalChartByAppointmentProcessID", appointmentProcessIDParameter, patientIDParameter, dateParameter);
        }
    
        public virtual ObjectResult<SpGetVitalChartHistory_Result> SpGetVitalChartHistory(Nullable<int> parentID, Nullable<int> oPID, Nullable<int> iPID, Nullable<int> patientID, string appointmentType, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var oPIDParameter = oPID.HasValue ?
                new ObjectParameter("OPID", oPID) :
                new ObjectParameter("OPID", typeof(int));
    
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var appointmentTypeParameter = appointmentType != null ?
                new ObjectParameter("AppointmentType", appointmentType) :
                new ObjectParameter("AppointmentType", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetVitalChartHistory_Result>("SpGetVitalChartHistory", parentIDParameter, oPIDParameter, iPIDParameter, patientIDParameter, appointmentTypeParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpIsCaseSheetHistory(Nullable<int> patientID, Nullable<int> appointmentProcessID, ObjectParameter isPatientHistory)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpIsCaseSheetHistory", patientIDParameter, appointmentProcessIDParameter, isPatientHistory);
        }
    
        public virtual int SpStopMedicine(Nullable<int> patientMedicinesID)
        {
            var patientMedicinesIDParameter = patientMedicinesID.HasValue ?
                new ObjectParameter("PatientMedicinesID", patientMedicinesID) :
                new ObjectParameter("PatientMedicinesID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpStopMedicine", patientMedicinesIDParameter);
        }
    
        public virtual int SpUpdateDepartment(Nullable<int> departmentID, Nullable<int> appointmentScheduleItemID)
        {
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var appointmentScheduleItemIDParameter = appointmentScheduleItemID.HasValue ?
                new ObjectParameter("AppointmentScheduleItemID", appointmentScheduleItemID) :
                new ObjectParameter("AppointmentScheduleItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateDepartment", departmentIDParameter, appointmentScheduleItemIDParameter);
        }
    
        public virtual ObjectResult<SpGetOPXrayDetails_Result> SpGetOPXrayDetails(Nullable<int> patientID, Nullable<int> oPID, Nullable<System.DateTime> date, Nullable<int> createdUserID, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var oPIDParameter = oPID.HasValue ?
                new ObjectParameter("OPID", oPID) :
                new ObjectParameter("OPID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetOPXrayDetails_Result>("SpGetOPXrayDetails", patientIDParameter, oPIDParameter, dateParameter, createdUserIDParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual ObjectResult<SpGetOPLabAndXrayDetails_Result> SpGetOPLabAndXrayDetails(Nullable<int> patientID, Nullable<int> oPID, Nullable<System.DateTime> date, Nullable<int> createdUserID, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var oPIDParameter = oPID.HasValue ?
                new ObjectParameter("OPID", oPID) :
                new ObjectParameter("OPID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetOPLabAndXrayDetails_Result>("SpGetOPLabAndXrayDetails", patientIDParameter, oPIDParameter, dateParameter, createdUserIDParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCategoryWiseLabItems_Result> SpGetCategoryWiseLabItems(string labTestCategoryIDs, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var labTestCategoryIDsParameter = labTestCategoryIDs != null ?
                new ObjectParameter("LabTestCategoryIDs", labTestCategoryIDs) :
                new ObjectParameter("LabTestCategoryIDs", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCategoryWiseLabItems_Result>("SpGetCategoryWiseLabItems", labTestCategoryIDsParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateAppointmentProcess(Nullable<int> iD, Nullable<int> patientID, Nullable<System.DateTime> date, string visitType, Nullable<bool> isCompleted, Nullable<bool> isReferedIP, Nullable<bool> iswalkIn, Nullable<int> parentID, Nullable<int> reviewID, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var visitTypeParameter = visitType != null ?
                new ObjectParameter("VisitType", visitType) :
                new ObjectParameter("VisitType", typeof(string));
    
            var isCompletedParameter = isCompleted.HasValue ?
                new ObjectParameter("IsCompleted", isCompleted) :
                new ObjectParameter("IsCompleted", typeof(bool));
    
            var isReferedIPParameter = isReferedIP.HasValue ?
                new ObjectParameter("IsReferedIP", isReferedIP) :
                new ObjectParameter("IsReferedIP", typeof(bool));
    
            var iswalkInParameter = iswalkIn.HasValue ?
                new ObjectParameter("IswalkIn", iswalkIn) :
                new ObjectParameter("IswalkIn", typeof(bool));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var reviewIDParameter = reviewID.HasValue ?
                new ObjectParameter("ReviewID", reviewID) :
                new ObjectParameter("ReviewID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateAppointmentProcess", iDParameter, patientIDParameter, dateParameter, visitTypeParameter, isCompletedParameter, isReferedIPParameter, iswalkInParameter, parentIDParameter, reviewIDParameter, createdUserIDParameter, finYearParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual int SpCreateIPBaseLineInformation(Nullable<int> patientID, Nullable<System.DateTime> date, string baseLine, string value, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> applicationID, Nullable<int> locationID, Nullable<int> iPID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var baseLineParameter = baseLine != null ?
                new ObjectParameter("BaseLine", baseLine) :
                new ObjectParameter("BaseLine", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateIPBaseLineInformation", patientIDParameter, dateParameter, baseLineParameter, valueParameter, createdUserIDParameter, finYearParameter, applicationIDParameter, locationIDParameter, iPIDParameter);
        }
    
        public virtual int SpCreateIPDashaVidhaPareekhsa(Nullable<int> iPID, Nullable<int> patientID, Nullable<System.DateTime> date, string name, string area, string description, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var areaParameter = area != null ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateIPDashaVidhaPareekhsa", iPIDParameter, patientIDParameter, dateParameter, nameParameter, areaParameter, descriptionParameter, createdUserIDParameter, finYearParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual int SpCreateIPDoctorList(Nullable<int> iPID, Nullable<int> doctorID, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateIPDoctorList", iPIDParameter, doctorIDParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateIPPatientReportsV5(Nullable<int> iPID, Nullable<int> patientID, Nullable<System.DateTime> date, Nullable<int> documentID, string name, string description, Nullable<bool> isBeforeAdmission, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var documentIDParameter = documentID.HasValue ?
                new ObjectParameter("DocumentID", documentID) :
                new ObjectParameter("DocumentID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var isBeforeAdmissionParameter = isBeforeAdmission.HasValue ?
                new ObjectParameter("IsBeforeAdmission", isBeforeAdmission) :
                new ObjectParameter("IsBeforeAdmission", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateIPPatientReportsV5", iPIDParameter, patientIDParameter, dateParameter, documentIDParameter, nameParameter, descriptionParameter, isBeforeAdmissionParameter, createdUserIDParameter, finYearParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual int SpCreatePatientRoundsDetailsV5(Nullable<System.DateTime> date, string time, Nullable<int> paientID, Nullable<int> iPID, string clinicalNote, string remarks, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var timeParameter = time != null ?
                new ObjectParameter("Time", time) :
                new ObjectParameter("Time", typeof(string));
    
            var paientIDParameter = paientID.HasValue ?
                new ObjectParameter("PaientID", paientID) :
                new ObjectParameter("PaientID", typeof(int));
    
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var clinicalNoteParameter = clinicalNote != null ?
                new ObjectParameter("ClinicalNote", clinicalNote) :
                new ObjectParameter("ClinicalNote", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreatePatientRoundsDetailsV5", dateParameter, timeParameter, paientIDParameter, iPIDParameter, clinicalNoteParameter, remarksParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetIPBaseLineInformationDetails_Result> SpGetIPBaseLineInformationDetails(Nullable<int> iD, Nullable<int> iPID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetIPBaseLineInformationDetails_Result>("SpGetIPBaseLineInformationDetails", iDParameter, iPIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetIPCaseSheetDetailsByIDV2_Result> SpGetIPCaseSheetDetailsByIDV2(Nullable<int> iD, Nullable<int> iPID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetIPCaseSheetDetailsByIDV2_Result>("SpGetIPCaseSheetDetailsByIDV2", iDParameter, iPIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetIPDashaVidhaPareekhsaByID_Result> SpGetIPDashaVidhaPareekhsaByID(Nullable<int> patientID, Nullable<int> iP, Nullable<int> applicationID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var iPParameter = iP.HasValue ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetIPDashaVidhaPareekhsaByID_Result>("SpGetIPDashaVidhaPareekhsaByID", patientIDParameter, iPParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetIPMedicinesItemsList_Result> SpGetIPMedicinesItemsList(Nullable<int> dischargeSummaryID, Nullable<int> patientID, Nullable<int> iPID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var dischargeSummaryIDParameter = dischargeSummaryID.HasValue ?
                new ObjectParameter("DischargeSummaryID", dischargeSummaryID) :
                new ObjectParameter("DischargeSummaryID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetIPMedicinesItemsList_Result>("SpGetIPMedicinesItemsList", dischargeSummaryIDParameter, patientIDParameter, iPIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetIPMedicneListByID_Result> SpGetIPMedicneListByID(Nullable<int> dischargeSummaryID, Nullable<int> patientID, Nullable<int> iPID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var dischargeSummaryIDParameter = dischargeSummaryID.HasValue ?
                new ObjectParameter("DischargeSummaryID", dischargeSummaryID) :
                new ObjectParameter("DischargeSummaryID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetIPMedicneListByID_Result>("SpGetIPMedicneListByID", dischargeSummaryIDParameter, patientIDParameter, iPIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetIPReferenceDoctorList_Result> SpGetIPReferenceDoctorList(Nullable<int> patientID, Nullable<System.DateTime> date, Nullable<int> iPID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetIPReferenceDoctorList_Result>("SpGetIPReferenceDoctorList", patientIDParameter, dateParameter, iPIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetIPReportListByID_Result> SpGetIPReportListByID(Nullable<int> patientID, Nullable<int> iPID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetIPReportListByID_Result>("SpGetIPReportListByID", patientIDParameter, iPIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetIPReportListByIDV5_Result> SpGetIPReportListByIDV5(Nullable<int> patientID, Nullable<int> iPID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetIPReportListByIDV5_Result>("SpGetIPReportListByIDV5", patientIDParameter, iPIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetIPRoundsV5_Result> SpGetIPRoundsV5(Nullable<int> patientID, Nullable<int> iPID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetIPRoundsV5_Result>("SpGetIPRoundsV5", patientIDParameter, iPIDParameter);
        }
    
        public virtual ObjectResult<SpGetIPTreatmentList_Result1> SpGetIPTreatmentList(Nullable<int> patientID, Nullable<int> iPID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetIPTreatmentList_Result1>("SpGetIPTreatmentList", patientIDParameter, iPIDParameter);
        }
    
        public virtual ObjectResult<SpGetIPTreatmentMedicneList_Result> SpGetIPTreatmentMedicneList(Nullable<int> patientID, Nullable<int> iPID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetIPTreatmentMedicneList_Result>("SpGetIPTreatmentMedicneList", patientIDParameter, iPIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetLabTestAutoComplete_Result> SpGetLabTestAutoComplete(string hint)
        {
            var hintParameter = hint != null ?
                new ObjectParameter("Hint", hint) :
                new ObjectParameter("Hint", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetLabTestAutoComplete_Result>("SpGetLabTestAutoComplete", hintParameter);
        }
    
        public virtual ObjectResult<SpGetXrayDetails_Result> SpGetXrayDetails(Nullable<int> patientID, Nullable<int> iPID, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetXrayDetails_Result>("SpGetXrayDetails", patientIDParameter, iPIDParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual int SpCreateIPPatientMedicines(Nullable<int> iPID, Nullable<int> patientID, Nullable<System.DateTime> date, Nullable<System.DateTime> endDate, string eveningTime, Nullable<int> instructionsID, Nullable<bool> isevening, Nullable<bool> isMorning, Nullable<bool> isNight, Nullable<bool> isNoon, string morningTime, string nightTime, string noonTime, Nullable<System.DateTime> startDate, Nullable<int> noofDays, string description, Nullable<bool> isEmptyStomach, Nullable<bool> isAfterFood, Nullable<bool> isBeforeFood, Nullable<int> frequency, Nullable<int> modeOfAdministrationID, Nullable<bool> isMiddleOfFood, Nullable<bool> isWithFood, string medicineInstruction, string quantityInstruction, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> applicationID, Nullable<int> locationID, ObjectParameter transID)
        {
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var eveningTimeParameter = eveningTime != null ?
                new ObjectParameter("EveningTime", eveningTime) :
                new ObjectParameter("EveningTime", typeof(string));
    
            var instructionsIDParameter = instructionsID.HasValue ?
                new ObjectParameter("InstructionsID", instructionsID) :
                new ObjectParameter("InstructionsID", typeof(int));
    
            var iseveningParameter = isevening.HasValue ?
                new ObjectParameter("Isevening", isevening) :
                new ObjectParameter("Isevening", typeof(bool));
    
            var isMorningParameter = isMorning.HasValue ?
                new ObjectParameter("IsMorning", isMorning) :
                new ObjectParameter("IsMorning", typeof(bool));
    
            var isNightParameter = isNight.HasValue ?
                new ObjectParameter("IsNight", isNight) :
                new ObjectParameter("IsNight", typeof(bool));
    
            var isNoonParameter = isNoon.HasValue ?
                new ObjectParameter("IsNoon", isNoon) :
                new ObjectParameter("IsNoon", typeof(bool));
    
            var morningTimeParameter = morningTime != null ?
                new ObjectParameter("MorningTime", morningTime) :
                new ObjectParameter("MorningTime", typeof(string));
    
            var nightTimeParameter = nightTime != null ?
                new ObjectParameter("NightTime", nightTime) :
                new ObjectParameter("NightTime", typeof(string));
    
            var noonTimeParameter = noonTime != null ?
                new ObjectParameter("NoonTime", noonTime) :
                new ObjectParameter("NoonTime", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var noofDaysParameter = noofDays.HasValue ?
                new ObjectParameter("NoofDays", noofDays) :
                new ObjectParameter("NoofDays", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var isEmptyStomachParameter = isEmptyStomach.HasValue ?
                new ObjectParameter("IsEmptyStomach", isEmptyStomach) :
                new ObjectParameter("IsEmptyStomach", typeof(bool));
    
            var isAfterFoodParameter = isAfterFood.HasValue ?
                new ObjectParameter("IsAfterFood", isAfterFood) :
                new ObjectParameter("IsAfterFood", typeof(bool));
    
            var isBeforeFoodParameter = isBeforeFood.HasValue ?
                new ObjectParameter("IsBeforeFood", isBeforeFood) :
                new ObjectParameter("IsBeforeFood", typeof(bool));
    
            var frequencyParameter = frequency.HasValue ?
                new ObjectParameter("Frequency", frequency) :
                new ObjectParameter("Frequency", typeof(int));
    
            var modeOfAdministrationIDParameter = modeOfAdministrationID.HasValue ?
                new ObjectParameter("ModeOfAdministrationID", modeOfAdministrationID) :
                new ObjectParameter("ModeOfAdministrationID", typeof(int));
    
            var isMiddleOfFoodParameter = isMiddleOfFood.HasValue ?
                new ObjectParameter("IsMiddleOfFood", isMiddleOfFood) :
                new ObjectParameter("IsMiddleOfFood", typeof(bool));
    
            var isWithFoodParameter = isWithFood.HasValue ?
                new ObjectParameter("IsWithFood", isWithFood) :
                new ObjectParameter("IsWithFood", typeof(bool));
    
            var medicineInstructionParameter = medicineInstruction != null ?
                new ObjectParameter("MedicineInstruction", medicineInstruction) :
                new ObjectParameter("MedicineInstruction", typeof(string));
    
            var quantityInstructionParameter = quantityInstruction != null ?
                new ObjectParameter("QuantityInstruction", quantityInstruction) :
                new ObjectParameter("QuantityInstruction", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateIPPatientMedicines", iPIDParameter, patientIDParameter, dateParameter, endDateParameter, eveningTimeParameter, instructionsIDParameter, iseveningParameter, isMorningParameter, isNightParameter, isNoonParameter, morningTimeParameter, nightTimeParameter, noonTimeParameter, startDateParameter, noofDaysParameter, descriptionParameter, isEmptyStomachParameter, isAfterFoodParameter, isBeforeFoodParameter, frequencyParameter, modeOfAdministrationIDParameter, isMiddleOfFoodParameter, isWithFoodParameter, medicineInstructionParameter, quantityInstructionParameter, createdUserIDParameter, finYearParameter, applicationIDParameter, locationIDParameter, transID);
        }
    
        public virtual int SpCreateIPPatientTreatments(Nullable<int> iPID, Nullable<int> patientID, Nullable<System.DateTime> date, Nullable<int> treatmentID, Nullable<int> therapistID, Nullable<int> treatmentRoomID, Nullable<int> treatmentNo, string instructions, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<bool> isMorning, string morningTime, Nullable<bool> isNoon, Nullable<bool> isEvening, string noonTime, string eveningTime, Nullable<bool> isNight, string nightTime, Nullable<int> noofDays, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> applicationID, Nullable<int> locationID, ObjectParameter patientTreatmentID)
        {
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var treatmentIDParameter = treatmentID.HasValue ?
                new ObjectParameter("TreatmentID", treatmentID) :
                new ObjectParameter("TreatmentID", typeof(int));
    
            var therapistIDParameter = therapistID.HasValue ?
                new ObjectParameter("TherapistID", therapistID) :
                new ObjectParameter("TherapistID", typeof(int));
    
            var treatmentRoomIDParameter = treatmentRoomID.HasValue ?
                new ObjectParameter("TreatmentRoomID", treatmentRoomID) :
                new ObjectParameter("TreatmentRoomID", typeof(int));
    
            var treatmentNoParameter = treatmentNo.HasValue ?
                new ObjectParameter("TreatmentNo", treatmentNo) :
                new ObjectParameter("TreatmentNo", typeof(int));
    
            var instructionsParameter = instructions != null ?
                new ObjectParameter("Instructions", instructions) :
                new ObjectParameter("Instructions", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var isMorningParameter = isMorning.HasValue ?
                new ObjectParameter("IsMorning", isMorning) :
                new ObjectParameter("IsMorning", typeof(bool));
    
            var morningTimeParameter = morningTime != null ?
                new ObjectParameter("MorningTime", morningTime) :
                new ObjectParameter("MorningTime", typeof(string));
    
            var isNoonParameter = isNoon.HasValue ?
                new ObjectParameter("IsNoon", isNoon) :
                new ObjectParameter("IsNoon", typeof(bool));
    
            var isEveningParameter = isEvening.HasValue ?
                new ObjectParameter("IsEvening", isEvening) :
                new ObjectParameter("IsEvening", typeof(bool));
    
            var noonTimeParameter = noonTime != null ?
                new ObjectParameter("NoonTime", noonTime) :
                new ObjectParameter("NoonTime", typeof(string));
    
            var eveningTimeParameter = eveningTime != null ?
                new ObjectParameter("EveningTime", eveningTime) :
                new ObjectParameter("EveningTime", typeof(string));
    
            var isNightParameter = isNight.HasValue ?
                new ObjectParameter("IsNight", isNight) :
                new ObjectParameter("IsNight", typeof(bool));
    
            var nightTimeParameter = nightTime != null ?
                new ObjectParameter("NightTime", nightTime) :
                new ObjectParameter("NightTime", typeof(string));
    
            var noofDaysParameter = noofDays.HasValue ?
                new ObjectParameter("NoofDays", noofDays) :
                new ObjectParameter("NoofDays", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateIPPatientTreatments", iPIDParameter, patientIDParameter, dateParameter, treatmentIDParameter, therapistIDParameter, treatmentRoomIDParameter, treatmentNoParameter, instructionsParameter, startDateParameter, endDateParameter, isMorningParameter, morningTimeParameter, isNoonParameter, isEveningParameter, noonTimeParameter, eveningTimeParameter, isNightParameter, nightTimeParameter, noofDaysParameter, createdUserIDParameter, finYearParameter, applicationIDParameter, locationIDParameter, patientTreatmentID);
        }
    
        public virtual int SpUpdatePatientTreatments(Nullable<int> appointmentProcessID, Nullable<int> patientID, Nullable<int> patientTreatmentID, Nullable<int> treatmentID, Nullable<int> therapistID, Nullable<int> treatmentRoomID, Nullable<int> treatmentNo, string instructions, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<bool> isMorning, string morningTime, Nullable<bool> isNoon, Nullable<bool> isEvening, string noonTime, string eveningTime, Nullable<bool> isNight, string nightTime, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var patientTreatmentIDParameter = patientTreatmentID.HasValue ?
                new ObjectParameter("PatientTreatmentID", patientTreatmentID) :
                new ObjectParameter("PatientTreatmentID", typeof(int));
    
            var treatmentIDParameter = treatmentID.HasValue ?
                new ObjectParameter("TreatmentID", treatmentID) :
                new ObjectParameter("TreatmentID", typeof(int));
    
            var therapistIDParameter = therapistID.HasValue ?
                new ObjectParameter("TherapistID", therapistID) :
                new ObjectParameter("TherapistID", typeof(int));
    
            var treatmentRoomIDParameter = treatmentRoomID.HasValue ?
                new ObjectParameter("TreatmentRoomID", treatmentRoomID) :
                new ObjectParameter("TreatmentRoomID", typeof(int));
    
            var treatmentNoParameter = treatmentNo.HasValue ?
                new ObjectParameter("TreatmentNo", treatmentNo) :
                new ObjectParameter("TreatmentNo", typeof(int));
    
            var instructionsParameter = instructions != null ?
                new ObjectParameter("Instructions", instructions) :
                new ObjectParameter("Instructions", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var isMorningParameter = isMorning.HasValue ?
                new ObjectParameter("IsMorning", isMorning) :
                new ObjectParameter("IsMorning", typeof(bool));
    
            var morningTimeParameter = morningTime != null ?
                new ObjectParameter("MorningTime", morningTime) :
                new ObjectParameter("MorningTime", typeof(string));
    
            var isNoonParameter = isNoon.HasValue ?
                new ObjectParameter("IsNoon", isNoon) :
                new ObjectParameter("IsNoon", typeof(bool));
    
            var isEveningParameter = isEvening.HasValue ?
                new ObjectParameter("IsEvening", isEvening) :
                new ObjectParameter("IsEvening", typeof(bool));
    
            var noonTimeParameter = noonTime != null ?
                new ObjectParameter("NoonTime", noonTime) :
                new ObjectParameter("NoonTime", typeof(string));
    
            var eveningTimeParameter = eveningTime != null ?
                new ObjectParameter("EveningTime", eveningTime) :
                new ObjectParameter("EveningTime", typeof(string));
    
            var isNightParameter = isNight.HasValue ?
                new ObjectParameter("IsNight", isNight) :
                new ObjectParameter("IsNight", typeof(bool));
    
            var nightTimeParameter = nightTime != null ?
                new ObjectParameter("NightTime", nightTime) :
                new ObjectParameter("NightTime", typeof(string));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdatePatientTreatments", appointmentProcessIDParameter, patientIDParameter, patientTreatmentIDParameter, treatmentIDParameter, therapistIDParameter, treatmentRoomIDParameter, treatmentNoParameter, instructionsParameter, startDateParameter, endDateParameter, isMorningParameter, morningTimeParameter, isNoonParameter, isEveningParameter, noonTimeParameter, eveningTimeParameter, isNightParameter, nightTimeParameter, createdUserIDParameter, finYearParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual ObjectResult<SpCheckIsPatientExists_Result> SpCheckIsPatientExists(Nullable<int> appointmentProcessID, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> finYear)
        {
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpCheckIsPatientExists_Result>("SpCheckIsPatientExists", appointmentProcessIDParameter, locationIDParameter, applicationIDParameter, finYearParameter);
        }
    
        public virtual ObjectResult<SpGetOpPatientList_Result> SpGetOpPatientList(string type, string codeHint, string nameHint, string timeHint, string tokenHint, string dateHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> userID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var nameHintParameter = nameHint != null ?
                new ObjectParameter("NameHint", nameHint) :
                new ObjectParameter("NameHint", typeof(string));
    
            var timeHintParameter = timeHint != null ?
                new ObjectParameter("TimeHint", timeHint) :
                new ObjectParameter("TimeHint", typeof(string));
    
            var tokenHintParameter = tokenHint != null ?
                new ObjectParameter("TokenHint", tokenHint) :
                new ObjectParameter("TokenHint", typeof(string));
    
            var dateHintParameter = dateHint != null ?
                new ObjectParameter("DateHint", dateHint) :
                new ObjectParameter("DateHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetOpPatientList_Result>("SpGetOpPatientList", typeParameter, codeHintParameter, nameHintParameter, timeHintParameter, tokenHintParameter, dateHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<SpGetScreeningAppointmentDateByID_Result> SpGetScreeningAppointmentDateByID(Nullable<int> iD, Nullable<int> oPID, Nullable<int> createdUserID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var oPIDParameter = oPID.HasValue ?
                new ObjectParameter("OPID", oPID) :
                new ObjectParameter("OPID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetScreeningAppointmentDateByID_Result>("SpGetScreeningAppointmentDateByID", iDParameter, oPIDParameter, createdUserIDParameter);
        }
    
        public virtual ObjectResult<SpGetScreeningVitalChart_Result> SpGetScreeningVitalChart(Nullable<int> appointmentProcessID, Nullable<int> patientID, Nullable<System.DateTime> date)
        {
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetScreeningVitalChart_Result>("SpGetScreeningVitalChart", appointmentProcessIDParameter, patientIDParameter, dateParameter);
        }
    
        public virtual ObjectResult<SpGetQuestionsAndAnswersForScreening_Result> SpGetQuestionsAndAnswersForScreening(Nullable<int> iD, Nullable<int> appointmentProcessID, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetQuestionsAndAnswersForScreening_Result>("SpGetQuestionsAndAnswersForScreening", iDParameter, appointmentProcessIDParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual ObjectResult<SpGetQuestionsForScreening_Result> SpGetQuestionsForScreening(Nullable<int> iD, Nullable<int> appointmentProcessID, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var appointmentProcessIDParameter = appointmentProcessID.HasValue ?
                new ObjectParameter("AppointmentProcessID", appointmentProcessID) :
                new ObjectParameter("AppointmentProcessID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetQuestionsForScreening_Result>("SpGetQuestionsForScreening", iDParameter, appointmentProcessIDParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual int SpCreateAppointmentConfirmation(Nullable<int> billablesID, Nullable<int> doctorID, Nullable<int> patientID, Nullable<System.DateTime> date, Nullable<int> appointmentScheduleItemID, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locatinID, Nullable<int> applicationID, ObjectParameter isConfirmed)
        {
            var billablesIDParameter = billablesID.HasValue ?
                new ObjectParameter("BillablesID", billablesID) :
                new ObjectParameter("BillablesID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var appointmentScheduleItemIDParameter = appointmentScheduleItemID.HasValue ?
                new ObjectParameter("AppointmentScheduleItemID", appointmentScheduleItemID) :
                new ObjectParameter("AppointmentScheduleItemID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locatinIDParameter = locatinID.HasValue ?
                new ObjectParameter("LocatinID", locatinID) :
                new ObjectParameter("LocatinID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateAppointmentConfirmation", billablesIDParameter, doctorIDParameter, patientIDParameter, dateParameter, appointmentScheduleItemIDParameter, createdUserIDParameter, finYearParameter, locatinIDParameter, applicationIDParameter, isConfirmed);
        }
    
        public virtual int SpCreateAppointmentProcess(Nullable<System.DateTime> date, Nullable<int> patientID, Nullable<int> appointmentScheduleItemID, string appointmentType, string visitType, Nullable<bool> isCompleted, Nullable<bool> isReferedIP, Nullable<bool> iswalkIn, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter transID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var appointmentScheduleItemIDParameter = appointmentScheduleItemID.HasValue ?
                new ObjectParameter("AppointmentScheduleItemID", appointmentScheduleItemID) :
                new ObjectParameter("AppointmentScheduleItemID", typeof(int));
    
            var appointmentTypeParameter = appointmentType != null ?
                new ObjectParameter("AppointmentType", appointmentType) :
                new ObjectParameter("AppointmentType", typeof(string));
    
            var visitTypeParameter = visitType != null ?
                new ObjectParameter("VisitType", visitType) :
                new ObjectParameter("VisitType", typeof(string));
    
            var isCompletedParameter = isCompleted.HasValue ?
                new ObjectParameter("IsCompleted", isCompleted) :
                new ObjectParameter("IsCompleted", typeof(bool));
    
            var isReferedIPParameter = isReferedIP.HasValue ?
                new ObjectParameter("IsReferedIP", isReferedIP) :
                new ObjectParameter("IsReferedIP", typeof(bool));
    
            var iswalkInParameter = iswalkIn.HasValue ?
                new ObjectParameter("IswalkIn", iswalkIn) :
                new ObjectParameter("IswalkIn", typeof(bool));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateAppointmentProcess", dateParameter, patientIDParameter, appointmentScheduleItemIDParameter, appointmentTypeParameter, visitTypeParameter, isCompletedParameter, isReferedIPParameter, iswalkInParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, transID);
        }
    
        public virtual int SpCreateLabTestBillablesForIP(Nullable<int> patientID, Nullable<int> oPID, Nullable<int> iPID, Nullable<int> salesInvoiceID, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter billablesID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var oPIDParameter = oPID.HasValue ?
                new ObjectParameter("OPID", oPID) :
                new ObjectParameter("OPID", typeof(int));
    
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var salesInvoiceIDParameter = salesInvoiceID.HasValue ?
                new ObjectParameter("SalesInvoiceID", salesInvoiceID) :
                new ObjectParameter("SalesInvoiceID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateLabTestBillablesForIP", patientIDParameter, oPIDParameter, iPIDParameter, salesInvoiceIDParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, billablesID);
        }
    
        public virtual int SpCreateLabTestInInvoice(Nullable<System.DateTime> date, Nullable<int> oPID, Nullable<int> iPID, Nullable<int> itemID, Nullable<int> patientID, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> applicationID, Nullable<int> locationID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var oPIDParameter = oPID.HasValue ?
                new ObjectParameter("OPID", oPID) :
                new ObjectParameter("OPID", typeof(int));
    
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateLabTestInInvoice", dateParameter, oPIDParameter, iPIDParameter, itemIDParameter, patientIDParameter, createdUserIDParameter, finYearParameter, applicationIDParameter, locationIDParameter);
        }
    
        public virtual ObjectResult<SpGetBillableDetailsOfLabTest_Result> SpGetBillableDetailsOfLabTest(Nullable<int> oPID, Nullable<int> salesInvoiceID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var oPIDParameter = oPID.HasValue ?
                new ObjectParameter("OPID", oPID) :
                new ObjectParameter("OPID", typeof(int));
    
            var salesInvoiceIDParameter = salesInvoiceID.HasValue ?
                new ObjectParameter("SalesInvoiceID", salesInvoiceID) :
                new ObjectParameter("SalesInvoiceID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetBillableDetailsOfLabTest_Result>("SpGetBillableDetailsOfLabTest", oPIDParameter, salesInvoiceIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetItemsForLabTestPrint_Result> SpGetItemsForLabTestPrint(Nullable<int> iD, Nullable<int> patientLabTestMasterID, Nullable<int> iPID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var patientLabTestMasterIDParameter = patientLabTestMasterID.HasValue ?
                new ObjectParameter("PatientLabTestMasterID", patientLabTestMasterID) :
                new ObjectParameter("PatientLabTestMasterID", typeof(int));
    
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetItemsForLabTestPrint_Result>("SpGetItemsForLabTestPrint", iDParameter, patientLabTestMasterIDParameter, iPIDParameter);
        }
    
        public virtual ObjectResult<SpGetLaboratoryInvoice_Result> SpGetLaboratoryInvoice(Nullable<int> invoiceID)
        {
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetLaboratoryInvoice_Result>("SpGetLaboratoryInvoice", invoiceIDParameter);
        }
    
        public virtual ObjectResult<SpGetLaboratoryInvoiceItems_Result> SpGetLaboratoryInvoiceItems(Nullable<int> invoiceID)
        {
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetLaboratoryInvoiceItems_Result>("SpGetLaboratoryInvoiceItems", invoiceIDParameter);
        }
    
        public virtual ObjectResult<SpGetItemsForLabTest_Result> SpGetItemsForLabTest(Nullable<int> iD, Nullable<int> patientLabTestMasterID, Nullable<int> iPID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var patientLabTestMasterIDParameter = patientLabTestMasterID.HasValue ?
                new ObjectParameter("PatientLabTestMasterID", patientLabTestMasterID) :
                new ObjectParameter("PatientLabTestMasterID", typeof(int));
    
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetItemsForLabTest_Result>("SpGetItemsForLabTest", iDParameter, patientLabTestMasterIDParameter, iPIDParameter);
        }
    
        public virtual ObjectResult<SpGetInvoicedLabTestItems_Result> SpGetInvoicedLabTestItems(Nullable<int> salesInvoiceID, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var salesInvoiceIDParameter = salesInvoiceID.HasValue ?
                new ObjectParameter("SalesInvoiceID", salesInvoiceID) :
                new ObjectParameter("SalesInvoiceID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetInvoicedLabTestItems_Result>("SpGetInvoicedLabTestItems", salesInvoiceIDParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetPatientDetailForLabTest_Result> SpGetPatientDetailForLabTest(Nullable<int> iD, Nullable<int> patientID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetPatientDetailForLabTest_Result>("SpGetPatientDetailForLabTest", iDParameter, patientIDParameter);
        }
    
        public virtual ObjectResult<SpGetLabTestList_Result> SpGetLabTestList(string type, string transNo, string date, string patientCode, string patient, string labTest, string doctor, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var patientCodeParameter = patientCode != null ?
                new ObjectParameter("PatientCode", patientCode) :
                new ObjectParameter("PatientCode", typeof(string));
    
            var patientParameter = patient != null ?
                new ObjectParameter("Patient", patient) :
                new ObjectParameter("Patient", typeof(string));
    
            var labTestParameter = labTest != null ?
                new ObjectParameter("LabTest", labTest) :
                new ObjectParameter("LabTest", typeof(string));
    
            var doctorParameter = doctor != null ?
                new ObjectParameter("Doctor", doctor) :
                new ObjectParameter("Doctor", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetLabTestList_Result>("SpGetLabTestList", typeParameter, transNoParameter, dateParameter, patientCodeParameter, patientParameter, labTestParameter, doctorParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateXrayBillablesForIP(Nullable<int> patientID, Nullable<int> oPID, Nullable<int> iPID, Nullable<int> salesInvoiceID, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter billablesID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var oPIDParameter = oPID.HasValue ?
                new ObjectParameter("OPID", oPID) :
                new ObjectParameter("OPID", typeof(int));
    
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var salesInvoiceIDParameter = salesInvoiceID.HasValue ?
                new ObjectParameter("SalesInvoiceID", salesInvoiceID) :
                new ObjectParameter("SalesInvoiceID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateXrayBillablesForIP", patientIDParameter, oPIDParameter, iPIDParameter, salesInvoiceIDParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, billablesID);
        }
    
        public virtual ObjectResult<SpGetItemsForXray_Result> SpGetItemsForXray(Nullable<int> iD, Nullable<int> patientLabTestMasterID, Nullable<int> iPID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var patientLabTestMasterIDParameter = patientLabTestMasterID.HasValue ?
                new ObjectParameter("PatientLabTestMasterID", patientLabTestMasterID) :
                new ObjectParameter("PatientLabTestMasterID", typeof(int));
    
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetItemsForXray_Result>("SpGetItemsForXray", iDParameter, patientLabTestMasterIDParameter, iPIDParameter);
        }
    
        public virtual ObjectResult<SpGetItemsForXrayPrint_Result> SpGetItemsForXrayPrint(Nullable<int> iD, Nullable<int> patientLabTestMasterID, Nullable<int> iPID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var patientLabTestMasterIDParameter = patientLabTestMasterID.HasValue ?
                new ObjectParameter("PatientLabTestMasterID", patientLabTestMasterID) :
                new ObjectParameter("PatientLabTestMasterID", typeof(int));
    
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetItemsForXrayPrint_Result>("SpGetItemsForXrayPrint", iDParameter, patientLabTestMasterIDParameter, iPIDParameter);
        }
    
        public virtual int SpCreateLabTestInvoice(string serialNo, Nullable<int> patientID, Nullable<int> oPID, Nullable<int> iPID, Nullable<int> salesTypeID, Nullable<int> paymentModeID, Nullable<int> bankID, Nullable<decimal> discountAmount, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter salesOrderID, ObjectParameter salesInvoiceID, ObjectParameter accountHeadID)
        {
            var serialNoParameter = serialNo != null ?
                new ObjectParameter("SerialNo", serialNo) :
                new ObjectParameter("SerialNo", typeof(string));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var oPIDParameter = oPID.HasValue ?
                new ObjectParameter("OPID", oPID) :
                new ObjectParameter("OPID", typeof(int));
    
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var salesTypeIDParameter = salesTypeID.HasValue ?
                new ObjectParameter("SalesTypeID", salesTypeID) :
                new ObjectParameter("SalesTypeID", typeof(int));
    
            var paymentModeIDParameter = paymentModeID.HasValue ?
                new ObjectParameter("PaymentModeID", paymentModeID) :
                new ObjectParameter("PaymentModeID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var discountAmountParameter = discountAmount.HasValue ?
                new ObjectParameter("DiscountAmount", discountAmount) :
                new ObjectParameter("DiscountAmount", typeof(decimal));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateLabTestInvoice", serialNoParameter, patientIDParameter, oPIDParameter, iPIDParameter, salesTypeIDParameter, paymentModeIDParameter, bankIDParameter, discountAmountParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter, salesOrderID, salesInvoiceID, accountHeadID);
        }
    
        public virtual int SpUpdateLabTestInvoiceAmount(Nullable<int> salesOrderID, Nullable<int> salesInvoiceID, Nullable<int> billablesID, Nullable<int> receivableID, Nullable<int> iPID, Nullable<int> salesTypeID, Nullable<int> paymentModeID, Nullable<int> bankID, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var salesOrderIDParameter = salesOrderID.HasValue ?
                new ObjectParameter("SalesOrderID", salesOrderID) :
                new ObjectParameter("SalesOrderID", typeof(int));
    
            var salesInvoiceIDParameter = salesInvoiceID.HasValue ?
                new ObjectParameter("SalesInvoiceID", salesInvoiceID) :
                new ObjectParameter("SalesInvoiceID", typeof(int));
    
            var billablesIDParameter = billablesID.HasValue ?
                new ObjectParameter("BillablesID", billablesID) :
                new ObjectParameter("BillablesID", typeof(int));
    
            var receivableIDParameter = receivableID.HasValue ?
                new ObjectParameter("ReceivableID", receivableID) :
                new ObjectParameter("ReceivableID", typeof(int));
    
            var iPIDParameter = iPID.HasValue ?
                new ObjectParameter("IPID", iPID) :
                new ObjectParameter("IPID", typeof(int));
    
            var salesTypeIDParameter = salesTypeID.HasValue ?
                new ObjectParameter("SalesTypeID", salesTypeID) :
                new ObjectParameter("SalesTypeID", typeof(int));
    
            var paymentModeIDParameter = paymentModeID.HasValue ?
                new ObjectParameter("PaymentModeID", paymentModeID) :
                new ObjectParameter("PaymentModeID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateLabTestInvoiceAmount", salesOrderIDParameter, salesInvoiceIDParameter, billablesIDParameter, receivableIDParameter, iPIDParameter, salesTypeIDParameter, paymentModeIDParameter, bankIDParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateLabTestResult(Nullable<int> patientLabTestsID, Nullable<int> patientLabTestTransID, string status, string observedValue, Nullable<int> documentID, string collectedTime, string reportedTime)
        {
            var patientLabTestsIDParameter = patientLabTestsID.HasValue ?
                new ObjectParameter("PatientLabTestsID", patientLabTestsID) :
                new ObjectParameter("PatientLabTestsID", typeof(int));
    
            var patientLabTestTransIDParameter = patientLabTestTransID.HasValue ?
                new ObjectParameter("PatientLabTestTransID", patientLabTestTransID) :
                new ObjectParameter("PatientLabTestTransID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var observedValueParameter = observedValue != null ?
                new ObjectParameter("ObservedValue", observedValue) :
                new ObjectParameter("ObservedValue", typeof(string));
    
            var documentIDParameter = documentID.HasValue ?
                new ObjectParameter("DocumentID", documentID) :
                new ObjectParameter("DocumentID", typeof(int));
    
            var collectedTimeParameter = collectedTime != null ?
                new ObjectParameter("CollectedTime", collectedTime) :
                new ObjectParameter("CollectedTime", typeof(string));
    
            var reportedTimeParameter = reportedTime != null ?
                new ObjectParameter("ReportedTime", reportedTime) :
                new ObjectParameter("ReportedTime", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateLabTestResult", patientLabTestsIDParameter, patientLabTestTransIDParameter, statusParameter, observedValueParameter, documentIDParameter, collectedTimeParameter, reportedTimeParameter);
        }
    
        public virtual int SpUpdateLabTestType(Nullable<int> patientLabTestsID, Nullable<int> salesInvoiceID, string type, Nullable<System.DateTime> issueDate, Nullable<int> supplierID)
        {
            var patientLabTestsIDParameter = patientLabTestsID.HasValue ?
                new ObjectParameter("PatientLabTestsID", patientLabTestsID) :
                new ObjectParameter("PatientLabTestsID", typeof(int));
    
            var salesInvoiceIDParameter = salesInvoiceID.HasValue ?
                new ObjectParameter("SalesInvoiceID", salesInvoiceID) :
                new ObjectParameter("SalesInvoiceID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var issueDateParameter = issueDate.HasValue ?
                new ObjectParameter("IssueDate", issueDate) :
                new ObjectParameter("IssueDate", typeof(System.DateTime));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateLabTestType", patientLabTestsIDParameter, salesInvoiceIDParameter, typeParameter, issueDateParameter, supplierIDParameter);
        }
    
        public virtual ObjectResult<SpGetXrayList_Result> SpGetXrayList(string date, string patientCode, string patient, string xray, string doctor, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var patientCodeParameter = patientCode != null ?
                new ObjectParameter("PatientCode", patientCode) :
                new ObjectParameter("PatientCode", typeof(string));
    
            var patientParameter = patient != null ?
                new ObjectParameter("Patient", patient) :
                new ObjectParameter("Patient", typeof(string));
    
            var xrayParameter = xray != null ?
                new ObjectParameter("Xray", xray) :
                new ObjectParameter("Xray", typeof(string));
    
            var doctorParameter = doctor != null ?
                new ObjectParameter("Doctor", doctor) :
                new ObjectParameter("Doctor", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetXrayList_Result>("SpGetXrayList", dateParameter, patientCodeParameter, patientParameter, xrayParameter, doctorParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter);
        }
    }
}
