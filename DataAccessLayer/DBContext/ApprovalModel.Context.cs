//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccessLayer.DBContext
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ApprovalEntities : DbContext
    {
        public ApprovalEntities()
            : base("name=ApprovalEntities")
        {
            ((IObjectContextAdapter)this).ObjectContext.CommandTimeout = 0;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ApprovalConfig> ApprovalConfigs { get; set; }
        public virtual DbSet<ApprovalFlow> ApprovalFlows { get; set; }
        public virtual DbSet<ApprovalQueue> ApprovalQueues { get; set; }
        public virtual DbSet<ApprovalQueueTran> ApprovalQueueTrans { get; set; }
        public virtual DbSet<Approval> Approvals { get; set; }
        public virtual DbSet<ApprovalTran> ApprovalTrans { get; set; }
        public virtual DbSet<ApprovalType> ApprovalTypes { get; set; }
    
        [DbFunction("ApprovalEntities", "FnGetApprovalsList")]
        public virtual IQueryable<FnGetApprovalsList_Result> FnGetApprovalsList(Nullable<int> userID, Nullable<bool> isViewer, Nullable<int> applicationID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var isViewerParameter = isViewer.HasValue ?
                new ObjectParameter("IsViewer", isViewer) :
                new ObjectParameter("IsViewer", typeof(bool));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FnGetApprovalsList_Result>("[ApprovalEntities].[FnGetApprovalsList](@UserID, @IsViewer, @ApplicationID)", userIDParameter, isViewerParameter, applicationIDParameter);
        }
    
        public virtual int SpCancelRecordInApproval(string type, Nullable<int> transID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var transIDParameter = transID.HasValue ?
                new ObjectParameter("TransID", transID) :
                new ObjectParameter("TransID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCancelRecordInApproval", typeParameter, transIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateApprovalFlow(string locationName, Nullable<int> forDepartmentID, Nullable<decimal> amountAbove, Nullable<decimal> amountBelow, Nullable<int> itemCategoryID, Nullable<int> itemAccountsCategoryID, Nullable<int> approvalQueueID, Nullable<int> supplierCategoryID, Nullable<int> supplierAccountsCategoryID, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter returnValue)
        {
            var locationNameParameter = locationName != null ?
                new ObjectParameter("LocationName", locationName) :
                new ObjectParameter("LocationName", typeof(string));
    
            var forDepartmentIDParameter = forDepartmentID.HasValue ?
                new ObjectParameter("ForDepartmentID", forDepartmentID) :
                new ObjectParameter("ForDepartmentID", typeof(int));
    
            var amountAboveParameter = amountAbove.HasValue ?
                new ObjectParameter("AmountAbove", amountAbove) :
                new ObjectParameter("AmountAbove", typeof(decimal));
    
            var amountBelowParameter = amountBelow.HasValue ?
                new ObjectParameter("AmountBelow", amountBelow) :
                new ObjectParameter("AmountBelow", typeof(decimal));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var itemAccountsCategoryIDParameter = itemAccountsCategoryID.HasValue ?
                new ObjectParameter("ItemAccountsCategoryID", itemAccountsCategoryID) :
                new ObjectParameter("ItemAccountsCategoryID", typeof(int));
    
            var approvalQueueIDParameter = approvalQueueID.HasValue ?
                new ObjectParameter("ApprovalQueueID", approvalQueueID) :
                new ObjectParameter("ApprovalQueueID", typeof(int));
    
            var supplierCategoryIDParameter = supplierCategoryID.HasValue ?
                new ObjectParameter("SupplierCategoryID", supplierCategoryID) :
                new ObjectParameter("SupplierCategoryID", typeof(int));
    
            var supplierAccountsCategoryIDParameter = supplierAccountsCategoryID.HasValue ?
                new ObjectParameter("SupplierAccountsCategoryID", supplierAccountsCategoryID) :
                new ObjectParameter("SupplierAccountsCategoryID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateApprovalFlow", locationNameParameter, forDepartmentIDParameter, amountAboveParameter, amountBelowParameter, itemCategoryIDParameter, itemAccountsCategoryIDParameter, approvalQueueIDParameter, supplierCategoryIDParameter, supplierAccountsCategoryIDParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter, returnValue);
        }
    
        public virtual int SpCreateApprovalQueue(string queueName, Nullable<System.DateTime> createdDate, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter approvalQueueID)
        {
            var queueNameParameter = queueName != null ?
                new ObjectParameter("QueueName", queueName) :
                new ObjectParameter("QueueName", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateApprovalQueue", queueNameParameter, createdDateParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter, approvalQueueID);
        }
    
        public virtual int SpCreateApprovalQueueTrans(Nullable<int> approvalQueueID, Nullable<int> userID, Nullable<int> sortOrder, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var approvalQueueIDParameter = approvalQueueID.HasValue ?
                new ObjectParameter("ApprovalQueueID", approvalQueueID) :
                new ObjectParameter("ApprovalQueueID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var sortOrderParameter = sortOrder.HasValue ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateApprovalQueueTrans", approvalQueueIDParameter, userIDParameter, sortOrderParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SpDoApprovalAction(Nullable<int> approvalID, Nullable<int> userID, string comment, string status, Nullable<int> clarificationUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var approvalIDParameter = approvalID.HasValue ?
                new ObjectParameter("ApprovalID", approvalID) :
                new ObjectParameter("ApprovalID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var clarificationUserIDParameter = clarificationUserID.HasValue ?
                new ObjectParameter("ClarificationUserID", clarificationUserID) :
                new ObjectParameter("ClarificationUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SpDoApprovalAction", approvalIDParameter, userIDParameter, commentParameter, statusParameter, clarificationUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetApprovalFlow_Result> SpGetApprovalFlow(Nullable<int> locationID, Nullable<int> applicationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetApprovalFlow_Result>("SpGetApprovalFlow", locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetApprovalFlowDetails_Result> SpGetApprovalFlowDetails(Nullable<int> iD, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetApprovalFlowDetails_Result>("SpGetApprovalFlowDetails", iDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetApprovalFlowList_Result> SpGetApprovalFlowList(string appQueueName, string forDepartmentName, string amountAbove, string amountBelow, string itemCategoryName, string itemAccountsCategoryName, string suppliercategoryName, string supplierAccountscategoryName, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var appQueueNameParameter = appQueueName != null ?
                new ObjectParameter("AppQueueName", appQueueName) :
                new ObjectParameter("AppQueueName", typeof(string));
    
            var forDepartmentNameParameter = forDepartmentName != null ?
                new ObjectParameter("ForDepartmentName", forDepartmentName) :
                new ObjectParameter("ForDepartmentName", typeof(string));
    
            var amountAboveParameter = amountAbove != null ?
                new ObjectParameter("AmountAbove", amountAbove) :
                new ObjectParameter("AmountAbove", typeof(string));
    
            var amountBelowParameter = amountBelow != null ?
                new ObjectParameter("AmountBelow", amountBelow) :
                new ObjectParameter("AmountBelow", typeof(string));
    
            var itemCategoryNameParameter = itemCategoryName != null ?
                new ObjectParameter("ItemCategoryName", itemCategoryName) :
                new ObjectParameter("ItemCategoryName", typeof(string));
    
            var itemAccountsCategoryNameParameter = itemAccountsCategoryName != null ?
                new ObjectParameter("ItemAccountsCategoryName", itemAccountsCategoryName) :
                new ObjectParameter("ItemAccountsCategoryName", typeof(string));
    
            var suppliercategoryNameParameter = suppliercategoryName != null ?
                new ObjectParameter("SuppliercategoryName", suppliercategoryName) :
                new ObjectParameter("SuppliercategoryName", typeof(string));
    
            var supplierAccountscategoryNameParameter = supplierAccountscategoryName != null ?
                new ObjectParameter("SupplierAccountscategoryName", supplierAccountscategoryName) :
                new ObjectParameter("SupplierAccountscategoryName", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetApprovalFlowList_Result>("SpGetApprovalFlowList", appQueueNameParameter, forDepartmentNameParameter, amountAboveParameter, amountBelowParameter, itemCategoryNameParameter, itemAccountsCategoryNameParameter, suppliercategoryNameParameter, supplierAccountscategoryNameParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetApprovalList_Result> SpGetApprovalList(string type, string codeHint, string dateHint, string typeHint, string supplierNameHint, string flowHint, string netAmountHint, string userNameHint, string lastActionByHint, string nextActionByHint, string statusHint, string sortField, string sortOrder, Nullable<int> offset, Nullable<int> limit, Nullable<int> userID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var codeHintParameter = codeHint != null ?
                new ObjectParameter("CodeHint", codeHint) :
                new ObjectParameter("CodeHint", typeof(string));
    
            var dateHintParameter = dateHint != null ?
                new ObjectParameter("DateHint", dateHint) :
                new ObjectParameter("DateHint", typeof(string));
    
            var typeHintParameter = typeHint != null ?
                new ObjectParameter("TypeHint", typeHint) :
                new ObjectParameter("TypeHint", typeof(string));
    
            var supplierNameHintParameter = supplierNameHint != null ?
                new ObjectParameter("SupplierNameHint", supplierNameHint) :
                new ObjectParameter("SupplierNameHint", typeof(string));
    
            var flowHintParameter = flowHint != null ?
                new ObjectParameter("FlowHint", flowHint) :
                new ObjectParameter("FlowHint", typeof(string));
    
            var netAmountHintParameter = netAmountHint != null ?
                new ObjectParameter("NetAmountHint", netAmountHint) :
                new ObjectParameter("NetAmountHint", typeof(string));
    
            var userNameHintParameter = userNameHint != null ?
                new ObjectParameter("UserNameHint", userNameHint) :
                new ObjectParameter("UserNameHint", typeof(string));
    
            var lastActionByHintParameter = lastActionByHint != null ?
                new ObjectParameter("LastActionByHint", lastActionByHint) :
                new ObjectParameter("LastActionByHint", typeof(string));
    
            var nextActionByHintParameter = nextActionByHint != null ?
                new ObjectParameter("NextActionByHint", nextActionByHint) :
                new ObjectParameter("NextActionByHint", typeof(string));
    
            var statusHintParameter = statusHint != null ?
                new ObjectParameter("StatusHint", statusHint) :
                new ObjectParameter("StatusHint", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("SortField", sortField) :
                new ObjectParameter("SortField", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("Offset", offset) :
                new ObjectParameter("Offset", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetApprovalList_Result>("SpGetApprovalList", typeParameter, codeHintParameter, dateHintParameter, typeHintParameter, supplierNameHintParameter, flowHintParameter, netAmountHintParameter, userNameHintParameter, lastActionByHintParameter, nextActionByHintParameter, statusHintParameter, sortFieldParameter, sortOrderParameter, offsetParameter, limitParameter, userIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetApprovalProcess_Result> SpGetApprovalProcess(string area, string controller, string action, Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var areaParameter = area != null ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(string));
    
            var controllerParameter = controller != null ?
                new ObjectParameter("Controller", controller) :
                new ObjectParameter("Controller", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetApprovalProcess_Result>("SpGetApprovalProcess", areaParameter, controllerParameter, actionParameter, iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetApprovalQueue_Result> SpGetApprovalQueue(Nullable<int> locationID, Nullable<int> applicationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetApprovalQueue_Result>("SpGetApprovalQueue", locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetApprovalQueueDetails_Result> SpGetApprovalQueueDetails(Nullable<int> approvalQueueID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var approvalQueueIDParameter = approvalQueueID.HasValue ?
                new ObjectParameter("ApprovalQueueID", approvalQueueID) :
                new ObjectParameter("ApprovalQueueID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetApprovalQueueDetails_Result>("SpGetApprovalQueueDetails", approvalQueueIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetApprovalQueueTrans_Result> SpGetApprovalQueueTrans(Nullable<int> approvalQueueID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var approvalQueueIDParameter = approvalQueueID.HasValue ?
                new ObjectParameter("ApprovalQueueID", approvalQueueID) :
                new ObjectParameter("ApprovalQueueID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetApprovalQueueTrans_Result>("SpGetApprovalQueueTrans", approvalQueueIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetApprovals_Result> SpGetApprovals(string area, string controller, string action, Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var areaParameter = area != null ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(string));
    
            var controllerParameter = controller != null ?
                new ObjectParameter("Controller", controller) :
                new ObjectParameter("Controller", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetApprovals_Result>("SpGetApprovals", areaParameter, controllerParameter, actionParameter, iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetItemsForApprovalFlow_Result> SpGetItemsForApprovalFlow(Nullable<int> forDepartmentID, Nullable<int> itemCategoryID, Nullable<int> itemAccountsCategoryID, Nullable<int> userLocationID)
        {
            var forDepartmentIDParameter = forDepartmentID.HasValue ?
                new ObjectParameter("ForDepartmentID", forDepartmentID) :
                new ObjectParameter("ForDepartmentID", typeof(int));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var itemAccountsCategoryIDParameter = itemAccountsCategoryID.HasValue ?
                new ObjectParameter("ItemAccountsCategoryID", itemAccountsCategoryID) :
                new ObjectParameter("ItemAccountsCategoryID", typeof(int));
    
            var userLocationIDParameter = userLocationID.HasValue ?
                new ObjectParameter("UserLocationID", userLocationID) :
                new ObjectParameter("UserLocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetItemsForApprovalFlow_Result>("SpGetItemsForApprovalFlow", forDepartmentIDParameter, itemCategoryIDParameter, itemAccountsCategoryIDParameter, userLocationIDParameter);
        }
    
        public virtual ObjectResult<SpGetLocationListForApprovalFlow_Result> SpGetLocationListForApprovalFlow(Nullable<int> applicationID)
        {
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetLocationListForApprovalFlow_Result>("SpGetLocationListForApprovalFlow", applicationIDParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> SpHasApprovalProcess(string area, string controller, string action, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var areaParameter = area != null ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(string));
    
            var controllerParameter = controller != null ?
                new ObjectParameter("Controller", controller) :
                new ObjectParameter("Controller", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("SpHasApprovalProcess", areaParameter, controllerParameter, actionParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpInitiateApprovalRequest(string area, string controller, string action, Nullable<int> iD, Nullable<int> approvalFlowID, Nullable<int> createdUserID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var areaParameter = area != null ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(string));
    
            var controllerParameter = controller != null ?
                new ObjectParameter("Controller", controller) :
                new ObjectParameter("Controller", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var approvalFlowIDParameter = approvalFlowID.HasValue ?
                new ObjectParameter("ApprovalFlowID", approvalFlowID) :
                new ObjectParameter("ApprovalFlowID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpInitiateApprovalRequest", areaParameter, controllerParameter, actionParameter, iDParameter, approvalFlowIDParameter, createdUserIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpOnProformaApprove(Nullable<int> proformaInvoiceID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var proformaInvoiceIDParameter = proformaInvoiceID.HasValue ?
                new ObjectParameter("ProformaInvoiceID", proformaInvoiceID) :
                new ObjectParameter("ProformaInvoiceID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpOnProformaApprove", proformaInvoiceIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpOnProformaReject(Nullable<int> proformaInvoiceID, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var proformaInvoiceIDParameter = proformaInvoiceID.HasValue ?
                new ObjectParameter("ProformaInvoiceID", proformaInvoiceID) :
                new ObjectParameter("ProformaInvoiceID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpOnProformaReject", proformaInvoiceIDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpOnPurchaseOrderApprove(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpOnPurchaseOrderApprove", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpOnPurchaseOrderReject(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpOnPurchaseOrderReject", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpOnServicePurchaseOrderApprove(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpOnServicePurchaseOrderApprove", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpOnServicePurchaseOrderReject(Nullable<int> iD, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpOnServicePurchaseOrderReject", iDParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateApprovalFlow(Nullable<int> iD, string locationName, Nullable<int> forDepartmentID, Nullable<decimal> amountAbove, Nullable<decimal> amountBelow, Nullable<int> itemCategoryID, Nullable<int> itemAccountsCategoryID, Nullable<int> approvalQueueID, Nullable<int> supplierCategoryID, Nullable<int> supplierAccountsCategoryID, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var locationNameParameter = locationName != null ?
                new ObjectParameter("LocationName", locationName) :
                new ObjectParameter("LocationName", typeof(string));
    
            var forDepartmentIDParameter = forDepartmentID.HasValue ?
                new ObjectParameter("ForDepartmentID", forDepartmentID) :
                new ObjectParameter("ForDepartmentID", typeof(int));
    
            var amountAboveParameter = amountAbove.HasValue ?
                new ObjectParameter("AmountAbove", amountAbove) :
                new ObjectParameter("AmountAbove", typeof(decimal));
    
            var amountBelowParameter = amountBelow.HasValue ?
                new ObjectParameter("AmountBelow", amountBelow) :
                new ObjectParameter("AmountBelow", typeof(decimal));
    
            var itemCategoryIDParameter = itemCategoryID.HasValue ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(int));
    
            var itemAccountsCategoryIDParameter = itemAccountsCategoryID.HasValue ?
                new ObjectParameter("ItemAccountsCategoryID", itemAccountsCategoryID) :
                new ObjectParameter("ItemAccountsCategoryID", typeof(int));
    
            var approvalQueueIDParameter = approvalQueueID.HasValue ?
                new ObjectParameter("ApprovalQueueID", approvalQueueID) :
                new ObjectParameter("ApprovalQueueID", typeof(int));
    
            var supplierCategoryIDParameter = supplierCategoryID.HasValue ?
                new ObjectParameter("SupplierCategoryID", supplierCategoryID) :
                new ObjectParameter("SupplierCategoryID", typeof(int));
    
            var supplierAccountsCategoryIDParameter = supplierAccountsCategoryID.HasValue ?
                new ObjectParameter("SupplierAccountsCategoryID", supplierAccountsCategoryID) :
                new ObjectParameter("SupplierAccountsCategoryID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateApprovalFlow", iDParameter, locationNameParameter, forDepartmentIDParameter, amountAboveParameter, amountBelowParameter, itemCategoryIDParameter, itemAccountsCategoryIDParameter, approvalQueueIDParameter, supplierCategoryIDParameter, supplierAccountsCategoryIDParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpUpdateApprovalQueue(string queueName, Nullable<System.DateTime> createdDate, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID, Nullable<int> iD)
        {
            var queueNameParameter = queueName != null ?
                new ObjectParameter("QueueName", queueName) :
                new ObjectParameter("QueueName", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateApprovalQueue", queueNameParameter, createdDateParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter, iDParameter);
        }
    
        public virtual int SpCancelTransaction(Nullable<int> iD, string tableName, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCancelTransaction", iDParameter, tableNameParameter, finYearParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual int SpCreateBatch(string itemType, Nullable<int> itemID, string batchNo, string customBatchNo, Nullable<System.DateTime> manufacturingDate, Nullable<System.DateTime> expiryDate, Nullable<int> batchTypeID, Nullable<int> createdUserID, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter batchID)
        {
            var itemTypeParameter = itemType != null ?
                new ObjectParameter("ItemType", itemType) :
                new ObjectParameter("ItemType", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var batchNoParameter = batchNo != null ?
                new ObjectParameter("BatchNo", batchNo) :
                new ObjectParameter("BatchNo", typeof(string));
    
            var customBatchNoParameter = customBatchNo != null ?
                new ObjectParameter("CustomBatchNo", customBatchNo) :
                new ObjectParameter("CustomBatchNo", typeof(string));
    
            var manufacturingDateParameter = manufacturingDate.HasValue ?
                new ObjectParameter("ManufacturingDate", manufacturingDate) :
                new ObjectParameter("ManufacturingDate", typeof(System.DateTime));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var batchTypeIDParameter = batchTypeID.HasValue ?
                new ObjectParameter("BatchTypeID", batchTypeID) :
                new ObjectParameter("BatchTypeID", typeof(int));
    
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCreateBatch", itemTypeParameter, itemIDParameter, batchNoParameter, customBatchNoParameter, manufacturingDateParameter, expiryDateParameter, batchTypeIDParameter, createdUserIDParameter, locationIDParameter, applicationIDParameter, batchID);
        }
    
        public virtual ObjectResult<SpGetConfigByUser_Result> SpGetConfigByUser(string configName, Nullable<int> userID, Nullable<int> locationID, Nullable<int> applicationID)
        {
            var configNameParameter = configName != null ?
                new ObjectParameter("ConfigName", configName) :
                new ObjectParameter("ConfigName", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetConfigByUser_Result>("SpGetConfigByUser", configNameParameter, userIDParameter, locationIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<SpGetCurrentFinYear_Result> SpGetCurrentFinYear(Nullable<int> applicationID)
        {
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetCurrentFinYear_Result>("SpGetCurrentFinYear", applicationIDParameter);
        }
    
        public virtual int SpIsCodeAlreadyExists(string tableName, string fieldName, string code, Nullable<int> iD, ObjectParameter isExists)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("tableName", tableName) :
                new ObjectParameter("tableName", typeof(string));
    
            var fieldNameParameter = fieldName != null ?
                new ObjectParameter("FieldName", fieldName) :
                new ObjectParameter("FieldName", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpIsCodeAlreadyExists", tableNameParameter, fieldNameParameter, codeParameter, iDParameter, isExists);
        }
    
        public virtual int SpSuspendTransaction(Nullable<int> iD, string tableName, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter retValue)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpSuspendTransaction", iDParameter, tableNameParameter, finYearParameter, locationIDParameter, applicationIDParameter, retValue);
        }
    
        public virtual int SpUpdateSerialNo(string formName, string fieldName, Nullable<int> finYear, Nullable<int> locationID, Nullable<int> applicationID, ObjectParameter serialNo)
        {
            var formNameParameter = formName != null ?
                new ObjectParameter("FormName", formName) :
                new ObjectParameter("FormName", typeof(string));
    
            var fieldNameParameter = fieldName != null ?
                new ObjectParameter("FieldName", fieldName) :
                new ObjectParameter("FieldName", typeof(string));
    
            var finYearParameter = finYear.HasValue ?
                new ObjectParameter("FinYear", finYear) :
                new ObjectParameter("FinYear", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateSerialNo", formNameParameter, fieldNameParameter, finYearParameter, locationIDParameter, applicationIDParameter, serialNo);
        }
    }
}
